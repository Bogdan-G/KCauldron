diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/FMLCommonHandler.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/FMLCommonHandler.java
index 94c7104..0bff001 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/FMLCommonHandler.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/FMLCommonHandler.java
@@ -37,6 +37,10 @@ import net.minecraft.world.storage.WorldInfo;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Strings;
@@ -282,6 +286,7 @@ public class FMLCommonHandler
     {
         Loader.instance().serverStarted();
         sidedDelegate.allowLogins();
+        kcauldron.updater.KVersionRetriever.init(MinecraftServer.getServer());
     }
 
     public void handleServerStopping()
@@ -385,10 +390,11 @@ public class FMLCommonHandler
         {
             return;
         }
-        if (handlerSet.contains(handler))
+        if (handlerSet.contains(handler) || worldInfo.getDimension() != 0) // Cauldron - Only check FML data in main world
         {
             return;
         }
+        // Cauldron - logic below should only be run for overworld as Forge/Vanilla only use 1 SaveHandler
         handlerSet.add(handler);
         handlerToCheck = new WeakReference<SaveHandler>(handler); // for confirmBackupLevelDatUse
         Map<String,NBTBase> additionalProperties = Maps.newHashMap();
@@ -496,7 +502,13 @@ public class FMLCommonHandler
 
     public String getModName()
     {
-        List<String> modNames = Lists.newArrayListWithExpectedSize(3);
+        // Cauldron start    
+        List<String> modNames = Lists.newArrayListWithExpectedSize(6);
+        modNames.add("kcauldron");
+        modNames.add("cauldron");
+        modNames.add("craftbukkit");
+        modNames.add("mcpc");
+        // Cauldron end
         modNames.add("fml");
         if (!noForge)
         {
@@ -540,8 +552,17 @@ public class FMLCommonHandler
         bus().post(new InputEvent.KeyInputEvent());
     }
 
+    // Cauldron start - wrapper to notify plugins for mods that bypass ServerConfigurationManager
     public void firePlayerChangedDimensionEvent(EntityPlayer player, int fromDim, int toDim)
     {
+        this.firePlayerChangedDimensionEvent(player, fromDim, toDim, player.worldObj.getWorld());
+    }
+
+    public void firePlayerChangedDimensionEvent(EntityPlayer player, int fromDim, int toDim, CraftWorld fromWorld)
+    {
+        PlayerChangedWorldEvent event = new PlayerChangedWorldEvent((Player) player.getBukkitEntity(), fromWorld);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        // Cauldron end
         bus().post(new PlayerEvent.PlayerChangedDimensionEvent(player, fromDim, toDim));
     }
 
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/asm/FMLSanityChecker.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/asm/FMLSanityChecker.java
index df08d6e..353aae3 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/asm/FMLSanityChecker.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/asm/FMLSanityChecker.java
@@ -164,10 +164,12 @@ public class FMLSanityChecker implements IFMLCallHook
                 FMLRelaunchLog.severe("Technical information: ClientBrandRetriever was at %s, there were %d certificates for it", codeSource.getLocation(), certCount);
             }
         }
-        if (!goodFML)
+        // Cauldron start - disable message
+        /*if (!goodFML)
         {
             FMLRelaunchLog.severe("FML appears to be missing any signature data. This is not a good thing");
-        }
+        }*/
+        // Cauldron end
         return null;
     }
 
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/asm/transformers/SideTransformer.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/asm/transformers/SideTransformer.java
index 886f025..9a08dc9 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/asm/transformers/SideTransformer.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/asm/transformers/SideTransformer.java
@@ -32,6 +32,7 @@ public class SideTransformer implements IClassTransformer
 {
     private static String SIDE = FMLLaunchHandler.side().name();
     private static final boolean DEBUG = false;
+    public static boolean allowInvalidSide = false; // Cauldron
     @Override
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {
@@ -41,7 +42,7 @@ public class SideTransformer implements IClassTransformer
         ClassReader classReader = new ClassReader(bytes);
         classReader.accept(classNode, 0);
 
-        if (remove((List<AnnotationNode>)classNode.visibleAnnotations, SIDE))
+        if (remove((List<AnnotationNode>)classNode.visibleAnnotations, SIDE) && !allowInvalidSide) // Cauldron
         {
             if (DEBUG)
             {
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/discovery/ModDiscoverer.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/discovery/ModDiscoverer.java
index da4088a..0ea86b6 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/discovery/ModDiscoverer.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/discovery/ModDiscoverer.java
@@ -148,6 +150,17 @@ public class ModDiscoverer
             }
         }
 
+        if (!"false".equals(System.getProperty("kcauldron.fastcraft.disable", "true"))) {
+            java.util.Iterator<ModContainer> iterator = modList.iterator();
+            while(iterator.hasNext()) {
+                ModContainer container = iterator.next();
+                if ("FastCraft".equals(container.getModId())) {
+                    FMLLog.log(Level.WARN, "Found FastCraft mod, removing it...");
+                    iterator.remove();
+                }
+            }
+        }
+
         return modList;
     }
 
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/event/FMLServerStartingEvent.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/event/FMLServerStartingEvent.java
index 7999048..1f33b11 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/event/FMLServerStartingEvent.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/event/FMLServerStartingEvent.java
@@ -16,6 +16,7 @@ import net.minecraft.command.CommandHandler;
 import net.minecraft.command.ICommand;
 import net.minecraft.server.MinecraftServer;
 import cpw.mods.fml.common.LoaderState.ModState;
+import org.bukkit.command.Command; // Cauldron
 
 public class FMLServerStartingEvent extends FMLStateEvent
 {
@@ -43,4 +44,12 @@ public class FMLServerStartingEvent extends FMLStateEvent
         CommandHandler ch = (CommandHandler) getServer().getCommandManager();
         ch.registerCommand(command);
     }
+
+    // Cauldron start - used for mods to register a Bukkit command
+    public void registerServerCommand(String fallbackPrefix, Command command)
+    {
+        org.bukkit.command.SimpleCommandMap commandMap = getServer().server.getCommandMap();
+        commandMap.register(fallbackPrefix, command);
+    }
+    // Cauldron end 
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/handshake/ChannelRegistrationHandler.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/handshake/ChannelRegistrationHandler.java
index 39b1759..6973ffd 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/handshake/ChannelRegistrationHandler.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/handshake/ChannelRegistrationHandler.java
@@ -2,6 +2,8 @@ package cpw.mods.fml.common.network.handshake;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
+
+import java.io.UnsupportedEncodingException;
 import java.util.Set;
 import net.minecraft.network.NetworkManager;
 import org.apache.logging.log4j.Level;
@@ -24,6 +26,23 @@ public class ChannelRegistrationHandler extends SimpleChannelInboundHandler<FMLP
             msg.payload().readBytes(data);
             String channels = new String(data,Charsets.UTF_8);
             String[] split = channels.split("\0");
+            // Cauldron start - register bukkit channels for players
+            NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
+            if (msg.channel().equals("REGISTER"))
+            {
+                for (String channel : split)
+                {
+                    dispatcher.player.getBukkitEntity().addChannel(channel);
+                }
+            }
+            else
+            {
+                for (String channel : split)
+                {
+                    dispatcher.player.getBukkitEntity().removeChannel(channel);
+                }
+            }
+            // Cauldron end
             Set<String> channelSet = ImmutableSet.copyOf(split);
             FMLCommonHandler.instance().fireNetRegistrationEvent(manager, channelSet, msg.channel(), side);
         }
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java
index d8d545f..ec76b6c 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java
@@ -37,7 +37,11 @@ enum FMLHandshakeServerState implements IHandshakeState<FMLHandshakeServerState>
             }
 
             FMLHandshakeMessage.ModList client = (FMLHandshakeMessage.ModList)msg;
-            FMLLog.info("Client attempting to join with %d mods : %s", client.modListSize(), client.modListAsString());
+            if (net.minecraft.server.MinecraftServer.kcauldronConfig.loggingClientModList.getValue()) {
+                FMLLog.info("Client attempting to join with %d mods : %s", client.modListSize(), client.modListAsString());
+            } else {
+                FMLLog.info("Client attempting to join with %d mods", client.modListSize());
+            }
             String result = FMLNetworkHandler.checkModList(client, Side.CLIENT);
             if (result != null)
             {
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java
index f504828..e2f18fa 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java
@@ -76,7 +76,7 @@ public class NetworkDispatcher extends SimpleChannelInboundHandler<Packet> imple
     public static final AttributeKey<Boolean> IS_LOCAL = new AttributeKey<Boolean>("fml:isLocal");
     public final NetworkManager manager;
     private final ServerConfigurationManager scm;
-    private EntityPlayerMP player;
+    public EntityPlayerMP player; // Cauldron
     private ConnectionState state;
     private ConnectionType connectionType;
     private final Side side;
@@ -219,7 +219,7 @@ public class NetworkDispatcher extends SimpleChannelInboundHandler<Packet> imple
         }
         else
         {
-            FMLLog.info("Unexpected packet during modded negotiation - assuming vanilla or keepalives : %s", msg.getClass().getName());
+            // FMLLog.info("Unexpected packet during modded negotiation - assuming vanilla or keepalives : %s", msg.getClass().getName());
         }
         return false;
     }
@@ -304,6 +304,7 @@ public class NetworkDispatcher extends SimpleChannelInboundHandler<Packet> imple
             state = ConnectionState.HANDSHAKING;
         }
         String channelName = msg.func_149559_c();
+        player.getBukkitEntity().addChannel(channelName); // Cauldron - register channel for bukkit player
         if ("FML|HS".equals(channelName) || "REGISTER".equals(channelName) || "UNREGISTER".equals(channelName))
         {
             FMLProxyPacket proxy = new FMLProxyPacket(msg);
@@ -325,6 +326,7 @@ public class NetworkDispatcher extends SimpleChannelInboundHandler<Packet> imple
         else if (NetworkRegistry.INSTANCE.hasChannel(channelName, Side.SERVER))
         {
             FMLProxyPacket proxy = new FMLProxyPacket(msg);
+            serverHandler.getCraftServer().getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), msg.func_149559_c(), msg.func_149558_e()); // pass msg to bukkit
             proxy.setDispatcher(this);
             context.fireChannelRead(proxy);
             return true;
@@ -482,7 +484,7 @@ public class NetworkDispatcher extends SimpleChannelInboundHandler<Packet> imple
         // Stop the epic channel closed spam at close
         if (!(cause instanceof ClosedChannelException))
         {
-            FMLLog.log(Level.ERROR, cause, "NetworkDispatcher exception");
+            // FMLLog.log(Level.ERROR, cause, "NetworkDispatcher exception");
         }
         super.exceptionCaught(ctx, cause);
     }
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/internal/FMLNetworkHandler.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/internal/FMLNetworkHandler.java
index 0b5ef6f..5ed3c4e 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/internal/FMLNetworkHandler.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/internal/FMLNetworkHandler.java
@@ -47,6 +47,16 @@ import cpw.mods.fml.common.registry.EntityRegistry;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+//Cauldron start
+import net.minecraft.inventory.IInventory;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.tileentity.TileEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.event.inventory.InventoryType;
+// Cauldron end
 
 public class FMLNetworkHandler
 {
@@ -75,6 +85,31 @@ public class FMLNetworkHandler
             Container remoteGuiContainer = NetworkRegistry.INSTANCE.getRemoteGuiContainer(mc, entityPlayerMP, modGuiId, world, x, y, z);
             if (remoteGuiContainer != null)
             {
+                // Cauldron start - create bukkitView for passed container then fire open event.
+                if (entityPlayer != null)
+                {
+                    if (remoteGuiContainer.getBukkitView() == null)
+                    {
+                        TileEntity te = entityPlayer.worldObj.getTileEntity(x, y, z);
+                        if (te != null && te instanceof IInventory)
+                        {
+                            IInventory teInv = (IInventory)te;
+                            CraftInventory inventory = new CraftInventory(teInv);
+                            remoteGuiContainer.bukkitView = new CraftInventoryView(entityPlayer.getBukkitEntity(), inventory, remoteGuiContainer);
+                        }
+                        else
+                        {
+                            remoteGuiContainer.bukkitView = new CraftInventoryView(entityPlayer.getBukkitEntity(), MinecraftServer.getServer().server.createInventory(entityPlayer.getBukkitEntity(), InventoryType.CHEST), remoteGuiContainer);
+                        }
+
+                        remoteGuiContainer = CraftEventFactory.callInventoryOpenEvent((EntityPlayerMP)entityPlayer, remoteGuiContainer, false);
+                        if (remoteGuiContainer == null)
+                        {
+                            return;
+                        }
+                    }
+                }
+                // Cauldron end
                 entityPlayerMP.getNextWindowId();
                 entityPlayerMP.closeContainer();
                 int windowId = entityPlayerMP.currentWindowId;
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/internal/HandshakeCompletionHandler.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/internal/HandshakeCompletionHandler.java
index e67bf1a..1b2ea0b 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/network/internal/HandshakeCompletionHandler.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/network/internal/HandshakeCompletionHandler.java
@@ -13,8 +13,14 @@ public class HandshakeCompletionHandler extends SimpleChannelInboundHandler<FMLM
     @Override
     protected void channelRead0(ChannelHandlerContext ctx, CompleteHandshake msg) throws Exception
     {
-        NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).getAndRemove();
-        dispatcher.completeHandshake(msg.target);
+        // Cauldron start - attempt to fix race condition with attr being null
+        io.netty.util.Attribute<NetworkDispatcher> attr = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER);
+        if (attr != null)
+        {
+            NetworkDispatcher dispatcher = attr.getAndRemove();
+            if (dispatcher != null) dispatcher.completeHandshake(msg.target);
+        }
+        // Cauldron end
     }
 
     @Override
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/registry/EntityRegistry.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/registry/EntityRegistry.java
index c33350a..9352358 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/registry/EntityRegistry.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/registry/EntityRegistry.java
@@ -41,6 +41,12 @@ import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.network.internal.FMLMessage.EntitySpawnMessage;
 
+// Cauldron start
+import net.minecraftforge.common.util.EnumHelper;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.EntityType;
+// Cauldron end
+
 public class EntityRegistry
 {
     public class EntityRegistration
@@ -118,6 +124,8 @@ public class EntityRegistry
     private ListMultimap<ModContainer, EntityRegistration> entityRegistrations = ArrayListMultimap.create();
     private Map<String,ModContainer> entityNames = Maps.newHashMap();
     private BiMap<Class<? extends Entity>, EntityRegistration> entityClassRegistrations = HashBiMap.create();
+    public static Map<Class <? extends Entity>, String> entityTypeMap = Maps.newHashMap(); // Cauldron - used by CraftCustomEntity
+    public static Map<String, Class <? extends Entity>> entityClassMap = Maps.newHashMap(); // Cauldron - used by CraftWorld
     public static EntityRegistry instance()
     {
         return INSTANCE;
@@ -147,6 +155,7 @@ public class EntityRegistry
     public static void registerModEntity(Class<? extends Entity> entityClass, String entityName, int id, Object mod, int trackingRange, int updateFrequency, boolean sendsVelocityUpdates)
     {
         instance().doModEntityRegistration(entityClass, entityName, id, mod, trackingRange, updateFrequency, sendsVelocityUpdates);
+        registerBukkitType(entityClass, entityName); // Cauldron - register EntityType for Bukkit
     }
 
     @SuppressWarnings("unchecked")
@@ -197,6 +206,7 @@ public class EntityRegistry
         }
         id = instance().validateAndClaimId(id);
         EntityList.addMapping(entityClass, entityName, id);
+        registerBukkitType(entityClass, entityName); // Cauldron - register EntityType for Bukkit
     }
 
     private int validateAndClaimId(int id)
@@ -249,7 +259,37 @@ public class EntityRegistry
         }
         instance().validateAndClaimId(id);
         EntityList.addMapping(entityClass, entityName, id, backgroundEggColour, foregroundEggColour);
+        registerBukkitType(entityClass, entityName); // Cauldron - register EntityType for Bukkit
+    }
+
+    // Cauldron start
+    private static void registerBukkitType(Class <? extends Entity > entityClass, String entityName)
+    {
+        ModContainer activeModContainer = Loader.instance().activeModContainer();
+        String modId = "unknown";
+        // fixup bad entity names from mods
+        if (entityName.contains("."))
+        {
+            if ((entityName.indexOf(".") + 1) < entityName.length())
+                entityName = entityName.substring(entityName.indexOf(".") + 1, entityName.length());
+        }
+        entityName = entityName.replace("entity", "");
+        if (entityName.startsWith("ent"))
+            entityName = entityName.replace("ent", "");
+        entityName = entityName.replaceAll("[^A-Za-z0-9]", ""); // remove all non-digits/alphanumeric
+        if (activeModContainer != null)
+            modId = activeModContainer.getModId();
+        entityName = modId + "-" + entityName;
+        entityTypeMap.put(entityClass, entityName);
+        entityClassMap.put(entityName, entityClass);
+    }
+
+    // used by CraftCustomEntity
+    public static String getCustomEntityTypeName(Class <? extends Entity > entityClass)
+    {
+        return entityTypeMap.get(entityClass);
     }
+    // Cauldron end
 
     public static void addSpawn(Class <? extends EntityLiving > entityClass, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, BiomeGenBase... biomes)
     {
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/registry/GameData.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/registry/GameData.java
index be0f40c..6e1881d 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/registry/GameData.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/registry/GameData.java
@@ -14,7 +14,9 @@ package cpw.mods.fml.common.registry;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.BitSet;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -1054,4 +1056,56 @@ public class GameData {
             throw new RuntimeException("WHAT?");
         }
     }
+
+    // Cauldron start
+    public static void injectItemBukkitMaterials()
+    {
+        FMLControlledNamespacedRegistry<Item> itemRegistry = getItemRegistry();
+        List<Integer> ids = new ArrayList<Integer>();
+
+        for (Item thing : itemRegistry.typeSafeIterable())
+        {
+            ids.add(itemRegistry.getId(thing));
+        }
+
+        // sort by id
+        Collections.sort(ids);
+
+        for (int id : ids)
+        {
+            Item item = itemRegistry.getRaw(id);
+            // inject item materials into Bukkit for FML
+            org.bukkit.Material material = org.bukkit.Material.addMaterial(id, itemRegistry.getNameForObject(item), false);
+            if (material != null)
+            {
+                FMLLog.info("Injected new Forge item material %s with ID %d.", material.name(), material.getId());
+            }
+        }
+    }
+
+    public static void injectBlockBukkitMaterials()
+    {
+        FMLControlledNamespacedRegistry<Block> blockRegistry = getBlockRegistry();
+        List<Integer> ids = new ArrayList<Integer>();
+
+        for (Block block : blockRegistry.typeSafeIterable())
+        {
+            ids.add(blockRegistry.getId(block));
+        }
+
+        // sort by id
+        Collections.sort(ids);
+
+        for (int id : ids)
+        {
+            Block block = blockRegistry.getRaw(id);
+            // inject block materials into Bukkit for FML
+            org.bukkit.Material material = org.bukkit.Material.addMaterial(id, blockRegistry.getNameForObject(block), true);
+            if (material != null)
+            {
+                FMLLog.info("Injected new Forge block material %s with ID %d.", material.name(), material.getId());
+            }
+        }
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/common/registry/GameRegistry.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/registry/GameRegistry.java
index 58e1e3f..7b79a9b 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/common/registry/GameRegistry.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/common/registry/GameRegistry.java
@@ -24,6 +24,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
+import java.util.HashMap; // Cauldron
 
 import net.minecraft.block.Block;
 import net.minecraft.item.Item;
@@ -67,6 +68,11 @@ public class GameRegistry
     private static List<IFuelHandler> fuelHandlers = Lists.newArrayList();
     private static List<IWorldGenerator> sortedGeneratorList;
 
+    // Cauldron start
+    private static Map<String, Boolean> configWorldGenCache = new HashMap<String, Boolean>();
+    private static Map<String, String> worldGenMap = new HashMap<String, String>();
+    // Cauldron end
+
     /**
      * Register a world generator - something that inserts new block types into the world
      *
@@ -76,12 +82,18 @@ public class GameRegistry
      */
     public static void registerWorldGenerator(IWorldGenerator generator, int modGenerationWeight)
     {
+        // Cauldron start - mod id's are not available during generateWorld so we must capture them here
+        String modId = Loader.instance().activeModContainer().getModId();
+        modId = modId.replaceAll("[^A-Za-z0-9]", ""); // remove all non-digits/alphanumeric
+        modId = modId.replace(" ", "_");
         worldGenerators.add(generator);
         worldGeneratorIndex.put(generator, modGenerationWeight);
         if (sortedGeneratorList != null)
         {
             sortedGeneratorList = null;
         }
+        worldGenMap.put(generator.getClass().getName(), modId);
+        // Cauldron end
     }
 
     /**
@@ -106,11 +118,27 @@ public class GameRegistry
         long zSeed = fmlRandom.nextLong() >> 2 + 1L;
         long chunkSeed = (xSeed * chunkX + zSeed * chunkZ) ^ worldSeed;
 
-        for (IWorldGenerator generator : sortedGeneratorList)
+        boolean before = ((net.minecraft.world.WorldServer) world).theChunkProviderServer.loadChunkOnProvideRequest; // Cauldron store value
+        ((net.minecraft.world.WorldServer) world).theChunkProviderServer.loadChunkOnProvideRequest = true; // Cauldron load chunks on provide requests
+        for (IWorldGenerator generator : worldGenerators)
         {
-            fmlRandom.setSeed(chunkSeed);
-            generator.generate(fmlRandom, chunkX, chunkZ, world, chunkGenerator, chunkProvider);
+            // Cauldron start
+            if (!configWorldGenCache.containsKey(generator.getClass().getName()))
+            {
+                String modId = worldGenMap.get(generator.getClass().getName());
+                String generatorName = "";
+                generatorName = modId + "-" + generator.getClass().getSimpleName();
+                boolean generatorEnabled = world.cauldronConfig.getBoolean("worldgen-" + generatorName, true);
+                configWorldGenCache.put(generator.getClass().getName(), generatorEnabled);
+            }
+            if (configWorldGenCache.get(generator.getClass().getName()))
+            {
+                fmlRandom.setSeed(chunkSeed);
+                generator.generate(fmlRandom, chunkX, chunkZ, world, chunkGenerator, chunkProvider);
+            }
         }
+        ((net.minecraft.world.WorldServer)world).theChunkProviderServer.loadChunkOnProvideRequest = before; // reset
+        // Cauldron end
     }
 
     private static void computeSortedGeneratorList()
diff --git ./eclipse/Clean/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java ./eclipse/cauldron/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
index 2297276..9c5f5e2 100644
--- ./eclipse/Clean/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
+++ ./eclipse/cauldron/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
@@ -60,7 +60,7 @@ public class CoreModManager {
     private static final Attributes.Name COREMODCONTAINSFMLMOD = new Attributes.Name("FMLCorePluginContainsFMLMod");
     private static final Attributes.Name MODTYPE = new Attributes.Name("ModType");
     private static final Attributes.Name MODSIDE = new Attributes.Name("ModSide");
-    private static String[] rootPlugins = { "cpw.mods.fml.relauncher.FMLCorePlugin", "net.minecraftforge.classloading.FMLForgePlugin" };
+    private static String[] rootPlugins = { "cpw.mods.fml.relauncher.FMLCorePlugin", "net.minecraftforge.classloading.FMLForgePlugin", "pw.prok.imagine.ImagineLoadingPlugin" };
     private static List<String> loadedCoremods = Lists.newArrayList();
     private static List<FMLPluginWrapper> loadPlugins;
     private static boolean deobfuscatedEnvironment;
@@ -101,6 +101,7 @@ public class CoreModManager {
         @Override
         public void injectIntoClassLoader(LaunchClassLoader classLoader)
         {
+            // Cauldron end
             FMLRelaunchLog.fine("Injecting coremod %s {%s} class transformers", name, coreModInstance.getClass().getName());
             if (coreModInstance.getASMTransformerClass() != null) for (String transformer : coreModInstance.getASMTransformerClass())
             {
@@ -160,6 +161,9 @@ public class CoreModManager {
 
     }
 
+    // Cauldron - group output of @MCVersion warnings
+    private static List<String> noVersionAnnotationCoreMods = new ArrayList<String>();
+
     public static void handleLaunch(File mcDir, LaunchClassLoader classLoader, FMLTweaker tweaker)
     {
         CoreModManager.mcDir = mcDir;
@@ -219,6 +223,19 @@ public class CoreModManager {
             loadCoreMod(classLoader, coreModClassName, null);
         }
         discoverCoreMods(mcDir, classLoader);
+        // Cauldron start - group output of @MCVersion warnings
+        if (!noVersionAnnotationCoreMods.isEmpty())
+        {
+            FMLRelaunchLog
+                    .warning("The following coremods do not have a @MCVersion annotation. They may cause problems if this is not the correct version of Minecraft for them.");
+            StringBuilder sb = new StringBuilder("Missing @MCVersion: ");
+            for (String className : noVersionAnnotationCoreMods)
+            {
+                sb.append(className).append("  ");
+            }
+            FMLRelaunchLog.warning(sb.toString());
+        }
+        // Cauldron end
 
     }
 
@@ -338,6 +355,10 @@ public class CoreModManager {
             String cascadedTweaker = mfAttributes.getValue("TweakClass");
             if (cascadedTweaker != null)
             {
+                if ("fastcraft.Tweaker".equals(cascadedTweaker) && !"false".equals(System.getProperty("kcauldron.fastcraft.disable", "true"))) {
+                    FMLRelaunchLog.info("Found FastCraft tweaker, skipping...");
+                    continue;
+                }
                 FMLRelaunchLog.info("Loading tweaker %s from %s", cascadedTweaker, coreMod.getName());
                 Integer sortOrder = Ints.tryParse(Strings.nullToEmpty(mfAttributes.getValue("TweakOrder")));
                 sortOrder = (sortOrder == null ? Integer.valueOf(0) : sortOrder);
@@ -367,6 +388,10 @@ public class CoreModManager {
                 FMLRelaunchLog.fine("Not found coremod data in %s", coreMod.getName());
                 continue;
             }
+            if ("fastcraft.LoadingPlugin".equals(fmlCorePlugin) && !"false".equals(System.getProperty("kcauldron.fastcraft.disable", "true"))) {
+                FMLRelaunchLog.warning("Found FastCraft coremod, skipping...");
+                continue;
+            }
             // Support things that are mod jars, but not FML mod jars
             try
             {
@@ -469,8 +494,11 @@ public class CoreModManager {
             MCVersion requiredMCVersion = coreModClazz.getAnnotation(IFMLLoadingPlugin.MCVersion.class);
             if (!Arrays.asList(rootPlugins).contains(coreModClass) && (requiredMCVersion == null || Strings.isNullOrEmpty(requiredMCVersion.value())))
             {
-                FMLRelaunchLog.log(Level.WARN, "The coremod %s does not have a MCVersion annotation, it may cause issues with this version of Minecraft",
-                        coreModClass);
+                // Cauldron start - group output of @MCVersion warnings
+                // FMLRelaunchLog.log(Level.WARN, "The coremod %s does not have a MCVersion annotation, it may cause issues with this version of Minecraft",
+                //        coreModClass);
+                noVersionAnnotationCoreMods.add(coreModClass);
+                // Cauldron end
             }
             else if (requiredMCVersion != null && !FMLInjectionData.mccversion.equals(requiredMCVersion.value()))
             {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/Block.java ./eclipse/cauldron/src/main/java/net/minecraft/block/Block.java
index 525fa61..704ef05 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/Block.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/Block.java
@@ -122,6 +122,7 @@ public class Block
     private String unlocalizedName;
     @SideOnly(Side.CLIENT)
     protected IIcon blockIcon;
+    public boolean isForgeBlock; // Cauldron
     private static final String __OBFID = "CL_00000199";
 
     public final cpw.mods.fml.common.registry.RegistryDelegate<Block> delegate = 
@@ -1131,6 +1132,23 @@ public class Block
         return this;
     }
 
+    // Spigot start
+    public static float range(float min, float value, float max)
+    {
+        if (value < min)
+        {
+            return min;
+        }
+
+        if (value > max)
+        {
+            return max;
+        }
+
+        return value;
+    }
+    // Spigot end
+
     @SideOnly(Side.CLIENT)
     protected String getTextureName()
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockBasePressurePlate.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockBasePressurePlate.java
index 989ea2c..6cc3b6b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockBasePressurePlate.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockBasePressurePlate.java
@@ -11,6 +11,8 @@ import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public abstract class BlockBasePressurePlate extends Block
 {
     private String field_150067_a;
@@ -122,6 +124,19 @@ public abstract class BlockBasePressurePlate extends Block
         int i1 = this.func_150065_e(p_150062_1_, p_150062_2_, p_150062_3_, p_150062_4_);
         boolean flag = p_150062_5_ > 0;
         boolean flag1 = i1 > 0;
+        // CraftBukkit start - Interact Pressure Plate
+        org.bukkit.World bworld = p_150062_1_.getWorld();
+        org.bukkit.plugin.PluginManager manager = p_150062_1_.getServer().getPluginManager();
+
+        if (flag != flag1)
+        {
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bworld.getBlockAt(p_150062_2_, p_150062_3_, p_150062_4_), p_150062_5_, i1);
+            manager.callEvent(eventRedstone);
+            flag1 = eventRedstone.getNewCurrent() > 0;
+            i1 = eventRedstone.getNewCurrent();
+        }
+
+        // CraftBukkit end
 
         if (p_150062_5_ != i1)
         {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockBrewingStand.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockBrewingStand.java
index db74e19..9c70ed8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockBrewingStand.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockBrewingStand.java
@@ -20,6 +20,7 @@ import net.minecraft.tileentity.TileEntityBrewingStand;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.IIcon;
 import net.minecraft.world.World;
+import net.minecraft.nbt.NBTTagCompound;
 
 public class BlockBrewingStand extends BlockContainer
 {
@@ -126,6 +127,12 @@ public class BlockBrewingStand extends BlockContainer
                         entityitem.motionX = (double)((float)this.field_149961_a.nextGaussian() * f3);
                         entityitem.motionY = (double)((float)this.field_149961_a.nextGaussian() * f3 + 0.2F);
                         entityitem.motionZ = (double)((float)this.field_149961_a.nextGaussian() * f3);
+                        // Spigot Start
+                        if ( itemstack.hasTagCompound() )
+                        {
+                            entityitem.getEntityItem().setTagCompound( (NBTTagCompound) itemstack.getTagCompound().copy() );
+                        }
+                        // Spigot End
                         p_149749_1_.spawnEntityInWorld(entityitem);
                     }
                 }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockButton.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockButton.java
index 7000be5..ca53a40 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockButton.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockButton.java
@@ -16,6 +16,10 @@ import net.minecraft.world.World;
 
 import net.minecraftforge.common.util.ForgeDirection;
 import static net.minecraftforge.common.util.ForgeDirection.*;
+// CraftBukkit start
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.entity.EntityInteractEvent;
+// CraftBukkit end
 
 public abstract class BlockButton extends Block
 {
@@ -209,6 +213,19 @@ public abstract class BlockButton extends Block
         }
         else
         {
+            // CraftBukkit start
+            org.bukkit.block.Block block = p_149727_1_.getWorld().getBlockAt(p_149727_2_, p_149727_3_, p_149727_4_);
+            int old = (k1 != 8) ? 15 : 0;
+            int current = (k1 == 8) ? 15 : 0;
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+            p_149727_1_.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if ((eventRedstone.getNewCurrent() > 0) != (k1 == 8))
+            {
+                return true;
+            }
+
+            // CraftBukkit end
             p_149727_1_.setBlockMetadataWithNotify(p_149727_2_, p_149727_3_, p_149727_4_, j1 + k1, 3);
             p_149727_1_.markBlockRangeForRenderUpdate(p_149727_2_, p_149727_3_, p_149727_4_, p_149727_2_, p_149727_3_, p_149727_4_);
             p_149727_1_.playSoundEffect((double)p_149727_2_ + 0.5D, (double)p_149727_3_ + 0.5D, (double)p_149727_4_ + 0.5D, "random.click", 0.3F, 0.6F);
@@ -262,6 +279,18 @@ public abstract class BlockButton extends Block
 
             if ((l & 8) != 0)
             {
+                // CraftBukkit start
+                org.bukkit.block.Block block = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+                BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
+                p_149674_1_.getServer().getPluginManager().callEvent(eventRedstone);
+
+                if (eventRedstone.getNewCurrent() > 0)
+                {
+                    return;
+                }
+
+                // CraftBukkit end
+
                 if (this.field_150047_a)
                 {
                     this.func_150046_n(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_);
@@ -309,6 +338,36 @@ public abstract class BlockButton extends Block
         List list = p_150046_1_.getEntitiesWithinAABB(EntityArrow.class, AxisAlignedBB.getBoundingBox((double)p_150046_2_ + this.minX, (double)p_150046_3_ + this.minY, (double)p_150046_4_ + this.minZ, (double)p_150046_2_ + this.maxX, (double)p_150046_3_ + this.maxY, (double)p_150046_4_ + this.maxZ));
         boolean flag1 = !list.isEmpty();
 
+        // CraftBukkit start - Call interact event when arrows turn on wooden buttons
+        if (flag != flag1 && flag1)
+        {
+            org.bukkit.block.Block block = p_150046_1_.getWorld().getBlockAt(p_150046_2_, p_150046_3_, p_150046_4_);
+            boolean allowed = false;
+
+            // If all of the events are cancelled block the button press, else allow
+            for (Object object : list)
+            {
+                if (object != null)
+                {
+                    EntityInteractEvent event = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
+                    p_150046_1_.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled())
+                    {
+                        allowed = true;
+                        break;
+                    }
+                }
+            }
+
+            if (!allowed)
+            {
+                return;
+            }
+        }
+
+        // CraftBukkit end
+
         if (flag1 && !flag)
         {
             p_150046_1_.setBlockMetadataWithNotify(p_150046_2_, p_150046_3_, p_150046_4_, i1 | 8, 3);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCactus.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCactus.java
index dc72d81..29677cd 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCactus.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCactus.java
@@ -17,6 +17,8 @@ import net.minecraftforge.common.EnumPlantType;
 import net.minecraftforge.common.util.ForgeDirection;
 import net.minecraftforge.common.IPlantable;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class BlockCactus extends Block implements IPlantable
 {
     @SideOnly(Side.CLIENT)
@@ -47,9 +49,9 @@ public class BlockCactus extends Block implements IPlantable
             {
                 int i1 = p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_);
 
-                if (i1 == 15)
+                if (i1 >= (byte) range(3, (p_149674_1_.growthOdds / p_149674_1_.getSpigotConfig().cactusModifier * 15) + 0.5F, 15))   // Spigot // Cauldron
                 {
-                    p_149674_1_.setBlock(p_149674_2_, p_149674_3_ + 1, p_149674_4_, this);
+                    CraftEventFactory.handleBlockGrowEvent(p_149674_1_, p_149674_2_, p_149674_3_ + 1, p_149674_4_, this, 0); // CraftBukkit
                     p_149674_1_.setBlockMetadataWithNotify(p_149674_2_, p_149674_3_, p_149674_4_, 0, 4);
                     this.onNeighborBlockChange(p_149674_1_, p_149674_2_, p_149674_3_ + 1, p_149674_4_, this);
                 }
@@ -135,6 +137,7 @@ public class BlockCactus extends Block implements IPlantable
 
     public void onEntityCollidedWithBlock(World p_149670_1_, int p_149670_2_, int p_149670_3_, int p_149670_4_, Entity p_149670_5_)
     {
+        // Cauldron - moved CraftBukkit hook to func_145775_I() - doBlockCollisions
         p_149670_5_.attackEntityFrom(DamageSource.cactus, 1.0F);
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCake.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCake.java
index 958f8d9..b988b12 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCake.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCake.java
@@ -12,6 +12,10 @@ import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S06PacketUpdateHealth;
+// CraftBukkit end
 
 public class BlockCake extends Block
 {
@@ -104,7 +108,17 @@ public class BlockCake extends Block
     {
         if (p_150036_5_.canEat(false))
         {
-            p_150036_5_.getFoodStats().addStats(2, 0.1F);
+            // CraftBukkit start
+            int oldFoodLevel = p_150036_5_.getFoodStats().foodLevel;
+            org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(p_150036_5_, 2 + oldFoodLevel);
+
+            if (!event.isCancelled())
+            {
+                p_150036_5_.getFoodStats().addStats(event.getFoodLevel() - oldFoodLevel, 0.1F);
+            }
+
+            ((EntityPlayerMP) p_150036_5_).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP) p_150036_5_).getBukkitEntity().getScaledHealth(), p_150036_5_.getFoodStats().foodLevel, p_150036_5_.getFoodStats().foodSaturationLevel));
+            // CraftBukkit end
             int l = p_150036_1_.getBlockMetadata(p_150036_2_, p_150036_3_, p_150036_4_) + 1;
 
             if (l >= 6)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCocoa.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCocoa.java
index b8f1f48..dc042bc 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCocoa.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCocoa.java
@@ -51,7 +51,8 @@ public class BlockCocoa extends BlockDirectional implements IGrowable
             if (i1 < 2)
             {
                 ++i1;
-                p_149674_1_.setBlockMetadataWithNotify(p_149674_2_, p_149674_3_, p_149674_4_, i1 << 2 | getDirection(l), 2);
+                // CraftBukkit
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, this, i1 << 2 | getDirection(l));
             }
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCommandBlock.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCommandBlock.java
index 83eec1a..e31f12d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCommandBlock.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCommandBlock.java
@@ -10,6 +10,8 @@ import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityCommandBlock;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockCommandBlock extends BlockContainer
 {
     private static final String __OBFID = "CL_00000219";
@@ -31,13 +33,20 @@ public class BlockCommandBlock extends BlockContainer
             boolean flag = p_149695_1_.isBlockIndirectlyGettingPowered(p_149695_2_, p_149695_3_, p_149695_4_);
             int l = p_149695_1_.getBlockMetadata(p_149695_2_, p_149695_3_, p_149695_4_);
             boolean flag1 = (l & 1) != 0;
-
-            if (flag && !flag1)
+            // CraftBukkit start
+            org.bukkit.block.Block bukkitBlock = p_149695_1_.getWorld().getBlockAt(p_149695_2_, p_149695_3_, p_149695_4_);
+            int old = flag1 ? 15 : 0;
+            int current = flag ? 15 : 0;
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, old, current);
+            p_149695_1_.getServer().getPluginManager().callEvent(eventRedstone);
+            // CraftBukkit end
+
+            if (eventRedstone.getNewCurrent() > 0 && !(eventRedstone.getOldCurrent() > 0))   // CraftBukkit
             {
                 p_149695_1_.setBlockMetadataWithNotify(p_149695_2_, p_149695_3_, p_149695_4_, l | 1, 4);
                 p_149695_1_.scheduleBlockUpdate(p_149695_2_, p_149695_3_, p_149695_4_, this, this.tickRate(p_149695_1_));
             }
-            else if (!flag && flag1)
+            else if (!(eventRedstone.getNewCurrent() > 0) && eventRedstone.getOldCurrent() > 0)     // CraftBukkit
             {
                 p_149695_1_.setBlockMetadataWithNotify(p_149695_2_, p_149695_3_, p_149695_4_, l & -2, 4);
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCrops.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCrops.java
index 11aa57f..c57e073 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockCrops.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockCrops.java
@@ -49,10 +49,9 @@ public class BlockCrops extends BlockBush implements IGrowable
             {
                 float f = this.func_149864_n(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_);
 
-                if (p_149674_5_.nextInt((int)(25.0F / f) + 1) == 0)
+                if (p_149674_5_.nextInt((int)(p_149674_1_.growthOdds / p_149674_1_.getSpigotConfig().wheatModifier * (25.0F / f)) + 1) == 0)    // Spigot // Cauldron
                 {
-                    ++l;
-                    p_149674_1_.setBlockMetadataWithNotify(p_149674_2_, p_149674_3_, p_149674_4_, l, 2);
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, this, ++l); // CraftBukkit
                 }
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDaylightDetector.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDaylightDetector.java
index 3de2177..120bd23 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDaylightDetector.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDaylightDetector.java
@@ -73,6 +73,7 @@ public class BlockDaylightDetector extends BlockContainer
 
             if (l != i1)
             {
+                i1 = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(p_149957_1_, p_149957_2_, p_149957_3_, p_149957_4_, l, i1).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
                 p_149957_1_.setBlockMetadataWithNotify(p_149957_2_, p_149957_3_, p_149957_4_, i1, 3);
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDispenser.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDispenser.java
index 0c0f0eb..0550494 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDispenser.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDispenser.java
@@ -30,6 +30,7 @@ public class BlockDispenser extends BlockContainer
 {
     public static final IRegistry dispenseBehaviorRegistry = new RegistryDefaulted(new BehaviorDefaultDispenseItem());
     protected Random field_149942_b = new Random();
+    public static boolean eventFired = false; // CraftBukkit
     @SideOnly(Side.CLIENT)
     protected IIcon field_149944_M;
     @SideOnly(Side.CLIENT)
@@ -124,7 +125,8 @@ public class BlockDispenser extends BlockContainer
         }
     }
 
-    protected void func_149941_e(World p_149941_1_, int p_149941_2_, int p_149941_3_, int p_149941_4_)
+    // CraftBukkit - protected -> public
+    public void func_149941_e(World p_149941_1_, int p_149941_2_, int p_149941_3_, int p_149941_4_)
     {
         BlockSourceImpl blocksourceimpl = new BlockSourceImpl(p_149941_1_, p_149941_2_, p_149941_3_, p_149941_4_);
         TileEntityDispenser tileentitydispenser = (TileEntityDispenser)blocksourceimpl.getBlockTileEntity();
@@ -145,6 +147,7 @@ public class BlockDispenser extends BlockContainer
                 if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider)
                 {
                     ItemStack itemstack1 = ibehaviordispenseitem.dispense(blocksourceimpl, itemstack);
+                    eventFired = false; // CraftBukkit - reset event status
                     tileentitydispenser.setInventorySlotContents(l, itemstack1.stackSize == 0 ? null : itemstack1);
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDoor.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDoor.java
index 6f5f9eb..789e83b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDoor.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDoor.java
@@ -16,6 +16,8 @@ import net.minecraft.util.Vec3;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockDoor extends Block
 {
     @SideOnly(Side.CLIENT)
@@ -329,15 +331,32 @@ public class BlockDoor extends Block
                 {
                     this.dropBlockAsItem(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_, l, 0);
                 }
+
+                // CraftBukkit start
             }
-            else
+            else if (p_149695_5_.canProvidePower())
             {
-                boolean flag1 = p_149695_1_.isBlockIndirectlyGettingPowered(p_149695_2_, p_149695_3_, p_149695_4_) || p_149695_1_.isBlockIndirectlyGettingPowered(p_149695_2_, p_149695_3_ + 1, p_149695_4_);
+                org.bukkit.World bworld = p_149695_1_.getWorld();
+                org.bukkit.block.Block bukkitBlock = bworld.getBlockAt(p_149695_2_, p_149695_3_, p_149695_4_);
+                org.bukkit.block.Block blockTop = bworld.getBlockAt(p_149695_2_, p_149695_3_ + 1, p_149695_4_);
+                int power = bukkitBlock.getBlockPower();
+                int powerTop = blockTop.getBlockPower();
+
+                if (powerTop > power)
+                {
+                    power = powerTop;
+                }
 
-                if ((flag1 || p_149695_5_.canProvidePower()) && p_149695_5_ != this)
+                int oldPower = (p_149695_1_.getBlockMetadata(p_149695_2_, p_149695_3_, p_149695_4_) & 4) > 0 ? 15 : 0;
+
+                if (oldPower == 0 ^ power == 0)
                 {
-                    this.func_150014_a(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_, flag1);
+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
+                    p_149695_1_.getServer().getPluginManager().callEvent(eventRedstone);
+                    this.func_150014_a(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_, eventRedstone.getNewCurrent() > 0);
                 }
+
+                // CraftBukkit end
             }
         }
         else
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDragonEgg.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDragonEgg.java
index 30d3e6a..e834a8f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDragonEgg.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDragonEgg.java
@@ -10,6 +10,8 @@ import net.minecraft.item.Item;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockFromToEvent; // CraftBukkit
+
 public class BlockDragonEgg extends Block
 {
     private static final String __OBFID = "CL_00000232";
@@ -43,7 +45,8 @@ public class BlockDragonEgg extends Block
 
             if (!BlockFalling.fallInstantly && p_150018_1_.checkChunksExist(p_150018_2_ - b0, p_150018_3_ - b0, p_150018_4_ - b0, p_150018_2_ + b0, p_150018_3_ + b0, p_150018_4_ + b0))
             {
-                EntityFallingBlock entityfallingblock = new EntityFallingBlock(p_150018_1_, (double)((float)p_150018_2_ + 0.5F), (double)((float)p_150018_3_ + 0.5F), (double)((float)p_150018_4_ + 0.5F), this);
+                // CraftBukkit - added data
+                EntityFallingBlock entityfallingblock = new EntityFallingBlock(p_150018_1_, (double)((float) p_150018_2_ + 0.5F), (double)((float) p_150018_3_ + 0.5F), (double)((float) p_150018_4_ + 0.5F), this, p_150018_1_.getBlockMetadata(p_150018_2_, p_150018_3_, p_150018_4_));
                 p_150018_1_.spawnEntityInWorld(entityfallingblock);
             }
             else
@@ -86,6 +89,22 @@ public class BlockDragonEgg extends Block
 
                 if (p_150019_1_.getBlock(i1, j1, k1).blockMaterial == Material.air)
                 {
+                    // CraftBukkit start
+                    org.bukkit.block.Block from = p_150019_1_.getWorld().getBlockAt(p_150019_2_, p_150019_3_, p_150019_4_);
+                    org.bukkit.block.Block to = p_150019_1_.getWorld().getBlockAt(i1, j1, k1);
+                    BlockFromToEvent event = new BlockFromToEvent(from, to);
+                    org.bukkit.Bukkit.getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        return;
+                    }
+
+                    i1 = event.getToBlock().getX();
+                    j1 = event.getToBlock().getY();
+                    k1 = event.getToBlock().getZ();
+                    // CraftBukkit end
+
                     if (!p_150019_1_.isRemote)
                     {
                         p_150019_1_.setBlock(i1, j1, k1, this, p_150019_1_.getBlockMetadata(p_150019_2_, p_150019_3_, p_150019_4_), 2);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDropper.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDropper.java
index b094816..8679852 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDropper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDropper.java
@@ -13,6 +13,11 @@ import net.minecraft.tileentity.TileEntityDropper;
 import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.util.Facing;
 import net.minecraft.world.World;
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import net.minecraft.inventory.InventoryLargeChest;
+// CraftBukkit end
 
 public class BlockDropper extends BlockDispenser
 {
@@ -38,7 +43,7 @@ public class BlockDropper extends BlockDispenser
         return new TileEntityDropper();
     }
 
-    protected void func_149941_e(World p_149941_1_, int p_149941_2_, int p_149941_3_, int p_149941_4_)
+    public void func_149941_e(World p_149941_1_, int p_149941_2_, int p_149941_3_, int p_149941_4_)   // CraftBukkit - protected -> public
     {
         BlockSourceImpl blocksourceimpl = new BlockSourceImpl(p_149941_1_, p_149941_2_, p_149941_3_, p_149941_4_);
         TileEntityDispenser tileentitydispenser = (TileEntityDispenser)blocksourceimpl.getBlockTileEntity();
@@ -60,10 +65,33 @@ public class BlockDropper extends BlockDispenser
 
                 if (iinventory != null)
                 {
-                    itemstack1 = TileEntityHopper.func_145889_a(iinventory, itemstack.copy().splitStack(1), Facing.oppositeSide[i1]);
+                    // CraftBukkit start - Fire event when pushing items into other inventories
+                    CraftItemStack oitemstack = CraftItemStack.asCraftMirror(itemstack.copy().splitStack(1));
+                    org.bukkit.inventory.Inventory destinationInventory;
 
-                    if (itemstack1 == null)
+                    // Have to special case large chests as they work oddly
+                    if (iinventory instanceof InventoryLargeChest)
                     {
+                        destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+                    }
+                    else
+                    {
+                        destinationInventory = iinventory.getOwner().getInventory();
+                    }
+
+                    InventoryMoveItemEvent event = new InventoryMoveItemEvent(tileentitydispenser.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                    p_149941_1_.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        return;
+                    }
+
+                    itemstack1 = TileEntityHopper.func_145889_a(iinventory, CraftItemStack.asNMSCopy(event.getItem()), Facing.oppositeSide[i1]);
+
+                    if (event.getItem().equals(oitemstack) && itemstack1 == null)
+                    {
+                        // CraftBukkit end
                         itemstack1 = itemstack.copy();
 
                         if (--itemstack1.stackSize == 0)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDynamicLiquid.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDynamicLiquid.java
index 0f6f16a..786454e 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockDynamicLiquid.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockDynamicLiquid.java
@@ -5,6 +5,11 @@ import net.minecraft.block.material.Material;
 import net.minecraft.init.Blocks;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.block.BlockFace;
+import org.bukkit.event.block.BlockFromToEvent;
+// CraftBukkit end
+
 public class BlockDynamicLiquid extends BlockLiquid
 {
     int field_149815_a;
@@ -37,6 +42,12 @@ public class BlockDynamicLiquid extends BlockLiquid
         int i1 = this.tickRate(p_149674_1_);
         int j1;
 
+        // Cauldron - move CB edit to after variable initialization for coremod compatibility
+        // CraftBukkit start
+        org.bukkit.World bworld = p_149674_1_.getWorld();
+        org.bukkit.Server server = p_149674_1_.getServer();
+        org.bukkit.block.Block source = bworld == null ? null : bworld.getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+        // CraftBukkit end
         if (l > 0)
         {
             byte b1 = -100;
@@ -66,17 +77,22 @@ public class BlockDynamicLiquid extends BlockLiquid
                 }
             }
 
-            if (this.field_149815_a >= 2 && this.blockMaterial == Material.water)
+            // Cauldron start - allow disabling infinite water sources
+            if(net.minecraft.server.MinecraftServer.getServer().cauldronConfig.infiniteWaterSource.getValue())
             {
-                if (p_149674_1_.getBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_).getMaterial().isSolid())
-                {
-                    j1 = 0;
-                }
-                else if (p_149674_1_.getBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_).getMaterial() == this.blockMaterial && p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_ - 1, p_149674_4_) == 0)
+                if (this.field_149815_a >= 2 && this.blockMaterial == Material.water)
                 {
-                    j1 = 0;
+                    if (p_149674_1_.getBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_).getMaterial().isSolid())
+                    {
+                        j1 = 0;
+                    }
+                    else if (p_149674_1_.getBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_).getMaterial() == this.blockMaterial && p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_ - 1, p_149674_4_) == 0)
+                    {
+                        j1 = 0;
+                    }
                 }
             }
+            // Cauldron end
 
             if (this.blockMaterial == Material.lava && l < 8 && j1 < 8 && j1 > l && p_149674_5_.nextInt(4) != 0)
             {
@@ -89,6 +105,13 @@ public class BlockDynamicLiquid extends BlockLiquid
                 {
                     this.func_149811_n(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_);
                 }
+                // Cauldron start - allow lava decaying at a 'natural' rate - see https://mojang.atlassian.net/browse/MC-4631 Lava decay fails to schedule block update
+                else if (net.minecraft.server.MinecraftServer.getServer().cauldronConfig.flowingLavaDecay.getValue())
+                {
+                    // Ensure that even if the flow decay was skipped, it will retry at the material's natural flow period.
+                    p_149674_1_.scheduleBlockUpdate(p_149674_2_, p_149674_3_, p_149674_4_, this, this.tickRate(p_149674_1_));
+                }
+                // Cauldron end
             }
             else
             {
@@ -113,21 +136,35 @@ public class BlockDynamicLiquid extends BlockLiquid
 
         if (this.func_149809_q(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_))
         {
-            if (this.blockMaterial == Material.lava && p_149674_1_.getBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_).getMaterial() == Material.water)
-            {
-                p_149674_1_.setBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_, Blocks.stone);
-                this.func_149799_m(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_);
-                return;
-            }
+            if (p_149674_1_.getType(p_149674_2_, p_149674_3_, p_149674_4_).getMaterial() != this.blockMaterial) { return; } // PaperSpigot - Stop updating flowing block if material has changed
+            // CraftBukkit start - Send "down" to the server
+            BlockFromToEvent event = new BlockFromToEvent(source, BlockFace.DOWN);
 
-            if (l >= 8)
+            if (server != null)
             {
-                this.func_149813_h(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_, l);
+                server.getPluginManager().callEvent(event);
             }
-            else
+
+            if (!event.isCancelled())
             {
-                this.func_149813_h(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_, l + 8);
+                if (this.blockMaterial == Material.lava && p_149674_1_.getBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_).getMaterial() == Material.water)
+                {
+                    p_149674_1_.setBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_, Blocks.stone);
+                    this.func_149799_m(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_);
+                    return;
+                }
+
+                if (l >= 8)
+                {
+                    this.func_149813_h(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_, l);
+                }
+                else
+                {
+                    this.func_149813_h(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_, l + 8);
+                }
             }
+
+            // CraftBukkit end
         }
         else if (l >= 0 && (l == 0 || this.func_149807_p(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_)))
         {
@@ -144,25 +181,31 @@ public class BlockDynamicLiquid extends BlockLiquid
                 return;
             }
 
-            if (aboolean[0])
-            {
-                this.func_149813_h(p_149674_1_, p_149674_2_ - 1, p_149674_3_, p_149674_4_, j1);
-            }
+            // CraftBukkit start - All four cardinal directions. Do not change the order!
+            BlockFace[] faces = new BlockFace[] { BlockFace.WEST, BlockFace.EAST, BlockFace.NORTH, BlockFace.SOUTH };
+            int index = 0;
 
-            if (aboolean[1])
+            for (BlockFace currentFace : faces)
             {
-                this.func_149813_h(p_149674_1_, p_149674_2_ + 1, p_149674_3_, p_149674_4_, j1);
-            }
+                if (aboolean[index])
+                {
+                    BlockFromToEvent event = new BlockFromToEvent(source, currentFace);
 
-            if (aboolean[2])
-            {
-                this.func_149813_h(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_ - 1, j1);
-            }
+                    if (server != null)
+                    {
+                        server.getPluginManager().callEvent(event);
+                    }
 
-            if (aboolean[3])
-            {
-                this.func_149813_h(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_ + 1, j1);
+                    if (!event.isCancelled())
+                    {
+                        this.func_149813_h(p_149674_1_, p_149674_2_ + currentFace.getModX(), p_149674_3_, p_149674_4_ + currentFace.getModZ(), j1);
+                    }
+                }
+
+                index++;
             }
+
+            // CraftBukkit end
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockEndPortal.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockEndPortal.java
index 45cacfb..e937487 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockEndPortal.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockEndPortal.java
@@ -15,6 +15,8 @@ import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityPortalEnterEvent; // CraftBukkit
+
 public class BlockEndPortal extends BlockContainer
 {
     public static boolean field_149948_a;
@@ -64,6 +66,10 @@ public class BlockEndPortal extends BlockContainer
     {
         if (p_149670_5_.ridingEntity == null && p_149670_5_.riddenByEntity == null && !p_149670_1_.isRemote)
         {
+            // CraftBukkit start - Entity in portal
+            EntityPortalEnterEvent event = new EntityPortalEnterEvent(p_149670_5_.getBukkitEntity(), new org.bukkit.Location(p_149670_1_.getWorld(), p_149670_2_, p_149670_3_, p_149670_4_));
+            p_149670_1_.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
             p_149670_5_.travelToDimension(1);
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockFarmland.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockFarmland.java
index f5adcfb..aead330 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockFarmland.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockFarmland.java
@@ -15,6 +15,11 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.IPlantable;
 import net.minecraftforge.common.util.ForgeDirection;
 
+// CraftBukkit start
+import org.bukkit.event.entity.EntityInteractEvent;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
+
 public class BlockFarmland extends Block
 {
     @SideOnly(Side.CLIENT)
@@ -64,6 +69,15 @@ public class BlockFarmland extends Block
             }
             else if (!this.func_149822_e(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_))
             {
+                // CraftBukkit start
+                org.bukkit.block.Block block = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+
+                if (CraftEventFactory.callBlockFadeEvent(block, Blocks.dirt).isCancelled())
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.dirt);
             }
         }
@@ -82,6 +96,26 @@ public class BlockFarmland extends Block
                 return;
             }
 
+            // CraftBukkit start - Interact soil
+            // Cauldron start - validate data before sending event
+            org.bukkit.event.Cancellable cancellable = null;
+
+            if (p_149746_5_ instanceof EntityPlayer)
+            {
+                cancellable = CraftEventFactory.callPlayerInteractEvent((EntityPlayer) p_149746_5_, org.bukkit.event.block.Action.PHYSICAL, p_149746_2_, p_149746_3_, p_149746_4_, -1, null);
+            }
+            else if (p_149746_1_.getWorld() != null && p_149746_5_ != null)
+            {
+                cancellable = new EntityInteractEvent(p_149746_5_.getBukkitEntity(), p_149746_1_.getWorld().getBlockAt(p_149746_2_, p_149746_3_, p_149746_4_));
+                p_149746_1_.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+            }
+
+            if (cancellable != null && cancellable.isCancelled())
+            {
+                return;
+            }
+            // Cauldron end
+            // CraftBukkit end
             p_149746_1_.setBlock(p_149746_2_, p_149746_3_, p_149746_4_, Blocks.dirt);
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockFire.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockFire.java
index ad5c214..fc96b63 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockFire.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockFire.java
@@ -17,6 +17,11 @@ import net.minecraft.world.World;
 import net.minecraft.world.WorldProviderEnd;
 import net.minecraftforge.common.util.ForgeDirection;
 import static net.minecraftforge.common.util.ForgeDirection.*;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockBurnEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+// CraftBukkit end
 
 public class BlockFire extends Block
 {
@@ -105,12 +110,12 @@ public class BlockFire extends Block
 
             if (!this.canPlaceBlockAt(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_))
             {
-                p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_);
+                if (!CraftEventFactory.callBlockFadeEvent(p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), Blocks.air).isCancelled()) { p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_); } // CraftBukkit - invalid place location
             }
 
             if (!flag && p_149674_1_.isRaining() && (p_149674_1_.canLightningStrikeAt(p_149674_2_, p_149674_3_, p_149674_4_) || p_149674_1_.canLightningStrikeAt(p_149674_2_ - 1, p_149674_3_, p_149674_4_) || p_149674_1_.canLightningStrikeAt(p_149674_2_ + 1, p_149674_3_, p_149674_4_) || p_149674_1_.canLightningStrikeAt(p_149674_2_, p_149674_3_, p_149674_4_ - 1) || p_149674_1_.canLightningStrikeAt(p_149674_2_, p_149674_3_, p_149674_4_ + 1)))
             {
-                p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_);
+                if (!CraftEventFactory.callBlockFadeEvent(p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), Blocks.air).isCancelled()) { p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_); } // CraftBukkit - extinguished by rain
             }
             else
             {
@@ -127,12 +132,12 @@ public class BlockFire extends Block
                 {
                     if (!World.doesBlockHaveSolidTopSurface(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_) || l > 3)
                     {
-                        p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_);
+                        if (!CraftEventFactory.callBlockFadeEvent(p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), Blocks.air).isCancelled()) { p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_); } // CraftBukkit - burn out of inflammable block
                     }
                 }
                 else if (!flag && !this.canCatchFire(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_, UP) && l == 15 && p_149674_5_.nextInt(4) == 0)
                 {
-                    p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_);
+                    if (!CraftEventFactory.callBlockFadeEvent(p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), Blocks.air).isCancelled()) { p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_); } // CraftBukkit - burn out
                 }
                 else
                 {
@@ -186,7 +191,30 @@ public class BlockFire extends Block
                                                 k2 = 15;
                                             }
 
-                                            p_149674_1_.setBlock(i1, k1, j1, this, k2, 3);
+                                            // CraftBukkit start - Call to stop spread of fire
+                                            if (p_149674_1_.getBlock(i1, k1, j1) != Blocks.fire)
+                                            {
+                                                if (CraftEventFactory.callBlockIgniteEvent(p_149674_1_, i1, k1, j1, p_149674_2_, p_149674_3_, p_149674_4_).isCancelled())
+                                                {
+                                                    continue;
+                                                }
+
+                                                org.bukkit.Server server = p_149674_1_.getServer();
+                                                org.bukkit.World bworld = p_149674_1_.getWorld();
+                                                org.bukkit.block.BlockState blockState = bworld.getBlockAt(i1, k1, j1).getState();
+                                                blockState.setTypeId(Block.getIdFromBlock(this));
+                                                blockState.setData(new org.bukkit.material.MaterialData(Block.getIdFromBlock(this), (byte) k2));
+                                                BlockSpreadEvent spreadEvent = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), blockState);
+                                                server.getPluginManager().callEvent(spreadEvent);
+
+                                                if (!spreadEvent.isCancelled())
+                                                {
+                                                    p_149674_1_.setBlock(i1, k1, j1, ((org.bukkit.craftbukkit.block.CraftBlock)blockState.getBlock()).getNMSBlock(), blockState.getRawData(), 3); // KCauldron - DragonAPI uses this call
+                                                    blockState.update(true);
+                                                }
+                                            }
+
+                                            // CraftBukkit end
                                         }
                                     }
                                 }
@@ -216,6 +244,17 @@ public class BlockFire extends Block
         if (p_149841_6_.nextInt(p_149841_5_) < j1)
         {
             boolean flag = p_149841_1_.getBlock(p_149841_2_, p_149841_3_, p_149841_4_) == Blocks.tnt;
+            // CraftBukkit start
+            org.bukkit.block.Block theBlock = p_149841_1_.getWorld().getBlockAt(p_149841_2_, p_149841_3_, p_149841_4_);
+            BlockBurnEvent event = new BlockBurnEvent(theBlock);
+            p_149841_1_.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+
+            // CraftBukkit end
 
             if (p_149841_6_.nextInt(p_149841_7_ + 10) < 5 && !p_149841_1_.canLightningStrikeAt(p_149841_2_, p_149841_3_, p_149841_4_))
             {
@@ -297,17 +336,17 @@ public class BlockFire extends Block
     {
         if (!World.doesBlockHaveSolidTopSurface(p_149695_1_, p_149695_2_, p_149695_3_ - 1, p_149695_4_) && !this.canNeighborBurn(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_))
         {
-            p_149695_1_.setBlockToAir(p_149695_2_, p_149695_3_, p_149695_4_);
+            if (!CraftEventFactory.callBlockFadeEvent(p_149695_1_.getWorld().getBlockAt(p_149695_2_, p_149695_3_, p_149695_4_), Blocks.air).isCancelled()) { p_149695_1_.setBlockToAir(p_149695_2_, p_149695_3_, p_149695_4_); } // CraftBukkit - fuel block gone
         }
     }
 
     public void onBlockAdded(World p_149726_1_, int p_149726_2_, int p_149726_3_, int p_149726_4_)
     {
-        if (p_149726_1_.provider.dimensionId > 0 || !Blocks.portal.func_150000_e(p_149726_1_, p_149726_2_, p_149726_3_, p_149726_4_))
+        if (!net.minecraft.server.MinecraftServer.kcauldronConfig.commonAllowNetherPortal.getValue() && p_149726_1_.provider.dimensionId > 0 || !Blocks.portal.func_150000_e(p_149726_1_, p_149726_2_, p_149726_3_, p_149726_4_))
         {
             if (!World.doesBlockHaveSolidTopSurface(p_149726_1_, p_149726_2_, p_149726_3_ - 1, p_149726_4_) && !this.canNeighborBurn(p_149726_1_, p_149726_2_, p_149726_3_, p_149726_4_))
             {
-                p_149726_1_.setBlockToAir(p_149726_2_, p_149726_3_, p_149726_4_);
+                if (!CraftEventFactory.callBlockFadeEvent(p_149726_1_.getWorld().getBlockAt(p_149726_2_, p_149726_3_, p_149726_4_), Blocks.air).isCancelled()) { p_149726_1_.setBlockToAir(p_149726_2_, p_149726_3_, p_149726_4_); } // CraftBukkit - fuel block broke
             }
             else
             {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockGrass.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockGrass.java
index 681c491..6e8e5b9 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockGrass.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockGrass.java
@@ -15,6 +15,12 @@ import net.minecraft.world.World;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import org.bukkit.block.BlockState;
+import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.event.block.BlockFadeEvent;
+// CraftBukkit end
+
 public class BlockGrass extends Block implements IGrowable
 {
     private static final Logger logger = LogManager.getLogger();
@@ -45,11 +51,25 @@ public class BlockGrass extends Block implements IGrowable
         {
             if (p_149674_1_.getBlockLightValue(p_149674_2_, p_149674_3_ + 1, p_149674_4_) < 4 && p_149674_1_.getBlockLightOpacity(p_149674_2_, p_149674_3_ + 1, p_149674_4_) > 2)
             {
-                p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.dirt);
+                // CraftBukkit start
+                org.bukkit.World bworld = p_149674_1_.getWorld();
+                BlockState blockState = bworld.getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_).getState();
+                blockState.setTypeId(Block.getIdFromBlock(Blocks.dirt));
+                BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
+                p_149674_1_.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    blockState.update(true);
+                }
+
+                // CraftBukkit end
             }
             else if (p_149674_1_.getBlockLightValue(p_149674_2_, p_149674_3_ + 1, p_149674_4_) >= 9)
             {
-                for (int l = 0; l < 4; ++l)
+                int numGrowth = Math.min(4, Math.max(20, (int)(4 * 100F / p_149674_1_.growthOdds)));  // Spigot
+
+                for (int l = 0; l < numGrowth; ++l)   // Spigot
                 {
                     int i1 = p_149674_2_ + p_149674_5_.nextInt(3) - 1;
                     int j1 = p_149674_3_ + p_149674_5_.nextInt(5) - 3;
@@ -58,7 +78,19 @@ public class BlockGrass extends Block implements IGrowable
 
                     if (p_149674_1_.getBlock(i1, j1, k1) == Blocks.dirt && p_149674_1_.getBlockMetadata(i1, j1, k1) == 0 && p_149674_1_.getBlockLightValue(i1, j1 + 1, k1) >= 4 && p_149674_1_.getBlockLightOpacity(i1, j1 + 1, k1) <= 2)
                     {
-                        p_149674_1_.setBlock(i1, j1, k1, Blocks.grass);
+                        // CraftBukkit start
+                        org.bukkit.World bworld = p_149674_1_.getWorld();
+                        BlockState blockState = bworld.getBlockAt(i1, j1, k1).getState();
+                        blockState.setTypeId(Block.getIdFromBlock(Blocks.grass));
+                        BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), blockState);
+                        p_149674_1_.getServer().getPluginManager().callEvent(event);
+
+                        if (!event.isCancelled())
+                        {
+                            blockState.update(true);
+                        }
+
+                        // CraftBukkit end
                     }
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockHopper.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockHopper.java
index cee2fd1..d6e6b96 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockHopper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockHopper.java
@@ -22,6 +22,7 @@ import net.minecraft.util.Facing;
 import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+import net.minecraft.inventory.IInventory; // CraftBukkit
 
 public class BlockHopper extends BlockContainer
 {
@@ -210,7 +211,7 @@ public class BlockHopper extends BlockContainer
 
     public static int getDirectionFromMetadata(int p_149918_0_)
     {
-        return p_149918_0_ & 7;
+        return Math.min(p_149918_0_ & 7, 5); // CraftBukkit - Fix AIOOBE in callers
     }
 
     public static boolean func_149917_c(int p_149917_0_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockIce.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockIce.java
index 8f9f188..5703905 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockIce.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockIce.java
@@ -86,6 +86,14 @@ public class BlockIce extends BlockBreakable
     {
         if (p_149674_1_.getSavedLightValue(EnumSkyBlock.Block, p_149674_2_, p_149674_3_, p_149674_4_) > 11 - this.getLightOpacity())
         {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), Blocks.water).isCancelled())
+            {
+                return;
+            }
+
+            // CraftBukkit end
+
             if (p_149674_1_.provider.isHellWorld)
             {
                 p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockJukebox.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockJukebox.java
index 35b41b8..b343b72 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockJukebox.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockJukebox.java
@@ -163,8 +163,23 @@ public class BlockJukebox extends BlockContainer
 
             public void func_145857_a(ItemStack p_145857_1_)
             {
+                // CraftBukkit start - There can only be one
+                if (p_145857_1_ != null)
+                {
+                    p_145857_1_.stackSize = 1;
+                }
+
+                // CraftBukkit end
                 this.field_145858_a = p_145857_1_;
                 this.markDirty();
             }
+
+            // Cauldron start
+            @Override
+            public boolean canUpdate()
+            {
+                return false;
+            }
+            // Cauldron end
         }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockLeaves.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockLeaves.java
index 1f70587..3294822 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockLeaves.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockLeaves.java
@@ -18,6 +18,8 @@ import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraftforge.common.IShearable;
 
+import org.bukkit.event.block.LeavesDecayEvent; // CraftBukkit
+
 public abstract class BlockLeaves extends BlockLeavesBase implements IShearable
 {
     int[] field_150128_a;
@@ -222,6 +224,16 @@ public abstract class BlockLeaves extends BlockLeavesBase implements IShearable
 
     private void removeLeaves(World p_150126_1_, int p_150126_2_, int p_150126_3_, int p_150126_4_)
     {
+        // CraftBukkit start
+        LeavesDecayEvent event = new LeavesDecayEvent(p_150126_1_.getWorld().getBlockAt(p_150126_2_, p_150126_3_, p_150126_4_));
+        p_150126_1_.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled())
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.dropBlockAsItem(p_150126_1_, p_150126_2_, p_150126_3_, p_150126_4_, p_150126_1_.getBlockMetadata(p_150126_2_, p_150126_3_, p_150126_4_), 0);
         p_150126_1_.setBlockToAir(p_150126_2_, p_150126_3_, p_150126_4_);
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockLever.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockLever.java
index 8ecce96..185a175 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockLever.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockLever.java
@@ -13,6 +13,8 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.util.ForgeDirection;
 import static net.minecraftforge.common.util.ForgeDirection.*;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockLever extends Block
 {
     private static final String __OBFID = "CL_00000264";
@@ -270,6 +272,19 @@ public class BlockLever extends Block
             int i1 = p_149727_1_.getBlockMetadata(p_149727_2_, p_149727_3_, p_149727_4_);
             int j1 = i1 & 7;
             int k1 = 8 - (i1 & 8);
+            // CraftBukkit start - Interact Lever
+            org.bukkit.block.Block block = p_149727_1_.getWorld().getBlockAt(p_149727_2_, p_149727_3_, p_149727_4_);
+            int old = (k1 != 8) ? 15 : 0;
+            int current = (k1 == 8) ? 15 : 0;
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+            p_149727_1_.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if ((eventRedstone.getNewCurrent() > 0) != (k1 == 8))
+            {
+                return true;
+            }
+
+            // CraftBukkit end
             p_149727_1_.setBlockMetadataWithNotify(p_149727_2_, p_149727_3_, p_149727_4_, j1 + k1, 3);
             p_149727_1_.playSoundEffect((double)p_149727_2_ + 0.5D, (double)p_149727_3_ + 0.5D, (double)p_149727_4_ + 0.5D, "random.click", 0.3F, k1 > 0 ? 0.6F : 0.5F);
             p_149727_1_.notifyBlocksOfNeighborChange(p_149727_2_, p_149727_3_, p_149727_4_, this);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockLiquid.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockLiquid.java
index 8aeef26..85dec5f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockLiquid.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockLiquid.java
@@ -509,7 +509,7 @@ public abstract class BlockLiquid extends Block
                     {
                         p_149805_1_.setBlock(p_149805_2_, p_149805_3_, p_149805_4_, Blocks.obsidian);
                     }
-                    else if (l <= 4)
+                    else if (l > 0)
                     {
                         p_149805_1_.setBlock(p_149805_2_, p_149805_3_, p_149805_4_, Blocks.cobblestone);
                     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockMushroom.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockMushroom.java
index 87ada3b..8442120 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockMushroom.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockMushroom.java
@@ -6,6 +6,12 @@ import net.minecraft.world.World;
 import net.minecraft.world.gen.feature.WorldGenBigMushroom;
 import net.minecraftforge.common.util.ForgeDirection;
 
+// CraftBukkit start
+import org.bukkit.block.BlockState;
+import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.TreeType;
+// CraftBukkit end
+
 public class BlockMushroom extends BlockBush implements IGrowable
 {
     private static final String __OBFID = "CL_00000272";
@@ -19,7 +25,9 @@ public class BlockMushroom extends BlockBush implements IGrowable
 
     public void updateTick(World p_149674_1_, int p_149674_2_, int p_149674_3_, int p_149674_4_, Random p_149674_5_)
     {
-        if (p_149674_5_.nextInt(25) == 0)
+        final int sourceX = p_149674_2_, sourceY = p_149674_3_, sourceZ = p_149674_4_; // CraftBukkit
+
+        if (p_149674_5_.nextInt(Math.max(1, (int) p_149674_1_.growthOdds / p_149674_1_.getSpigotConfig().mushroomModifier * 25)) == 0)   // Spigot // Cauldron
         {
             byte b0 = 4;
             int l = 5;
@@ -66,7 +74,19 @@ public class BlockMushroom extends BlockBush implements IGrowable
 
             if (p_149674_1_.isAirBlock(i1, j1, k1) && this.canBlockStay(p_149674_1_, i1, j1, k1))
             {
-                p_149674_1_.setBlock(i1, j1, k1, this, 0, 2);
+                // CraftBukkit start
+                org.bukkit.World bworld = p_149674_1_.getWorld();
+                BlockState blockState = bworld.getBlockAt(i1, j1, k1).getState();
+                blockState.setTypeId(Block.getIdFromBlock(this)); // nms: this.id, 0, 2
+                BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(sourceX, sourceY, sourceZ), blockState);
+                p_149674_1_.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    blockState.update(true);
+                }
+
+                // CraftBukkit end
             }
         }
     }
@@ -102,10 +122,12 @@ public class BlockMushroom extends BlockBush implements IGrowable
 
         if (this == Blocks.brown_mushroom)
         {
+            BlockSapling.treeType = TreeType.BROWN_MUSHROOM; // CraftBukkit
             worldgenbigmushroom = new WorldGenBigMushroom(0);
         }
         else if (this == Blocks.red_mushroom)
         {
+            BlockSapling.treeType = TreeType.RED_MUSHROOM; // CraftBukkit
             worldgenbigmushroom = new WorldGenBigMushroom(1);
         }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockMycelium.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockMycelium.java
index d2ad1b1..40fb0e0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockMycelium.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockMycelium.java
@@ -12,6 +12,12 @@ import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.block.BlockState;
+import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+// CraftBukkit end
+
 public class BlockMycelium extends Block
 {
     @SideOnly(Side.CLIENT)
@@ -39,11 +45,25 @@ public class BlockMycelium extends Block
         {
             if (p_149674_1_.getBlockLightValue(p_149674_2_, p_149674_3_ + 1, p_149674_4_) < 4 && p_149674_1_.getBlockLightOpacity(p_149674_2_, p_149674_3_ + 1, p_149674_4_) > 2)
             {
-                p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.dirt);
+                // CraftBukkit start
+                org.bukkit.World bworld = p_149674_1_.getWorld();
+                BlockState blockState = bworld.getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_).getState();
+                blockState.setTypeId(Block.getIdFromBlock(Blocks.dirt));
+                BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
+                p_149674_1_.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    blockState.update(true);
+                }
+
+                // CraftBukkit end
             }
             else if (p_149674_1_.getBlockLightValue(p_149674_2_, p_149674_3_ + 1, p_149674_4_) >= 9)
             {
-                for (int l = 0; l < 4; ++l)
+                int numGrowth = Math.min(4, Math.max(20, (int)(4 * 100F / p_149674_1_.growthOdds)));  // Spigot
+
+                for (int l = 0; l < numGrowth; ++l)   // Spigot
                 {
                     int i1 = p_149674_2_ + p_149674_5_.nextInt(3) - 1;
                     int j1 = p_149674_3_ + p_149674_5_.nextInt(5) - 3;
@@ -52,7 +72,19 @@ public class BlockMycelium extends Block
 
                     if (p_149674_1_.getBlock(i1, j1, k1) == Blocks.dirt && p_149674_1_.getBlockMetadata(i1, j1, k1) == 0 && p_149674_1_.getBlockLightValue(i1, j1 + 1, k1) >= 4 && p_149674_1_.getBlockLightOpacity(i1, j1 + 1, k1) <= 2)
                     {
-                        p_149674_1_.setBlock(i1, j1, k1, this);
+                        // CraftBukkit start
+                        org.bukkit.World bworld = p_149674_1_.getWorld();
+                        BlockState blockState = bworld.getBlockAt(i1, j1, k1).getState();
+                        blockState.setTypeId(Block.getIdFromBlock(this));
+                        BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), blockState);
+                        p_149674_1_.getServer().getPluginManager().callEvent(event);
+
+                        if (!event.isCancelled())
+                        {
+                            blockState.update(true);
+                        }
+
+                        // CraftBukkit end
                     }
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockNetherWart.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockNetherWart.java
index 13e4c08..49ff5ac 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockNetherWart.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockNetherWart.java
@@ -45,7 +45,7 @@ public class BlockNetherWart extends BlockBush
         if (l < 3 && p_149674_5_.nextInt(10) == 0)
         {
             ++l;
-            p_149674_1_.setBlockMetadataWithNotify(p_149674_2_, p_149674_3_, p_149674_4_, l, 2);
+            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, this, l); // CraftBukkit
         }
 
         super.updateTick(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, p_149674_5_);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockNetherrack.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockNetherrack.java
index 0d6a08f..1f842a4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockNetherrack.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockNetherrack.java
@@ -4,6 +4,11 @@ import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.creativetab.CreativeTabs;
 
+// CraftBukkit start
+import org.bukkit.event.block.BlockRedstoneEvent;
+import net.minecraft.world.World;
+// CraftBukkit end
+
 public class BlockNetherrack extends Block
 {
     private static final String __OBFID = "CL_00000275";
@@ -18,4 +23,17 @@ public class BlockNetherrack extends Block
     {
         return MapColor.netherrackColor;
     }
+
+    // CraftBukkit start
+    public void doPhysics(World world, int i, int j, int k, int l)
+    {
+        if (Block.getBlockById(l) != null && Block.getBlockById(l).canProvidePower())
+        {
+            org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+            int power = block.getBlockPower();
+            BlockRedstoneEvent event = new BlockRedstoneEvent(block, power, power);
+            world.getServer().getPluginManager().callEvent(event);
+        }
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPistonBase.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPistonBase.java
index 01c6fb0..b5872e1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPistonBase.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPistonBase.java
@@ -21,6 +21,12 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockPistonRetractEvent;
+import org.bukkit.event.block.BlockPistonExtendEvent;
+// CraftBukkit end
+
 public class BlockPistonBase extends Block
 {
     private final boolean isSticky;
@@ -128,13 +134,37 @@ public class BlockPistonBase extends Block
 
             if (flag && !isExtended(l))
             {
-                if (canExtend(p_150078_1_, p_150078_2_, p_150078_3_, p_150078_4_, i1))
+                // CraftBukkit start
+                int length = canExtend_IntCB(p_150078_1_, p_150078_2_, p_150078_3_, p_150078_4_, i1);
+
+                if (length >= 0)
                 {
+                    org.bukkit.block.Block block = p_150078_1_.getWorld().getBlockAt(p_150078_2_, p_150078_3_, p_150078_4_);
+                    BlockPistonExtendEvent event = new BlockPistonExtendEvent(block, length, CraftBlock.notchToBlockFace(i1));
+                    p_150078_1_.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        return;
+                    }
+
+                    // CraftBukkit end
                     p_150078_1_.addBlockEvent(p_150078_2_, p_150078_3_, p_150078_4_, this, 0, i1);
                 }
             }
             else if (!flag && isExtended(l))
             {
+                // CraftBukkit start
+                org.bukkit.block.Block block = p_150078_1_.getWorld().getBlockAt(p_150078_2_, p_150078_3_, p_150078_4_);
+                BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, CraftBlock.notchToBlockFace(i1));
+                p_150078_1_.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 p_150078_1_.setBlockMetadataWithNotify(p_150078_2_, p_150078_3_, p_150078_4_, i1, 2);
                 p_150078_1_.addBlockEvent(p_150078_2_, p_150078_3_, p_150078_4_, this, 1, i1);
             }
@@ -297,6 +327,11 @@ public class BlockPistonBase extends Block
 
     public static int getPistonOrientation(int p_150076_0_)
     {
+        if ((p_150076_0_ & 7) >= Facing.oppositeSide.length)
+        {
+            return 7;    // CraftBukkit - check for AIOOB on piston data
+        }
+
         return p_150076_0_ & 7;
     }
 
@@ -366,7 +401,13 @@ public class BlockPistonBase extends Block
         }
     }
 
-    private static boolean canExtend(World p_150077_0_, int p_150077_1_, int p_150077_2_, int p_150077_3_, int p_150077_4_)
+    // Cauldron start - vanilla compatibility
+    private static boolean canExtend(World world, int i, int j, int k, int l) {
+        return canExtend_IntCB(world, i, j, k, l) >= 0;
+    }
+    // Cauldron end
+
+    private static int canExtend_IntCB(World p_150077_0_, int p_150077_1_, int p_150077_2_, int p_150077_3_, int p_150077_4_) // CraftBukkit int -> boolean
     {
         int i1 = p_150077_1_ + Facing.offsetsXForSide[p_150077_4_];
         int j1 = p_150077_2_ + Facing.offsetsYForSide[p_150077_4_];
@@ -379,7 +420,7 @@ public class BlockPistonBase extends Block
             {
                 if (j1 <= 0 || j1 >= p_150077_0_.getHeight())
                 {
-                    return false;
+                    return -1; // CraftBukkit
                 }
 
                 Block block = p_150077_0_.getBlock(i1, j1, k1);
@@ -388,14 +429,14 @@ public class BlockPistonBase extends Block
                 {
                     if (!canPushBlock(block, p_150077_0_, i1, j1, k1, true))
                     {
-                        return false;
+                        return -1; // CraftBukkit
                     }
 
                     if (block.getMobilityFlag() != 1)
                     {
                         if (l1 == 12)
                         {
-                            return false;
+                            return -1; // CraftBukkit
                         }
 
                         i1 += Facing.offsetsXForSide[p_150077_4_];
@@ -407,7 +448,7 @@ public class BlockPistonBase extends Block
                 }
             }
 
-            return true;
+            return l1; // CraftBukkit
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPistonExtension.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPistonExtension.java
index f221ee3..5502f82 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPistonExtension.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPistonExtension.java
@@ -55,6 +55,12 @@ public class BlockPistonExtension extends Block
     public void breakBlock(World p_149749_1_, int p_149749_2_, int p_149749_3_, int p_149749_4_, Block p_149749_5_, int p_149749_6_)
     {
         super.breakBlock(p_149749_1_, p_149749_2_, p_149749_3_, p_149749_4_, p_149749_5_, p_149749_6_);
+
+        if ((p_149749_6_ & 7) >= Facing.oppositeSide.length)
+        {
+            return;    // CraftBukkit - fix a piston AIOOBE issue
+        }
+
         int i1 = Facing.oppositeSide[getDirectionMeta(p_149749_6_)];
         p_149749_2_ += Facing.offsetsXForSide[i1];
         p_149749_3_ += Facing.offsetsYForSide[i1];
@@ -200,6 +206,12 @@ public class BlockPistonExtension extends Block
     public void onNeighborBlockChange(World p_149695_1_, int p_149695_2_, int p_149695_3_, int p_149695_4_, Block p_149695_5_)
     {
         int l = getDirectionMeta(p_149695_1_.getBlockMetadata(p_149695_2_, p_149695_3_, p_149695_4_));
+
+        if ((l & 7) >= Facing.oppositeSide.length)
+        {
+            return;    // CraftBukkit - fix a piston AIOOBE issue
+        }
+
         Block block1 = p_149695_1_.getBlock(p_149695_2_ - Facing.offsetsXForSide[l], p_149695_3_ - Facing.offsetsYForSide[l], p_149695_4_ - Facing.offsetsZForSide[l]);
 
         if (block1 != Blocks.piston && block1 != Blocks.sticky_piston)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPortal.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPortal.java
index 8066ec8..10f3105 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPortal.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPortal.java
@@ -14,6 +14,11 @@ import net.minecraft.util.Direction;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.event.entity.EntityPortalEnterEvent;
+import org.bukkit.event.world.PortalCreateEvent;
+// CraftBukkit end
+
 public class BlockPortal extends BlockBreakable
 {
     public static final int[][] field_150001_a = new int[][] {new int[0], {3, 1}, {2, 0}};
@@ -29,7 +34,7 @@ public class BlockPortal extends BlockBreakable
     {
         super.updateTick(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, p_149674_5_);
 
-        if (p_149674_1_.provider.isSurfaceWorld() && p_149674_1_.getGameRules().getGameRuleBooleanValue("doMobSpawning") && p_149674_5_.nextInt(2000) < p_149674_1_.difficultySetting.getDifficultyId())
+        if (p_149674_1_.getSpigotConfig().enableZombiePigmenPortalSpawns && p_149674_1_.provider.isSurfaceWorld() && p_149674_1_.getGameRules().getGameRuleBooleanValue("doMobSpawning") && p_149674_5_.nextInt(2000) < p_149674_1_.difficultySetting.getDifficultyId())   // Spigot // Cauldron
         {
             int l;
 
@@ -104,13 +109,15 @@ public class BlockPortal extends BlockBreakable
 
         if (size.func_150860_b() && size.field_150864_e == 0)
         {
-            size.func_150859_c();
-            return true;
+            // CraftBukkit start - return portalcreator
+            return size.CB_func_150859_c(); // Cauldron
+            //return true;
         }
         else if (size1.func_150860_b() && size1.field_150864_e == 0)
         {
-            size1.func_150859_c();
-            return true;
+            return size1.CB_func_150859_c(); // Cauldron
+            //return true;
+            // CraftBukkit end
         }
         else
         {
@@ -181,6 +188,10 @@ public class BlockPortal extends BlockBreakable
     {
         if (p_149670_5_.ridingEntity == null && p_149670_5_.riddenByEntity == null)
         {
+            // CraftBukkit start - Entity in portal
+            EntityPortalEnterEvent event = new EntityPortalEnterEvent(p_149670_5_.getBukkitEntity(), new org.bukkit.Location(p_149670_1_.getWorld(), p_149670_2_, p_149670_3_, p_149670_4_));
+            p_149670_1_.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
             p_149670_5_.setInPortal();
         }
     }
@@ -239,164 +250,210 @@ public class BlockPortal extends BlockBreakable
     }
 
     public static class Size
+    {
+        private final World field_150867_a;
+        private final int field_150865_b;
+        private final int field_150866_c;
+        private final int field_150863_d;
+        private int field_150864_e = 0;
+        private ChunkCoordinates field_150861_f;
+        private int field_150862_g;
+        private int field_150868_h;
+        java.util.Collection<org.bukkit.block.Block> blocks; // CraftBukkit
+        private static final String __OBFID = "CL_00000285";
+
+        public Size(World p_i45415_1_, int p_i45415_2_, int p_i45415_3_, int p_i45415_4_, int p_i45415_5_)
         {
-            private final World field_150867_a;
-            private final int field_150865_b;
-            private final int field_150866_c;
-            private final int field_150863_d;
-            private int field_150864_e = 0;
-            private ChunkCoordinates field_150861_f;
-            private int field_150862_g;
-            private int field_150868_h;
-            private static final String __OBFID = "CL_00000285";
-
-            public Size(World p_i45415_1_, int p_i45415_2_, int p_i45415_3_, int p_i45415_4_, int p_i45415_5_)
+            this.field_150867_a = p_i45415_1_;
+            this.field_150865_b = p_i45415_5_;
+            this.field_150863_d = BlockPortal.field_150001_a[p_i45415_5_][0];
+            this.field_150866_c = BlockPortal.field_150001_a[p_i45415_5_][1];
+
+            for (int i1 = p_i45415_3_; p_i45415_3_ > i1 - 21 && p_i45415_3_ > 0 && this.func_150857_a(p_i45415_1_.getBlock(p_i45415_2_, p_i45415_3_ - 1, p_i45415_4_)); --p_i45415_3_)
+            {
+                ;
+            }
+
+            int j1 = this.func_150853_a(p_i45415_2_, p_i45415_3_, p_i45415_4_, this.field_150863_d) - 1;
+
+            if (j1 >= 0)
             {
-                this.field_150867_a = p_i45415_1_;
-                this.field_150865_b = p_i45415_5_;
-                this.field_150863_d = BlockPortal.field_150001_a[p_i45415_5_][0];
-                this.field_150866_c = BlockPortal.field_150001_a[p_i45415_5_][1];
+                this.field_150861_f = new ChunkCoordinates(p_i45415_2_ + j1 * Direction.offsetX[this.field_150863_d], p_i45415_3_, p_i45415_4_ + j1 * Direction.offsetZ[this.field_150863_d]);
+                this.field_150868_h = this.func_150853_a(this.field_150861_f.posX, this.field_150861_f.posY, this.field_150861_f.posZ, this.field_150866_c);
 
-                for (int i1 = p_i45415_3_; p_i45415_3_ > i1 - 21 && p_i45415_3_ > 0 && this.func_150857_a(p_i45415_1_.getBlock(p_i45415_2_, p_i45415_3_ - 1, p_i45415_4_)); --p_i45415_3_)
+                if (this.field_150868_h < 2 || this.field_150868_h > 21)
                 {
-                    ;
+                    this.field_150861_f = null;
+                    this.field_150868_h = 0;
                 }
+            }
 
-                int j1 = this.func_150853_a(p_i45415_2_, p_i45415_3_, p_i45415_4_, this.field_150863_d) - 1;
+            if (this.field_150861_f != null)
+            {
+                this.field_150862_g = this.func_150858_a();
+            }
+        }
 
-                if (j1 >= 0)
-                {
-                    this.field_150861_f = new ChunkCoordinates(p_i45415_2_ + j1 * Direction.offsetX[this.field_150863_d], p_i45415_3_, p_i45415_4_ + j1 * Direction.offsetZ[this.field_150863_d]);
-                    this.field_150868_h = this.func_150853_a(this.field_150861_f.posX, this.field_150861_f.posY, this.field_150861_f.posZ, this.field_150866_c);
+        protected int func_150853_a(int p_150853_1_, int p_150853_2_, int p_150853_3_, int p_150853_4_)
+        {
+            int j1 = Direction.offsetX[p_150853_4_];
+            int k1 = Direction.offsetZ[p_150853_4_];
+            int i1;
+            Block block;
 
-                    if (this.field_150868_h < 2 || this.field_150868_h > 21)
-                    {
-                        this.field_150861_f = null;
-                        this.field_150868_h = 0;
-                    }
+            for (i1 = 0; i1 < 22; ++i1)
+            {
+                block = this.field_150867_a.getBlock(p_150853_1_ + j1 * i1, p_150853_2_, p_150853_3_ + k1 * i1);
+
+                if (!this.func_150857_a(block))
+                {
+                    break;
                 }
 
-                if (this.field_150861_f != null)
+                Block block1 = this.field_150867_a.getBlock(p_150853_1_ + j1 * i1, p_150853_2_ - 1, p_150853_3_ + k1 * i1);
+
+                if (block1 != Blocks.obsidian)
                 {
-                    this.field_150862_g = this.func_150858_a();
+                    break;
                 }
             }
 
-            protected int func_150853_a(int p_150853_1_, int p_150853_2_, int p_150853_3_, int p_150853_4_)
+            block = this.field_150867_a.getBlock(p_150853_1_ + j1 * i1, p_150853_2_, p_150853_3_ + k1 * i1);
+            return block == Blocks.obsidian ? i1 : 0;
+        }
+
+        protected int func_150858_a()
+        {
+            this.blocks = new java.util.HashSet<org.bukkit.block.Block>(); // CraftBukkit
+            org.bukkit.World bworld = this.field_150867_a.getWorld();
+            int i;
+            int j;
+            int k;
+            int l;
+            label56:
+
+            for (this.field_150862_g = 0; this.field_150862_g < 21; ++this.field_150862_g)
             {
-                int j1 = Direction.offsetX[p_150853_4_];
-                int k1 = Direction.offsetZ[p_150853_4_];
-                int i1;
-                Block block;
+                i = this.field_150861_f.posY + this.field_150862_g;
 
-                for (i1 = 0; i1 < 22; ++i1)
+                for (j = 0; j < this.field_150868_h; ++j)
                 {
-                    block = this.field_150867_a.getBlock(p_150853_1_ + j1 * i1, p_150853_2_, p_150853_3_ + k1 * i1);
+                    k = this.field_150861_f.posX + j * Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]];
+                    l = this.field_150861_f.posZ + j * Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]];
+                    Block block = this.field_150867_a.getBlock(k, i, l);
 
                     if (!this.func_150857_a(block))
                     {
-                        break;
+                        break label56;
                     }
 
-                    Block block1 = this.field_150867_a.getBlock(p_150853_1_ + j1 * i1, p_150853_2_ - 1, p_150853_3_ + k1 * i1);
-
-                    if (block1 != Blocks.obsidian)
+                    if (block == Blocks.portal)
                     {
-                        break;
+                        ++this.field_150864_e;
                     }
-                }
 
-                block = this.field_150867_a.getBlock(p_150853_1_ + j1 * i1, p_150853_2_, p_150853_3_ + k1 * i1);
-                return block == Blocks.obsidian ? i1 : 0;
-            }
-
-            protected int func_150858_a()
-            {
-                int i;
-                int j;
-                int k;
-                int l;
-                label56:
-
-                for (this.field_150862_g = 0; this.field_150862_g < 21; ++this.field_150862_g)
-                {
-                    i = this.field_150861_f.posY + this.field_150862_g;
-
-                    for (j = 0; j < this.field_150868_h; ++j)
+                    if (j == 0)
                     {
-                        k = this.field_150861_f.posX + j * Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]];
-                        l = this.field_150861_f.posZ + j * Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]];
-                        Block block = this.field_150867_a.getBlock(k, i, l);
+                        block = this.field_150867_a.getBlock(k + Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][0]], i, l + Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][0]]);
 
-                        if (!this.func_150857_a(block))
+                        if (block != Blocks.obsidian)
                         {
                             break label56;
+                            // CraftBukkit start - add the block to our list
                         }
-
-                        if (block == Blocks.portal)
+                        else
                         {
-                            ++this.field_150864_e;
+                            blocks.add(bworld.getBlockAt(k + Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][0]], i, l + Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][0]]));
+                            // CraftBukkit end
                         }
+                    }
+                    else if (j == this.field_150868_h - 1)
+                    {
+                        block = this.field_150867_a.getBlock(k + Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]], i, l + Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]]);
 
-                        if (j == 0)
+                        if (block != Blocks.obsidian)
                         {
-                            block = this.field_150867_a.getBlock(k + Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][0]], i, l + Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][0]]);
-
-                            if (block != Blocks.obsidian)
-                            {
-                                break label56;
-                            }
+                            break label56;
+                            // CraftBukkit start - add the block to our list
                         }
-                        else if (j == this.field_150868_h - 1)
+                        else
                         {
-                            block = this.field_150867_a.getBlock(k + Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]], i, l + Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]]);
-
-                            if (block != Blocks.obsidian)
-                            {
-                                break label56;
-                            }
+                            blocks.add(bworld.getBlockAt(k + Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]], i, l + Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]]));
+                            // CraftBukkit end
                         }
                     }
                 }
+            }
 
-                for (i = 0; i < this.field_150868_h; ++i)
-                {
-                    j = this.field_150861_f.posX + i * Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]];
-                    k = this.field_150861_f.posY + this.field_150862_g;
-                    l = this.field_150861_f.posZ + i * Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]];
-
-                    if (this.field_150867_a.getBlock(j, k, l) != Blocks.obsidian)
-                    {
-                        this.field_150862_g = 0;
-                        break;
-                    }
-                }
+            for (i = 0; i < this.field_150868_h; ++i)
+            {
+                j = this.field_150861_f.posX + i * Direction.offsetX[BlockPortal.field_150001_a[this.field_150865_b][1]];
+                k = this.field_150861_f.posY + this.field_150862_g;
+                l = this.field_150861_f.posZ + i * Direction.offsetZ[BlockPortal.field_150001_a[this.field_150865_b][1]];
 
-                if (this.field_150862_g <= 21 && this.field_150862_g >= 3)
-                {
-                    return this.field_150862_g;
-                }
-                else
+                if (this.field_150867_a.getBlock(j, k, l) != Blocks.obsidian)
                 {
-                    this.field_150861_f = null;
-                    this.field_150868_h = 0;
                     this.field_150862_g = 0;
-                    return 0;
+                    break;
                 }
             }
 
-            protected boolean func_150857_a(Block p_150857_1_)
+            if (this.field_150862_g <= 21 && this.field_150862_g >= 3)
             {
-                return p_150857_1_.blockMaterial == Material.air || p_150857_1_ == Blocks.fire || p_150857_1_ == Blocks.portal;
+                return this.field_150862_g;
             }
+            else
+            {
+                this.field_150861_f = null;
+                this.field_150868_h = 0;
+                this.field_150862_g = 0;
+                return 0;
+            }
+        }
 
-            public boolean func_150860_b()
+        protected boolean func_150857_a(Block p_150857_1_)
+        {
+            return p_150857_1_.blockMaterial == Material.air || p_150857_1_ == Blocks.fire || p_150857_1_ == Blocks.portal;
+        }
+
+        public boolean func_150860_b()
+        {
+            return this.field_150861_f != null && this.field_150868_h >= 2 && this.field_150868_h <= 21 && this.field_150862_g >= 3 && this.field_150862_g <= 21;
+        }
+
+        // Cauldron start - vanilla compatibility
+        public void func_150859_c()
+        {
+            this.CB_func_150859_c();
+        }
+        // Cauldron end
+
+        public boolean CB_func_150859_c()
+        {
+            org.bukkit.World bworld = this.field_150867_a.getWorld();
+
+            // Copy below for loop
+            for (int i = 0; i < this.field_150868_h; ++i)
             {
-                return this.field_150861_f != null && this.field_150868_h >= 2 && this.field_150868_h <= 21 && this.field_150862_g >= 3 && this.field_150862_g <= 21;
+                int j = this.field_150861_f.posX + Direction.offsetX[this.field_150866_c] * i;
+                int k = this.field_150861_f.posZ + Direction.offsetZ[this.field_150866_c] * i;
+
+                for (int l = 0; l < this.field_150862_g; ++l)
+                {
+                    int i1 = this.field_150861_f.posY + l;
+                    bworld.getBlockAt(j, i1, k);
+                }
             }
 
-            public void func_150859_c()
+            PortalCreateEvent event = new PortalCreateEvent(blocks, bworld, PortalCreateEvent.CreateReason.FIRE);
+            this.field_150867_a.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
             {
+                return false;
+            }
+                // CraftBukkit end
+    
                 for (int i = 0; i < this.field_150868_h; ++i)
                 {
                     int j = this.field_150861_f.posX + Direction.offsetX[this.field_150866_c] * i;
@@ -408,6 +465,8 @@ public class BlockPortal extends BlockBreakable
                         this.field_150867_a.setBlock(j, i1, k, Blocks.portal, this.field_150865_b, 2);
                     }
                 }
+
+                return true; // CraftBukkit
             }
         }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPressurePlate.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPressurePlate.java
index 0f6f285..e8b66f6 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPressurePlate.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPressurePlate.java
@@ -8,6 +8,8 @@ import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
+
 public class BlockPressurePlate extends BlockBasePressurePlate
 {
     private BlockPressurePlate.Sensitivity field_150069_a;
@@ -54,7 +56,33 @@ public class BlockPressurePlate extends BlockBasePressurePlate
 
             while (iterator.hasNext())
             {
-                Entity entity = (Entity)iterator.next();
+                Entity entity = (Entity) iterator.next();
+
+                // CraftBukkit start - Call interact event when turning on a pressure plate
+                if (this.func_150060_c(p_150065_1_.getBlockMetadata(p_150065_2_, p_150065_3_, p_150065_4_)) == 0)
+                {
+                    org.bukkit.World bworld = p_150065_1_.getWorld();
+                    org.bukkit.plugin.PluginManager manager = p_150065_1_.getServer().getPluginManager();
+                    org.bukkit.event.Cancellable cancellable;
+
+                    if (entity instanceof EntityPlayer)
+                    {
+                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityPlayer) entity, org.bukkit.event.block.Action.PHYSICAL, p_150065_2_, p_150065_3_, p_150065_4_, -1, null);
+                    }
+                    else
+                    {
+                        cancellable = new EntityInteractEvent(entity.getBukkitEntity(), bworld.getBlockAt(p_150065_2_, p_150065_3_, p_150065_4_));
+                        manager.callEvent((EntityInteractEvent) cancellable);
+                    }
+
+                    // We only want to block turning the plate on if all events are cancelled
+                    if (cancellable.isCancelled())
+                    {
+                        continue;
+                    }
+                }
+
+                // CraftBukkit end
 
                 if (!entity.doesEntityNotTriggerPressurePlate())
                 {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPressurePlateWeighted.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPressurePlateWeighted.java
index 023e686..c3c49f7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPressurePlateWeighted.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPressurePlateWeighted.java
@@ -5,6 +5,12 @@ import net.minecraft.entity.Entity;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import java.util.List;
+import net.minecraft.entity.player.EntityPlayer;
+import org.bukkit.event.entity.EntityInteractEvent;
+// CraftBukkit end
+
 public class BlockPressurePlateWeighted extends BlockBasePressurePlate
 {
     private final int field_150068_a;
@@ -18,18 +24,43 @@ public class BlockPressurePlateWeighted extends BlockBasePressurePlate
 
     protected int func_150065_e(World p_150065_1_, int p_150065_2_, int p_150065_3_, int p_150065_4_)
     {
-        int l = Math.min(p_150065_1_.getEntitiesWithinAABB(Entity.class, this.func_150061_a(p_150065_2_, p_150065_3_, p_150065_4_)).size(), this.field_150068_a);
+        // CraftBukkit start
+        int l = 0;
+        java.util.Iterator iterator = p_150065_1_.getEntitiesWithinAABB(Entity.class, this.func_150061_a(p_150065_2_, p_150065_3_, p_150065_4_)).iterator();
 
-        if (l <= 0)
+        while (iterator.hasNext())
         {
-            return 0;
+            Entity entity = (Entity) iterator.next();
+            org.bukkit.event.Cancellable cancellable;
+
+            if (entity instanceof EntityPlayer)
+            {
+                cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityPlayer) entity, org.bukkit.event.block.Action.PHYSICAL, p_150065_2_, p_150065_3_, p_150065_4_, -1, null);
         }
         else
         {
+                cancellable = new EntityInteractEvent(entity.getBukkitEntity(), p_150065_1_.getWorld().getBlockAt(p_150065_2_, p_150065_3_, p_150065_4_));
+                p_150065_1_.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+            }
+
+            // We only want to block turning the plate on if all events are cancelled
+            if (!cancellable.isCancelled())
+            {
+                l++;
+            }
+        }
+
+        l = Math.min(l, this.field_150068_a);
+        // CraftBukkit end
+
+        if (l <= 0)
+        {
+            return 0;
+        }
+
             float f = (float)Math.min(this.field_150068_a, l) / (float)this.field_150068_a;
             return MathHelper.ceiling_float_int(f * 15.0F);
         }
-    }
 
     protected int func_150060_c(int p_150060_1_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPumpkin.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPumpkin.java
index f6f9804..2320470 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockPumpkin.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockPumpkin.java
@@ -14,6 +14,12 @@ import net.minecraft.util.IIcon;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+// CraftBukkit end
+
 public class BlockPumpkin extends BlockDirectional
 {
     private boolean field_149985_a;
@@ -45,15 +51,18 @@ public class BlockPumpkin extends BlockDirectional
         {
             if (!p_149726_1_.isRemote)
             {
-                p_149726_1_.setBlock(p_149726_2_, p_149726_3_, p_149726_4_, getBlockById(0), 0, 2);
-                p_149726_1_.setBlock(p_149726_2_, p_149726_3_ - 1, p_149726_4_, getBlockById(0), 0, 2);
-                p_149726_1_.setBlock(p_149726_2_, p_149726_3_ - 2, p_149726_4_, getBlockById(0), 0, 2);
+                // CraftBukkit start - Use BlockStateListPopulator
+                BlockStateListPopulator blockList = new BlockStateListPopulator(p_149726_1_.getWorld());
+                blockList.setTypeId(p_149726_2_, p_149726_3_, p_149726_4_, 0);
+                blockList.setTypeId(p_149726_2_, p_149726_3_ - 1, p_149726_4_, 0);
+                blockList.setTypeId(p_149726_2_, p_149726_3_ - 2, p_149726_4_, 0);
                 EntitySnowman entitysnowman = new EntitySnowman(p_149726_1_);
-                entitysnowman.setLocationAndAngles((double)p_149726_2_ + 0.5D, (double)p_149726_3_ - 1.95D, (double)p_149726_4_ + 0.5D, 0.0F, 0.0F);
-                p_149726_1_.spawnEntityInWorld(entitysnowman);
-                p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_, p_149726_4_, getBlockById(0));
-                p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_ - 1, p_149726_4_, getBlockById(0));
-                p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_ - 2, p_149726_4_, getBlockById(0));
+                entitysnowman.setLocationAndAngles((double) p_149726_2_ + 0.5D, (double) p_149726_3_ - 1.95D, (double) p_149726_4_ + 0.5D, 0.0F, 0.0F);
+
+                if (p_149726_1_.addEntity(entitysnowman, SpawnReason.BUILD_SNOWMAN))
+                {
+                    blockList.updateList();
+                }
             }
 
             for (int i1 = 0; i1 < 120; ++i1)
@@ -68,45 +77,38 @@ public class BlockPumpkin extends BlockDirectional
 
             if (flag || flag1)
             {
-                p_149726_1_.setBlock(p_149726_2_, p_149726_3_, p_149726_4_, getBlockById(0), 0, 2);
-                p_149726_1_.setBlock(p_149726_2_, p_149726_3_ - 1, p_149726_4_, getBlockById(0), 0, 2);
-                p_149726_1_.setBlock(p_149726_2_, p_149726_3_ - 2, p_149726_4_, getBlockById(0), 0, 2);
+                // CraftBukkit start - Use BlockStateListPopulator
+                BlockStateListPopulator blockList = new BlockStateListPopulator(p_149726_1_.getWorld());
+                blockList.setTypeId(p_149726_2_, p_149726_3_, p_149726_4_, 0);
+                blockList.setTypeId(p_149726_2_, p_149726_3_ - 1, p_149726_4_, 0);
+                blockList.setTypeId(p_149726_2_, p_149726_3_ - 2, p_149726_4_, 0);
 
                 if (flag)
                 {
-                    p_149726_1_.setBlock(p_149726_2_ - 1, p_149726_3_ - 1, p_149726_4_, getBlockById(0), 0, 2);
-                    p_149726_1_.setBlock(p_149726_2_ + 1, p_149726_3_ - 1, p_149726_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeId(p_149726_2_ - 1, p_149726_3_ - 1, p_149726_4_, 0);
+                    blockList.setTypeId(p_149726_2_ + 1, p_149726_3_ - 1, p_149726_4_, 0);
                 }
                 else
                 {
-                    p_149726_1_.setBlock(p_149726_2_, p_149726_3_ - 1, p_149726_4_ - 1, getBlockById(0), 0, 2);
-                    p_149726_1_.setBlock(p_149726_2_, p_149726_3_ - 1, p_149726_4_ + 1, getBlockById(0), 0, 2);
+                    blockList.setTypeId(p_149726_2_, p_149726_3_ - 1, p_149726_4_ - 1, 0);
+                    blockList.setTypeId(p_149726_2_, p_149726_3_ - 1, p_149726_4_ + 1, 0);
                 }
 
                 EntityIronGolem entityirongolem = new EntityIronGolem(p_149726_1_);
                 entityirongolem.setPlayerCreated(true);
-                entityirongolem.setLocationAndAngles((double)p_149726_2_ + 0.5D, (double)p_149726_3_ - 1.95D, (double)p_149726_4_ + 0.5D, 0.0F, 0.0F);
-                p_149726_1_.spawnEntityInWorld(entityirongolem);
+                entityirongolem.setLocationAndAngles((double) p_149726_2_ + 0.5D, (double) p_149726_3_ - 1.95D, (double) p_149726_4_ + 0.5D, 0.0F, 0.0F);
 
-                for (int l = 0; l < 120; ++l)
+                if (p_149726_1_.addEntity(entityirongolem, SpawnReason.BUILD_IRONGOLEM))
                 {
-                    p_149726_1_.spawnParticle("snowballpoof", (double)p_149726_2_ + p_149726_1_.rand.nextDouble(), (double)(p_149726_3_ - 2) + p_149726_1_.rand.nextDouble() * 3.9D, (double)p_149726_4_ + p_149726_1_.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
-                }
+                    for (int i1 = 0; i1 < 120; ++i1)
+                    {
+                        p_149726_1_.spawnParticle("snowballpoof", (double) p_149726_2_ + p_149726_1_.rand.nextDouble(), (double)(p_149726_3_ - 2) + p_149726_1_.rand.nextDouble() * 3.9D, (double) p_149726_4_ + p_149726_1_.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+                    }
 
-                p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_, p_149726_4_, getBlockById(0));
-                p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_ - 1, p_149726_4_, getBlockById(0));
-                p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_ - 2, p_149726_4_, getBlockById(0));
-
-                if (flag)
-                {
-                    p_149726_1_.notifyBlockChange(p_149726_2_ - 1, p_149726_3_ - 1, p_149726_4_, getBlockById(0));
-                    p_149726_1_.notifyBlockChange(p_149726_2_ + 1, p_149726_3_ - 1, p_149726_4_, getBlockById(0));
-                }
-                else
-                {
-                    p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_ - 1, p_149726_4_ - 1, getBlockById(0));
-                    p_149726_1_.notifyBlockChange(p_149726_2_, p_149726_3_ - 1, p_149726_4_ + 1, getBlockById(0));
+                    blockList.updateList();
                 }
+
+                // CraftBukkit end
             }
         }
     }
@@ -122,6 +124,19 @@ public class BlockPumpkin extends BlockDirectional
         p_149689_1_.setBlockMetadataWithNotify(p_149689_2_, p_149689_3_, p_149689_4_, l, 2);
     }
 
+    // CraftBukkit start
+    public void onNeighborBlockChange(World world, int i, int j, int k, Block block)
+    {
+        if (block != null && block.canProvidePower())
+        {
+            org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(i, j, k);
+            int power = bukkitBlock.getBlockPower();
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, power, power);
+            world.getServer().getPluginManager().callEvent(eventRedstone);
+        }
+    }
+    // CraftBukkit end
+
     @SideOnly(Side.CLIENT)
     public void registerBlockIcons(IIconRegister p_149651_1_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRailDetector.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRailDetector.java
index 5954225..9c17286 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRailDetector.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRailDetector.java
@@ -16,6 +16,8 @@ import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockRailDetector extends BlockRailBase
 {
     @SideOnly(Side.CLIENT)
@@ -86,6 +88,17 @@ public class BlockRailDetector extends BlockRailBase
             flag1 = true;
         }
 
+        // CraftBukkit start
+        if (flag != flag1)
+        {
+            org.bukkit.block.Block block = p_150054_1_.getWorld().getBlockAt(p_150054_2_, p_150054_3_, p_150054_4_);
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag ? 15 : 0, flag1 ? 15 : 0);
+            p_150054_1_.getServer().getPluginManager().callEvent(eventRedstone);
+            flag1 = eventRedstone.getNewCurrent() > 0;
+        }
+
+        // CraftBukkit end
+
         if (flag1 && !flag)
         {
             p_150054_1_.setBlockMetadataWithNotify(p_150054_2_, p_150054_3_, p_150054_4_, p_150054_5_ | 8, 3);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneDiode.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneDiode.java
index dcf0c6d..ef971ac 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneDiode.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneDiode.java
@@ -13,6 +13,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public abstract class BlockRedstoneDiode extends BlockDirectional
 {
     protected final boolean isRepeaterPowered;
@@ -44,16 +46,30 @@ public abstract class BlockRedstoneDiode extends BlockDirectional
     {
         int l = p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_);
 
-        if (!this.func_149910_g(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, l))
+        if (!this.func_149910_g((IBlockAccess) p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, l))   // CraftBukkit - Cast world to IBlockAccess to call the right method.
         {
             boolean flag = this.isGettingInput(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, l);
 
             if (this.isRepeaterPowered && !flag)
             {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, 15, 0).getNewCurrent() != 0)
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, this.getBlockUnpowered(), l, 2);
             }
             else if (!this.isRepeaterPowered)
             {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, 0, 15).getNewCurrent() != 15)
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, this.getBlockPowered(), l, 2);
 
                 if (!flag)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneLight.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneLight.java
index 332dd36..4f62282 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneLight.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneLight.java
@@ -9,6 +9,8 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class BlockRedstoneLight extends Block
 {
     private final boolean field_150171_a;
@@ -35,6 +37,13 @@ public class BlockRedstoneLight extends Block
             }
             else if (!this.field_150171_a && p_149726_1_.isBlockIndirectlyGettingPowered(p_149726_2_, p_149726_3_, p_149726_4_))
             {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(p_149726_1_, p_149726_2_, p_149726_3_, p_149726_4_, 0, 15).getNewCurrent() != 15)
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 p_149726_1_.setBlock(p_149726_2_, p_149726_3_, p_149726_4_, Blocks.lit_redstone_lamp, 0, 2);
             }
         }
@@ -50,6 +59,13 @@ public class BlockRedstoneLight extends Block
             }
             else if (!this.field_150171_a && p_149695_1_.isBlockIndirectlyGettingPowered(p_149695_2_, p_149695_3_, p_149695_4_))
             {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_, 0, 15).getNewCurrent() != 15)
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 p_149695_1_.setBlock(p_149695_2_, p_149695_3_, p_149695_4_, Blocks.lit_redstone_lamp, 0, 2);
             }
         }
@@ -59,6 +75,13 @@ public class BlockRedstoneLight extends Block
     {
         if (!p_149674_1_.isRemote && this.field_150171_a && !p_149674_1_.isBlockIndirectlyGettingPowered(p_149674_2_, p_149674_3_, p_149674_4_))
         {
+            // CraftBukkit start
+            if (CraftEventFactory.callRedstoneChange(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, 15, 0).getNewCurrent() != 0)
+            {
+                return;
+            }
+
+            // CraftBukkit end
             p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.redstone_lamp, 0, 2);
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneOre.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneOre.java
index da58173..6f3cf67 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneOre.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneOre.java
@@ -13,6 +13,8 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
+
 public class BlockRedstoneOre extends Block
 {
     private boolean field_150187_a;
@@ -43,8 +45,30 @@ public class BlockRedstoneOre extends Block
 
     public void onEntityWalking(World p_149724_1_, int p_149724_2_, int p_149724_3_, int p_149724_4_, Entity p_149724_5_)
     {
-        this.func_150185_e(p_149724_1_, p_149724_2_, p_149724_3_, p_149724_4_);
-        super.onEntityWalking(p_149724_1_, p_149724_2_, p_149724_3_, p_149724_4_, p_149724_5_);
+        // CraftBukkit start
+        if (p_149724_5_ instanceof EntityPlayer)
+        {
+            org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityPlayer) p_149724_5_, org.bukkit.event.block.Action.PHYSICAL, p_149724_2_, p_149724_3_, p_149724_4_, -1, null);
+
+            if (!event.isCancelled())
+            {
+                this.func_150185_e(p_149724_1_, p_149724_2_, p_149724_3_, p_149724_4_);
+                super.onEntityWalking(p_149724_1_, p_149724_2_, p_149724_3_, p_149724_4_, p_149724_5_);
+            }
+        }
+        else
+        {
+            EntityInteractEvent event = new EntityInteractEvent(p_149724_5_.getBukkitEntity(), p_149724_1_.getWorld().getBlockAt(p_149724_2_, p_149724_3_, p_149724_4_));
+            p_149724_1_.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.func_150185_e(p_149724_1_, p_149724_2_, p_149724_3_, p_149724_4_);
+                super.onEntityWalking(p_149724_1_, p_149724_2_, p_149724_3_, p_149724_4_, p_149724_5_);
+            }
+        }
+
+        // CraftBukkit end
     }
 
     public boolean onBlockActivated(World p_149727_1_, int p_149727_2_, int p_149727_3_, int p_149727_4_, EntityPlayer p_149727_5_, int p_149727_6_, float p_149727_7_, float p_149727_8_, float p_149727_9_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneTorch.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneTorch.java
index 08eb480..3a8e27c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneTorch.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneTorch.java
@@ -13,10 +13,12 @@ import net.minecraft.item.Item;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockRedstoneTorch extends BlockTorch
 {
     private boolean field_150113_a;
-    private static Map field_150112_b = new HashMap();
+    private static Map field_150112_b = new java.util.WeakHashMap(); // Spigot
     private static final String __OBFID = "CL_00000298";
 
     private boolean func_150111_a(World p_150111_1_, int p_150111_2_, int p_150111_3_, int p_150111_4_, boolean p_150111_5_)
@@ -125,10 +127,30 @@ public class BlockRedstoneTorch extends BlockTorch
             list.remove(0);
         }
 
+        // CraftBukkit start
+        org.bukkit.plugin.PluginManager manager = p_149674_1_.getServer().getPluginManager();
+        org.bukkit.block.Block block = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+        int oldCurrent = this.field_150113_a ? 15 : 0;
+        BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
+        // CraftBukkit end
+
         if (this.field_150113_a)
         {
             if (flag)
             {
+                // CraftBukkit start
+                if (oldCurrent != 0)
+                {
+                    event.setNewCurrent(0);
+                    manager.callEvent(event);
+
+                    if (event.getNewCurrent() != 0)
+                    {
+                        return;
+                    }
+                }
+
+                // CraftBukkit end
                 p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.unlit_redstone_torch, p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_), 3);
 
                 if (this.func_150111_a(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, true))
@@ -147,6 +169,19 @@ public class BlockRedstoneTorch extends BlockTorch
         }
         else if (!flag && !this.func_150111_a(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, false))
         {
+            // CraftBukkit start
+            if (oldCurrent != 15)
+            {
+                event.setNewCurrent(15);
+                manager.callEvent(event);
+
+                if (event.getNewCurrent() != 15)
+                {
+                    return;
+                }
+            }
+
+            // CraftBukkit end
             p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.redstone_torch, p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_), 3);
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneWire.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneWire.java
index 11bb1cb..394eb78 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockRedstoneWire.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockRedstoneWire.java
@@ -18,6 +18,8 @@ import net.minecraft.world.ChunkPosition;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockRedstoneWire extends Block
 {
     private boolean field_150181_a = true;
@@ -159,6 +161,15 @@ public class BlockRedstoneWire extends Block
             i3 = l1;
         }
 
+        // CraftBukkit start
+        if (k1 != i3)
+        {
+            BlockRedstoneEvent event = new BlockRedstoneEvent(p_150175_1_.getWorld().getBlockAt(p_150175_2_, p_150175_3_, p_150175_4_), k1, i3);
+            p_150175_1_.getServer().getPluginManager().callEvent(event);
+            i3 = event.getNewCurrent();
+        }
+
+        // CraftBukkit end
         if (k1 != i3)
         {
             p_150175_1_.setBlockMetadataWithNotify(p_150175_2_, p_150175_3_, p_150175_4_, i3, 2);
@@ -294,7 +305,8 @@ public class BlockRedstoneWire extends Block
         }
     }
 
-    private int func_150178_a(World p_150178_1_, int p_150178_2_, int p_150178_3_, int p_150178_4_, int p_150178_5_)
+    // CraftBukkit - private -> public
+    public int func_150178_a(World p_150178_1_, int p_150178_2_, int p_150178_3_, int p_150178_4_, int p_150178_5_)
     {
         if (p_150178_1_.getBlock(p_150178_2_, p_150178_3_, p_150178_4_) != this)
         {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockReed.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockReed.java
index 070b454..bae8c3f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockReed.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockReed.java
@@ -44,9 +44,9 @@ public class BlockReed extends Block implements IPlantable
                 {
                     int i1 = p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_);
 
-                    if (i1 == 15)
+                    if (i1 >= (byte) range(3, (p_149674_1_.growthOdds / p_149674_1_.getSpigotConfig().caneModifier * 15) + 0.5F, 15))   // Spigot // Cauldron
                     {
-                        p_149674_1_.setBlock(p_149674_2_, p_149674_3_ + 1, p_149674_4_, this);
+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(p_149674_1_, p_149674_2_, p_149674_3_ + 1, p_149674_4_, this, 0); // CraftBukkit
                         p_149674_1_.setBlockMetadataWithNotify(p_149674_2_, p_149674_3_, p_149674_4_, 0, 4);
                     }
                     else
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSapling.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSapling.java
index 7779cbb..23c44bf 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSapling.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSapling.java
@@ -22,10 +22,18 @@ import net.minecraft.world.gen.feature.WorldGenTaiga2;
 import net.minecraft.world.gen.feature.WorldGenTrees;
 import net.minecraft.world.gen.feature.WorldGenerator;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.event.world.StructureGrowEvent;
+// CraftBukkit end
+
 public class BlockSapling extends BlockBush implements IGrowable
 {
     public static final String[] field_149882_a = new String[] {"oak", "spruce", "birch", "jungle", "acacia", "roofed_oak"};
     private static final IIcon[] field_149881_b = new IIcon[field_149882_a.length];
+    public static TreeType treeType; // CraftBukkit
     private static final String __OBFID = "CL_00000305";
 
     protected BlockSapling()
@@ -41,9 +49,39 @@ public class BlockSapling extends BlockBush implements IGrowable
         {
             super.updateTick(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, p_149674_5_);
 
-            if (p_149674_1_.getBlockLightValue(p_149674_2_, p_149674_3_ + 1, p_149674_4_) >= 9 && p_149674_5_.nextInt(7) == 0)
+            if (p_149674_1_.getBlockLightValue(p_149674_2_, p_149674_3_ + 1, p_149674_4_) >= 9 && (p_149674_5_.nextInt(Math.max(2, (int)((p_149674_1_.growthOdds / p_149674_1_.getSpigotConfig().saplingModifier * 7) + 0.5F))) == 0))    // Spigot // Cauldron
             {
+                // Cauldron start
+                p_149674_1_.captureTreeGeneration = true;
                 this.func_149879_c(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, p_149674_5_);
+                p_149674_1_.captureTreeGeneration = false;
+                if (p_149674_1_.capturedBlockSnapshots.size() > 0)
+                {
+                    TreeType treeType = BlockSapling.treeType;
+                    BlockSapling.treeType = null;
+                    Location location = new Location(p_149674_1_.getWorld(), p_149674_2_, p_149674_3_, p_149674_4_);
+                    List<net.minecraftforge.common.util.BlockSnapshot> blocks = (List) p_149674_1_.capturedBlockSnapshots.clone();
+                    List<BlockState> blockstates = new java.util.ArrayList();
+                    for (net.minecraftforge.common.util.BlockSnapshot snapshot : blocks)
+                    {
+                        blockstates.add(new org.bukkit.craftbukkit.block.CraftBlockState(snapshot));
+                    }
+                    p_149674_1_.capturedBlockSnapshots.clear();
+                    StructureGrowEvent event = null;
+                    if (treeType != null)
+                    {
+                        event = new StructureGrowEvent(location, treeType, false, null, blockstates);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                    }
+                    if (event == null || !event.isCancelled())
+                    {
+                        for (BlockState blockstate : blockstates)
+                        {
+                            blockstate.update(true);
+                        }
+                    }
+                }
+                // Cauldron end
             }
         }
     }
@@ -73,7 +111,20 @@ public class BlockSapling extends BlockBush implements IGrowable
     {
         if (!net.minecraftforge.event.terraingen.TerrainGen.saplingGrowTree(p_149878_1_, p_149878_5_, p_149878_2_, p_149878_3_, p_149878_4_)) return;
         int l = p_149878_1_.getBlockMetadata(p_149878_2_, p_149878_3_, p_149878_4_) & 7;
-        Object object = p_149878_5_.nextInt(10) == 0 ? new WorldGenBigTree(true) : new WorldGenTrees(true);
+        // CraftBukkit start
+        Object object = null;
+        if (p_149878_5_.nextInt(10) == 0)
+        { 
+            treeType = TreeType.BIG_TREE; // CraftBukkit
+            object = new WorldGenBigTree(true);
+        }
+        else
+        {
+            treeType = TreeType.TREE; // CraftBukkit
+            object = new WorldGenTrees(true);
+        }
+        // CraftBukkit end
+
         int i1 = 0;
         int j1 = 0;
         boolean flag = false;
@@ -84,6 +135,7 @@ public class BlockSapling extends BlockBush implements IGrowable
             default:
                 break;
             case 1:
+                treeType = TreeType.REDWOOD; // CraftBukkit
                 label78:
 
                 for (i1 = 0; i1 >= -1; --i1)
@@ -108,6 +160,7 @@ public class BlockSapling extends BlockBush implements IGrowable
 
                 break;
             case 2:
+                treeType = TreeType.BIRCH; // CraftBukkit
                 object = new WorldGenForest(true, false);
                 break;
             case 3:
@@ -119,6 +172,7 @@ public class BlockSapling extends BlockBush implements IGrowable
                     {
                         if (this.func_149880_a(p_149878_1_, p_149878_2_ + i1, p_149878_3_, p_149878_4_ + j1, 3) && this.func_149880_a(p_149878_1_, p_149878_2_ + i1 + 1, p_149878_3_, p_149878_4_ + j1, 3) && this.func_149880_a(p_149878_1_, p_149878_2_ + i1, p_149878_3_, p_149878_4_ + j1 + 1, 3) && this.func_149880_a(p_149878_1_, p_149878_2_ + i1 + 1, p_149878_3_, p_149878_4_ + j1 + 1, 3))
                         {
+                            treeType = TreeType.JUNGLE; // CraftBukkit
                             object = new WorldGenMegaJungle(true, 10, 20, 3, 3);
                             flag = true;
                             break label93;
@@ -130,11 +184,13 @@ public class BlockSapling extends BlockBush implements IGrowable
                 {
                     j1 = 0;
                     i1 = 0;
+                    treeType = TreeType.SMALL_JUNGLE; // CraftBukkit
                     object = new WorldGenTrees(true, 4 + p_149878_5_.nextInt(7), 3, 3, false);
                 }
 
                 break;
             case 4:
+                treeType = TreeType.ACACIA; // CraftBukkit
                 object = new WorldGenSavannaTree(true);
                 break;
             case 5:
@@ -147,6 +203,7 @@ public class BlockSapling extends BlockBush implements IGrowable
                         if (this.func_149880_a(p_149878_1_, p_149878_2_ + i1, p_149878_3_, p_149878_4_ + j1, 5) && this.func_149880_a(p_149878_1_, p_149878_2_ + i1 + 1, p_149878_3_, p_149878_4_ + j1, 5) && this.func_149880_a(p_149878_1_, p_149878_2_ + i1, p_149878_3_, p_149878_4_ + j1 + 1, 5) && this.func_149880_a(p_149878_1_, p_149878_2_ + i1 + 1, p_149878_3_, p_149878_4_ + j1 + 1, 5))
                         {
                             object = new WorldGenCanopyTree(true);
+                            treeType = TreeType.DARK_OAK; // CraftBukkit
                             flag = true;
                             break label108;
                         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSign.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSign.java
index 15c623f..4990fd2 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSign.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSign.java
@@ -14,6 +14,8 @@ import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockSign extends BlockContainer
 {
     private Class field_149968_a;
@@ -163,6 +165,17 @@ public class BlockSign extends BlockContainer
         }
 
         super.onNeighborBlockChange(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_, p_149695_5_);
+
+        // CraftBukkit start
+        if (p_149695_5_ != null && p_149695_5_.canProvidePower())
+        {
+            org.bukkit.block.Block bukkitBlock = p_149695_1_.getWorld().getBlockAt(p_149695_2_, p_149695_3_, p_149695_4_);
+            int power = bukkitBlock.getBlockPower();
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, power, power);
+            p_149695_1_.getServer().getPluginManager().callEvent(eventRedstone);
+        }
+
+        // CraftBukkit end
     }
 
     @SideOnly(Side.CLIENT)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSkull.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSkull.java
index a8b01d1..a2e7f90 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSkull.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSkull.java
@@ -27,6 +27,11 @@ import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+// CraftBukkit end
+
 public class BlockSkull extends BlockContainer
 {
     private static final String __OBFID = "CL_00000307";
@@ -135,9 +140,11 @@ public class BlockSkull extends BlockContainer
             if ((p_149749_6_ & 8) == 0)
             {
                 ItemStack itemstack = new ItemStack(Items.skull, 1, this.getDamageValue(p_149749_1_, p_149749_2_, p_149749_3_, p_149749_4_));
-                TileEntitySkull tileentityskull = (TileEntitySkull)p_149749_1_.getTileEntity(p_149749_2_, p_149749_3_, p_149749_4_);
+                TileEntity tileEntity = p_149749_1_.getTileEntity(p_149749_2_, p_149749_3_, p_149749_4_);
+
+                if (!(tileEntity instanceof TileEntitySkull)) return ret;
 
-                if (tileentityskull == null) return ret;
+                TileEntitySkull tileentityskull = (TileEntitySkull) tileEntity;
 
                 if (tileentityskull.func_145904_a() == 3 && tileentityskull.func_152108_a() != null)
                 {
@@ -172,16 +179,18 @@ public class BlockSkull extends BlockContainer
             {
                 if (p_149965_1_.getBlock(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l) == Blocks.soul_sand && p_149965_1_.getBlock(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 1) == Blocks.soul_sand && p_149965_1_.getBlock(p_149965_2_, p_149965_3_ - 2, p_149965_4_ + l + 1) == Blocks.soul_sand && p_149965_1_.getBlock(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 2) == Blocks.soul_sand && this.func_149966_a(p_149965_1_, p_149965_2_, p_149965_3_, p_149965_4_ + l, 1) && this.func_149966_a(p_149965_1_, p_149965_2_, p_149965_3_, p_149965_4_ + l + 1, 1) && this.func_149966_a(p_149965_1_, p_149965_2_, p_149965_3_, p_149965_4_ + l + 2, 1))
                 {
+                    // CraftBukkit start - Use BlockStateListPopulator
+                    BlockStateListPopulator blockList = new BlockStateListPopulator(p_149965_1_.getWorld());
                     p_149965_1_.setBlockMetadataWithNotify(p_149965_2_, p_149965_3_, p_149965_4_ + l, 8, 2);
                     p_149965_1_.setBlockMetadataWithNotify(p_149965_2_, p_149965_3_, p_149965_4_ + l + 1, 8, 2);
                     p_149965_1_.setBlockMetadataWithNotify(p_149965_2_, p_149965_3_, p_149965_4_ + l + 2, 8, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_, p_149965_4_ + l, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_, p_149965_4_ + l + 1, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_, p_149965_4_ + l + 2, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 1, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 2, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_, p_149965_3_ - 2, p_149965_4_ + l + 1, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_, p_149965_4_ + l, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_, p_149965_4_ + l + 1, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_, p_149965_4_ + l + 2, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 1, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 2, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_, p_149965_3_ - 2, p_149965_4_ + l + 1, getBlockById(0), 0, 2);
 
                     if (!p_149965_1_.isRemote)
                     {
@@ -190,18 +199,21 @@ public class BlockSkull extends BlockContainer
                         entitywither.renderYawOffset = 90.0F;
                         entitywither.func_82206_m();
 
-                        if (!p_149965_1_.isRemote)
+                        if (p_149965_1_.addEntity(entitywither, SpawnReason.BUILD_WITHER))
                         {
-                            iterator = p_149965_1_.getEntitiesWithinAABB(EntityPlayer.class, entitywither.boundingBox.expand(50.0D, 50.0D, 50.0D)).iterator();
-
-                            while (iterator.hasNext())
+                            if (!p_149965_1_.isRemote)
                             {
-                                entityplayer = (EntityPlayer)iterator.next();
-                                entityplayer.triggerAchievement(AchievementList.field_150963_I);
+                                iterator = p_149965_1_.getEntitiesWithinAABB(EntityPlayer.class, entitywither.boundingBox.expand(50.0D, 50.0D, 50.0D)).iterator();
+
+                                while (iterator.hasNext())
+                                {
+                                    entityplayer = (EntityPlayer) iterator.next();
+                                    entityplayer.triggerAchievement(AchievementList.field_150963_I);
+                                }
                             }
-                        }
 
-                        p_149965_1_.spawnEntityInWorld(entitywither);
+                            blockList.updateList();
+                        }
                     }
 
                     for (i1 = 0; i1 < 120; ++i1)
@@ -209,13 +221,7 @@ public class BlockSkull extends BlockContainer
                         p_149965_1_.spawnParticle("snowballpoof", (double)p_149965_2_ + p_149965_1_.rand.nextDouble(), (double)(p_149965_3_ - 2) + p_149965_1_.rand.nextDouble() * 3.9D, (double)(p_149965_4_ + l + 1) + p_149965_1_.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
                     }
 
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_, p_149965_4_ + l, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_, p_149965_4_ + l + 1, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_, p_149965_4_ + l + 2, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 1, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_ - 1, p_149965_4_ + l + 2, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_, p_149965_3_ - 2, p_149965_4_ + l + 1, getBlockById(0));
+                    // CraftBukkit end
                     return;
                 }
             }
@@ -224,16 +230,18 @@ public class BlockSkull extends BlockContainer
             {
                 if (p_149965_1_.getBlock(p_149965_2_ + l, p_149965_3_ - 1, p_149965_4_) == Blocks.soul_sand && p_149965_1_.getBlock(p_149965_2_ + l + 1, p_149965_3_ - 1, p_149965_4_) == Blocks.soul_sand && p_149965_1_.getBlock(p_149965_2_ + l + 1, p_149965_3_ - 2, p_149965_4_) == Blocks.soul_sand && p_149965_1_.getBlock(p_149965_2_ + l + 2, p_149965_3_ - 1, p_149965_4_) == Blocks.soul_sand && this.func_149966_a(p_149965_1_, p_149965_2_ + l, p_149965_3_, p_149965_4_, 1) && this.func_149966_a(p_149965_1_, p_149965_2_ + l + 1, p_149965_3_, p_149965_4_, 1) && this.func_149966_a(p_149965_1_, p_149965_2_ + l + 2, p_149965_3_, p_149965_4_, 1))
                 {
+                    // CraftBukkit start - Use BlockStateListPopulator
+                    BlockStateListPopulator blockList = new BlockStateListPopulator(p_149965_1_.getWorld());
                     p_149965_1_.setBlockMetadataWithNotify(p_149965_2_ + l, p_149965_3_, p_149965_4_, 8, 2);
                     p_149965_1_.setBlockMetadataWithNotify(p_149965_2_ + l + 1, p_149965_3_, p_149965_4_, 8, 2);
                     p_149965_1_.setBlockMetadataWithNotify(p_149965_2_ + l + 2, p_149965_3_, p_149965_4_, 8, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l, p_149965_3_, p_149965_4_, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l + 1, p_149965_3_, p_149965_4_, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l + 2, p_149965_3_, p_149965_4_, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l, p_149965_3_ - 1, p_149965_4_, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l + 1, p_149965_3_ - 1, p_149965_4_, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l + 2, p_149965_3_ - 1, p_149965_4_, getBlockById(0), 0, 2);
-                    p_149965_1_.setBlock(p_149965_2_ + l + 1, p_149965_3_ - 2, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l, p_149965_3_, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l + 1, p_149965_3_, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l + 2, p_149965_3_, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l, p_149965_3_ - 1, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l + 1, p_149965_3_ - 1, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l + 2, p_149965_3_ - 1, p_149965_4_, getBlockById(0), 0, 2);
+                    blockList.setTypeAndData(p_149965_2_ + l + 1, p_149965_3_ - 2, p_149965_4_, getBlockById(0), 0, 2);
 
                     if (!p_149965_1_.isRemote)
                     {
@@ -241,18 +249,21 @@ public class BlockSkull extends BlockContainer
                         entitywither.setLocationAndAngles((double)(p_149965_2_ + l) + 1.5D, (double)p_149965_3_ - 1.45D, (double)p_149965_4_ + 0.5D, 0.0F, 0.0F);
                         entitywither.func_82206_m();
 
-                        if (!p_149965_1_.isRemote)
+                        if (p_149965_1_.addEntity(entitywither, SpawnReason.BUILD_WITHER))
                         {
-                            iterator = p_149965_1_.getEntitiesWithinAABB(EntityPlayer.class, entitywither.boundingBox.expand(50.0D, 50.0D, 50.0D)).iterator();
-
-                            while (iterator.hasNext())
+                            if (!p_149965_1_.isRemote)
                             {
-                                entityplayer = (EntityPlayer)iterator.next();
-                                entityplayer.triggerAchievement(AchievementList.field_150963_I);
+                                iterator = p_149965_1_.getEntitiesWithinAABB(EntityPlayer.class, entitywither.boundingBox.expand(50.0D, 50.0D, 50.0D)).iterator();
+
+                                while (iterator.hasNext())
+                                {
+                                    entityplayer = (EntityPlayer) iterator.next();
+                                    entityplayer.triggerAchievement(AchievementList.field_150963_I);
+                                }
                             }
-                        }
 
-                        p_149965_1_.spawnEntityInWorld(entitywither);
+                            blockList.updateList();
+                        }
                     }
 
                     for (i1 = 0; i1 < 120; ++i1)
@@ -260,13 +271,7 @@ public class BlockSkull extends BlockContainer
                         p_149965_1_.spawnParticle("snowballpoof", (double)(p_149965_2_ + l + 1) + p_149965_1_.rand.nextDouble(), (double)(p_149965_3_ - 2) + p_149965_1_.rand.nextDouble() * 3.9D, (double)p_149965_4_ + p_149965_1_.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
                     }
 
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l, p_149965_3_, p_149965_4_, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l + 1, p_149965_3_, p_149965_4_, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l + 2, p_149965_3_, p_149965_4_, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l, p_149965_3_ - 1, p_149965_4_, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l + 1, p_149965_3_ - 1, p_149965_4_, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l + 2, p_149965_3_ - 1, p_149965_4_, getBlockById(0));
-                    p_149965_1_.notifyBlockChange(p_149965_2_ + l + 1, p_149965_3_ - 2, p_149965_4_, getBlockById(0));
+                    // CraftBukkit end
                     return;
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSnow.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSnow.java
index ef04cb0..3944a4f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockSnow.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockSnow.java
@@ -114,6 +114,14 @@ public class BlockSnow extends Block
     {
         if (p_149674_1_.getSavedLightValue(EnumSkyBlock.Block, p_149674_2_, p_149674_3_, p_149674_4_) > 11)
         {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_), Blocks.air).isCancelled())
+            {
+                return;
+            }
+
+            // CraftBukkit end
+            this.dropBlockAsItem(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_), 0);
             p_149674_1_.setBlockToAir(p_149674_2_, p_149674_3_, p_149674_4_);
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockStaticLiquid.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockStaticLiquid.java
index 02f5f63..413239d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockStaticLiquid.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockStaticLiquid.java
@@ -5,6 +5,8 @@ import net.minecraft.block.material.Material;
 import net.minecraft.init.Blocks;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;  // CraftBukkit
+
 public class BlockStaticLiquid extends BlockLiquid
 {
     private static final String __OBFID = "CL_00000315";
@@ -43,6 +45,11 @@ public class BlockStaticLiquid extends BlockLiquid
         {
             int l = p_149674_5_.nextInt(3);
             int i1;
+            // CraftBukkit start - Prevent lava putting something on fire, remember igniter block coords
+            int x = p_149674_2_;
+            int y = p_149674_3_;
+            int z = p_149674_4_;
+            // CraftBukkit end
 
             for (i1 = 0; i1 < l; ++i1)
             {
@@ -55,6 +62,16 @@ public class BlockStaticLiquid extends BlockLiquid
                 {
                     if (this.isFlammable(p_149674_1_, p_149674_2_ - 1, p_149674_3_, p_149674_4_) || this.isFlammable(p_149674_1_, p_149674_2_ + 1, p_149674_3_, p_149674_4_) || this.isFlammable(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_ - 1) || this.isFlammable(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_ + 1) || this.isFlammable(p_149674_1_, p_149674_2_, p_149674_3_ - 1, p_149674_4_) || this.isFlammable(p_149674_1_, p_149674_2_, p_149674_3_ + 1, p_149674_4_))
                     {
+                        // CraftBukkit start - Prevent lava putting something on fire
+                        if (p_149674_1_.getBlock(p_149674_2_, p_149674_3_, p_149674_4_) != Blocks.fire)
+                        {
+                            if (CraftEventFactory.callBlockIgniteEvent(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, x, y, z).isCancelled())
+                            {
+                                continue;
+                            }
+                        }
+
+                        // CraftBukkit end
                         p_149674_1_.setBlock(p_149674_2_, p_149674_3_, p_149674_4_, Blocks.fire);
                         return;
                     }
@@ -77,6 +94,16 @@ public class BlockStaticLiquid extends BlockLiquid
 
                     if (p_149674_1_.isAirBlock(p_149674_2_, p_149674_3_ + 1, p_149674_4_) && this.isFlammable(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_))
                     {
+                        // CraftBukkit start - Prevent lava putting something on fire
+                        if (p_149674_1_.getBlock(p_149674_2_, p_149674_3_ + 1, p_149674_4_) != Blocks.fire)
+                        {
+                            if (CraftEventFactory.callBlockIgniteEvent(p_149674_1_, p_149674_2_, p_149674_3_ + 1, p_149674_4_, x, y, z).isCancelled())
+                            {
+                                continue;
+                            }
+                        }
+
+                        // CraftBukkit end
                         p_149674_1_.setBlock(p_149674_2_, p_149674_3_ + 1, p_149674_4_, Blocks.fire);
                     }
                 }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockStem.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockStem.java
index cb0ec23..c685ab6 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockStem.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockStem.java
@@ -17,6 +17,8 @@ import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import static net.minecraftforge.common.util.ForgeDirection.*;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class BlockStem extends BlockBush implements IGrowable
 {
     private final Block field_149877_a;
@@ -46,14 +48,14 @@ public class BlockStem extends BlockBush implements IGrowable
         {
             float f = this.func_149875_n(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_);
 
-            if (p_149674_5_.nextInt((int)(25.0F / f) + 1) == 0)
+            if (p_149674_5_.nextInt((int)(p_149674_1_.growthOdds / (this == Blocks.pumpkin_stem ? p_149674_1_.getSpigotConfig().pumpkinModifier : p_149674_1_.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0)   // Spigot // Cauldron
             {
                 int l = p_149674_1_.getBlockMetadata(p_149674_2_, p_149674_3_, p_149674_4_);
 
                 if (l < 7)
                 {
                     ++l;
-                    p_149674_1_.setBlockMetadataWithNotify(p_149674_2_, p_149674_3_, p_149674_4_, l, 2);
+                    CraftEventFactory.handleBlockGrowEvent(p_149674_1_, p_149674_2_, p_149674_3_, p_149674_4_, this, l); // CraftBukkit
                 }
                 else
                 {
@@ -105,7 +107,7 @@ public class BlockStem extends BlockBush implements IGrowable
 
                     if (p_149674_1_.isAirBlock(j1, p_149674_3_, k1) && (block.canSustainPlant(p_149674_1_, j1, p_149674_3_ - 1, k1, UP, this) || block == Blocks.dirt || block == Blocks.grass))
                     {
-                        p_149674_1_.setBlock(j1, p_149674_3_, k1, this.field_149877_a);
+                        CraftEventFactory.handleBlockGrowEvent(p_149674_1_, j1, p_149674_3_, k1, this.field_149877_a, 0); // CraftBukkit
                     }
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockTrapDoor.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockTrapDoor.java
index bbf79a4..571d827 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockTrapDoor.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockTrapDoor.java
@@ -13,6 +13,8 @@ import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraftforge.common.util.ForgeDirection;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockTrapDoor extends Block
 {
     /** Set this to allow trapdoors to remain free-floating */
@@ -176,6 +178,20 @@ public class BlockTrapDoor extends Block
 
             if (flag || p_149695_5_.canProvidePower())
             {
+                // CraftBukkit start
+                org.bukkit.World bworld = p_149695_1_.getWorld();
+                org.bukkit.block.Block bblock = bworld.getBlockAt(p_149695_2_, p_149695_3_, p_149695_4_);
+                int power = bblock.getBlockPower();
+                int oldPower = (p_149695_1_.getBlockMetadata(p_149695_2_, p_149695_3_, p_149695_4_) & 4) > 0 ? 15 : 0;
+
+                if (oldPower == 0 ^ power == 0 || p_149695_5_.canProvidePower())
+                {
+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
+                    p_149695_1_.getServer().getPluginManager().callEvent(eventRedstone);
+                    flag = eventRedstone.getNewCurrent() > 0;
+                }
+
+                // CraftBukkit end
                 this.func_150120_a(p_149695_1_, p_149695_2_, p_149695_3_, p_149695_4_, flag);
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockTripWire.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockTripWire.java
index 854e7fe..57ef920 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockTripWire.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockTripWire.java
@@ -16,6 +16,8 @@ import net.minecraft.util.Direction;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
+
 public class BlockTripWire extends Block
 {
     private static final String __OBFID = "CL_00000328";
@@ -208,6 +210,51 @@ public class BlockTripWire extends Block
             }
         }
 
+        // CraftBukkit start - Call interact even when triggering connected tripwire
+        if (flag != flag1 && flag1 && (p_150140_1_.getBlockMetadata(p_150140_2_, p_150140_3_, p_150140_4_) & 4) == 4)
+        {
+            org.bukkit.World bworld = p_150140_1_.getWorld();
+            org.bukkit.plugin.PluginManager manager = p_150140_1_.getServer().getPluginManager();
+            org.bukkit.block.Block block = bworld.getBlockAt(p_150140_2_, p_150140_3_, p_150140_4_);
+            boolean allowed = false;
+
+            // If all of the events are cancelled block the tripwire trigger, else allow
+            for (Object object : list)
+            {
+                if (object != null)
+                {
+                    org.bukkit.event.Cancellable cancellable;
+
+                    if (object instanceof EntityPlayer)
+                    {
+                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityPlayer) object, org.bukkit.event.block.Action.PHYSICAL, p_150140_2_, p_150140_3_, p_150140_4_, -1, null);
+                    }
+                    else if (object instanceof Entity)
+                    {
+                        cancellable = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
+                        manager.callEvent((EntityInteractEvent) cancellable);
+                    }
+                    else
+                    {
+                        continue;
+                    }
+
+                    if (!cancellable.isCancelled())
+                    {
+                        allowed = true;
+                        break;
+                    }
+                }
+            }
+
+            if (!allowed)
+            {
+                return;
+            }
+        }
+
+        // CraftBukkit end
+
         if (flag1 && !flag)
         {
             l |= 1;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockTripWireHook.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockTripWireHook.java
index 88f2e3c..713df34 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockTripWireHook.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockTripWireHook.java
@@ -12,6 +12,8 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.util.ForgeDirection;
 import static net.minecraftforge.common.util.ForgeDirection.*;
 
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
+
 public class BlockTripWireHook extends Block
 {
     private static final String __OBFID = "CL_00000329";
@@ -210,6 +212,17 @@ public class BlockTripWireHook extends Block
             this.func_150135_a(p_150136_1_, l2, p_150136_3_, i3, flag4, flag5, flag2, flag3);
         }
 
+        // CraftBukkit start
+        org.bukkit.block.Block block = p_150136_1_.getWorld().getBlockAt(p_150136_2_, p_150136_3_, p_150136_4_);
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
+        p_150136_1_.getServer().getPluginManager().callEvent(eventRedstone);
+
+        if (eventRedstone.getNewCurrent() > 0)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.func_150135_a(p_150136_1_, p_150136_2_, p_150136_3_, p_150136_4_, flag4, flag5, flag2, flag3);
 
         if (!p_150136_5_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/block/BlockVine.java ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockVine.java
index 8c5e859..c18927d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/block/BlockVine.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/block/BlockVine.java
@@ -21,6 +21,8 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.IShearable;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class BlockVine extends Block implements IShearable
 {
     private static final String __OBFID = "CL_00000330";
@@ -268,7 +270,11 @@ public class BlockVine extends Block implements IShearable
 
                     if (j2 > 0)
                     {
-                        p_149674_1_.setBlock(p_149674_2_, p_149674_3_ + 1, p_149674_4_, this, j2, 2);
+                        // CraftBukkit start - Call BlockSpreadEvent
+                        org.bukkit.block.Block source = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+                        org.bukkit.block.Block block = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_ + 1, p_149674_4_);
+                        CraftEventFactory.handleBlockSpreadEvent(block, source, this, l1);
+                        // CraftBukkit end
                     }
                 }
             }
@@ -290,27 +296,34 @@ public class BlockVine extends Block implements IShearable
                     {
                         l1 = k1 + 1 & 3;
                         i2 = k1 + 3 & 3;
+                        // CraftBukkit start - Call BlockSpreadEvent
+                        org.bukkit.block.Block source = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+                        org.bukkit.block.Block bukkitBlock = p_149674_1_.getWorld().getBlockAt(p_149674_2_ + Direction.offsetX[k1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1]);
 
                         if ((i1 & 1 << l1) != 0 && this.func_150093_a(p_149674_1_.getBlock(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[l1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[l1])))
                         {
-                            p_149674_1_.setBlock(p_149674_2_ + Direction.offsetX[k1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1], this, 1 << l1, 2);
+                            CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, 1 << l1);
                         }
                         else if ((i1 & 1 << i2) != 0 && this.func_150093_a(p_149674_1_.getBlock(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[i2], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[i2])))
                         {
-                            p_149674_1_.setBlock(p_149674_2_ + Direction.offsetX[k1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1], this, 1 << i2, 2);
+                            CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, 1 << i2);
                         }
                         else if ((i1 & 1 << l1) != 0 && p_149674_1_.isAirBlock(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[l1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[l1]) && this.func_150093_a(p_149674_1_.getBlock(p_149674_2_ + Direction.offsetX[l1], p_149674_3_, p_149674_4_ + Direction.offsetZ[l1])))
                         {
-                            p_149674_1_.setBlock(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[l1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[l1], this, 1 << (k1 + 2 & 3), 2);
+                            bukkitBlock = p_149674_1_.getWorld().getBlockAt(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[l1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[l1]);
+                            CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, 1 << (k1 + 2 & 3));
                         }
                         else if ((i1 & 1 << i2) != 0 && p_149674_1_.isAirBlock(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[i2], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[i2]) && this.func_150093_a(p_149674_1_.getBlock(p_149674_2_ + Direction.offsetX[i2], p_149674_3_, p_149674_4_ + Direction.offsetZ[i2])))
                         {
-                            p_149674_1_.setBlock(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[i2], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[i2], this, 1 << (k1 + 2 & 3), 2);
+                            bukkitBlock = p_149674_1_.getWorld().getBlockAt(p_149674_2_ + Direction.offsetX[k1] + Direction.offsetX[i2], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1] + Direction.offsetZ[i2]);
+                            CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, 1 << (k1 + 2 & 3));
                         }
                         else if (this.func_150093_a(p_149674_1_.getBlock(p_149674_2_ + Direction.offsetX[k1], p_149674_3_ + 1, p_149674_4_ + Direction.offsetZ[k1])))
                         {
-                            p_149674_1_.setBlock(p_149674_2_ + Direction.offsetX[k1], p_149674_3_, p_149674_4_ + Direction.offsetZ[k1], this, 0, 2);
+                            CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, 0);
                         }
+
+                        // CraftBukkit end
                     }
                     else if (block.blockMaterial.isOpaque() && block.renderAsNormalBlock())
                     {
@@ -327,7 +340,11 @@ public class BlockVine extends Block implements IShearable
 
                         if (l1 > 0)
                         {
-                            p_149674_1_.setBlock(p_149674_2_, p_149674_3_ - 1, p_149674_4_, this, l1, 2);
+                            // CraftBukkit start - Call BlockSpreadEvent
+                            org.bukkit.block.Block source = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_, p_149674_4_);
+                            org.bukkit.block.Block bukkitBlock = p_149674_1_.getWorld().getBlockAt(p_149674_2_, p_149674_3_ - 1, p_149674_4_);
+                            CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, l1);
+                            // CraftBukkit end
                         }
                     }
                     else if (block == this)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/client/Minecraft.java ./eclipse/cauldron/src/main/java/net/minecraft/client/Minecraft.java
index b1e33ee..86c9d25 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/client/Minecraft.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/client/Minecraft.java
@@ -148,6 +148,7 @@ import net.minecraft.util.Session;
 import net.minecraft.util.Timer;
 import net.minecraft.util.Util;
 import net.minecraft.world.EnumDifficulty;
+import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldProviderEnd;
 import net.minecraft.world.WorldProviderHell;
 import net.minecraft.world.WorldSettings;
@@ -319,7 +320,7 @@ public class Minecraft implements IPlayerUsage
             private static final String __OBFID = "CL_00000632";
             public void run()
             {
-                while (Minecraft.this.running)
+                /*while (Minecraft.this.running) // FFoKC - off sleep
                 {
                     try
                     {
@@ -329,7 +330,7 @@ public class Minecraft implements IPlayerUsage
                     {
                         ;
                     }
-                }
+                }*/
             }
         };
         thread.setDaemon(true);
@@ -2655,7 +2656,14 @@ public class Minecraft implements IPlayerUsage
 
             if (integratedserver != null)
             {
-                integratedserver.stopServer();
+                try
+                {
+                    integratedserver.stopServer();
+                }
+                catch (MinecraftException e)
+                {
+                    e.printStackTrace();
+                }
             }
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/command/CommandHandler.java ./eclipse/cauldron/src/main/java/net/minecraft/command/CommandHandler.java
index be34d1f..628143a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/command/CommandHandler.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/command/CommandHandler.java
@@ -16,6 +16,11 @@ import org.apache.logging.log4j.Logger;
 
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.CommandEvent;
+// Cauldron start
+import org.bukkit.craftbukkit.command.CraftSimpleCommandMap;
+import org.bukkit.craftbukkit.command.ModCustomCommand;
+import cpw.mods.fml.common.FMLCommonHandler;
+// Cauldron end
 
 public class CommandHandler implements ICommandManager
 {
@@ -48,7 +53,7 @@ public class CommandHandler implements ICommandManager
                 throw new CommandNotFoundException();
             }
 
-            if (icommand.canCommandSenderUseCommand(p_71556_1_))
+            if (true || icommand.canCommandSenderUseCommand(p_71556_1_)) // Cauldron start - disable check for permissions since we handle it on Bukkit side
             {
                 CommandEvent event = new CommandEvent(icommand, p_71556_1_, astring);
                 if (MinecraftForge.EVENT_BUS.post(event))
@@ -135,9 +140,28 @@ public class CommandHandler implements ICommandManager
 
     public ICommand registerCommand(ICommand p_71560_1_)
     {
-        List list = p_71560_1_.getCommandAliases();
-        this.commandMap.put(p_71560_1_.getCommandName(), p_71560_1_);
-        this.commandSet.add(p_71560_1_);
+    // Cauldron start - register commands with permission nodes, defaulting to class name
+        return registerCommand(p_71560_1_, p_71560_1_.getClass().getName());
+    }
+
+    public ICommand registerCommand(String permissionGroup, ICommand par1ICommand)
+    {
+        return registerCommand(par1ICommand, permissionGroup + "." + par1ICommand.getCommandName());
+    }
+
+    public ICommand registerCommand(ICommand par1ICommand, String permissionNode)
+    {
+        List list = par1ICommand.getCommandAliases();
+        this.commandMap.put(par1ICommand.getCommandName(), par1ICommand);
+        this.commandSet.add(par1ICommand);
+        // register vanilla commands with Bukkit to support permissions.
+        CraftSimpleCommandMap commandMap = FMLCommonHandler.instance().getMinecraftServerInstance().server.getCraftCommandMap();
+        ModCustomCommand customCommand = new ModCustomCommand(par1ICommand.getCommandName());
+        customCommand.setPermission(permissionNode);
+        if (list != null)
+            customCommand.setAliases(list);
+        commandMap.register(par1ICommand.getCommandName(), customCommand);
+        LogManager.getLogger().info("Registered command " + par1ICommand.getCommandName() + " with permission node " + permissionNode);
 
         if (list != null)
         {
@@ -150,13 +174,14 @@ public class CommandHandler implements ICommandManager
 
                 if (icommand1 == null || !icommand1.getCommandName().equals(s))
                 {
-                    this.commandMap.put(s, p_71560_1_);
+                    this.commandMap.put(s, par1ICommand);
                 }
             }
         }
 
-        return p_71560_1_;
+        return par1ICommand;
     }
+    // Cauldron end
 
     private static String[] dropFirstString(String[] p_71559_0_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/command/PlayerSelector.java ./eclipse/cauldron/src/main/java/net/minecraft/command/PlayerSelector.java
index a231885..f921b76 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/command/PlayerSelector.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/command/PlayerSelector.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ChunkCoordinates;
@@ -51,6 +52,13 @@ public class PlayerSelector
 
     public static EntityPlayerMP[] matchPlayers(ICommandSender p_82380_0_, String p_82380_1_)
     {
+        // CraftBukkit start
+        if (!(p_82380_0_ instanceof CommandBlockLogic))
+        {
+            return null;
+        }
+
+        // CraftBukkit end
         Matcher matcher = tokenPattern.matcher(p_82380_1_);
 
         if (matcher.matches())
diff --git ./eclipse/Clean/src/main/java/net/minecraft/command/ServerCommandManager.java ./eclipse/cauldron/src/main/java/net/minecraft/command/ServerCommandManager.java
index 8a5b2b8..7b1b786 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/command/ServerCommandManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/command/ServerCommandManager.java
@@ -39,8 +39,16 @@ public class ServerCommandManager extends CommandHandler implements IAdminComman
 {
     private static final String __OBFID = "CL_00000922";
 
+    // Cauldron start - moved commands to it's own method to be executed further in server startup + changed to registerVanillaCommand
     public ServerCommandManager()
     {
+        CommandBase.setAdminCommander(this);
+    }
+
+    public void registerVanillaCommands()
+    {
+        // Cauldron - do not register vanilla commands replaced by Bukkit
+        /*    
         this.registerCommand(new CommandTime());
         this.registerCommand(new CommandGameMode());
         this.registerCommand(new CommandDifficulty());
@@ -56,7 +64,6 @@ public class ServerCommandManager extends CommandHandler implements IAdminComman
         this.registerCommand(new CommandEmote());
         this.registerCommand(new CommandShowSeed());
         this.registerCommand(new CommandHelp());
-        this.registerCommand(new CommandDebug());
         this.registerCommand(new CommandMessage());
         this.registerCommand(new CommandBroadcast());
         this.registerCommand(new CommandSetSpawnpoint());
@@ -64,17 +71,23 @@ public class ServerCommandManager extends CommandHandler implements IAdminComman
         this.registerCommand(new CommandGameRule());
         this.registerCommand(new CommandClearInventory());
         this.registerCommand(new CommandTestFor());
-        this.registerCommand(new CommandSpreadPlayers());
-        this.registerCommand(new CommandPlaySound());
-        this.registerCommand(new CommandScoreboard());
-        this.registerCommand(new CommandAchievement());
-        this.registerCommand(new CommandSummon());
-        this.registerCommand(new CommandSetBlock());
-        this.registerCommand(new CommandTestForBlock());
-        this.registerCommand(new CommandMessageRaw());
+        */
+        // Cauldron start - add permission nodes for rest of vanilla commands
+        this.registerCommand("vanilla.command", new CommandDebug());
+        this.registerCommand("vanilla.command", new CommandSpreadPlayers());
+        this.registerCommand("vanilla.command", new CommandPlaySound());
+        this.registerCommand("vanilla.command", new CommandScoreboard());
+        this.registerCommand("vanilla.command", new CommandAchievement());
+        this.registerCommand("vanilla.command", new CommandSummon());
+        this.registerCommand("vanilla.command", new CommandSetBlock());
+        this.registerCommand("vanilla.command", new CommandTestForBlock());
+        this.registerCommand("vanilla.command", new CommandMessageRaw());
+        this.registerCommand("vanilla.command", new CommandNetstat());
+        // Cauldron end
 
         if (MinecraftServer.getServer().isDedicatedServer())
         {
+            /*
             this.registerCommand(new CommandOp());
             this.registerCommand(new CommandDeOp());
             this.registerCommand(new CommandStop());
@@ -90,7 +103,7 @@ public class ServerCommandManager extends CommandHandler implements IAdminComman
             this.registerCommand(new CommandListPlayers());
             this.registerCommand(new CommandWhitelist());
             this.registerCommand(new CommandSetPlayerTimeout());
-            this.registerCommand(new CommandNetstat());
+            */
         }
         else
         {
@@ -98,6 +111,7 @@ public class ServerCommandManager extends CommandHandler implements IAdminComman
         }
 
         CommandBase.setAdminCommander(this);
+        // Cauldron end
     }
 
     public void func_152372_a(ICommandSender p_152372_1_, ICommand p_152372_2_, int p_152372_3_, String p_152372_4_, Object ... p_152372_5_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/command/server/CommandBlockLogic.java ./eclipse/cauldron/src/main/java/net/minecraft/command/server/CommandBlockLogic.java
index e9c58f9..3a52201 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/command/server/CommandBlockLogic.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/command/server/CommandBlockLogic.java
@@ -9,18 +9,30 @@ import net.minecraft.command.ICommandManager;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.tileentity.TileEntityCommandBlockListener;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import org.apache.logging.log4j.Level;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+import com.google.common.base.Joiner;
+import net.minecraft.command.PlayerSelector;
+import net.minecraft.entity.EntityMinecartCommandBlockListener;
+import net.minecraft.entity.player.EntityPlayerMP;
+// CraftBukkit end
+
 public abstract class CommandBlockLogic implements ICommandSender
 {
     private static final SimpleDateFormat field_145766_a = new SimpleDateFormat("HH:mm:ss");
     private int field_145764_b;
     private boolean field_145765_c = true;
     private IChatComponent field_145762_d = null;
-    private String field_145763_e = "";
+    public String field_145763_e = ""; // CraftBukkit - private -> public
     private String field_145761_f = "@";
+    protected org.bukkit.command.CommandSender sender; // CraftBukkit - add sender;
     private static final String __OBFID = "CL_00000128";
 
     public int func_145760_g()
@@ -94,8 +106,143 @@ public abstract class CommandBlockLogic implements ICommandSender
 
         if (minecraftserver != null && minecraftserver.isCommandBlockEnabled())
         {
-            ICommandManager icommandmanager = minecraftserver.getCommandManager();
-            this.field_145764_b = icommandmanager.executeCommand(this, this.field_145763_e);
+            // CraftBukkit start - Handle command block commands using Bukkit dispatcher
+            org.bukkit.command.SimpleCommandMap commandMap = minecraftserver.server.getCommandMap();
+            Joiner joiner = Joiner.on(" ");
+            String command = this.field_145763_e;
+
+            if (this.field_145763_e.startsWith("/"))
+            {
+                command = this.field_145763_e.substring(1);
+            }
+
+            String[] args = command.split(" ");
+            ArrayList<String[]> commands = new ArrayList<String[]>();
+
+            // Block disallowed commands
+            if (args[0].equalsIgnoreCase("stop") || args[0].equalsIgnoreCase("kick") || args[0].equalsIgnoreCase("op") ||
+                    args[0].equalsIgnoreCase("deop") || args[0].equalsIgnoreCase("ban") || args[0].equalsIgnoreCase("ban-ip") ||
+                    args[0].equalsIgnoreCase("pardon") || args[0].equalsIgnoreCase("pardon-ip") || args[0].equalsIgnoreCase("reload"))
+            {
+                this.field_145764_b = 0;
+                return;
+            }
+
+            // If the world has no players don't run
+            if (this.getEntityWorld().playerEntities.isEmpty())
+            {
+                this.field_145764_b = 0;
+                return;
+            }
+
+            // Handle vanilla commands;
+            if (minecraftserver.server.getCommandBlockOverride(args[0]))
+            {
+                org.bukkit.command.Command commandBlockCommand = commandMap.getCommand("minecraft:" + args[0]);
+
+                if (commandBlockCommand instanceof VanillaCommandWrapper)
+                {
+                    this.field_145764_b = ((VanillaCommandWrapper) commandBlockCommand).dispatchVanillaCommandBlock(this, this.field_145763_e);
+                    return;
+                }
+            }
+
+            // Make sure this is a valid command
+            if (commandMap.getCommand(args[0]) == null)
+            {
+                // Cauldron start - execute command using the vanilla command manager if it isn't in the bukkit command map
+                net.minecraft.command.ICommandManager icommandmanager = minecraftserver.getCommandManager();
+                icommandmanager.executeCommand(this, this.field_145763_e);
+                return;
+                // Cauldron end
+            }
+
+            // testfor command requires special handling
+            if (args[0].equalsIgnoreCase("testfor"))
+            {
+                if (args.length < 2)
+                {
+                    this.field_145764_b = 0;
+                    return;
+                }
+
+                EntityPlayerMP[] players = PlayerSelector.matchPlayers(this, args[1]);
+
+                if (players != null && players.length > 0)
+                {
+                    this.field_145764_b = players.length;
+                    return;
+                }
+                else
+                {
+                    EntityPlayerMP player = MinecraftServer.getServer().getConfigurationManager().func_152612_a(args[1]);
+
+                    if (player == null)
+                    {
+                        this.field_145764_b = 0;
+                        return;
+                    }
+                    else
+                    {
+                        this.field_145764_b = 1;
+                        return;
+                    }
+                }
+            }
+
+            commands.add(args);
+            // Find positions of command block syntax, if any
+            ArrayList<String[]> newCommands = new ArrayList<String[]>();
+
+            for (int i = 0; i < args.length; i++)
+            {
+                if (PlayerSelector.hasArguments(args[i]))
+                {
+                    for (int j = 0; j < commands.size(); j++)
+                    {
+                        newCommands.addAll(this.buildCommands(commands.get(j), i));
+                    }
+
+                    ArrayList<String[]> temp = commands;
+                    commands = newCommands;
+                    newCommands = temp;
+                    newCommands.clear();
+                }
+            }
+
+            int completed = 0;
+
+            // Now dispatch all of the commands we ended up with
+            for (int i = 0; i < commands.size(); i++)
+            {
+                try
+                {
+                    if (commandMap.dispatch(sender, joiner.join(java.util.Arrays.asList(commands.get(i)))))
+                    {
+                        completed++;
+                    }
+                }
+                catch (Throwable exception)
+                {
+                    if (this instanceof TileEntityCommandBlockListener)
+                    {
+                        TileEntityCommandBlockListener listener = (TileEntityCommandBlockListener) this;
+                        MinecraftServer.getLogger().log(Level.WARN, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getPlayerCoordinates().posX, listener.getPlayerCoordinates().posY, listener.getPlayerCoordinates().posZ), exception);
+                    }
+                    else if (this instanceof EntityMinecartCommandBlockListener)
+                    {
+                        EntityMinecartCommandBlockListener listener = (EntityMinecartCommandBlockListener) this;
+                        MinecraftServer.getLogger().log(Level.WARN, String.format("MinecartCommandBlock at (%d,%d,%d) failed to handle command", listener.getPlayerCoordinates().posX, listener.getPlayerCoordinates().posY, listener.getPlayerCoordinates().posZ), exception);
+                    }
+                    else
+                    {
+                        MinecraftServer.getLogger().log(Level.WARN, String.format("Unknown CommandBlock failed to handle command"), exception);
+                    }
+                }
+            }
+
+            this.field_145764_b = completed;
+            // CraftBukkit end
         }
         else
         {
@@ -103,6 +250,31 @@ public abstract class CommandBlockLogic implements ICommandSender
         }
     }
 
+    // CraftBukkit start
+    private ArrayList<String[]> buildCommands(String[] args, int pos)
+    {
+        ArrayList<String[]> commands = new ArrayList<String[]>();
+        EntityPlayerMP[] players = PlayerSelector.matchPlayers(this, args[pos]);
+
+        if (players != null)
+        {
+            for (EntityPlayerMP player : players)
+            {
+                if (player.worldObj != this.getEntityWorld())
+                {
+                    continue;
+                }
+
+                String[] command = args.clone();
+                command[pos] = player.getCommandSenderName();
+                commands.add(command);
+            }
+        }
+
+        return commands;
+    }
+    // CraftBukkit end
+
     public String getCommandSenderName()
     {
         return this.field_145761_f;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/crash/CrashReport.java ./eclipse/cauldron/src/main/java/net/minecraft/crash/CrashReport.java
index 0c3bc89..c827891 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/crash/CrashReport.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/crash/CrashReport.java
@@ -15,8 +16,11 @@ import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
+
+import kcauldron.KCauldron;
 import net.minecraft.util.ReportedException;
 import net.minecraft.world.gen.layer.IntCache;
+
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
@@ -51,6 +55,12 @@ public class CrashReport
                 return "1.7.10";
             }
         });
+        this.theReportCategory.addCrashSectionCallable("KCauldron Version", new Callable<String>() {
+            @Override
+            public String call() throws Exception {
+                return String.format("%s:%s:%s", KCauldron.getGroup(), KCauldron.getChannel(), KCauldron.getCurrentVersion());
+            }
+        });
         this.theReportCategory.addCrashSectionCallable("Operating System", new Callable()
         {
             private static final String __OBFID = "CL_00001222";
diff --git ./eclipse/Clean/src/main/java/net/minecraft/dispenser/BehaviorDefaultDispenseItem.java ./eclipse/cauldron/src/main/java/net/minecraft/dispenser/BehaviorDefaultDispenseItem.java
index 80ef9df..25984dc 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/dispenser/BehaviorDefaultDispenseItem.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/dispenser/BehaviorDefaultDispenseItem.java
@@ -6,6 +6,11 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+// CraftBukkit end
+
 public class BehaviorDefaultDispenseItem implements IBehaviorDispenseItem
 {
     private static final String __OBFID = "CL_00001195";
@@ -23,10 +28,17 @@ public class BehaviorDefaultDispenseItem implements IBehaviorDispenseItem
         EnumFacing enumfacing = BlockDispenser.func_149937_b(p_82487_1_.getBlockMetadata());
         IPosition iposition = BlockDispenser.func_149939_a(p_82487_1_);
         ItemStack itemstack1 = p_82487_2_.splitStack(1);
-        doDispense(p_82487_1_.getWorld(), itemstack1, 6, enumfacing, iposition);
+        // CraftBukkit start
+        if (!doDispense(p_82487_1_.getWorld(), itemstack1, 6, enumfacing, p_82487_1_))
+        {
+           p_82487_2_.stackSize++;
+        }
+
+        // CraftBukkit end
         return p_82487_2_;
     }
 
+    // Cauldron start - vanilla compatibility
     public static void doDispense(World p_82486_0_, ItemStack p_82486_1_, int p_82486_2_, EnumFacing p_82486_3_, IPosition p_82486_4_)
     {
         double d0 = p_82486_4_.getX();
@@ -42,6 +54,66 @@ public class BehaviorDefaultDispenseItem implements IBehaviorDispenseItem
         entityitem.motionZ += p_82486_0_.rand.nextGaussian() * 0.007499999832361937D * (double)p_82486_2_;
         p_82486_0_.spawnEntityInWorld(entityitem);
     }
+    // Cauldron end
+
+    // CraftBukkit start - void -> boolean return, IPosition -> ISourceBlock last argument
+    public static boolean doDispense(World world, ItemStack itemstack, int i, EnumFacing enumfacing, IBlockSource iblocksource)
+    {
+        IPosition iposition = BlockDispenser.func_149939_a(iblocksource);
+        // CraftBukkit end
+        double d0 = iposition.getX();
+        double d1 = iposition.getY();
+        double d2 = iposition.getZ();
+        EntityItem entityitem = new EntityItem(world, d0, d1 - 0.3D, d2, itemstack);
+        double d3 = world.rand.nextDouble() * 0.1D + 0.2D;
+        entityitem.motionX = (double) enumfacing.getFrontOffsetX() * d3;
+        entityitem.motionY = 0.20000000298023224D;
+        entityitem.motionZ = (double) enumfacing.getFrontOffsetZ() * d3;
+        entityitem.motionX += world.rand.nextGaussian() * 0.007499999832361937D * (double) i;
+        entityitem.motionY += world.rand.nextGaussian() * 0.007499999832361937D * (double) i;
+        entityitem.motionZ += world.rand.nextGaussian() * 0.007499999832361937D * (double) i;
+        // CraftBukkit start
+        org.bukkit.block.Block block = world.getWorld().getBlockAt(iblocksource.getXInt(), iblocksource.getYInt(), iblocksource.getZInt());
+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(entityitem.motionX, entityitem.motionY, entityitem.motionZ));
+
+        if (!BlockDispenser.eventFired)
+        {
+            world.getServer().getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled())
+        {
+            return false;
+        }
+
+        entityitem.setEntityItemStack(CraftItemStack.asNMSCopy(event.getItem()));
+        entityitem.motionX = event.getVelocity().getX();
+        entityitem.motionY = event.getVelocity().getY();
+        entityitem.motionZ = event.getVelocity().getZ();
+
+        if (!event.getItem().equals(craftItem))
+        {
+            // Chain to handler for new item
+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+            if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem.getClass() != BehaviorDefaultDispenseItem.class)
+            {
+                ibehaviordispenseitem.dispense(iblocksource, eventStack);
+            }
+            else
+            {
+                world.spawnEntityInWorld(entityitem);
+            }
+
+            return false;
+        }
+
+        world.spawnEntityInWorld(entityitem);
+        return true;
+        // CraftBukkit end
+    }
 
     protected void playDispenseSound(IBlockSource p_82485_1_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/dispenser/BehaviorProjectileDispense.java ./eclipse/cauldron/src/main/java/net/minecraft/dispenser/BehaviorProjectileDispense.java
index c23e97a..d96c702 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/dispenser/BehaviorProjectileDispense.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/dispenser/BehaviorProjectileDispense.java
@@ -7,6 +7,12 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.tileentity.TileEntityDispenser;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+// CraftBukkit end
+
 public abstract class BehaviorProjectileDispense extends BehaviorDefaultDispenseItem
 {
     private static final String __OBFID = "CL_00001394";
@@ -17,9 +23,42 @@ public abstract class BehaviorProjectileDispense extends BehaviorDefaultDispense
         IPosition iposition = BlockDispenser.func_149939_a(p_82487_1_);
         EnumFacing enumfacing = BlockDispenser.func_149937_b(p_82487_1_.getBlockMetadata());
         IProjectile iprojectile = this.getProjectileEntity(world, iposition);
+        // CraftBukkit start
+        ItemStack itemstack1 = p_82487_2_.splitStack(1);
+        org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumfacing.getFrontOffsetX(), (double)((float) enumfacing.getFrontOffsetY() + 0.1F), (double) enumfacing.getFrontOffsetZ()));
+
+        if (!BlockDispenser.eventFired)
+        {
+            world.getServer().getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled())
+        {
+            p_82487_2_.stackSize++;
+            return p_82487_2_;
+        }
+
+        if (!event.getItem().equals(craftItem))
+        {
+            p_82487_2_.stackSize++;
+            // Chain to handler for new item
+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+            if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+            {
+                ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                return p_82487_2_;
+            }
+        }
+
         iprojectile.setThrowableHeading((double)enumfacing.getFrontOffsetX(), (double)((float)enumfacing.getFrontOffsetY() + 0.1F), (double)enumfacing.getFrontOffsetZ(), this.func_82500_b(), this.func_82498_a());
+        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) p_82487_1_.getBlockTileEntity());
+        // CraftBukkit end
         world.spawnEntityInWorld((Entity)iprojectile);
-        p_82487_2_.splitStack(1);
+        // p_82487_2_.splitStack(1); // CraftBukkit - Handled during event processing
         return p_82487_2_;
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/enchantment/Enchantment.java ./eclipse/cauldron/src/main/java/net/minecraft/enchantment/Enchantment.java
index f4180aa..f9e53e0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/enchantment/Enchantment.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/enchantment/Enchantment.java
@@ -56,6 +56,8 @@ public abstract class Enchantment
         {
             enchantmentsList[p_i1926_1_] = this;
         }
+
+        org.bukkit.enchantments.Enchantment.registerEnchantment(new org.bukkit.craftbukkit.enchantments.CraftEnchantment(this)); // CraftBukkit
     }
 
     public int getWeight()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/Entity.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/Entity.java
index e114a23..f85fbec 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/Entity.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/Entity.java
@@ -45,13 +45,51 @@ import net.minecraft.util.Vec3;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.cauldron.CauldronHooks;
 import net.minecraftforge.common.IExtendedEntityProperties;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.EntityEvent;
 import net.minecraftforge.fluids.IFluidBlock;
 
+// CraftBukkit start
+import net.minecraft.entity.passive.EntityTameable;
+import net.minecraft.entity.player.EntityPlayerMP;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Server;
+import org.bukkit.TravelAgent;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Painting;
+import org.bukkit.entity.Vehicle;
+import org.spigotmc.CustomTimingsHandler; // Spigot
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.painting.PaintingBreakByEntityEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.plugin.PluginManager;
+// CraftBukkit end
+import net.minecraft.world.Teleporter; // Cauldron
+
 public abstract class Entity
 {
+    // CraftBukkit start
+    private static final int CURRENT_LEVEL = 2;
+    static boolean isLevelAtLeast(NBTTagCompound tag, int level)
+    {
+        return tag.hasKey("Bukkit.updateLevel") && tag.getInteger("Bukkit.updateLevel") >= level;
+    }
+    // CraftBukkit end
+
     private static int nextEntityID;
     private int entityId;
     public double renderDistanceWeight;
@@ -100,12 +138,12 @@ public abstract class Entity
     protected Random rand;
     public int ticksExisted;
     public int fireResistance;
-    private int fire;
-    protected boolean inWater;
+    public int fire; // CraftBukkit - private -> public
+    public boolean inWater; // Spigot - protected -> public
     public int hurtResistantTime;
     private boolean firstUpdate;
     protected boolean isImmuneToFire;
-    protected DataWatcher dataWatcher;
+    public DataWatcher dataWatcher; // CraftBukkit - protected -> public
     private double entityRiderPitchDelta;
     private double entityRiderYawDelta;
     public boolean addedToChunk;
@@ -126,8 +164,10 @@ public abstract class Entity
     public int dimension;
     protected int teleportDirection;
     private boolean invulnerable;
-    protected UUID entityUniqueID;
+    public UUID entityUniqueID; // CraftBukkit - protected -> public
     public Entity.EnumEntitySize myEntitySize;
+    public boolean valid; // CraftBukkit
+    public org.bukkit.projectiles.ProjectileSource projectileSource; // CraftBukkit - For projectiles only
     private static final String __OBFID = "CL_00001533";
     /** Forge: Used to store custom data for each entity. */
     private NBTTagCompound customEntityData;
@@ -135,7 +175,16 @@ public abstract class Entity
     public ArrayList<EntityItem> capturedDrops = new ArrayList<EntityItem>();
     private UUID persistentID;
 
+    // Spigot start
+    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getEntityTimings(this); // Spigot
+    public final byte activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+    public final boolean defaultActivationState;
+    public long activatedTick = 0;
+    public boolean fromMobSpawner;
+    public void inactiveTick() { }
+    // Spigot end
     protected HashMap<String, IExtendedEntityProperties> extendedProperties;
+    public String spawnReason; // Cauldron - used to handle CraftBukkit's SpawnReason with CustomSpawners
 
     public int getEntityId()
     {
@@ -159,7 +208,7 @@ public abstract class Entity
         this.rand = new Random();
         this.fireResistance = 1;
         this.firstUpdate = true;
-        this.entityUniqueID = UUID.randomUUID();
+        this.entityUniqueID = new UUID(rand.nextLong(), rand.nextLong()); // Spigot
         this.myEntitySize = Entity.EnumEntitySize.SIZE_2;
         this.worldObj = p_i1582_1_;
         this.setPosition(0.0D, 0.0D, 0.0D);
@@ -167,8 +216,15 @@ public abstract class Entity
         if (p_i1582_1_ != null)
         {
             this.dimension = p_i1582_1_.provider.dimensionId;
+            // Spigot start
+            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, p_i1582_1_.getSpigotConfig()); // Cauldron
+        }
+        else
+        {
+            this.defaultActivationState = false;
         }
 
+        // Spigot end
         this.dataWatcher = new DataWatcher(this);
         this.dataWatcher.addObject(0, Byte.valueOf((byte)0));
         this.dataWatcher.addObject(1, Short.valueOf((short)300));
@@ -277,6 +333,41 @@ public abstract class Entity
 
     protected void setRotation(float p_70101_1_, float p_70101_2_)
     {
+        // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(p_70101_1_))
+        {
+            p_70101_1_ = 0;
+        }
+
+        if ((p_70101_1_ == Float.POSITIVE_INFINITY) || (p_70101_1_ == Float.NEGATIVE_INFINITY))
+        {
+            if (this instanceof EntityPlayerMP)
+            {
+                this.worldObj.getServer().getLogger().warning(((CraftPlayer) this.getBukkitEntity()).getName() + " was caught trying to crash the server with an invalid yaw");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+
+            p_70101_1_ = 0;
+        }
+
+        // pitch was sometimes set to NaN, so we need to set it back to 0.
+        if (Float.isNaN(p_70101_2_))
+        {
+            p_70101_2_ = 0;
+        }
+
+        if ((p_70101_2_ == Float.POSITIVE_INFINITY) || (p_70101_2_ == Float.NEGATIVE_INFINITY))
+        {
+            if (this instanceof EntityPlayerMP)
+            {
+                this.worldObj.getServer().getLogger().warning(((CraftPlayer) this.getBukkitEntity()).getName() + " was caught trying to crash the server with an invalid pitch");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+
+            p_70101_2_ = 0;
+        }
+
+        // CraftBukkit end
         this.rotationYaw = p_70101_1_ % 360.0F;
         this.rotationPitch = p_70101_2_ % 360.0F;
     }
@@ -343,7 +434,7 @@ public abstract class Entity
 
             if (this.inPortal)
             {
-                if (minecraftserver.getAllowNether())
+                if (true || minecraftserver.getAllowNether())   // CraftBukkit
                 {
                     if (this.ridingEntity == null && this.portalCounter++ >= i)
                     {
@@ -457,7 +548,35 @@ public abstract class Entity
     {
         if (!this.isImmuneToFire)
         {
-            this.attackEntityFrom(DamageSource.lava, 4.0F);
+            // CraftBukkit start - Fallen in lava TODO: this event spams!
+            this.attackEntityFrom(DamageSource.lava, 4);
+
+            if (this instanceof EntityLivingBase)
+            {
+                if (this.fire <= 0)
+                {
+                    // not on fire yet
+                    // TODO: shouldn't be sending null for the block.
+                    org.bukkit.block.Block damager = null; // ((WorldServer) this.l).getWorld().getBlockAt(i, j, k);
+                    org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                    EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+                    this.worldObj.getServer().getPluginManager().callEvent(combustEvent);
+
+                    if (!combustEvent.isCancelled())
+                    {
+                        this.setFire(combustEvent.getDuration());
+                    }
+                }
+                else
+                {
+                    // This will be called every single tick the entity is in lava, so don't throw an event
+                    this.setFire(15);
+                }
+
+                return;
+            }
+
+            // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
             this.setFire(15);
         }
     }
@@ -492,6 +611,30 @@ public abstract class Entity
 
     public void moveEntity(double p_70091_1_, double p_70091_3_, double p_70091_5_)
     {
+        // CraftBukkit start - Don't do anything if we aren't moving
+        // We need to do this regardless of whether or not we are moving thanks to portals
+        try
+        {
+            this.func_145775_I();
+        }
+        catch (Throwable throwable)
+        {
+            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Checking entity block collision");
+            CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity being checked for collision");
+            this.addEntityCrashInfo(crashreportcategory);
+            throw new ReportedException(crashreport);
+        }
+
+        // Check if we're moving
+        if (p_70091_1_ == 0 && p_70091_3_ == 0 && p_70091_5_ == 0 && this.ridingEntity == null && this.riddenByEntity == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
+        if (!CauldronHooks.checkEntitySpeed(this, p_70091_1_, p_70091_3_, p_70091_5_)) return; // Check for entities violating the speed limit
+        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
+
         if (this.noClip)
         {
             this.boundingBox.offset(p_70091_1_, p_70091_3_, p_70091_5_);
@@ -756,6 +899,34 @@ public abstract class Entity
             d10 = this.posY - d4;
             d11 = this.posZ - d5;
 
+            // CraftBukkit start
+            if (this.isCollidedHorizontally && this.getBukkitEntity() instanceof Vehicle && this.worldObj.getWorld() != null)
+            {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.block.Block block = this.worldObj.getWorld().getBlockAt(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double) this.yOffset), MathHelper.floor_double(this.posZ));
+
+                if (d6 > p_70091_1_)
+                {
+                    block = block.getRelative(BlockFace.EAST);
+                }
+                else if (d6 < p_70091_1_)
+                {
+                    block = block.getRelative(BlockFace.WEST);
+                }
+                else if (d8 > p_70091_5_)
+                {
+                    block = block.getRelative(BlockFace.SOUTH);
+                }
+                else if (d8 < p_70091_5_)
+                {
+                    block = block.getRelative(BlockFace.NORTH);
+                }
+
+                VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, block);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+            }
+            // CraftBukkit end
+
             if (this.canTriggerWalking() && !flag && this.ridingEntity == null)
             {
                 int j1 = MathHelper.floor_double(this.posX);
@@ -798,6 +969,8 @@ public abstract class Entity
                 }
             }
 
+            // CraftBukkit start - Move to the top of the method
+            /*
             try
             {
                 this.func_145775_I();
@@ -809,7 +982,8 @@ public abstract class Entity
                 this.addEntityCrashInfo(crashreportcategory);
                 throw new ReportedException(crashreport);
             }
-
+            */
+            // CraftBukkit end
             boolean flag2 = this.isWet();
 
             if (this.worldObj.func_147470_e(this.boundingBox.contract(0.001D, 0.001D, 0.001D)))
@@ -820,8 +994,20 @@ public abstract class Entity
                 {
                     ++this.fire;
 
-                    if (this.fire == 0)
+                    // CraftBukkit start - Not on fire yet
+                    if (this.fire <= 0)   // Only throw events on the first combust, otherwise it spams
+                    {
+                        EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
+                        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                        if (!event.isCancelled())
+                        {
+                            this.setFire(event.getDuration());
+                        }
+                    }
+                    else
                     {
+                        // CraftBukkit end
                         this.setFire(8);
                     }
                 }
@@ -839,6 +1025,8 @@ public abstract class Entity
 
             this.worldObj.theProfiler.endSection();
         }
+
+        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
     }
 
     protected String getSwimSound()
@@ -867,7 +1055,18 @@ public abstract class Entity
 
                         try
                         {
-                            block.onEntityCollidedWithBlock(this.worldObj, k1, l1, i2, this);
+                            // Cauldron start - damage hook for custom blocks
+                            if (this.worldObj.getWorld() != null)
+                            {
+                                CraftEventFactory.blockDamage = this.worldObj.getWorld().getBlockAt(k1, l1, i2);
+                                block.onEntityCollidedWithBlock(this.worldObj, k1, l1, i2, this);
+                                CraftEventFactory.blockDamage = null;
+                            }
+                            else
+                            {
+                                block.onEntityCollidedWithBlock(this.worldObj, k1, l1, i2, this);
+                            }
+                            // Cauldron end
                         }
                         catch (Throwable throwable)
                         {
@@ -928,6 +1127,7 @@ public abstract class Entity
         return null;
     }
 
+    // Cauldron start - vanilla compatibility
     protected void dealFireDamage(int p_70081_1_)
     {
         if (!this.isImmuneToFire)
@@ -935,6 +1135,15 @@ public abstract class Entity
             this.attackEntityFrom(DamageSource.inFire, (float)p_70081_1_);
         }
     }
+    // Cauldron end
+
+    protected void dealFireDamage(float par1) // CraftBukkit signature change
+    {
+        if (!this.isImmuneToFire)
+        {
+            this.attackEntityFrom(DamageSource.inFire, (float)par1);
+        }
+    }
 
     public final boolean isImmuneToFire()
     {
@@ -1184,6 +1393,8 @@ public abstract class Entity
 
     public void onCollideWithPlayer(EntityPlayer p_70100_1_) {}
 
+    int numCollisions = 0; // Spigot
+
     public void applyEntityCollision(Entity p_70108_1_)
     {
         if (p_70108_1_.riddenByEntity != this && p_70108_1_.ridingEntity != this)
@@ -1310,6 +1521,20 @@ public abstract class Entity
         {
             p_70109_1_.setTag("Pos", this.newDoubleNBTList(new double[] {this.posX, this.posY + (double)this.ySize, this.posZ}));
             p_70109_1_.setTag("Motion", this.newDoubleNBTList(new double[] {this.motionX, this.motionY, this.motionZ}));
+
+            // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+            // TODO: make sure this is the best way to address this.
+            if (Float.isNaN(this.rotationYaw))
+            {
+                this.rotationYaw = 0;
+            }
+
+            if (Float.isNaN(this.rotationPitch))
+            {
+                this.rotationPitch = 0;
+            }
+
+            // CraftBukkit end
             p_70109_1_.setTag("Rotation", this.newFloatNBTList(new float[] {this.rotationYaw, this.rotationPitch}));
             p_70109_1_.setFloat("FallDistance", this.fallDistance);
             p_70109_1_.setShort("Fire", (short)this.fire);
@@ -1320,6 +1545,12 @@ public abstract class Entity
             p_70109_1_.setInteger("PortalCooldown", this.timeUntilPortal);
             p_70109_1_.setLong("UUIDMost", this.getUniqueID().getMostSignificantBits());
             p_70109_1_.setLong("UUIDLeast", this.getUniqueID().getLeastSignificantBits());
+            // CraftBukkit start
+            p_70109_1_.setLong("WorldUUIDLeast", this.worldObj.getSaveHandler().getUUID().getLeastSignificantBits());
+            p_70109_1_.setLong("WorldUUIDMost", this.worldObj.getSaveHandler().getUUID().getMostSignificantBits());
+            p_70109_1_.setInteger("Bukkit.updateLevel", CURRENT_LEVEL);
+            p_70109_1_.setInteger("Spigot.ticksLived", this.ticksExisted);
+            // CraftBukkit end
             if (customEntityData != null)
             {
                 p_70109_1_.setTag("ForgeData", customEntityData);
@@ -1370,7 +1601,7 @@ public abstract class Entity
             this.motionX = nbttaglist1.func_150309_d(0);
             this.motionY = nbttaglist1.func_150309_d(1);
             this.motionZ = nbttaglist1.func_150309_d(2);
-
+            /* CraftBukkit start - Moved section down
             if (Math.abs(this.motionX) > 10.0D)
             {
                 this.motionX = 0.0D;
@@ -1385,7 +1616,7 @@ public abstract class Entity
             {
                 this.motionZ = 0.0D;
             }
-
+            // CraftBukkit end */
             this.prevPosX = this.lastTickPosX = this.posX = nbttaglist.func_150309_d(0);
             this.prevPosY = this.lastTickPosY = this.posY = nbttaglist.func_150309_d(1);
             this.prevPosZ = this.lastTickPosZ = this.posZ = nbttaglist.func_150309_d(2);
@@ -1436,6 +1667,76 @@ public abstract class Entity
             {
                 this.setPosition(this.posX, this.posY, this.posZ);
             }
+
+            // CraftBukkit start
+            if (this instanceof EntityLivingBase)
+            {
+                EntityLivingBase entity = (EntityLivingBase) this;
+                this.ticksExisted = p_70020_1_.getInteger("Spigot.ticksLived");
+
+                // Reset the persistence for tamed animals
+                if (entity instanceof EntityTameable && !isLevelAtLeast(p_70020_1_, 2) && !p_70020_1_.getBoolean("PersistenceRequired"))
+                {
+                    EntityLiving entityliving = (EntityLiving) entity;
+                    entityliving.persistenceRequired = !entityliving.canDespawn();
+                }
+            }
+
+            // CraftBukkit end
+
+            // CraftBukkit start - Exempt Vehicles from notch's sanity check
+            if (!(this.getBukkitEntity() instanceof Vehicle))
+            {
+                if (Math.abs(this.motionX) > 10.0D)
+                {
+                    this.motionX = 0.0D;
+                }
+
+                if (Math.abs(this.motionY) > 10.0D)
+                {
+                    this.motionY = 0.0D;
+                }
+
+                if (Math.abs(this.motionZ) > 10.0D)
+                {
+                    this.motionZ = 0.0D;
+                }
+            }
+
+            // CraftBukkit end
+
+            // CraftBukkit start - Reset world
+            if (this instanceof EntityPlayerMP)
+            {
+                Server server = Bukkit.getServer();
+                org.bukkit.World bworld = null;
+                // TODO: Remove World related checks, replaced with WorldUID.
+                String worldName = p_70020_1_.getString("World");
+
+                if (p_70020_1_.hasKey("WorldUUIDMost") && p_70020_1_.hasKey("WorldUUIDLeast"))
+                {
+                    UUID uid = new UUID(p_70020_1_.getLong("WorldUUIDMost"), p_70020_1_.getLong("WorldUUIDLeast"));
+                    bworld = server.getWorld(uid);
+                }
+                else
+                {
+                    bworld = server.getWorld(worldName);
+                }
+
+                if (bworld == null)
+                {
+                    EntityPlayerMP entityPlayer = (EntityPlayerMP) this;
+                    // Cauldron start - use CraftBukkit's fallback world code if no valid world is found.
+                    entityPlayer.setWorld(MinecraftServer.getServer().worldServerForDimension(entityPlayer.dimension));
+                }
+                else
+                {
+                    this.setWorld(((CraftWorld) bworld).getHandle());
+                    // Cauldron end
+                }
+            }
+
+            // CraftBukkit end
         }
         catch (Throwable throwable)
         {
@@ -1653,6 +1954,31 @@ public abstract class Entity
 
     public void mountEntity(Entity p_70078_1_)
     {
+        // CraftBukkit start
+        this.setPassengerOf(p_70078_1_);
+    }
+
+    protected CraftEntity bukkitEntity;
+
+    public CraftEntity getBukkitEntity()
+    {
+        if (this.bukkitEntity == null)
+        {
+            this.bukkitEntity = CraftEntity.getEntity(this.worldObj.getServer(), this);
+        }
+
+        return this.bukkitEntity;
+    }
+
+    public void setPassengerOf(Entity p_70078_1_)
+    {
+        // mountEntity(null) doesn't really fly for overloaded methods,
+        // so this method is needed
+        Entity originalVehicle = this.ridingEntity;
+        Entity originalPassenger = this.ridingEntity == null ? null : this.ridingEntity.riddenByEntity;
+        PluginManager pluginManager = Bukkit.getPluginManager();
+        this.getBukkitEntity(); // make sure bukkitEntity is initialised
+        // CraftBukkit end
         this.entityRiderPitchDelta = 0.0D;
         this.entityRiderYawDelta = 0.0D;
 
@@ -1660,6 +1986,20 @@ public abstract class Entity
         {
             if (this.ridingEntity != null)
             {
+                // CraftBukkit start
+                if ((this.bukkitEntity instanceof LivingEntity) && (this.ridingEntity.getBukkitEntity() instanceof Vehicle))
+                {
+                    VehicleExitEvent event = new VehicleExitEvent((Vehicle) this.ridingEntity.getBukkitEntity(), (LivingEntity) this.bukkitEntity);
+                    pluginManager.callEvent(event);
+
+                    if (event.isCancelled() || this.ridingEntity != originalVehicle)
+                    {
+                        return;
+                    }
+                }
+
+                // CraftBukkit end
+                pluginManager.callEvent(new org.spigotmc.event.entity.EntityDismountEvent(this.getBukkitEntity(), this.ridingEntity.getBukkitEntity()));     // Spigot
                 this.setLocationAndAngles(this.ridingEntity.posX, this.ridingEntity.boundingBox.minY + (double)this.ridingEntity.height, this.ridingEntity.posZ, this.rotationYaw, this.rotationPitch);
                 this.ridingEntity.riddenByEntity = null;
             }
@@ -1668,20 +2008,59 @@ public abstract class Entity
         }
         else
         {
-            if (this.ridingEntity != null)
+            // CraftBukkit start
+            if ((this.bukkitEntity instanceof LivingEntity) && (p_70078_1_.getBukkitEntity() instanceof Vehicle) && p_70078_1_.worldObj.chunkExists((int) p_70078_1_.posX >> 4, (int) p_70078_1_.posZ >> 4))
             {
-                this.ridingEntity.riddenByEntity = null;
-            }
+                // It's possible to move from one vehicle to another.  We need to check if they're already in a vehicle, and fire an exit event if they are.
+                VehicleExitEvent exitEvent = null;
 
-            if (p_70078_1_ != null)
-            {
-                for (Entity entity1 = p_70078_1_.ridingEntity; entity1 != null; entity1 = entity1.ridingEntity)
+                if (this.ridingEntity != null && this.ridingEntity.getBukkitEntity() instanceof Vehicle)
                 {
-                    if (entity1 == this)
+                    exitEvent = new VehicleExitEvent((Vehicle) this.ridingEntity.getBukkitEntity(), (LivingEntity) this.bukkitEntity);
+                    pluginManager.callEvent(exitEvent);
+
+                    if (exitEvent.isCancelled() || this.ridingEntity != originalVehicle || (this.ridingEntity != null && this.ridingEntity.riddenByEntity != originalPassenger))
                     {
                         return;
                     }
                 }
+
+                VehicleEnterEvent event = new VehicleEnterEvent((Vehicle) p_70078_1_.getBukkitEntity(), this.bukkitEntity);
+                pluginManager.callEvent(event);
+
+                // If a plugin messes with the vehicle or the vehicle's passenger
+                if (event.isCancelled() || this.ridingEntity != originalVehicle || (this.ridingEntity != null && this.ridingEntity.riddenByEntity != originalPassenger))
+                {
+                    // If we only cancelled the enterevent then we need to put the player in a decent position.
+                    if (exitEvent != null && this.ridingEntity == originalVehicle && this.ridingEntity != null && this.ridingEntity.riddenByEntity == originalPassenger)
+                    {
+                        this.setLocationAndAngles(this.ridingEntity.posX, this.ridingEntity.boundingBox.minY + (double) this.ridingEntity.height, this.ridingEntity.posZ, this.rotationYaw, this.rotationPitch);
+                        this.ridingEntity.riddenByEntity = null;
+                        this.ridingEntity = null;
+                    }
+
+                    return;
+                }
+            }
+
+            // CraftBukkit end
+            // Spigot Start
+            if (p_70078_1_.worldObj.chunkExists((int) p_70078_1_.posX >> 4, (int) p_70078_1_.posZ >> 4))
+            {
+                org.spigotmc.event.entity.EntityMountEvent event = new org.spigotmc.event.entity.EntityMountEvent(this.getBukkitEntity(), p_70078_1_.getBukkitEntity());
+                pluginManager.callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+            }
+
+            // Spigot End
+
+            if (this.ridingEntity != null)
+            {
+                this.ridingEntity.riddenByEntity = null;
             }
 
             this.ridingEntity = p_70078_1_;
@@ -1860,12 +2239,59 @@ public abstract class Entity
 
     public void onStruckByLightning(EntityLightningBolt p_70077_1_)
     {
-        this.dealFireDamage(5);
+        // CraftBukkit start
+        final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+        if (thisBukkitEntity == null) return; // Cauldron - skip mod entities with no wrapper (TODO: create a wrapper)
+        if (p_70077_1_ == null) return; // Cauldron - skip null entities, see #392
+        final org.bukkit.entity.Entity stormBukkitEntity = p_70077_1_.getBukkitEntity();
+        if (stormBukkitEntity == null) return; // Cauldron - skip mod entities with no wrapper (TODO: create a wrapper)
+        final PluginManager pluginManager = Bukkit.getPluginManager();
+
+        if (thisBukkitEntity instanceof Hanging)
+        {
+            HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+            PaintingBreakByEntityEvent paintingEvent = null;
+
+            if (thisBukkitEntity instanceof Painting) {
+                paintingEvent = new PaintingBreakByEntityEvent((Painting) thisBukkitEntity, stormBukkitEntity);
+            }
+
+            pluginManager.callEvent(hangingEvent);
+
+            if (paintingEvent != null) {
+                paintingEvent.setCancelled(hangingEvent.isCancelled());
+                pluginManager.callEvent(paintingEvent);
+            }
+
+            if (hangingEvent.isCancelled() || (paintingEvent != null && paintingEvent.isCancelled())) {
+                return;
+            }
+        }
+
+        if (this.isImmuneToFire) {
+            return;
+        }
+        CraftEventFactory.entityDamage = p_70077_1_;
+        if (!this.attackEntityFrom(DamageSource.inFire, 5.0F)) {
+            CraftEventFactory.entityDamage = null;
+            return;
+        }
+
+        // CraftBukkit end
         ++this.fire;
 
         if (this.fire == 0)
         {
-            this.setFire(8);
+            // CraftBukkit start - Call a combust event when lightning strikes
+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+            pluginManager.callEvent(entityCombustEvent);
+
+            if (!entityCombustEvent.isCancelled())
+            {
+                this.setFire(entityCombustEvent.getDuration());
+            }
+
+            // CraftBukkit end
         }
     }
 
@@ -2038,36 +2464,62 @@ public abstract class Entity
         {
             this.worldObj.theProfiler.startSection("changeDimension");
             MinecraftServer minecraftserver = MinecraftServer.getServer();
-            int j = this.dimension;
-            WorldServer worldserver = minecraftserver.worldServerForDimension(j);
-            WorldServer worldserver1 = minecraftserver.worldServerForDimension(p_71027_1_);
-            this.dimension = p_71027_1_;
+            // CraftBukkit start - Move logic into new function "teleportToLocation"
+            // int j = this.dimension;
+            // Cauldron start - Allow Forge hotloading on teleport
+            WorldServer exitWorld = minecraftserver.worldServerForDimension(p_71027_1_);
+
+            Location enter = this.getBukkitEntity().getLocation();
+            Location exit = exitWorld != null ? minecraftserver.getConfigurationManager().calculateTarget(enter, minecraftserver.worldServerForDimension(p_71027_1_)) : null;
+            boolean useTravelAgent = exitWorld != null && !(this.dimension == 1 && exitWorld.dimension == 1); // don't use agent for custom worlds or return from THE_END
+            // Cauldron start - check if teleporter is instance of TravelAgent before attempting to cast to it
+            Teleporter teleporter = exit != null ? ((CraftWorld) exit.getWorld()).getHandle().getDefaultTeleporter() : null;
+            TravelAgent agent = (teleporter != null && teleporter instanceof TravelAgent) ? (TravelAgent)teleporter : org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT;  // return arbitrary TA to compensate for implementation dependent plugins
+            // Cauldron end
+            EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit, agent);
+            event.useTravelAgent(useTravelAgent);
+            event.getEntity().getServer().getPluginManager().callEvent(event);
 
-            if (j == 1 && p_71027_1_ == 1)
+            if (event.isCancelled() || event.getTo() == null || !this.isEntityAlive())
             {
-                worldserver1 = minecraftserver.worldServerForDimension(0);
-                this.dimension = 0;
+                return;
             }
 
+            exit = event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
+            this.teleportTo(exit, true);
+        }
+    }
+
+    public void teleportTo(Location exit, boolean portal)
+    {
+        if (true)
+        {
+            WorldServer worldserver = ((CraftWorld) this.getBukkitEntity().getLocation().getWorld()).getHandle();
+            WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+            int i = worldserver1.dimension;
+            // CraftBukkit end
+            this.dimension = i;
             this.worldObj.removeEntity(this);
             this.isDead = false;
             this.worldObj.theProfiler.startSection("reposition");
-            minecraftserver.getConfigurationManager().transferEntityToWorld(this, j, worldserver, worldserver1);
+            // CraftBukkit start - Ensure chunks are loaded in case TravelAgent is not used which would initially cause chunks to load during find/create
+            // minecraftserver.getPlayerList().a(this, j, worldserver, worldserver1);
+            boolean before = worldserver1.theChunkProviderServer.loadChunkOnProvideRequest;  // Cauldron start - load chunks on provide request
+            worldserver1.theChunkProviderServer.loadChunkOnProvideRequest = true;
+            worldserver1.func_73046_m().getConfigurationManager().repositionEntity(this, exit, portal);
+            worldserver1.theChunkProviderServer.loadChunkOnProvideRequest = before; // Cauldron end
+            // CraftBukkit end
             this.worldObj.theProfiler.endStartSection("reloading");
             Entity entity = EntityList.createEntityByName(EntityList.getEntityString(this), worldserver1);
 
             if (entity != null)
             {
                 entity.copyDataFrom(this, true);
-
-                if (j == 1 && p_71027_1_ == 1)
-                {
-                    ChunkCoordinates chunkcoordinates = worldserver1.getSpawnPoint();
-                    chunkcoordinates.posY = this.worldObj.getTopSolidOrLiquidBlock(chunkcoordinates.posX, chunkcoordinates.posZ);
-                    entity.setLocationAndAngles((double)chunkcoordinates.posX, (double)chunkcoordinates.posY, (double)chunkcoordinates.posZ, entity.rotationYaw, entity.rotationPitch);
-                }
-
                 worldserver1.spawnEntityInWorld(entity);
+                // CraftBukkit start - Forward the CraftEntity to the new entity
+                this.getBukkitEntity().setHandle(entity);
+                entity.bukkitEntity = this.getBukkitEntity();
+                // CraftBukkit end
             }
 
             this.isDead = true;
@@ -2474,4 +2925,14 @@ public abstract class Entity
                 }
             }
         }
+    
+    // Cauldron start
+    public boolean entityAllowedToSpawn() {
+        return true;
+    }
+    
+    public boolean entityProjectileHook() {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityAgeable.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityAgeable.java
index 0e9e775..858a080 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityAgeable.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityAgeable.java
@@ -10,6 +10,36 @@ public abstract class EntityAgeable extends EntityCreature
 {
     private float field_98056_d = -1.0F;
     private float field_98057_e;
+    public boolean ageLocked = false; // CraftBukkit
+
+    // Spigot start
+    @Override
+    public void inactiveTick()
+    {
+        super.inactiveTick();
+
+        if (this.worldObj.isRemote || this.ageLocked)
+        {
+            // CraftBukkit
+            this.setScaleForAge(this.isChild());
+        }
+        else
+        {
+            int i = this.getGrowingAge();
+
+            if (i < 0)
+            {
+                ++i;
+                this.setGrowingAge(i);
+            }
+            else if (i > 0)
+            {
+                --i;
+                this.setGrowingAge(i);
+            }
+        }
+    }
+    // Spigot end
     private static final String __OBFID = "CL_00001530";
 
     public EntityAgeable(World p_i1578_1_)
@@ -37,7 +67,7 @@ public abstract class EntityAgeable extends EntityCreature
                     {
                         entityageable.setGrowingAge(-24000);
                         entityageable.setLocationAndAngles(this.posX, this.posY, this.posZ, 0.0F, 0.0F);
-                        this.worldObj.spawnEntityInWorld(entityageable);
+                        this.worldObj.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG); // CraftBukkit
 
                         if (itemstack.hasDisplayName())
                         {
@@ -48,7 +78,7 @@ public abstract class EntityAgeable extends EntityCreature
                         {
                             --itemstack.stackSize;
 
-                            if (itemstack.stackSize <= 0)
+                            if (itemstack.stackSize == 0)    // CraftBukkit - allow less than 0 stacks as "infinite"
                             {
                                 p_70085_1_.inventory.setInventorySlotContents(p_70085_1_.inventory.currentItem, (ItemStack)null);
                             }
@@ -99,19 +129,21 @@ public abstract class EntityAgeable extends EntityCreature
     {
         super.writeEntityToNBT(p_70014_1_);
         p_70014_1_.setInteger("Age", this.getGrowingAge());
+        p_70014_1_.setBoolean("AgeLocked", this.ageLocked); // CraftBukkit
     }
 
     public void readEntityFromNBT(NBTTagCompound p_70037_1_)
     {
         super.readEntityFromNBT(p_70037_1_);
         this.setGrowingAge(p_70037_1_.getInteger("Age"));
+        this.ageLocked = p_70037_1_.getBoolean("AgeLocked"); // CraftBukkit
     }
 
     public void onLivingUpdate()
     {
         super.onLivingUpdate();
 
-        if (this.worldObj.isRemote)
+        if (this.worldObj.isRemote || this.ageLocked)   // CraftBukkit
         {
             this.setScaleForAge(this.isChild());
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityCreature.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityCreature.java
index e60348f..7d72c18 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityCreature.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityCreature.java
@@ -13,12 +13,18 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
+// CraftBukkit end
+
 public abstract class EntityCreature extends EntityLiving
 {
     public static final UUID field_110179_h = UUID.fromString("E199AD21-BA8A-4C53-8D13-6182D5C69D3A");
     public static final AttributeModifier field_110181_i = (new AttributeModifier(field_110179_h, "Fleeing speed bonus", 2.0D, 2)).setSaved(false);
-    private PathEntity pathToEntity;
-    protected Entity entityToAttack;
+    public PathEntity pathToEntity; // CraftBukkit - private -> public
+    public Entity entityToAttack; // CraftBukkit - protected -> public
     protected boolean hasAttacked;
     protected int fleeingTick;
     private ChunkCoordinates homePosition = new ChunkCoordinates(0, 0, 0);
@@ -52,7 +58,28 @@ public abstract class EntityCreature extends EntityLiving
 
         if (this.entityToAttack == null)
         {
-            this.entityToAttack = this.findPlayerToAttack();
+            // CraftBukkit start
+            Entity target = this.findPlayerToAttack();
+
+            if (target != null)
+            {
+                EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), target.getBukkitEntity(), EntityTargetEvent.TargetReason.CLOSEST_PLAYER);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    if (event.getTarget() == null)
+                    {
+                        this.entityToAttack = null;
+                    }
+                    else
+                    {
+                        this.entityToAttack = ((CraftEntity) event.getTarget()).getHandle();
+                    }
+                }
+            }
+
+            // CraftBukkit end
 
             if (this.entityToAttack != null)
             {
@@ -70,7 +97,23 @@ public abstract class EntityCreature extends EntityLiving
         }
         else
         {
-            this.entityToAttack = null;
+            // CraftBukkit start
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), null, EntityTargetEvent.TargetReason.TARGET_DIED);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                if (event.getTarget() == null)
+                {
+                    this.entityToAttack = null;
+                }
+                else
+                {
+                    this.entityToAttack = ((CraftEntity) event.getTarget()).getHandle();
+                }
+            }
+
+            // CraftBukkit end
         }
 
         if (this.entityToAttack instanceof EntityPlayerMP && ((EntityPlayerMP)this.entityToAttack).theItemInWorldManager.isCreative())
@@ -122,7 +165,8 @@ public abstract class EntityCreature extends EntityLiving
                 double d1 = vec3.xCoord - this.posX;
                 double d2 = vec3.zCoord - this.posZ;
                 double d3 = vec3.yCoord - (double)i;
-                float f1 = (float)(Math.atan2(d2, d1) * 180.0D / Math.PI) - 90.0F;
+                // CraftBukkit - Math -> TrigMath
+                float f1 = (float)(org.bukkit.craftbukkit.TrigMath.atan2(d2, d1) * 180.0D / Math.PI) - 90.0F;
                 float f2 = MathHelper.wrapAngleTo180_float(f1 - this.rotationYaw);
                 this.moveForward = (float)this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getAttributeValue();
 
@@ -303,6 +347,7 @@ public abstract class EntityCreature extends EntityLiving
             {
                 if (f > 10.0F)
                 {
+                    this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.DISTANCE)); // CraftBukkit
                     this.clearLeashed(true, true);
                 }
 
@@ -335,6 +380,7 @@ public abstract class EntityCreature extends EntityLiving
 
             if (f > 10.0F)
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.DISTANCE)); // CraftBukkit
                 this.clearLeashed(true, true);
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityHanging.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityHanging.java
index cd3e757..24dac45 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityHanging.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityHanging.java
@@ -10,6 +10,14 @@ import net.minecraft.util.Direction;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.item.EntityPainting;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Painting;
+import org.bukkit.event.hanging.HangingBreakEvent;
+import org.bukkit.event.painting.PaintingBreakEvent;
+// CraftBukkit end
+
 public abstract class EntityHanging extends Entity
 {
     private int tickCounter1;
@@ -125,6 +133,38 @@ public abstract class EntityHanging extends Entity
 
             if (!this.isDead && !this.onValidSurface())
             {
+                // CraftBukkit start
+                Material material = this.worldObj.getBlock((int) this.posX, (int) this.posY, (int) this.posZ).getMaterial();
+                HangingBreakEvent.RemoveCause cause;
+
+                if (!material.equals(Material.air))
+                {
+                    // TODO: This feels insufficient to catch 100% of suffocation cases
+                    cause = HangingBreakEvent.RemoveCause.OBSTRUCTION;
+                }
+                else
+                {
+                    cause = HangingBreakEvent.RemoveCause.PHYSICS;
+                }
+
+                HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+                PaintingBreakEvent paintingEvent = null;
+
+                if (this instanceof EntityPainting)
+                {
+                    // Fire old painting event until it can be removed
+                    paintingEvent = new PaintingBreakEvent((Painting) this.getBukkitEntity(), PaintingBreakEvent.RemoveCause.valueOf(cause.name()));
+                    paintingEvent.setCancelled(event.isCancelled());
+                    this.worldObj.getServer().getPluginManager().callEvent(paintingEvent);
+                }
+
+                if (isDead || event.isCancelled() || (paintingEvent != null && paintingEvent.isCancelled()))
+                {
+                    return;
+                }
+
+                // CraftBukkit end
                 this.setDead();
                 this.onBroken((Entity)null);
             }
@@ -233,6 +273,39 @@ public abstract class EntityHanging extends Entity
         {
             if (!this.isDead && !this.worldObj.isRemote)
             {
+                // CraftBukkit start
+                HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.DEFAULT);
+                PaintingBreakEvent paintingEvent = null;
+
+                if (p_70097_1_.getEntity() != null)
+                {
+                    event = new org.bukkit.event.hanging.HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), p_70097_1_.getEntity() == null ? null : p_70097_1_.getEntity().getBukkitEntity());
+
+                    if (this instanceof EntityPainting)
+                    {
+                        // Fire old painting event until it can be removed
+                        paintingEvent = new org.bukkit.event.painting.PaintingBreakByEntityEvent((Painting) this.getBukkitEntity(), p_70097_1_.getEntity() == null ? null : p_70097_1_.getEntity().getBukkitEntity());
+                    }
+                }
+                else if (p_70097_1_.isExplosion())
+                {
+                    event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.EXPLOSION);
+                }
+
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (paintingEvent != null)
+                {
+                    paintingEvent.setCancelled(event.isCancelled());
+                    this.worldObj.getServer().getPluginManager().callEvent(paintingEvent);
+                }
+
+                if (this.isDead || event.isCancelled() || (paintingEvent != null && paintingEvent.isCancelled()))
+                {
+                    return true;
+                }
+
+                // CraftBukkit end
                 this.setDead();
                 this.setBeenAttacked();
                 this.onBroken(p_70097_1_.getEntity());
@@ -246,6 +319,22 @@ public abstract class EntityHanging extends Entity
     {
         if (!this.worldObj.isRemote && !this.isDead && p_70091_1_ * p_70091_1_ + p_70091_3_ * p_70091_3_ + p_70091_5_ * p_70091_5_ > 0.0D)
         {
+            if (this.isDead)
+            {
+                return;    // CraftBukkit
+            }
+
+            // CraftBukkit start
+            // TODO - Does this need its own cause? Seems to only be triggered by pistons
+            HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (this.isDead || event.isCancelled())
+            {
+                return;
+            }
+
+            // CraftBukkit end
             this.setDead();
             this.onBroken((Entity)null);
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityLeashKnot.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityLeashKnot.java
index 24764a3..92a9d60 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityLeashKnot.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityLeashKnot.java
@@ -11,6 +13,13 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.world.World;
 
+ // CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S1BPacketEntityAttach;
+
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
+
 public class EntityLeashKnot extends EntityHanging
 {
     private static final String __OBFID = "CL_00001548";
@@ -84,6 +93,14 @@ public class EntityLeashKnot extends EntityHanging
 
                     if (entityliving.getLeashed() && entityliving.getLeashedToEntity() == p_130002_1_)
                     {
+                        // CraftBukkit start
+                        if (CraftEventFactory.callPlayerLeashEntityEvent(entityliving, this, p_130002_1_).isCancelled())
+                        {
+                            ((EntityPlayerMP) p_130002_1_).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, entityliving, entityliving.getLeashedToEntity()));
+                            continue;
+                        }
+
+                        // CraftBukkit end
                         entityliving.setLeashedToEntity(this, true);
                         flag = true;
                     }
@@ -93,9 +110,12 @@ public class EntityLeashKnot extends EntityHanging
 
         if (!this.worldObj.isRemote && !flag)
         {
-            this.setDead();
+            // CraftBukkit start - Move below
+            //this.setDead();
+            boolean die = true;
 
-            if (p_130002_1_.capabilities.isCreativeMode)
+            // CraftBukkit end
+            if (true || p_130002_1_.capabilities.isCreativeMode)   // CraftBukkit - Process for non-creative as well
             {
                 d0 = 7.0D;
                 list = this.worldObj.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getBoundingBox(this.posX - d0, this.posY - d0, this.posZ - d0, this.posX + d0, this.posY + d0, this.posZ + d0));
@@ -110,11 +130,27 @@ public class EntityLeashKnot extends EntityHanging
 
                         if (entityliving.getLeashed() && entityliving.getLeashedToEntity() == this)
                         {
-                            entityliving.clearLeashed(true, false);
+                            // CraftBukkit start
+                            if (CraftEventFactory.callPlayerUnleashEntityEvent(entityliving, p_130002_1_).isCancelled())
+                            {
+                                die = false;
+                                continue;
+                            }
+
+                            entityliving.clearLeashed(true, !p_130002_1_.capabilities.isCreativeMode); // false -> survival mode boolean
+                            // CraftBukkit end
                         }
                     }
                 }
             }
+
+            // CraftBukkit start
+            if (die)
+            {
+                this.setDead();
+            }
+
+            // CraftBukkit end
         }
 
         return true;
@@ -154,4 +190,11 @@ public class EntityLeashKnot extends EntityHanging
 
         return null;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityLiving.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityLiving.java
index 2a3a366..d14c43d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityLiving.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityLiving.java
@@ -38,6 +38,13 @@ import net.minecraftforge.common.ForgeHooks;
 import cpw.mods.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.event.ForgeEventFactory;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
+// CraftBukkit end
+
 public abstract class EntityLiving extends EntityLivingBase
 {
     public int livingSoundTime;
@@ -52,9 +59,9 @@ public abstract class EntityLiving extends EntityLivingBase
     private EntityLivingBase attackTarget;
     private EntitySenses senses;
     private ItemStack[] equipment = new ItemStack[5];
-    protected float[] equipmentDropChances = new float[5];
-    private boolean canPickUpLoot;
-    private boolean persistenceRequired;
+    public float[] equipmentDropChances = new float[5]; // CraftBukkit - protected -> public
+    public boolean canPickUpLoot; // CraftBukkit - private -> public
+    public boolean persistenceRequired; // CraftBukkit - private -> public
     protected float defaultPitch;
     private Entity currentTarget;
     protected int numTicksToChaseTarget;
@@ -311,8 +318,22 @@ public abstract class EntityLiving extends EntityLivingBase
     public void readEntityFromNBT(NBTTagCompound p_70037_1_)
     {
         super.readEntityFromNBT(p_70037_1_);
-        this.setCanPickUpLoot(p_70037_1_.getBoolean("CanPickUpLoot"));
-        this.persistenceRequired = p_70037_1_.getBoolean("PersistenceRequired");
+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
+        boolean data = p_70037_1_.getBoolean("CanPickUpLoot");
+
+        if (isLevelAtLeast(p_70037_1_, 1) || data)
+        {
+            this.canPickUpLoot = data;
+        }
+
+        data = p_70037_1_.getBoolean("PersistenceRequired");
+
+        if (isLevelAtLeast(p_70037_1_, 1) || data)
+        {
+            this.persistenceRequired = data;
+        }
+
+        // CraftBukkit end
 
         if (p_70037_1_.hasKey("CustomName", 8) && p_70037_1_.getString("CustomName").length() > 0)
         {
@@ -480,6 +501,7 @@ public abstract class EntityLiving extends EntityLivingBase
 
     protected void despawnEntity()
     {
+        if(!canDespawn()) return;
         Result result = null;
         if (this.persistenceRequired)
         {
@@ -521,15 +543,36 @@ public abstract class EntityLiving extends EntityLivingBase
                     this.entityAge = 0;
                 }
             }
+            // Cauldron start - Force despawn of entity if a player isn't near
+            else if (this.worldObj.cauldronConfig.entityDespawnImmediate && this.canDespawn())
+            {
+                this.despawn("No Player : Immediate");
+            }
+            // Cauldron end
         }
     }
 
+    // Cauldron start
+    private void despawn(String reason) {
+        this.setDead();
+        net.minecraftforge.cauldron.CauldronHooks.logEntityDespawn(this, reason);
+    }
+    // Cauldron end
+
     protected void updateAITasks()
     {
         ++this.entityAge;
         this.worldObj.theProfiler.startSection("checkDespawn");
         this.despawnEntity();
         this.worldObj.theProfiler.endSection();
+
+        // Spigot Start
+        if (this.fromMobSpawner)
+        {
+            return;
+        }
+
+        // Spigot End
         this.worldObj.theProfiler.startSection("sensing");
         this.senses.clearSensingCache();
         this.worldObj.theProfiler.endSection();
@@ -1005,6 +1048,14 @@ public abstract class EntityLiving extends EntityLivingBase
     {
         if (this.getLeashed() && this.getLeashedToEntity() == p_130002_1_)
         {
+            // CraftBukkit start
+            if (CraftEventFactory.callPlayerUnleashEntityEvent(this, p_130002_1_).isCancelled())
+            {
+                ((EntityPlayerMP) p_130002_1_).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this, this.getLeashedToEntity()));
+                return false;
+            }
+
+            // CraftBukkit end
             this.clearLeashed(true, !p_130002_1_.capabilities.isCreativeMode);
             return true;
         }
@@ -1016,6 +1067,14 @@ public abstract class EntityLiving extends EntityLivingBase
             {
                 if (!(this instanceof EntityTameable) || !((EntityTameable)this).isTamed())
                 {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(this, p_130002_1_, p_130002_1_).isCancelled())
+                    {
+                        ((EntityPlayerMP) p_130002_1_).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this, this.getLeashedToEntity()));
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.setLeashedToEntity(p_130002_1_, true);
                     --itemstack.stackSize;
                     return true;
@@ -1023,6 +1082,14 @@ public abstract class EntityLiving extends EntityLivingBase
 
                 if (((EntityTameable)this).func_152114_e(p_130002_1_))
                 {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(this, p_130002_1_, p_130002_1_).isCancelled())
+                    {
+                        ((EntityPlayerMP) p_130002_1_).playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this, this.getLeashedToEntity()));
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.setLeashedToEntity(p_130002_1_, true);
                     --itemstack.stackSize;
                     return true;
@@ -1049,6 +1116,7 @@ public abstract class EntityLiving extends EntityLivingBase
         {
             if (this.leashedToEntity == null || this.leashedToEntity.isDead)
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.HOLDER_GONE)); // CraftBukkit
                 this.clearLeashed(true, true);
             }
         }
@@ -1136,10 +1204,16 @@ public abstract class EntityLiving extends EntityLivingBase
             }
             else
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
                 this.clearLeashed(false, true);
             }
         }
 
         this.field_110170_bx = null;
     }
+
+    public boolean canDespawn_CB()
+    {
+        return this.canDespawn();
+    }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityLivingBase.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityLivingBase.java
index 16ebce8..f04e5e8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityLivingBase.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityLivingBase.java
@@ -50,14 +52,30 @@ import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor.ArmorProperties;
+
+// CraftBukkit start
+import net.minecraft.nbt.NBTTagInt;
+import net.minecraft.network.play.server.S28PacketEffect;
+
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.bukkit.craftbukkit.inventory.CraftItemStack; // Cauldron
+
+import com.google.common.base.Function;
 
 public abstract class EntityLivingBase extends Entity
 {
     private static final UUID sprintingSpeedBoostModifierUUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier sprintingSpeedBoostModifier = (new AttributeModifier(sprintingSpeedBoostModifierUUID, "Sprinting speed boost", 0.30000001192092896D, 2)).setSaved(false);
     private BaseAttributeMap attributeMap;
-    private final CombatTracker _combatTracker = new CombatTracker(this);
-    private final HashMap activePotionsMap = new HashMap();
+    public CombatTracker _combatTracker = new CombatTracker(this); // CraftBukkit - private -> public, remove final
+    public final HashMap activePotionsMap = new HashMap(); // CraftBukkit - protected -> public
     private final ItemStack[] previousEquipment = new ItemStack[5];
     public boolean isSwingInProgress;
     public int swingProgressInt;
@@ -83,7 +101,7 @@ public abstract class EntityLivingBase extends Entity
     public float rotationYawHead;
     public float prevRotationYawHead;
     public float jumpMovementFactor = 0.02F;
-    protected EntityPlayer attackingPlayer;
+    public EntityPlayer attackingPlayer; // CraftBukkit - protected -> public
     protected int recentlyHit;
     protected boolean dead;
     protected int entityAge;
@@ -93,7 +111,7 @@ public abstract class EntityLivingBase extends Entity
     protected float field_70763_ax;
     protected float field_70741_aB;
     protected int scoreValue;
-    protected float lastDamage;
+    public float lastDamage; // CraftBukkit - protected -> public
     protected boolean isJumping;
     public float moveStrafing;
     public float moveForward;
@@ -104,21 +122,26 @@ public abstract class EntityLivingBase extends Entity
     protected double newPosZ;
     protected double newRotationYaw;
     protected double newRotationPitch;
-    private boolean potionsNeedUpdate = true;
-    private EntityLivingBase entityLivingToAttack;
+    public boolean potionsNeedUpdate = true; // CraftBukkit - private -> public
+    public EntityLivingBase entityLivingToAttack; // CraftBukkit - private -> public
     private int revengeTimer;
     private EntityLivingBase lastAttacker;
     private int lastAttackerTime;
     private float landMovementFactor;
     private int jumpTicks;
     private float field_110151_bq;
+    // CraftBukkit start
+    public int expToDrop;
+    public int maxAirTicks = 300;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001549";
 
     public EntityLivingBase(World p_i1594_1_)
     {
         super(p_i1594_1_);
         this.applyEntityAttributes();
-        this.setHealth(this.getMaxHealth());
+        // CraftBukkit - this.setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+        this.dataWatcher.updateObject(6, (float) this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue());
         this.preventEntitySpawning = true;
         this.field_70770_ap = (float)(Math.random() + 1.0D) * 0.01F;
         this.setPosition(this.posX, this.posY, this.posZ);
@@ -173,7 +196,18 @@ public abstract class EntityLivingBase extends Entity
             }
             else if (!this.worldObj.isRemote && this.fallDistance > 3.0F)
             {
-                this.worldObj.playAuxSFX(2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F));
+                // CraftBukkit start - supply player as argument in particles for visibility API to work
+                if (this instanceof EntityPlayerMP)
+                {
+                    this.worldObj.playAuxSFXAtEntity((EntityPlayer) this, 2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F));
+                    ((EntityPlayerMP) this).playerNetServerHandler.sendPacket(new S28PacketEffect(2006, i, j, k, MathHelper
+                            .ceiling_float_int(this.fallDistance - 3.0F), false));
+                }
+                else
+                {
+                    this.worldObj.playAuxSFX(2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F));
+                }
+                // CraftBukkit end
             }
 
             block.onFallenUpon(this.worldObj, i, j, k, this, this.fallDistance);
@@ -234,7 +268,12 @@ public abstract class EntityLivingBase extends Entity
         }
         else
         {
-            this.setAir(300);
+            // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
+            if (this.getAir() != 300)
+            {
+                this.setAir(maxAirTicks);
+            }
+            // CraftBukkit end
         }
 
         if (this.isEntityAlive() && this.isWet())
@@ -299,6 +338,22 @@ public abstract class EntityLivingBase extends Entity
         this.worldObj.theProfiler.endSection();
     }
 
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        int exp = this.getExperiencePoints(this.attackingPlayer);
+
+        if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.func_146066_aG())
+        {
+            return exp;
+        }
+        else
+        {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
     public boolean isChild()
     {
         return false;
@@ -308,22 +363,21 @@ public abstract class EntityLivingBase extends Entity
     {
         ++this.deathTime;
 
-        if (this.deathTime == 20)
+        if (this.deathTime >= 20 && !this.isDead)   // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
         {
             int i;
+            // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+            i = this.expToDrop;
 
-            if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.func_146066_aG() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
+            while (i > 0)
             {
-                i = this.getExperiencePoints(this.attackingPlayer);
-
-                while (i > 0)
-                {
-                    int j = EntityXPOrb.getXPSplit(i);
-                    i -= j;
-                    this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
-                }
+                int j = EntityXPOrb.getXPSplit(i);
+                i -= j;
+                this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
             }
 
+            this.expToDrop = 0;
+            // CraftBukkit end
             this.setDead();
 
             for (i = 0; i < 20; ++i)
@@ -485,6 +539,22 @@ public abstract class EntityLivingBase extends Entity
             }
         }
 
+        // CraftBukkit start
+        if (p_70037_1_.hasKey("Bukkit.MaxHealth"))
+        {
+            NBTBase nbtbase = p_70037_1_.getTag("Bukkit.MaxHealth");
+
+            if (nbtbase.getId() == 5)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue((double) ((NBTTagFloat) nbtbase).func_150291_c());
+            }
+            else if (nbtbase.getId() == 3)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue((double) ((NBTTagInt) nbtbase).func_150287_d());
+            }
+        }
+        // CraftBukkit end
+
         if (p_70037_1_.hasKey("HealF", 99))
         {
             this.setHealth(p_70037_1_.getFloat("HealF"));
@@ -614,12 +684,14 @@ public abstract class EntityLivingBase extends Entity
 
     public boolean isPotionActive(int p_82165_1_)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(p_82165_1_));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(p_82165_1_));
     }
 
     public boolean isPotionActive(Potion p_70644_1_)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(p_70644_1_.id));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(p_70644_1_.id));
     }
 
     public PotionEffect getActivePotionEffect(Potion p_70660_1_)
@@ -710,25 +782,66 @@ public abstract class EntityLivingBase extends Entity
         }
     }
 
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     public void heal(float p_70691_1_)
     {
+        heal(p_70691_1_, EntityRegainHealthEvent.RegainReason.CUSTOM);
+    }
+
+    public void heal(float p_70691_1_, EntityRegainHealthEvent.RegainReason regainReason)
+    {
         p_70691_1_ = net.minecraftforge.event.ForgeEventFactory.onLivingHeal(this, p_70691_1_);
         if (p_70691_1_ <= 0) return;
         float f1 = this.getHealth();
 
         if (f1 > 0.0F)
         {
-            this.setHealth(f1 + p_70691_1_);
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), p_70691_1_, regainReason);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.setHealth((float) (this.getHealth() + event.getAmount()));
+            }
         }
     }
 
     public final float getHealth()
     {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof EntityPlayerMP)
+        {
+            return (float) ((EntityPlayerMP) this).getBukkitEntity().getHealth();
+        }
+        // CraftBukkit end
         return this.dataWatcher.getWatchableObjectFloat(6);
     }
 
     public void setHealth(float p_70606_1_)
     {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof EntityPlayerMP)
+        {
+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((EntityPlayerMP) this).getBukkitEntity();
+
+            // Squeeze
+            if (p_70606_1_ < 0.0F)
+            {
+                player.setRealHealth(0.0D);
+            }
+            else if (p_70606_1_ > player.getMaxHealth())
+            {
+                player.setRealHealth(player.getMaxHealth());
+            }
+            else
+            {
+                player.setRealHealth(p_70606_1_);
+            }
+
+            this.dataWatcher.updateObject(6, Float.valueOf(player.getScaledHealth()));
+            return;
+        }
+        // CraftBukkit end
         this.dataWatcher.updateObject(6, Float.valueOf(MathHelper.clamp_float(p_70606_1_, 0.0F, this.getMaxHealth())));
     }
 
@@ -757,7 +870,8 @@ public abstract class EntityLivingBase extends Entity
             }
             else
             {
-                if ((p_70097_1_ == DamageSource.anvil || p_70097_1_ == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
+                // CraftBukkit - Moved into damageEntity_CB(DamageSource, float)
+                if (false && (p_70097_1_ == DamageSource.anvil || p_70097_1_ == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
                 {
                     this.getEquipmentInSlot(4).damageItem((int)(p_70097_2_ * 4.0F + this.rand.nextFloat() * p_70097_2_ * 2.0F), this);
                     p_70097_2_ *= 0.75F;
@@ -773,16 +887,27 @@ public abstract class EntityLivingBase extends Entity
                         return false;
                     }
 
-                    this.damageEntity(p_70097_1_, p_70097_2_ - this.lastDamage);
+                    // CraftBukkit start
+                    if (!this.damageEntity_CB(p_70097_1_, p_70097_2_ - this.lastDamage))
+                    {
+                        return false;
+                    }
+                    // CraftBukkit end
                     this.lastDamage = p_70097_2_;
                     flag = false;
                 }
                 else
                 {
+                    // CraftBukkit start
+                    float previousHealth = this.getHealth();
+                    if (!this.damageEntity_CB(p_70097_1_, p_70097_2_))
+                    {
+                        return false;
+                    }
                     this.lastDamage = p_70097_2_;
-                    this.prevHealth = this.getHealth();
+                    this.prevHealth = previousHealth;
                     this.hurtResistantTime = this.maxHurtResistantTime;
-                    this.damageEntity(p_70097_1_, p_70097_2_);
+                    // CraftBukkit end
                     this.hurtTime = this.maxHurtTime = 10;
                 }
 
@@ -938,6 +1063,22 @@ public abstract class EntityLivingBase extends Entity
 
             if (!ForgeHooks.onLivingDrops(this, p_70645_1_, capturedDrops, i, recentlyHit > 0, j))
             {
+                // Cauldron start - capture drops for plugins then fire event
+                if (this.capturedDrops.size() > 0)
+                {
+                    java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+                    for (EntityItem item : capturedDrops)
+                    {
+                        loot.add(CraftItemStack.asCraftMirror(item.getEntityItem()));
+                    }
+                    CraftEventFactory.callEntityDeathEvent(this, loot);
+                }
+                else
+                {
+                    CraftEventFactory.callEntityDeathEvent(this);
+                }
+                // Cauldron end
+
                 for (EntityItem item : capturedDrops)
                 {
                     worldObj.spawnEntityInWorld(item);
@@ -1010,8 +1151,17 @@ public abstract class EntityLivingBase extends Entity
 
         if (i > 0)
         {
+            // CraftBukkit start
+            if (!this.attackEntityFrom(DamageSource.fall, (float) i))
+            {
+                return;
+            }
+        }
+        // CraftBukkit end
+        if (i > 0)
+        {
             this.playSound(this.func_146067_o(i), 1.0F, 1.0F);
-            this.attackEntityFrom(DamageSource.fall, (float)i);
+            // this.attackEntityFrom(DamageSource.fall, (float)i); // CraftBukkit - moved up
             int j = MathHelper.floor_double(this.posX);
             int k = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
             int l = MathHelper.floor_double(this.posZ);
@@ -1065,7 +1215,7 @@ public abstract class EntityLivingBase extends Entity
         {
             int i = 25 - this.getTotalArmorValue();
             float f1 = p_70655_2_ * (float)i;
-            this.damageArmor(p_70655_2_);
+            // this.damageArmor(p_70655_2_); // CraftBukkit - Moved into damageEntity_CB(DamageSource, float)
             p_70655_2_ = f1 / 25.0F;
         }
 
@@ -1089,7 +1239,8 @@ public abstract class EntityLivingBase extends Entity
             int j;
             float f1;
 
-            if (this.isPotionActive(Potion.resistance) && p_70672_1_ != DamageSource.outOfWorld)
+            // CraftBukkit - Moved to damageEntity_CB(DamageSource, float)
+            if (false && this.isPotionActive(Potion.resistance) && p_70672_1_ != DamageSource.outOfWorld)
             {
                 i = (this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
                 j = 25 - i;
@@ -1122,26 +1273,161 @@ public abstract class EntityLivingBase extends Entity
         }
     }
 
+    // Cauldron start - vanilla compatibility
     protected void damageEntity(DamageSource p_70665_1_, float p_70665_2_)
     {
+        this.damageEntity_CB(p_70665_1_, p_70665_2_);
+    }
+
+    // Cauldron end
+
+    // CraftBukkit start
+    protected boolean damageEntity_CB(final DamageSource damagesource, float f)
+    { // void -> boolean, add final
         if (!this.isEntityInvulnerable())
         {
-            p_70665_2_ = ForgeHooks.onLivingHurt(this, p_70665_1_, p_70665_2_);
-            if (p_70665_2_ <= 0) return;
-            p_70665_2_ = this.applyArmorCalculations(p_70665_1_, p_70665_2_);
-            p_70665_2_ = this.applyPotionDamageCalculations(p_70665_1_, p_70665_2_);
-            float f1 = p_70665_2_;
-            p_70665_2_ = Math.max(p_70665_2_ - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (f1 - p_70665_2_));
+            final boolean human = this instanceof EntityPlayer;
+            float originalDamage = f;
+            // Cauldron start - apply forge damage hook
+            f = ForgeHooks.onLivingHurt(this, damagesource, f);
+            if (f <= 0) return true;
+            // Cauldron end
+            Function<Double, Double> hardHat = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f)
+                {
+                    if ((damagesource == DamageSource.anvil || damagesource == DamageSource.fallingBlock)
+                            && EntityLivingBase.this.getEquipmentInSlot(4) != null)
+                    {
+                        return -(f - (f * 0.75F));
+                    }
+                    return -0.0;
+                }
+            };
 
-            if (p_70665_2_ != 0.0F)
+            float hardHatModifier = hardHat.apply((double) f).floatValue();
+            f += hardHatModifier;
+
+            Function<Double, Double> blocking = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f)
+                {
+                    if (human)
+                    {
+                        if (!damagesource.isUnblockable() && ((EntityPlayer) EntityLivingBase.this).isBlocking() && f > 0.0F)
+                        {
+                            return -(f - ((1.0F + f) * 0.5F));
+                        }
+                    }
+                    return -0.0;
+                }
+            };
+            float blockingModifier = blocking.apply((double) f).floatValue();
+            f += blockingModifier;
+
+            Function<Double, Double> armor = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f)
+                {
+                    // Cauldron start - apply forge armor hook
+                    if (human)
+                    {
+                        return -(f - ArmorProperties.ApplyArmor(EntityLivingBase.this, ((EntityPlayer) EntityLivingBase.this).inventory.armorInventory,
+                                damagesource, f.floatValue(), false));
+                    }
+                    // Cauldron end
+                    return -(f - EntityLivingBase.this.applyArmorCalculations(damagesource, f.floatValue()));
+                }
+            };
+            float armorModifier = armor.apply((double) f).floatValue();
+            f += armorModifier;
+
+            Function<Double, Double> resistance = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f)
+                {
+                    if (!damagesource.isDamageAbsolute() && EntityLivingBase.this.isPotionActive(Potion.resistance) && damagesource != DamageSource.outOfWorld)
+                    {
+                        int i = (EntityLivingBase.this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
+                        int j = 25 - i;
+                        float f1 = f.floatValue() * (float) j;
+                        return -(f - (f1 / 25.0F));
+                    }
+                    return -0.0;
+                }
+            };
+            float resistanceModifier = resistance.apply((double) f).floatValue();
+            f += resistanceModifier;
+
+            Function<Double, Double> magic = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f)
+                {
+                    return -(f - EntityLivingBase.this.applyPotionDamageCalculations(damagesource, f.floatValue()));
+                }
+            };
+            float magicModifier = magic.apply((double) f).floatValue();
+            f += magicModifier;
+
+            Function<Double, Double> absorption = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f)
+                {
+                    return -(Math.max(f - Math.max(f - EntityLivingBase.this.getAbsorptionAmount(), 0.0F), 0.0F));
+                }
+            };
+            float absorptionModifier = absorption.apply((double) f).floatValue();
+
+            EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier,
+                    armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+            if (event.isCancelled())
+            {
+                return false;
+            }
+
+            f = (float) event.getFinalDamage();
+
+            // Apply damage to helmet
+            if ((damagesource == DamageSource.anvil || damagesource == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
+            {
+                this.getEquipmentInSlot(4).damageItem((int) (event.getDamage() * 4.0F + this.rand.nextFloat() * event.getDamage() * 2.0F), this);
+            }
+
+            // Apply damage to armor
+            if (!damagesource.isUnblockable())
             {
+                float armorDamage = (float) (event.getDamage() + event.getDamage(DamageModifier.BLOCKING) + event.getDamage(DamageModifier.HARD_HAT));
+                if (human) {
+                    EntityPlayer player = (EntityPlayer) this;
+                    armorDamage = ArmorProperties.ApplyArmor(player, player.inventory.armorInventory, damagesource, armorDamage, true);
+                } else {
+                    this.damageArmor(armorDamage);
+                }
+            }
+
+            absorptionModifier = (float) -event.getDamage(DamageModifier.ABSORPTION);
+            this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+            if (f != 0.0F)
+            {
+                if (human)
+                {
+                    ((EntityPlayer) this).addExhaustion(damagesource.getHungerDamage());
+                }
+                // CraftBukkit end
                 float f2 = this.getHealth();
-                this.setHealth(f2 - p_70665_2_);
-                this.func_110142_aN().func_94547_a(p_70665_1_, f2, p_70665_2_);
-                this.setAbsorptionAmount(this.getAbsorptionAmount() - p_70665_2_);
+                this.setHealth(f2 - f);
+                this.func_110142_aN().func_94547_a(damagesource, f2, f);
+                // CraftBukkit start
+                if (human)
+                {
+                    return true;
+                }
+                // CraftBukkit end
+                this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
             }
+            return true; // CraftBukkit
         }
+        return false; // CraftBukkit
     }
 
     public CombatTracker func_110142_aN()
@@ -1558,6 +1844,7 @@ public abstract class EntityLivingBase extends Entity
     public void onUpdate()
     {
         if (ForgeHooks.onLivingUpdate(this)) return;
+        SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
         super.onUpdate();
 
         if (!this.worldObj.isRemote)
@@ -1608,7 +1895,9 @@ public abstract class EntityLivingBase extends Entity
             }
         }
 
+        SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
         this.onLivingUpdate();
+        SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
         double d0 = this.posX - this.prevPosX;
         double d1 = this.posZ - this.prevPosZ;
         float f = (float)(d0 * d0 + d1 * d1);
@@ -1621,7 +1910,8 @@ public abstract class EntityLivingBase extends Entity
         {
             f3 = 1.0F;
             f2 = (float)Math.sqrt((double)f) * 3.0F;
-            f1 = (float)Math.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
+            // CraftBukkit - Math -> TrigMath
+            f1 = (float) org.bukkit.craftbukkit.TrigMath.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
         }
 
         if (this.swingProgress > 0.0F)
@@ -1682,6 +1972,7 @@ public abstract class EntityLivingBase extends Entity
 
         this.worldObj.theProfiler.endSection();
         this.field_70764_aw += f2;
+        SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
     }
 
     protected float func_110146_f(float p_110146_1_, float p_110146_2_)
@@ -1757,6 +2048,7 @@ public abstract class EntityLivingBase extends Entity
             this.motionZ = 0.0D;
         }
 
+        SpigotTimings.timerEntityAI.startTiming(); // Spigot
         this.worldObj.theProfiler.startSection("ai");
 
         if (this.isMovementBlocked())
@@ -1783,6 +2075,7 @@ public abstract class EntityLivingBase extends Entity
             }
         }
 
+        SpigotTimings.timerEntityAI.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("jump");
 
@@ -1811,13 +2104,17 @@ public abstract class EntityLivingBase extends Entity
         this.moveStrafing *= 0.98F;
         this.moveForward *= 0.98F;
         this.randomYawVelocity *= 0.9F;
+        SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
         this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
+        SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("push");
 
         if (!this.worldObj.isRemote)
         {
+            SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
             this.collideWithNearbyEntities();
+            SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         }
 
         this.worldObj.theProfiler.endSection();
@@ -1829,17 +2126,36 @@ public abstract class EntityLivingBase extends Entity
     {
         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
 
-        if (list != null && !list.isEmpty())
+        if (this.canBeCollidedWith() && list != null && !list.isEmpty()) // Spigot: Add this.canBeCollidedWith() condition
         {
+            numCollisions -= worldObj.getSpigotConfig().maxCollisionsPerEntity; // Spigot // Cauldron
+
             for (int i = 0; i < list.size(); ++i)
             {
-                Entity entity = (Entity)list.get(i);
+                if (numCollisions > worldObj.getSpigotConfig().maxCollisionsPerEntity) // Cauldron
+                {
+                    break; // Spigot
+                }
+
+                Entity entity = (Entity) list.get(i);
+
+                // TODO better check now?
+                // CraftBukkit start - Only handle mob (non-player) collisions
+                // every other tick
+                if (entity instanceof EntityLivingBase && !(this instanceof EntityPlayerMP) && this.ticksExisted % 2 == 0)
+                {
+                    continue;
+                }
+                // CraftBukkit end
 
                 if (entity.canBePushed())
                 {
+                    entity.numCollisions++; // Spigot
+                    numCollisions++; // Spigot
                     this.collideWithEntity(entity);
                 }
             }
+            numCollisions = 0; // Spigot
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityMinecartCommandBlock.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityMinecartCommandBlock.java
index b62d4bc..135b10b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityMinecartCommandBlock.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityMinecartCommandBlock.java
@@ -16,33 +16,9 @@ import net.minecraft.world.World;
 
 public class EntityMinecartCommandBlock extends EntityMinecart
 {
-    private final CommandBlockLogic field_145824_a = new CommandBlockLogic()
-    {
-        private static final String __OBFID = "CL_00001673";
-        public void func_145756_e()
-        {
-            EntityMinecartCommandBlock.this.getDataWatcher().updateObject(23, this.func_145753_i());
-            EntityMinecartCommandBlock.this.getDataWatcher().updateObject(24, IChatComponent.Serializer.func_150696_a(this.func_145749_h()));
-        }
-        @SideOnly(Side.CLIENT)
-        public int func_145751_f()
-        {
-            return 1;
-        }
-        @SideOnly(Side.CLIENT)
-        public void func_145757_a(ByteBuf p_145757_1_)
-        {
-            p_145757_1_.writeInt(EntityMinecartCommandBlock.this.getEntityId());
-        }
-        public ChunkCoordinates getPlayerCoordinates()
-        {
-            return new ChunkCoordinates(MathHelper.floor_double(EntityMinecartCommandBlock.this.posX), MathHelper.floor_double(EntityMinecartCommandBlock.this.posY + 0.5D), MathHelper.floor_double(EntityMinecartCommandBlock.this.posZ));
-        }
-        public World getEntityWorld()
-        {
-            return EntityMinecartCommandBlock.this.worldObj;
-        }
-    };
+    private final EntityMinecartCommandBlockListener field_145824_a_CB= new EntityMinecartCommandBlockListener(this); // CraftBukkit
+    private final CommandBlockLogic field_145824_a = field_145824_a_CB; // Cauldron
+
     private int field_145823_b = 0;
     private static final String __OBFID = "CL_00001672";
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityTracker.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityTracker.java
index 480af9d..580d085 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityTracker.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityTracker.java
@@ -38,6 +38,7 @@ import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import net.minecraft.server.MinecraftServer; // Spigot
 
 import cpw.mods.fml.common.registry.EntityRegistry;
 
@@ -46,7 +47,7 @@ public class EntityTracker
     private static final Logger logger = LogManager.getLogger();
     private final WorldServer theWorld;
     private Set trackedEntities = new HashSet();
-    private IntHashMap trackedEntityIDs = new IntHashMap();
+    public IntHashMap trackedEntityIDs = new IntHashMap(); // CraftBukkit - private -> public
     private int entityViewDistance;
     private static final String __OBFID = "CL_00001431";
 
@@ -65,7 +66,7 @@ public class EntityTracker
 
         if (p_72786_1_ instanceof EntityPlayerMP)
         {
-            this.addEntityToTracker(p_72786_1_, 512, 2);
+            this.addEntityToTracker(p_72786_1_, 512, 1);
             EntityPlayerMP entityplayermp = (EntityPlayerMP)p_72786_1_;
             Iterator iterator = this.trackedEntities.iterator();
 
@@ -73,7 +74,7 @@ public class EntityTracker
             {
                 EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
 
-                if (entitytrackerentry.myEntity != entityplayermp)
+                if (entitytrackerentry != null && entitytrackerentry.myEntity != entityplayermp)
                 {
                     entitytrackerentry.tryStartWachingThis(entityplayermp);
                 }
@@ -184,6 +185,7 @@ public class EntityTracker
 
     public void addEntityToTracker(Entity p_72785_1_, int p_72785_2_, final int p_72785_3_, boolean p_72785_4_)
     {
+        p_72785_2_ = org.spigotmc.TrackingRange.getEntityTrackingRange(p_72785_1_, p_72785_2_); // Spigot
         if (p_72785_2_ > this.entityViewDistance)
         {
             p_72785_2_ = this.entityViewDistance;
@@ -223,7 +225,9 @@ public class EntityTracker
             });
             p_72785_1_.addEntityCrashInfo(crashreportcategory);
             CrashReportCategory crashreportcategory1 = crashreport.makeCategory("Entity That Is Already Tracked");
+            try {
             ((EntityTrackerEntry)this.trackedEntityIDs.lookup(p_72785_1_.getEntityId())).myEntity.addEntityCrashInfo(crashreportcategory1);
+            } catch(Exception ignored) {}
 
             try
             {
@@ -246,6 +250,7 @@ public class EntityTracker
             while (iterator.hasNext())
             {
                 EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+                if (entitytrackerentry != null)
                 entitytrackerentry.removeFromWatchingList(entityplayermp);
             }
         }
@@ -261,18 +266,21 @@ public class EntityTracker
 
     public void updateTrackedEntities()
     {
+        if(theWorld.playerEntities.size() == 0) return;
         ArrayList arraylist = new ArrayList();
         Iterator iterator = this.trackedEntities.iterator();
 
         while (iterator.hasNext())
         {
             EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+            if (entitytrackerentry != null) {
             entitytrackerentry.sendLocationToAllClients(this.theWorld.playerEntities);
 
             if (entitytrackerentry.playerEntitiesUpdated && entitytrackerentry.myEntity instanceof EntityPlayerMP)
             {
                 arraylist.add((EntityPlayerMP)entitytrackerentry.myEntity);
             }
+            }
         }
 
         for (int i = 0; i < arraylist.size(); ++i)
@@ -284,7 +292,7 @@ public class EntityTracker
             {
                 EntityTrackerEntry entitytrackerentry1 = (EntityTrackerEntry)iterator1.next();
 
-                if (entitytrackerentry1.myEntity != entityplayermp)
+                if (entitytrackerentry1 != null && entitytrackerentry1.myEntity != entityplayermp)
                 {
                     entitytrackerentry1.tryStartWachingThis(entityplayermp);
                 }
@@ -319,6 +327,7 @@ public class EntityTracker
         while (iterator.hasNext())
         {
             EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+            if (entitytrackerentry != null)
             entitytrackerentry.removePlayerFromTracker(p_72787_1_);
         }
     }
@@ -331,7 +340,7 @@ public class EntityTracker
         {
             EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
 
-            if (entitytrackerentry.myEntity != p_85172_1_ && entitytrackerentry.myEntity.chunkCoordX == p_85172_2_.xPosition && entitytrackerentry.myEntity.chunkCoordZ == p_85172_2_.zPosition)
+            if (entitytrackerentry != null && entitytrackerentry.myEntity != p_85172_1_ && entitytrackerentry.myEntity.chunkCoordX == p_85172_2_.xPosition && entitytrackerentry.myEntity.chunkCoordZ == p_85172_2_.zPosition)
             {
                 entitytrackerentry.tryStartWachingThis(p_85172_1_);
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityTrackerEntry.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityTrackerEntry.java
index 8e64ad6..f504805 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/EntityTrackerEntry.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/EntityTrackerEntry.java
@@ -56,9 +56,15 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.storage.MapData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import net.minecraft.server.MinecraftServer; // Spigot
 
 import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 
+// CraftBukkit start
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
+// CraftBukkit end
+
 public class EntityTrackerEntry
 {
     private static final Logger logger = LogManager.getLogger();
@@ -131,15 +137,15 @@ public class EntityTrackerEntry
             this.func_151259_a(new S1BPacketEntityAttach(0, this.myEntity, this.myEntity.ridingEntity));
         }
 
-        if (this.myEntity instanceof EntityItemFrame && this.ticks % 10 == 0)
+        if (this.myEntity instanceof EntityItemFrame /*&& this.ticks % 10 == 0*/)   // CraftBukkit - Moved below, should always enter this block
         {
             EntityItemFrame entityitemframe = (EntityItemFrame)this.myEntity;
             ItemStack itemstack = entityitemframe.getDisplayedItem();
 
-            if (itemstack != null && itemstack.getItem() instanceof ItemMap)
+            if (this.ticks % 10 == 0 && itemstack != null && itemstack.getItem() instanceof ItemMap)   // CraftBukkit - Moved this.m % 10 logic here so item frames do not enter the other blocks
             {
                 MapData mapdata = Items.filled_map.getMapData(itemstack, this.myEntity.worldObj);
-                Iterator iterator = p_73122_1_.iterator();
+                Iterator iterator = this.trackingPlayers.iterator(); // CraftBukkit
 
                 while (iterator.hasNext())
                 {
@@ -157,6 +163,10 @@ public class EntityTrackerEntry
 
             this.sendMetadataToAllAssociatedPlayers();
         }
+        else if(trackingPlayers.size() == 0) 
+        { 
+        // No players - no tracking
+        }
         else if (this.ticks % this.updateFrequency == 0 || this.myEntity.isAirBorne || this.myEntity.getDataWatcher().hasChanges())
         {
             int i;
@@ -177,6 +187,22 @@ public class EntityTrackerEntry
                 boolean flag = Math.abs(j1) >= 4 || Math.abs(k1) >= 4 || Math.abs(l1) >= 4 || this.ticks % 60 == 0;
                 boolean flag1 = Math.abs(l - this.lastYaw) >= 4 || Math.abs(i1 - this.lastPitch) >= 4;
 
+                // CraftBukkit start - Code moved from below
+                if (flag)
+                {
+                    this.lastScaledXPosition = i;
+                    this.lastScaledYPosition = j;
+                    this.lastScaledZPosition = k;
+                }
+
+                if (flag1)
+                {
+                    this.lastYaw = l;
+                    this.lastPitch = i1;
+                }
+
+                // CraftBukkit end
+
                 if (this.ticks > 0 || this.myEntity instanceof EntityArrow)
                 {
                     if (j1 >= -128 && j1 < 128 && k1 >= -128 && k1 < 128 && l1 >= -128 && l1 < 128 && this.ticksSinceLastForcedTeleport <= 400 && !this.ridingEntity)
@@ -197,7 +223,15 @@ public class EntityTrackerEntry
                     else
                     {
                         this.ticksSinceLastForcedTeleport = 0;
-                        object = new S18PacketEntityTeleport(this.myEntity.getEntityId(), i, j, k, (byte)l, (byte)i1);
+
+                        // CraftBukkit start - Refresh list of who can see a player before sending teleport packet
+                        if (this.myEntity instanceof EntityPlayerMP)
+                        {
+                            this.sendEventsToPlayers(new java.util.ArrayList(this.trackingPlayers));
+                        }
+
+                        // CraftBukkit end
+                        object = new S18PacketEntityTeleport(this.myEntity.getEntityId(), i, j, k, (byte) l, (byte) i1);
                     }
                 }
 
@@ -224,7 +258,7 @@ public class EntityTrackerEntry
                 }
 
                 this.sendMetadataToAllAssociatedPlayers();
-
+                /* CraftBukkit start - Code moved up
                 if (flag)
                 {
                     this.lastScaledXPosition = i;
@@ -237,7 +271,7 @@ public class EntityTrackerEntry
                     this.lastYaw = l;
                     this.lastPitch = i1;
                 }
-
+                // CraftBukkit end */
                 this.ridingEntity = false;
             }
             else
@@ -275,7 +309,32 @@ public class EntityTrackerEntry
 
         if (this.myEntity.velocityChanged)
         {
-            this.func_151261_b(new S12PacketEntityVelocity(this.myEntity));
+            // CraftBukkit start - Create PlayerVelocity event
+            boolean cancelled = false;
+
+            if (this.myEntity instanceof EntityPlayerMP)
+            {
+                Player player = (Player) this.myEntity.getBukkitEntity();
+                org.bukkit.util.Vector velocity = player.getVelocity();
+                PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity);
+                this.myEntity.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    cancelled = true;
+                }
+                else if (!velocity.equals(event.getVelocity()))
+                {
+                    player.setVelocity(velocity);
+                }
+            }
+
+            if (!cancelled)
+            {
+                this.func_151261_b((Packet)(new S12PacketEntityVelocity(this.myEntity)));
+            }
+
+            // CraftBukkit end
             this.myEntity.velocityChanged = false;
         }
     }
@@ -296,6 +355,13 @@ public class EntityTrackerEntry
 
             if (!set.isEmpty())
             {
+                // CraftBukkit start - Send scaled max health
+                if (this.myEntity instanceof EntityPlayerMP)
+                {
+                    ((EntityPlayerMP) this.myEntity).getBukkitEntity().injectScaledMaxHealth(set, false);
+                }
+
+                // CraftBukkit end
                 this.func_151261_b(new S20PacketEntityProperties(this.myEntity.getEntityId(), set));
             }
 
@@ -353,6 +419,19 @@ public class EntityTrackerEntry
 
             if (d0 >= (double)(-this.blocksDistanceThreshold) && d0 <= (double)this.blocksDistanceThreshold && d1 >= (double)(-this.blocksDistanceThreshold) && d1 <= (double)this.blocksDistanceThreshold)
             {
+                // CraftBukkit start
+                if (this.myEntity instanceof EntityPlayerMP)
+                {
+                    Player player = ((EntityPlayerMP) this.myEntity).getBukkitEntity();
+
+                    if (!p_73117_1_.getBukkitEntity().canSee(player))
+                    {
+                        return;
+                    }
+                }
+                // CraftBukkit end
+
+                p_73117_1_.destroyedItemsNetCache.remove(Integer.valueOf(this.myEntity.getEntityId()));
                 if (!this.trackingPlayers.contains(p_73117_1_) && (this.isPlayerWatchingThisChunk(p_73117_1_) || this.myEntity.forceSpawn))
                 {
                     this.trackingPlayers.add(p_73117_1_);
@@ -369,6 +448,13 @@ public class EntityTrackerEntry
                         ServersideAttributeMap serversideattributemap = (ServersideAttributeMap)((EntityLivingBase)this.myEntity).getAttributeMap();
                         Collection collection = serversideattributemap.getWatchedAttributes();
 
+                        // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+                        if (this.myEntity.getEntityId() == p_73117_1_.getEntityId())
+                        {
+                            ((EntityPlayerMP) this.myEntity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+                        }
+
+                        // CraftBukkit end
                         if (!collection.isEmpty())
                         {
                             p_73117_1_.playerNetServerHandler.sendPacket(new S20PacketEntityProperties(this.myEntity.getEntityId(), collection));
@@ -397,6 +483,14 @@ public class EntityTrackerEntry
                         p_73117_1_.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this.myEntity, this.myEntity.ridingEntity));
                     }
 
+                    // CraftBukkit start
+                    if (this.myEntity.riddenByEntity != null)
+                    {
+                        p_73117_1_.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this.myEntity.riddenByEntity, this.myEntity));
+                    }
+
+                    // CraftBukkit end
+
                     if (this.myEntity instanceof EntityLiving && ((EntityLiving)this.myEntity).getLeashedToEntity() != null)
                     {
                         p_73117_1_.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(1, this.myEntity, ((EntityLiving)this.myEntity).getLeashedToEntity()));
@@ -425,6 +519,11 @@ public class EntityTrackerEntry
                         }
                     }
 
+                    // CraftBukkit start - Fix for nonsensical head yaw
+                    this.lastHeadMotion = MathHelper.floor_float(this.myEntity.getRotationYawHead() * 256.0F / 360.0F); // tracker.ao() should be getHeadRotation
+                    this.func_151259_a(new S19PacketEntityHeadLook(this.myEntity, (byte) lastHeadMotion));
+                    // CraftBukkit end
+
                     if (this.myEntity instanceof EntityLivingBase)
                     {
                         EntityLivingBase entitylivingbase = (EntityLivingBase)this.myEntity;
@@ -465,7 +564,10 @@ public class EntityTrackerEntry
     {
         if (this.myEntity.isDead)
         {
-            logger.warn("Fetching addPacket for removed entity");
+            // CraftBukkit start - Remove useless error spam, just return
+            // logger.warn("Fetching addPacket for removed entity");
+            return null;
+            // CraftBukkit end
         }
 
         Packet pkt = FMLNetworkHandler.getEntitySpawningPacket(this.myEntity);
@@ -491,7 +593,7 @@ public class EntityTrackerEntry
         {
             return new S0EPacketSpawnObject(this.myEntity, 1);
         }
-        else if (!(this.myEntity instanceof IAnimals) && !(this.myEntity instanceof EntityDragon))
+        else if (myEntity.entityProjectileHook())
         {
             if (this.myEntity instanceof EntityFishHook)
             {
@@ -528,13 +630,13 @@ public class EntityTrackerEntry
                 return new S0EPacketSpawnObject(this.myEntity, 76);
             }
             else
-            {
-                S0EPacketSpawnObject s0epacketspawnobject;
+            //{
+            //    S0EPacketSpawnObject s0epacketspawnobject;
 
                 if (this.myEntity instanceof EntityFireball)
                 {
                     EntityFireball entityfireball = (EntityFireball)this.myEntity;
-                    s0epacketspawnobject = null;
+                    S0EPacketSpawnObject s0epacketspawnobject = null;
                     byte b0 = 63;
 
                     if (this.myEntity instanceof EntitySmallFireball)
@@ -584,7 +686,7 @@ public class EntityTrackerEntry
                 else if (this.myEntity instanceof EntityItemFrame)
                 {
                     EntityItemFrame entityitemframe = (EntityItemFrame)this.myEntity;
-                    s0epacketspawnobject = new S0EPacketSpawnObject(this.myEntity, 71, entityitemframe.hangingDirection);
+                    S0EPacketSpawnObject s0epacketspawnobject = new S0EPacketSpawnObject(this.myEntity, 71, entityitemframe.hangingDirection);
                     s0epacketspawnobject.func_148996_a(MathHelper.floor_float((float)(entityitemframe.field_146063_b * 32)));
                     s0epacketspawnobject.func_148995_b(MathHelper.floor_float((float)(entityitemframe.field_146064_c * 32)));
                     s0epacketspawnobject.func_149005_c(MathHelper.floor_float((float)(entityitemframe.field_146062_d * 32)));
@@ -593,7 +695,7 @@ public class EntityTrackerEntry
                 else if (this.myEntity instanceof EntityLeashKnot)
                 {
                     EntityLeashKnot entityleashknot = (EntityLeashKnot)this.myEntity;
-                    s0epacketspawnobject = new S0EPacketSpawnObject(this.myEntity, 77);
+                    S0EPacketSpawnObject s0epacketspawnobject = new S0EPacketSpawnObject(this.myEntity, 77);
                     s0epacketspawnobject.func_148996_a(MathHelper.floor_float((float)(entityleashknot.field_146063_b * 32)));
                     s0epacketspawnobject.func_148995_b(MathHelper.floor_float((float)(entityleashknot.field_146064_c * 32)));
                     s0epacketspawnobject.func_149005_c(MathHelper.floor_float((float)(entityleashknot.field_146062_d * 32)));
@@ -607,13 +709,17 @@ public class EntityTrackerEntry
                 {
                     throw new IllegalArgumentException("Don\'t know how to add " + this.myEntity.getClass() + "!");
                 }
-            }
+            //}
         }
-        else
+        else if (myEntity instanceof EntityLivingBase)
         {
             this.lastHeadMotion = MathHelper.floor_float(this.myEntity.getRotationYawHead() * 256.0F / 360.0F);
             return new S0FPacketSpawnMob((EntityLivingBase)this.myEntity);
         }
+        else
+        {
+            throw new IllegalArgumentException("Don\'t know how to add " + this.myEntity.getClass() + "! Report this error to mod author.");
+        }
     }
 
     public void removePlayerFromTracker(EntityPlayerMP p_73123_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIArrowAttack.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIArrowAttack.java
index 0a92333..5ecca91 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIArrowAttack.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIArrowAttack.java
@@ -5,6 +5,11 @@ import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IRangedAttackMob;
 import net.minecraft.util.MathHelper;
 
+// CraftBukkit start
+import net.minecraft.entity.Entity;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class EntityAIArrowAttack extends EntityAIBase
 {
     private final EntityLiving entityHost;
@@ -67,6 +72,10 @@ public class EntityAIArrowAttack extends EntityAIBase
 
     public void resetTask()
     {
+        // CraftBukkit start
+        EntityTargetEvent.TargetReason reason = this.attackTarget.isEntityAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
+        org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetEvent((Entity) rangedAttackEntityHost, null, reason);
+        // CraftBukkit end
         this.attackTarget = null;
         this.field_75318_f = 0;
         this.rangedAttackTime = -1;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIAttackOnCollide.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIAttackOnCollide.java
index 56124ca..e6a0e8c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIAttackOnCollide.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIAttackOnCollide.java
@@ -7,6 +7,11 @@ import net.minecraft.pathfinding.PathPoint;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.Entity;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class EntityAIAttackOnCollide extends EntityAIBase
 {
     World worldObj;
@@ -73,6 +78,15 @@ public class EntityAIAttackOnCollide extends EntityAIBase
     public boolean continueExecuting()
     {
         EntityLivingBase entitylivingbase = this.attacker.getAttackTarget();
+        // CraftBukkit start
+        EntityTargetEvent.TargetReason reason = this.attacker.getAttackTarget() == null ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
+
+        if (this.attacker.getAttackTarget() == null || (this.attacker.getAttackTarget() != null && !this.attacker.getAttackTarget().isEntityAlive()))
+        {
+            org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetEvent(attacker, null, reason);
+        }
+
+        // CraftBukkit end
         return entitylivingbase == null ? false : (!entitylivingbase.isEntityAlive() ? false : (!this.longMemory ? !this.attacker.getNavigator().noPath() : this.attacker.isWithinHomeDistance(MathHelper.floor_double(entitylivingbase.posX), MathHelper.floor_double(entitylivingbase.posY), MathHelper.floor_double(entitylivingbase.posZ))));
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIBreakDoor.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIBreakDoor.java
index 21ae936..b9ed2d3 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIBreakDoor.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIBreakDoor.java
@@ -58,6 +58,14 @@ public class EntityAIBreakDoor extends EntityAIDoorInteract
 
         if (this.breakingTime == 240 && this.theEntity.worldObj.difficultySetting == EnumDifficulty.HARD)
         {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreakDoorEvent(this.theEntity, this.entityPosX, this.entityPosY, this.entityPosZ).isCancelled())
+            {
+                this.updateTask();
+                return;
+            }
+
+            // CraftBukkit end
             this.theEntity.worldObj.setBlockToAir(this.entityPosX, this.entityPosY, this.entityPosZ);
             this.theEntity.worldObj.playAuxSFX(1012, this.entityPosX, this.entityPosY, this.entityPosZ, 0);
             this.theEntity.worldObj.playAuxSFX(2001, this.entityPosX, this.entityPosY, this.entityPosZ, Block.getIdFromBlock(this.field_151504_e));
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIEatGrass.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIEatGrass.java
index d1acdbc..b588d00 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIEatGrass.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIEatGrass.java
@@ -6,6 +6,11 @@ import net.minecraft.init.Blocks;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.Material;
+// CraftBukkit end
+
 public class EntityAIEatGrass extends EntityAIBase
 {
     private EntityLiving field_151500_b;
@@ -69,7 +74,8 @@ public class EntityAIEatGrass extends EntityAIBase
 
             if (this.field_151501_c.getBlock(i, j, k) == Blocks.tallgrass)
             {
-                if (this.field_151501_c.getGameRules().getGameRuleBooleanValue("mobGriefing"))
+                // CraftBukkit
+                if (!CraftEventFactory.callEntityChangeBlockEvent(this.field_151500_b, this.field_151500_b.worldObj.getWorld().getBlockAt(i, j, k), Material.AIR, !this.field_151501_c.getGameRules().getGameRuleBooleanValue("mobGriefing")).isCancelled())
                 {
                     this.field_151501_c.func_147480_a(i, j, k, false);
                 }
@@ -78,7 +84,8 @@ public class EntityAIEatGrass extends EntityAIBase
             }
             else if (this.field_151501_c.getBlock(i, j - 1, k) == Blocks.grass)
             {
-                if (this.field_151501_c.getGameRules().getGameRuleBooleanValue("mobGriefing"))
+                // CraftBukkit
+                if (!CraftEventFactory.callEntityChangeBlockEvent(this.field_151500_b, this.field_151500_b.worldObj.getWorld().getBlockAt(i, j - 1, k), Material.DIRT, !this.field_151501_c.getGameRules().getGameRuleBooleanValue("mobGriefing")).isCancelled())
                 {
                     this.field_151501_c.playAuxSFX(2001, i, j - 1, k, Block.getIdFromBlock(Blocks.grass));
                     this.field_151501_c.setBlock(i, j - 1, k, Blocks.dirt, 0, 2);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIMate.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIMate.java
index b54d1b2..e0c09b5 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIMate.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIMate.java
@@ -4,6 +4,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import net.minecraft.entity.EntityAgeable;
+import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.passive.EntityAnimal;
 import net.minecraft.entity.passive.EntityCow;
@@ -12,6 +13,8 @@ import net.minecraft.stats.AchievementList;
 import net.minecraft.stats.StatList;
 import net.minecraft.world.World;
 
+import net.minecraft.entity.passive.EntityTameable; // CraftBukkit
+
 public class EntityAIMate extends EntityAIBase
 {
     private EntityAnimal theAnimal;
@@ -93,6 +96,13 @@ public class EntityAIMate extends EntityAIBase
 
         if (entityageable != null)
         {
+            // CraftBukkit start - set persistence for tame animals
+            if (entityageable instanceof EntityTameable && ((EntityTameable) entityageable).isTamed())
+            {
+                ((EntityLiving)entityageable).persistenceRequired = true; // Cauldron - fix illegal access error. SS bug?
+            }
+
+            // CraftBukkit end
             EntityPlayer entityplayer = this.theAnimal.func_146083_cb();
 
             if (entityplayer == null && this.targetMate.func_146083_cb() != null)
@@ -116,7 +126,7 @@ public class EntityAIMate extends EntityAIBase
             this.targetMate.resetInLove();
             entityageable.setGrowingAge(-24000);
             entityageable.setLocationAndAngles(this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, 0.0F, 0.0F);
-            this.theWorld.spawnEntityInWorld(entityageable);
+            this.theWorld.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
             Random random = this.theAnimal.getRNG();
 
             for (int i = 0; i < 7; ++i)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIPanic.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIPanic.java
index 14a5742..2e7d226 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIPanic.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIPanic.java
@@ -3,6 +3,8 @@ package net.minecraft.entity.ai;
 import net.minecraft.entity.EntityCreature;
 import net.minecraft.util.Vec3;
 
+import net.minecraft.entity.EntityLivingBase; // CraftBukkit
+
 public class EntityAIPanic extends EntityAIBase
 {
     private EntityCreature theEntityCreature;
@@ -50,6 +52,14 @@ public class EntityAIPanic extends EntityAIBase
 
     public boolean continueExecuting()
     {
+        // CraftBukkit start - introduce a temporary timeout hack until this is fixed properly
+        if ((this.theEntityCreature.ticksExisted - this.theEntityCreature.func_142015_aE()) > 100)
+        {
+            this.theEntityCreature.setRevengeTarget((EntityLivingBase) null);
+            return false;
+        }
+
+        // CraftBukkit end
         return !this.theEntityCreature.getNavigator().noPath();
     }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIRunAroundLikeCrazy.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIRunAroundLikeCrazy.java
index 3a1437f..0b17ec0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIRunAroundLikeCrazy.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIRunAroundLikeCrazy.java
@@ -64,7 +64,8 @@ public class EntityAIRunAroundLikeCrazy extends EntityAIBase
                 int i = this.horseHost.getTemper();
                 int j = this.horseHost.getMaxTemper();
 
-                if (j > 0 && this.horseHost.getRNG().nextInt(j) < i)
+                // CraftBukkit
+                if (j > 0 && this.horseHost.getRNG().nextInt(j) < i && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this.horseHost, (EntityPlayer) this.horseHost.riddenByEntity).isCancelled() && this.horseHost.riddenByEntity instanceof EntityPlayer)
                 {
                     this.horseHost.setTamedBy((EntityPlayer)this.horseHost.riddenByEntity);
                     this.horseHost.worldObj.setEntityState(this.horseHost, (byte)7);
@@ -74,8 +75,20 @@ public class EntityAIRunAroundLikeCrazy extends EntityAIBase
                 this.horseHost.increaseTemper(5);
             }
 
-            this.horseHost.riddenByEntity.mountEntity((Entity)null);
-            this.horseHost.riddenByEntity = null;
+            // CraftBukkit start - Handle dismounting to account for VehicleExitEvent being fired.
+            if (this.horseHost.riddenByEntity != null)
+            {
+                this.horseHost.riddenByEntity.mountEntity((Entity) null);
+
+                // If the entity still has a passenger, then a plugin cancelled the event.
+                if (this.horseHost.riddenByEntity != null)
+                {
+                    return;
+                }
+            }
+
+            // this.entity.passenger = null;
+            // CraftBukkit end
             this.horseHost.makeHorseRearWithSound();
             this.horseHost.worldObj.setEntityState(this.horseHost, (byte)6);
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAISit.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAISit.java
index 847d1b7..dcceb35 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAISit.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAISit.java
@@ -19,7 +19,7 @@ public class EntityAISit extends EntityAIBase
     {
         if (!this.theEntity.isTamed())
         {
-            return false;
+            return this.isSitting && this.theEntity.getAttackTarget() == null; // CraftBukkit - Allow sitting for wild animals
         }
         else if (this.theEntity.isInWater())
         {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAITarget.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAITarget.java
index 6d969f5..31b58c0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAITarget.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAITarget.java
@@ -12,6 +12,11 @@ import net.minecraft.pathfinding.PathPoint;
 import net.minecraft.util.MathHelper;
 import org.apache.commons.lang3.StringUtils;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public abstract class EntityAITarget extends EntityAIBase
 {
     protected EntityCreature taskOwner;
@@ -156,6 +161,51 @@ public abstract class EntityAITarget extends EntityAIBase
                     }
                 }
 
+                // CraftBukkit start - Check all the different target goals for the reason, default to RANDOM_TARGET
+                EntityTargetEvent.TargetReason reason = EntityTargetEvent.TargetReason.RANDOM_TARGET;
+
+                if (this instanceof EntityAIDefendVillage)
+                {
+                    reason = EntityTargetEvent.TargetReason.DEFEND_VILLAGE;
+                }
+                else if (this instanceof EntityAIHurtByTarget)
+                {
+                    reason = EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY;
+                }
+                else if (this instanceof EntityAINearestAttackableTarget)
+                {
+                    if (p_75296_1_ instanceof EntityPlayer)
+                    {
+                        reason = EntityTargetEvent.TargetReason.CLOSEST_PLAYER;
+                    }
+                }
+                else if (this instanceof EntityAIOwnerHurtByTarget)
+                {
+                    reason = EntityTargetEvent.TargetReason.TARGET_ATTACKED_OWNER;
+                }
+                else if (this instanceof EntityAIOwnerHurtTarget)
+                {
+                    reason = EntityTargetEvent.TargetReason.OWNER_ATTACKED_TARGET;
+                }
+
+                org.bukkit.event.entity.EntityTargetLivingEntityEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetLivingEvent(this.taskOwner, p_75296_1_, reason);
+
+                if (event.isCancelled() || event.getTarget() == null)
+                {
+                    this.taskOwner.setAttackTarget(null);
+                    return false;
+                }
+                else if (p_75296_1_.getBukkitEntity() != event.getTarget())
+                {
+                    this.taskOwner.setAttackTarget((EntityLivingBase)((CraftEntity) event.getTarget()).getHandle());
+                }
+
+                if (this.taskOwner instanceof EntityCreature)
+                {
+                    ((EntityCreature) this.taskOwner).entityToAttack = ((CraftEntity) event.getTarget()).getHandle();
+                }
+
+                // CraftBukkit end
                 return true;
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIVillagerMate.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIVillagerMate.java
index c221790..47586a7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityAIVillagerMate.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityAIVillagerMate.java
@@ -119,7 +119,7 @@ public class EntityAIVillagerMate extends EntityAIBase
         this.villagerObj.setGrowingAge(6000);
         entityvillager.setGrowingAge(-24000);
         entityvillager.setLocationAndAngles(this.villagerObj.posX, this.villagerObj.posY, this.villagerObj.posZ, 0.0F, 0.0F);
-        this.worldObj.spawnEntityInWorld(entityvillager);
+        this.worldObj.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
         this.worldObj.setEntityState(entityvillager, (byte)12);
     }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityLookHelper.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityLookHelper.java
index 412d211..1911160 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityLookHelper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityLookHelper.java
@@ -5,6 +5,8 @@ import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.util.MathHelper;
 
+import org.bukkit.craftbukkit.TrigMath; // CraftBukkit
+
 public class EntityLookHelper
 {
     private EntityLiving entity;
@@ -61,8 +63,10 @@ public class EntityLookHelper
             double d1 = this.posY - (this.entity.posY + (double)this.entity.getEyeHeight());
             double d2 = this.posZ - this.entity.posZ;
             double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
-            float f = (float)(Math.atan2(d2, d0) * 180.0D / Math.PI) - 90.0F;
-            float f1 = (float)(-(Math.atan2(d1, d3) * 180.0D / Math.PI));
+            // CraftBukkit start - Math -> TrigMath
+            float f = (float)(TrigMath.atan2(d2, d0) * 180.0D / Math.PI) - 90.0F;
+            float f1 = (float)(-(TrigMath.atan2(d1, d3) * 180.0D / Math.PI));
+            // CraftBukkit end
             this.entity.rotationPitch = this.updateRotation(this.entity.rotationPitch, f1, this.deltaLookPitch);
             this.entity.rotationYawHead = this.updateRotation(this.entity.rotationYawHead, f, this.deltaLookYaw);
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityMoveHelper.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityMoveHelper.java
index ebcb7a3..fb36827 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/ai/EntityMoveHelper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/ai/EntityMoveHelper.java
@@ -56,7 +56,8 @@ public class EntityMoveHelper
 
             if (d3 >= 2.500000277905201E-7D)
             {
-                float f = (float)(Math.atan2(d1, d0) * 180.0D / Math.PI) - 90.0F;
+                // CraftBukkit - Math -> TrigMath
+                float f = (float)(org.bukkit.craftbukkit.TrigMath.atan2(d1, d0) * 180.0D / Math.PI) - 90.0F;
                 this.entity.rotationYaw = this.limitAngle(this.entity.rotationYaw, f, 30.0F);
                 this.entity.setAIMoveSpeed((float)(this.speed * this.entity.getEntityAttribute(SharedMonsterAttributes.movementSpeed).getAttributeValue()));
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/boss/EntityDragon.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/boss/EntityDragon.java
index 53cf67e..2be69dd 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/boss/EntityDragon.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/boss/EntityDragon.java
@@ -22,6 +22,19 @@ import net.minecraft.util.Vec3;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S23PacketBlockChange;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.EntityCreatePortalEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.Bukkit;
+// CraftBukkit end
+
 public class EntityDragon extends EntityLiving implements IBossDisplayData, IEntityMultiPart, IMob
 {
     public double targetX;
@@ -44,6 +57,7 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
     private Entity target;
     public int deathTicks;
     public EntityEnderCrystal healingEnderCrystal;
+    private Explosion explosionSource = new Explosion(null, this, Double.NaN, Double.NaN, Double.NaN, Float.NaN); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
     private static final String __OBFID = "CL_00001659";
 
     public EntityDragon(World p_i1700_1_)
@@ -355,14 +369,25 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
             {
                 if (!this.worldObj.isRemote)
                 {
-                    this.attackEntityFromPart(this.dragonPartHead, DamageSource.setExplosionSource((Explosion)null), 10.0F);
+                    CraftEventFactory.entityDamage = this.healingEnderCrystal; // CraftBukkit
+                    this.attackEntityFromPart(this.dragonPartHead, DamageSource.setExplosionSource((Explosion) null), 10.0F);
+                    CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
                 this.healingEnderCrystal = null;
             }
             else if (this.ticksExisted % 10 == 0 && this.getHealth() < this.getMaxHealth())
             {
-                this.setHealth(this.getHealth() + 1.0F);
+                // CraftBukkit start
+                EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0D, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    this.setHealth((float)(this.getHealth() + event.getAmount()));
+                }
+
+                // CraftBukkit end
             }
         }
 
@@ -429,7 +454,24 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
 
         if (this.rand.nextInt(2) == 0 && !this.worldObj.playerEntities.isEmpty())
         {
-            this.target = (Entity)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+            // CraftBukkit start
+            Entity target = (Entity) this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), target.getBukkitEntity(), EntityTargetEvent.TargetReason.RANDOM_TARGET);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                if (event.getTarget() == null)
+                {
+                    this.target = null;
+                }
+                else
+                {
+                    this.target = ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+                }
+            }
+
+            // CraftBukkit end
         }
         else
         {
@@ -468,6 +510,10 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
         int j1 = MathHelper.floor_double(p_70972_1_.maxZ);
         boolean flag = false;
         boolean flag1 = false;
+        // CraftBukkit start - Create a list to hold all the destroyed blocks
+        List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
+        org.bukkit.craftbukkit.CraftWorld craftWorld = this.worldObj.getWorld();
+        // CraftBukkit end
 
         for (int k1 = i; k1 <= l; ++k1)
         {
@@ -481,7 +527,11 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
                     {
                         if (block.canEntityDestroy(worldObj, k1, l1, i2, this) && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"))
                         {
-                            flag1 = this.worldObj.setBlockToAir(k1, l1, i2) || flag1;
+                            // CraftBukkit start - Add blocks to list rather than destroying them
+                            // flag1 = this.world.setAir(k1, l1, i2) || flag1;
+                            flag1 = true;
+                            destroyedBlocks.add(craftWorld.getBlockAt(k1, l1, i2));
+                            // CraftBukkit end
                         }
                         else
                         {
@@ -494,6 +544,52 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
 
         if (flag1)
         {
+            // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
+            org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+            EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+            Bukkit.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+                // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+                return flag;
+            }
+            else if (event.getYield() == 0F)
+            {
+                // Yield zero ==> no drops
+                for (org.bukkit.block.Block block : event.blockList())
+                {
+                    this.worldObj.setBlockToAir(block.getX(), block.getY(), block.getZ());
+                }
+            }
+            else
+            {
+                for (org.bukkit.block.Block block : event.blockList())
+                {
+                    org.bukkit.Material blockId = block.getType();
+
+                    if (blockId == org.bukkit.Material.AIR)
+                    {
+                        continue;
+                    }
+
+                    int blockX = block.getX();
+                    int blockY = block.getY();
+                    int blockZ = block.getZ();
+                    Block nmsBlock = org.bukkit.craftbukkit.util.CraftMagicNumbers.getBlock(blockId);
+
+                    if (nmsBlock.canDropFromExplosion(explosionSource))
+                    {
+                        nmsBlock.dropBlockAsItemWithChance(this.worldObj, blockX, blockY, blockZ, block.getData(), event.getYield(), 0);
+                    }
+
+                    nmsBlock.onBlockDestroyedByExplosion(worldObj, blockX, blockY, blockZ, explosionSource);
+                    this.worldObj.setBlockToAir(blockX, blockY, blockZ);
+                }
+            }
+
+            // CraftBukkit end
             double d1 = p_70972_1_.minX + (p_70972_1_.maxX - p_70972_1_.minX) * (double)this.rand.nextFloat();
             double d2 = p_70972_1_.minY + (p_70972_1_.maxY - p_70972_1_.minY) * (double)this.rand.nextFloat();
             double d0 = p_70972_1_.minZ + (p_70972_1_.maxZ - p_70972_1_.minZ) * (double)this.rand.nextFloat();
@@ -531,13 +627,18 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
         return false;
     }
 
-    protected boolean func_82195_e(DamageSource p_82195_1_, float p_82195_2_)
+    public boolean func_82195_e(DamageSource p_82195_1_, float p_82195_2_) // CraftBukkit - protected -> public
     {
         return super.attackEntityFrom(p_82195_1_, p_82195_2_);
     }
 
     protected void onDeathUpdate()
     {
+        if (this.isDead)
+        {
+            return;    // CraftBukkit - can't kill what's already dead
+        }
+
         ++this.deathTicks;
 
         if (this.deathTicks >= 180 && this.deathTicks <= 200)
@@ -555,7 +656,7 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
         {
             if (this.deathTicks > 150 && this.deathTicks % 5 == 0)
             {
-                i = 1000;
+                i = this.expToDrop / 12; // CraftBukkit - drop experience as dragon falls from sky. use experience drop from death event. This is now set in getExpReward()
 
                 while (i > 0)
                 {
@@ -576,7 +677,7 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
 
         if (this.deathTicks == 200 && !this.worldObj.isRemote)
         {
-            i = 2000;
+            i = this.expToDrop - (10 * this.expToDrop / 12); // CraftBukkit - drop the remaining experience
 
             while (i > 0)
             {
@@ -595,6 +696,8 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
         byte b0 = 64;
         BlockEndPortal.field_149948_a = true;
         byte b1 = 4;
+        // CraftBukkit start - Replace any "this.world" in the following with just "world"!
+        BlockStateListPopulator world = new BlockStateListPopulator(this.worldObj.getWorld());
 
         for (int k = b0 - 1; k <= b0 + 32; ++k)
         {
@@ -641,6 +744,35 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
         this.worldObj.setBlock(p_70975_1_, b0 + 2, p_70975_2_ + 1, Blocks.torch);
         this.worldObj.setBlock(p_70975_1_, b0 + 3, p_70975_2_, Blocks.bedrock);
         this.worldObj.setBlock(p_70975_1_, b0 + 4, p_70975_2_, Blocks.dragon_egg);
+        EntityCreatePortalEvent event = new EntityCreatePortalEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), java.util.Collections.unmodifiableList(world.getList()), org.bukkit.PortalType.ENDER);
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (!event.isCancelled())
+        {
+            for (BlockState state : event.getBlocks())
+            {
+                state.update(true);
+            }
+        }
+        else
+        {
+            for (BlockState state : event.getBlocks())
+            {
+                S23PacketBlockChange packet = new S23PacketBlockChange(state.getX(), state.getY(), state.getZ(), this.worldObj);
+
+                for (Iterator it = this.worldObj.playerEntities.iterator(); it.hasNext();)
+                {
+                    EntityPlayer entity = (EntityPlayer) it.next();
+
+                    if (entity instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP) entity).playerNetServerHandler.sendPacket(packet);
+                    }
+                }
+            }
+        }
+
+        // CraftBukkit end
         BlockEndPortal.field_149948_a = false;
     }
 
@@ -675,4 +807,13 @@ public class EntityDragon extends EntityLiving implements IBossDisplayData, IEnt
     {
         return 5.0F;
     }
+
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        // This value is equal to the amount of experience dropped while falling from the sky (10 * 1000)
+        // plus what is dropped when the dragon hits the ground (2000)
+        return 12000;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/boss/EntityWither.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/boss/EntityWither.java
index f95ba93..8d1bac3 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/boss/EntityWither.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/boss/EntityWither.java
@@ -34,6 +34,11 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+// CraftBukkit end
+
 public class EntityWither extends EntityMob implements IBossDisplayData, IRangedAttackMob
 {
     private float[] field_82220_d = new float[2];
@@ -228,15 +233,25 @@ public class EntityWither extends EntityMob implements IBossDisplayData, IRanged
 
             if (i <= 0)
             {
-                this.worldObj.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, 7.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
-                this.worldObj.playBroadcastSound(1013, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
+                // CraftBukkit start
+                ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    this.worldObj.newExplosion(this, this.posX, this.posY + (double) this.getEyeHeight(), this.posZ, event.getRadius(), event.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+                }
+
+                // CraftBukkit end
+                this.worldObj.newExplosion(this, this.posX, this.posY + (double) this.getEyeHeight(), this.posZ, 7.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+                this.worldObj.playBroadcastSound(1013, (int) this.posX, (int) this.posY, (int) this.posZ, 0);
             }
 
             this.func_82215_s(i);
 
             if (this.ticksExisted % 10 == 0)
             {
-                this.heal(10.0F);
+                this.heal(10.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.WITHER_SPAWN); // CraftBukkit
             }
         }
         else
@@ -349,6 +364,13 @@ public class EntityWither extends EntityMob implements IBossDisplayData, IRanged
 
                                 if (!block.isAir(worldObj, j2, k, l) && block.canEntityDestroy(worldObj, j2, k, l, this))
                                 {
+                                    // CraftBukkit start
+                                    if (CraftEventFactory.callEntityChangeBlockEvent(this, j2, k, l, Blocks.air, 0).isCancelled())
+                                    {
+                                        continue;
+                                    }
+
+                                    // CraftBukkit end
                                     flag = this.worldObj.func_147480_a(j2, k, l, true) || flag;
                                 }
                             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java
index 7623d6e..8e3c1f8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java
@@ -10,6 +10,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntityLightningBolt extends EntityWeatherEffect
 {
     private int lightningState;
@@ -17,15 +19,25 @@ public class EntityLightningBolt extends EntityWeatherEffect
     private int boltLivingTime;
     private static final String __OBFID = "CL_00001666";
 
+    // CraftBukkit start
+    public boolean isEffect = false;
+
     public EntityLightningBolt(World p_i1703_1_, double p_i1703_2_, double p_i1703_4_, double p_i1703_6_)
     {
+        this(p_i1703_1_, p_i1703_2_, p_i1703_4_, p_i1703_6_, false);
+    }
+
+    public EntityLightningBolt(World p_i1703_1_, double p_i1703_2_, double p_i1703_4_, double p_i1703_6_, boolean isEffect)
+    {
         super(p_i1703_1_);
+        this.isEffect = isEffect;
+        // CraftBukkit end
         this.setLocationAndAngles(p_i1703_2_, p_i1703_4_, p_i1703_6_, 0.0F, 0.0F);
         this.lightningState = 2;
         this.boltVertex = this.rand.nextLong();
         this.boltLivingTime = this.rand.nextInt(3) + 1;
 
-        if (!p_i1703_1_.isRemote && p_i1703_1_.getGameRules().getGameRuleBooleanValue("doFireTick") && (p_i1703_1_.difficultySetting == EnumDifficulty.NORMAL || p_i1703_1_.difficultySetting == EnumDifficulty.HARD) && p_i1703_1_.doChunksNearChunkExist(MathHelper.floor_double(p_i1703_2_), MathHelper.floor_double(p_i1703_4_), MathHelper.floor_double(p_i1703_6_), 10))
+        if (!isEffect && !p_i1703_1_.isRemote && p_i1703_1_.getGameRules().getGameRuleBooleanValue("doFireTick") && (p_i1703_1_.difficultySetting == EnumDifficulty.NORMAL || p_i1703_1_.difficultySetting == EnumDifficulty.HARD) && p_i1703_1_.doChunksNearChunkExist(MathHelper.floor_double(p_i1703_2_), MathHelper.floor_double(p_i1703_4_), MathHelper.floor_double(p_i1703_6_), 10))  // CraftBukkit
         {
             int i = MathHelper.floor_double(p_i1703_2_);
             int j = MathHelper.floor_double(p_i1703_4_);
@@ -33,7 +45,13 @@ public class EntityLightningBolt extends EntityWeatherEffect
 
             if (p_i1703_1_.getBlock(i, j, k).getMaterial() == Material.air && Blocks.fire.canPlaceBlockAt(p_i1703_1_, i, j, k))
             {
-                p_i1703_1_.setBlock(i, j, k, Blocks.fire);
+                // CraftBukkit start
+                if (!CraftEventFactory.callBlockIgniteEvent(p_i1703_1_, i, j, k, this).isCancelled())
+                {
+                    p_i1703_1_.setBlock(i, j, k, Blocks.fire);
+                }
+
+                // CraftBukkit end
             }
 
             for (i = 0; i < 4; ++i)
@@ -44,7 +62,13 @@ public class EntityLightningBolt extends EntityWeatherEffect
 
                 if (p_i1703_1_.getBlock(j, k, l).getMaterial() == Material.air && Blocks.fire.canPlaceBlockAt(p_i1703_1_, j, k, l))
                 {
-                    p_i1703_1_.setBlock(j, k, l, Blocks.fire);
+                    // CraftBukkit start
+                    if (!CraftEventFactory.callBlockIgniteEvent(p_i1703_1_, j, k, l, this).isCancelled())
+                    {
+                        p_i1703_1_.setBlock(j, k, l, Blocks.fire);
+                    }
+
+                    // CraftBukkit end
                 }
             }
         }
@@ -74,7 +98,8 @@ public class EntityLightningBolt extends EntityWeatherEffect
                 this.lightningState = 1;
                 this.boltVertex = this.rand.nextLong();
 
-                if (!this.worldObj.isRemote && this.worldObj.getGameRules().getGameRuleBooleanValue("doFireTick") && this.worldObj.doChunksNearChunkExist(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ), 10))
+                // CraftBukkit
+                if (!isEffect && !this.worldObj.isRemote && this.worldObj.getGameRules().getGameRuleBooleanValue("doFireTick") && this.worldObj.doChunksNearChunkExist(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ), 10))
                 {
                     int i = MathHelper.floor_double(this.posX);
                     int j = MathHelper.floor_double(this.posY);
@@ -82,13 +107,19 @@ public class EntityLightningBolt extends EntityWeatherEffect
 
                     if (this.worldObj.getBlock(i, j, k).getMaterial() == Material.air && Blocks.fire.canPlaceBlockAt(this.worldObj, i, j, k))
                     {
-                        this.worldObj.setBlock(i, j, k, Blocks.fire);
+                        // CraftBukkit start
+                        if (!CraftEventFactory.callBlockIgniteEvent(worldObj, i, j, k, this).isCancelled())
+                        {
+                            this.worldObj.setBlock(i, j, k, Blocks.fire);
+                        }
+
+                        // CraftBukkit end
                     }
                 }
             }
         }
 
-        if (this.lightningState >= 0)
+        if (this.lightningState >= 0 && !this.isEffect)   // CraftBukkit - add !this.isEffect
         {
             if (this.worldObj.isRemote)
             {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityBoat.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityBoat.java
index 048d0df..2f69346 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityBoat.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityBoat.java
@@ -17,6 +17,16 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.event.vehicle.VehicleMoveEvent;
+// CraftBukkit end
+
 public class EntityBoat extends Entity
 {
     private boolean isBoatEmpty;
@@ -35,6 +45,32 @@ public class EntityBoat extends Entity
     private double velocityZ;
     private static final String __OBFID = "CL_00001667";
 
+    // CraftBukkit start
+    public double maxSpeed = 0.4D;
+    public double occupiedDeceleration = 0.2D;
+    public double unoccupiedDeceleration = -1;
+    public boolean landBoats = false;
+
+    @Override
+
+    /**
+     * Applies a velocity to each of the entities pushing them away from each other. Args: entity
+     */
+    public void applyEntityCollision(Entity entity)
+    {
+        org.bukkit.entity.Entity hitEntity = (entity == null) ? null : entity.getBukkitEntity();
+        VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), hitEntity);
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled())
+        {
+            return;
+        }
+
+        super.applyEntityCollision(entity);
+    }
+    // CraftBukkit end
+
     public EntityBoat(World p_i1704_1_)
     {
         super(p_i1704_1_);
@@ -82,6 +118,7 @@ public class EntityBoat extends Entity
         this.prevPosX = p_i1705_2_;
         this.prevPosY = p_i1705_4_;
         this.prevPosZ = p_i1705_6_;
+        this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleCreateEvent((Vehicle) this.getBukkitEntity())); // CraftBukkit
     }
 
     public double getMountedYOffset()
@@ -97,6 +134,19 @@ public class EntityBoat extends Entity
         }
         else if (!this.worldObj.isRemote && !this.isDead)
         {
+            // CraftBukkit start
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            org.bukkit.entity.Entity attacker = (p_70097_1_.getEntity() == null) ? null : p_70097_1_.getEntity().getBukkitEntity();
+            VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) p_70097_2_);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return true;
+            }
+
+            // f = event.getDamage(); // TODO Why don't we do this?
+            // CraftBukkit end
             this.setForwardDirection(-this.getForwardDirection());
             this.setTimeSinceHit(10);
             this.setDamageTaken(this.getDamageTaken() + p_70097_2_ * 10.0F);
@@ -105,6 +155,18 @@ public class EntityBoat extends Entity
 
             if (flag || this.getDamageTaken() > 40.0F)
             {
+                // CraftBukkit start
+                VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
+                this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+
+                if (destroyEvent.isCancelled())
+                {
+                    this.setDamageTaken(40F); // Maximize damage so this doesn't get triggered again right away
+                    return true;
+                }
+
+                // CraftBukkit end
+
                 if (this.riddenByEntity != null)
                 {
                     this.riddenByEntity.mountEntity(this);
@@ -181,6 +243,13 @@ public class EntityBoat extends Entity
 
     public void onUpdate()
     {
+        // CraftBukkit start
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
+        // CraftBukkit end
         super.onUpdate();
 
         if (this.getTimeSinceHit() > 0)
@@ -303,7 +372,25 @@ public class EntityBoat extends Entity
                 this.motionX += -Math.sin((double)(f * (float)Math.PI / 180.0F)) * this.speedMultiplier * (double)entitylivingbase.moveForward * 0.05000000074505806D;
                 this.motionZ += Math.cos((double)(f * (float)Math.PI / 180.0F)) * this.speedMultiplier * (double)entitylivingbase.moveForward * 0.05000000074505806D;
             }
+            // CraftBukkit start - Support unoccupied deceleration
+            else if (unoccupiedDeceleration >= 0)
+            {
+                this.motionX *= unoccupiedDeceleration;
+                this.motionZ *= unoccupiedDeceleration;
+
+                // Kill lingering speed
+                if (motionX <= 0.00001)
+                {
+                    motionX = 0;
+                }
 
+                if (motionZ <= 0.00001)
+                {
+                    motionZ = 0;
+                }
+            }
+
+            // CraftBukkit end
             d2 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
             if (d2 > 0.35D)
@@ -347,18 +434,32 @@ public class EntityBoat extends Entity
 
                     if (block == Blocks.snow_layer)
                     {
+                        // CraftBukkit start
+                        if (CraftEventFactory.callEntityChangeBlockEvent(this, i1, k, j, Blocks.air, 0).isCancelled())
+                        {
+                            continue;
+                        }
+
+                        // CraftBukkit end
                         this.worldObj.setBlockToAir(i1, k, j);
                         this.isCollidedHorizontally = false;
                     }
                     else if (block == Blocks.waterlily)
                     {
+                        // CraftBukkit start
+                        if (CraftEventFactory.callEntityChangeBlockEvent(this, i1, k, j, Blocks.air, 0).isCancelled())
+                        {
+                            continue;
+                        }
+
+                        // CraftBukkit end
                         this.worldObj.func_147480_a(i1, k, j, true);
                         this.isCollidedHorizontally = false;
                     }
                 }
             }
 
-            if (this.onGround)
+            if (this.onGround && !this.landBoats)   // CraftBukkit
             {
                 this.motionX *= 0.5D;
                 this.motionY *= 0.5D;
@@ -371,17 +472,27 @@ public class EntityBoat extends Entity
             {
                 if (!this.worldObj.isRemote && !this.isDead)
                 {
-                    this.setDead();
+                    // CraftBukkit start
+                    Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
 
-                    for (l = 0; l < 3; ++l)
+                    if (!destroyEvent.isCancelled())
                     {
-                        this.func_145778_a(Item.getItemFromBlock(Blocks.planks), 1, 0.0F);
-                    }
+                        this.setDead();
 
-                    for (l = 0; l < 2; ++l)
-                    {
-                        this.func_145778_a(Items.stick, 1, 0.0F);
+                        for (l = 0; l < 3; ++l)
+                        {
+                            this.func_145778_a(Item.getItemFromBlock(Blocks.planks), 1, 0.0F);
+                        }
+
+                        for (l = 0; l < 2; ++l)
+                        {
+                            this.func_145778_a(Items.stick, 1, 0.0F);
+                        }
                     }
+
+                    // CraftBukkit end
                 }
             }
             else
@@ -415,6 +526,21 @@ public class EntityBoat extends Entity
 
             this.rotationYaw = (float)((double)this.rotationYaw + d7);
             this.setRotation(this.rotationYaw, this.rotationPitch);
+            // CraftBukkit start
+            org.bukkit.Server server = this.worldObj.getServer();
+            org.bukkit.World bworld = this.worldObj.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            server.getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to))
+            {
+                VehicleMoveEvent event = new VehicleMoveEvent(vehicle, from, to);
+                server.getPluginManager().callEvent(event);
+            }
+
+            // CraftBukkit end
 
             if (!this.worldObj.isRemote)
             {
@@ -435,6 +561,7 @@ public class EntityBoat extends Entity
 
                 if (this.riddenByEntity != null && this.riddenByEntity.isDead)
                 {
+                    this.riddenByEntity.ridingEntity = null; // CraftBukkit
                     this.riddenByEntity = null;
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityEnderCrystal.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityEnderCrystal.java
index 453ac5b..9c1358f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityEnderCrystal.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityEnderCrystal.java
@@ -10,6 +10,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProviderEnd;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntityEnderCrystal extends Entity
 {
     public int innerRotation;
@@ -56,7 +58,13 @@ public class EntityEnderCrystal extends Entity
 
         if (this.worldObj.provider instanceof WorldProviderEnd && this.worldObj.getBlock(i, j, k) != Blocks.fire)
         {
-            this.worldObj.setBlock(i, j, k, Blocks.fire);
+            // CraftBukkit start
+            if (!CraftEventFactory.callBlockIgniteEvent(this.worldObj, i, j, k, this).isCancelled())
+            {
+                this.worldObj.setBlock(i, j, k, Blocks.fire);
+            }
+
+            // CraftBukkit end
         }
     }
 
@@ -85,6 +93,13 @@ public class EntityEnderCrystal extends Entity
         {
             if (!this.isDead && !this.worldObj.isRemote)
             {
+                // CraftBukkit start - All non-living entities need this
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_70097_1_, p_70097_2_))
+                {
+                    return false;
+                }
+
+                // CraftBukkit end
                 this.health = 0;
 
                 if (this.health <= 0)
@@ -93,7 +108,7 @@ public class EntityEnderCrystal extends Entity
 
                     if (!this.worldObj.isRemote)
                     {
-                        this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, 6.0F, true);
+                        this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, 6.0F, true); // CraftBukkit - (Entity) null -> this
                     }
                 }
             }
@@ -101,4 +116,11 @@ public class EntityEnderCrystal extends Entity
             return true;
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityEnderEye.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityEnderEye.java
index 71386d8..b4ff8c1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityEnderEye.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityEnderEye.java
@@ -203,4 +203,11 @@ public class EntityEnderEye extends Entity
     {
         return false;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityEnderPearl.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityEnderPearl.java
index 8ef89aa..f94e1e6 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityEnderPearl.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityEnderPearl.java
@@ -12,6 +12,13 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.living.EnderTeleportEvent;
 
+
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.player.PlayerTeleportEvent;
+// CraftBukkit end
+
 public class EntityEnderPearl extends EntityThrowable
 {
     private static final String __OBFID = "CL_00001725";
@@ -52,22 +59,42 @@ public class EntityEnderPearl extends EntityThrowable
 
                 if (entityplayermp.playerNetServerHandler.func_147362_b().isChannelOpen() && entityplayermp.worldObj == this.worldObj)
                 {
-                    EnderTeleportEvent event = new EnderTeleportEvent(entityplayermp, this.posX, this.posY, this.posZ, 5.0F);
-                    if (!MinecraftForge.EVENT_BUS.post(event))
-                    { // Don't indent to lower patch size
-                    if (this.getThrower().isRiding())
-                    {
-                        this.getThrower().mountEntity((Entity)null);
+                    EnderTeleportEvent event = new EnderTeleportEvent(entityplayermp, this.posX, this.posY, this.posZ, 5);
+                    // Cauldron start - invert condition; return if cancelled otherwise fall through to CB event
+                    if (MinecraftForge.EVENT_BUS.post(event)){
+                        this.setDead();
+                        return;
                     }
+                    // Cauldron end
+                    // CraftBukkit start
+                    org.bukkit.craftbukkit.entity.CraftPlayer player = entityplayermp.getBukkitEntity();
+                    org.bukkit.Location location = getBukkitEntity().getLocation();
+                    location.setPitch(player.getLocation().getPitch());
+                    location.setYaw(player.getLocation().getYaw());
+                    PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, PlayerTeleportEvent.TeleportCause.ENDER_PEARL);
+                    Bukkit.getPluginManager().callEvent(teleEvent);
 
-                    this.getThrower().setPositionAndUpdate(event.targetX, event.targetY, event.targetZ);
-                    this.getThrower().fallDistance = 0.0F;
-                    this.getThrower().attackEntityFrom(DamageSource.fall, event.attackDamage);
+                    if (!teleEvent.isCancelled() && !entityplayermp.playerNetServerHandler.isDisconnected())
+                    {
+                        entityplayermp.playerNetServerHandler.teleport(teleEvent.getTo());
+                        this.getThrower().fallDistance = 0.0F;
+                        CraftEventFactory.entityDamage = this;
+                        this.getThrower().attackEntityFrom(DamageSource.fall, 5.0F);
+                        CraftEventFactory.entityDamage = null;
                     }
+
+                    // CraftBukkit end
                 }
             }
 
             this.setDead();
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityExpBottle.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityExpBottle.java
index 070a120..0da5205 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityExpBottle.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityExpBottle.java
@@ -43,8 +43,19 @@ public class EntityExpBottle extends EntityThrowable
     {
         if (!this.worldObj.isRemote)
         {
-            this.worldObj.playAuxSFX(2002, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), 0);
+            // CraftBukkit moved after event
+            //this.worldObj.playAuxSFX(2002, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), 0);
             int i = 3 + this.worldObj.rand.nextInt(5) + this.worldObj.rand.nextInt(5);
+            // CraftBukkit start
+            org.bukkit.event.entity.ExpBottleEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callExpBottleEvent(this, i);
+            i = event.getExperience();
+
+            if (event.getShowEffect())
+            {
+                this.worldObj.playAuxSFX(2002, (int) Math.round(this.posX), (int) Math.round(this.posY), (int) Math.round(this.posZ), 0);
+            }
+
+            // CraftBukkit end
 
             while (i > 0)
             {
@@ -56,4 +67,11 @@ public class EntityExpBottle extends EntityThrowable
             this.setDead();
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java
index 591a0d4..bd2ef5e 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java
@@ -19,9 +21,11 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntityFallingBlock extends Entity
 {
-    private Block field_145811_e;
+    public Block field_145811_e; // CraftBukkit - private -> public
     public int field_145814_a;
     public int field_145812_b;
     public boolean field_145813_c;
@@ -103,7 +107,8 @@ public class EntityFallingBlock extends Entity
 
                 if (this.field_145812_b == 1)
                 {
-                    if (this.worldObj.getBlock(i, j, k) != this.field_145811_e)
+                    // CraftBukkit - compare data and call event
+                    if (this.field_145812_b != 1 || this.worldObj.getBlock(i, j, k) != this.field_145811_e || this.worldObj.getBlockMetadata(i, j, k) != this.field_145814_a || CraftEventFactory.callEntityChangeBlockEvent(this, i, j, k, Blocks.air, 0).isCancelled())
                     {
                         this.setDead();
                         return;
@@ -122,8 +127,17 @@ public class EntityFallingBlock extends Entity
                     {
                         this.setDead();
 
-                        if (!this.field_145808_f && this.worldObj.canPlaceEntityOnSide(this.field_145811_e, i, j, k, true, 1, (Entity)null, (ItemStack)null) && !BlockFalling.func_149831_e(this.worldObj, i, j - 1, k) && this.worldObj.setBlock(i, j, k, this.field_145811_e, this.field_145814_a, 3))
+                        // CraftBukkit start
+                        if (!this.field_145808_f && this.worldObj.canPlaceEntityOnSide(this.field_145811_e, i, j, k, true, 1, (Entity) null, (ItemStack) null) && !BlockFalling.func_149831_e(this.worldObj, i, j - 1, k) /* mimic the false conditions of setTypeIdAndData */ && i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000 && j > 0 && j < 256 && !(this.worldObj.getBlock(i, j, k) == this.field_145811_e && this.worldObj.getBlockMetadata(i, j, k) == this.field_145814_a))
                         {
+                            if (CraftEventFactory.callEntityChangeBlockEvent(this, i, j, k, this.field_145811_e, this.field_145814_a).isCancelled())
+                            {
+                                return;
+                            }
+
+                            this.worldObj.setBlock(i, j, k, this.field_145811_e, this.field_145814_a, 3);
+                            // CraftBukkit end
+
                             if (this.field_145811_e instanceof BlockFalling)
                             {
                                 ((BlockFalling)this.field_145811_e).func_149828_a(this.worldObj, i, j, k, this.field_145814_a);
@@ -189,8 +203,10 @@ public class EntityFallingBlock extends Entity
 
                 while (iterator.hasNext())
                 {
-                    Entity entity = (Entity)iterator.next();
-                    entity.attackEntityFrom(damagesource, (float)Math.min(MathHelper.floor_float((float)i * this.field_145816_i), this.field_145815_h));
+                    Entity entity = (Entity) iterator.next();
+                    CraftEventFactory.entityDamage = this; // CraftBukkit
+                    entity.attackEntityFrom(damagesource,(float) Math.min(MathHelper.floor_float((float) i * this.field_145816_i), this.field_145815_h));
+                    CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
                 if (flag && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)i * 0.05D)
@@ -304,4 +320,11 @@ public class EntityFallingBlock extends Entity
     {
         return this.field_145811_e;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityFireworkRocket.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityFireworkRocket.java
index 2026a38..d478e1e 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityFireworkRocket.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityFireworkRocket.java
@@ -11,7 +11,7 @@ import net.minecraft.world.World;
 public class EntityFireworkRocket extends Entity
 {
     private int fireworkAge;
-    private int lifetime;
+    public int lifetime; // CraftBukkit - private -> public
     private static final String __OBFID = "CL_00001718";
 
     public EntityFireworkRocket(World p_i1762_1_)
@@ -199,4 +199,11 @@ public class EntityFireworkRocket extends Entity
     {
         return false;
     }
+    
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityItem.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityItem.java
index bd62c94..126cb80 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityItem.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityItem.java
@@ -22,6 +22,11 @@ import org.apache.logging.log4j.Logger;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.eventhandler.Event.Result;
 
+// CraftBukkit start
+import org.bukkit.event.player.PlayerPickupItemEvent;
+import net.minecraft.server.MinecraftServer;
+// CraftBukkit end
+
 public class EntityItem extends Entity
 {
     private static final Logger logger = LogManager.getLogger();
@@ -31,6 +36,7 @@ public class EntityItem extends Entity
     private String field_145801_f;
     private String field_145802_g;
     public float hoverStart;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit
     private static final String __OBFID = "CL_00001669";
 
     /**
@@ -55,6 +61,15 @@ public class EntityItem extends Entity
     public EntityItem(World p_i1710_1_, double p_i1710_2_, double p_i1710_4_, double p_i1710_6_, ItemStack p_i1710_8_)
     {
         this(p_i1710_1_, p_i1710_2_, p_i1710_4_, p_i1710_6_);        
+
+        // CraftBukkit start - Can't set null items in the datawatcher
+        if (p_i1710_8_ == null || p_i1710_8_.getItem() == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
+
         this.setEntityItemStack(p_i1710_8_);
         this.lifespan = (p_i1710_8_.getItem() == null ? 6000 : p_i1710_8_.getItem().getEntityLifespan(p_i1710_8_, p_i1710_1_));
     }
@@ -81,6 +96,10 @@ public class EntityItem extends Entity
     public void onUpdate()
     {
         ItemStack stack = this.getDataWatcher().getWatchableObjectItemStack(10);
+        if (stack == null || stack.stackSize == 0) {
+            setDead();
+            return;
+        }
         if (stack != null && stack.getItem() != null)
         {
             if (stack.getItem().onEntityItemUpdate(this))
@@ -89,93 +108,103 @@ public class EntityItem extends Entity
             }
         }
 
-        if (this.getEntityItem() == null)
-        {
-            this.setDead();
+        super.onUpdate();
+        // CraftBukkit start - Use wall time for pickup and despawn timers
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.delayBeforeCanPickup -= elapsedTicks;
+        if (this.delayBeforeCanPickup < 0) this.delayBeforeCanPickup = 0; // Cauldron
+        this.age += elapsedTicks;
+        this.lastTick = MinecraftServer.currentTick;
+        // CraftBukkit end
+
+        boolean forceUpdate = this.ticksExisted > 0 && this.ticksExisted % 25 == 0; // Cauldron - optimize item tick updates
+        this.prevPosX = this.posX;
+        this.prevPosY = this.posY;
+        this.prevPosZ = this.posZ;
+        this.motionY -= 0.03999999910593033D;
+        // Cauldron start - if forced
+        if (forceUpdate || noClip) {
+            this.noClip = this.func_145771_j(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
         }
-        else
-        {
-            super.onUpdate();
+        // Cauldron end
+        this.moveEntity(this.motionX, this.motionY, this.motionZ);
+        boolean flag = (int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;
 
-            if (this.delayBeforeCanPickup > 0)
+        if ((flag && this.ticksExisted % 5 == 0) || forceUpdate) // Cauldron - if forced
+        {
+            if (this.worldObj.getBlock(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)).getMaterial() == Material.lava)
             {
-                --this.delayBeforeCanPickup;
+                this.motionY = 0.20000000298023224D;
+                this.motionX = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
+                this.motionZ = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
+                this.playSound("random.fizz", 0.4F, 2.0F + this.rand.nextFloat() * 0.4F);
             }
 
-            this.prevPosX = this.posX;
-            this.prevPosY = this.posY;
-            this.prevPosZ = this.posZ;
-            this.motionY -= 0.03999999910593033D;
-            this.noClip = this.func_145771_j(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
-            this.moveEntity(this.motionX, this.motionY, this.motionZ);
-            boolean flag = (int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;
-
-            if (flag || this.ticksExisted % 25 == 0)
+            if (forceUpdate && !this.worldObj.isRemote) // Cauldron - if forced
             {
-                if (this.worldObj.getBlock(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)).getMaterial() == Material.lava)
-                {
-                    this.motionY = 0.20000000298023224D;
-                    this.motionX = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
-                    this.motionZ = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
-                    this.playSound("random.fizz", 0.4F, 2.0F + this.rand.nextFloat() * 0.4F);
-                }
-
-                if (!this.worldObj.isRemote)
-                {
-                    this.searchForOtherItemsNearby();
-                }
+                this.searchForOtherItemsNearby();
             }
+        }
 
-            float f = 0.98F;
+        float f = 0.98F;
 
-            if (this.onGround)
-            {
-                f = this.worldObj.getBlock(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ)).slipperiness * 0.98F;
-            }
+        if (this.onGround)
+        {
+            f = this.worldObj.getBlock(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ)).slipperiness * 0.98F;
+        }
 
-            this.motionX *= (double)f;
-            this.motionY *= 0.9800000190734863D;
-            this.motionZ *= (double)f;
+        this.motionX *= (double)f;
+        this.motionY *= 0.9800000190734863D;
+        this.motionZ *= (double)f;
 
-            if (this.onGround)
-            {
-                this.motionY *= -0.5D;
-            }
+        if (this.onGround)
+        {
+            this.motionY *= -0.5D;
+        }
 
-            ++this.age;
+        // ++this.age; // CraftBukkit - Moved up (base age on wall time)
 
-            ItemStack item = getDataWatcher().getWatchableObjectItemStack(10);
+        ItemStack item = getDataWatcher().getWatchableObjectItemStack(10);
         
-            if (!this.worldObj.isRemote && this.age >= lifespan)
+        if (!this.worldObj.isRemote && this.age >= lifespan - 1) // Cauldron adjust for age being off by one when it is first dropped
+        {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled())
+            {
+                this.age = 0;
+                return;
+            }
+            // CraftBukkit end
+            if (item != null)
             {   
-                if (item != null)
+                ItemExpireEvent event = new ItemExpireEvent(this, (item.getItem() == null ? this.worldObj.getSpigotConfig().itemDespawnRate : item.getItem().getEntityLifespan(item, worldObj))); // Spigot // Cauldron
+                if (MinecraftForge.EVENT_BUS.post(event))
                 {
-                    ItemExpireEvent event = new ItemExpireEvent(this, (item.getItem() == null ? 6000 : item.getItem().getEntityLifespan(item, worldObj)));
-                    if (MinecraftForge.EVENT_BUS.post(event))
-                    {
-                        lifespan += event.extraLife;
-                    }
-                    else
-                    {
-                        this.setDead();
-                    }
+                    lifespan += event.extraLife;
                 }
                 else
                 {
                     this.setDead();
                 }
             }
-    
-            if (item != null && item.stackSize <= 0)
+            else
             {
                 this.setDead();
             }
         }
+
+        if (item != null && item.stackSize <= 0)
+        {
+            this.setDead();
+        }
     }
 
     private void searchForOtherItemsNearby()
     {
-        Iterator iterator = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(0.5D, 0.0D, 0.5D)).iterator();
+        // Spigot start
+        double radius = worldObj.getSpigotConfig().itemMerge; // Cauldron
+        Iterator iterator = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(radius, radius, radius)).iterator();
+        // Spigot end
 
         while (iterator.hasNext())
         {
@@ -225,11 +254,13 @@ public class EntityItem extends Entity
             }
             else
             {
-                itemstack1.stackSize += itemstack.stackSize;
-                p_70289_1_.delayBeforeCanPickup = Math.max(p_70289_1_.delayBeforeCanPickup, this.delayBeforeCanPickup);
-                p_70289_1_.age = Math.min(p_70289_1_.age, this.age);
-                p_70289_1_.setEntityItemStack(itemstack1);
-                this.setDead();
+                // Spigot start
+                itemstack.stackSize += itemstack1.stackSize;
+                this.delayBeforeCanPickup = Math.max(p_70289_1_.delayBeforeCanPickup, this.delayBeforeCanPickup);
+                this.age = Math.min(p_70289_1_.age, this.age);
+                this.setEntityItemStack(itemstack);
+                p_70289_1_.setDead();
+                // Spigot end
                 return true;
             }
         }
@@ -316,8 +347,27 @@ public class EntityItem extends Entity
         }
 
         NBTTagCompound nbttagcompound1 = p_70037_1_.getCompoundTag("Item");
-        this.setEntityItemStack(ItemStack.loadItemStackFromNBT(nbttagcompound1));
 
+        // CraftBukkit start
+        if (nbttagcompound1 != null)
+        {
+            ItemStack itemstack = ItemStack.loadItemStackFromNBT(nbttagcompound1);
+
+            if (itemstack != null)
+            {
+                this.setEntityItemStack(itemstack);
+            }
+            else
+            {
+                this.setDead();
+            }
+        }
+        else
+        {
+            this.setDead();
+        }
+
+        // CraftBukkit end
         ItemStack item = getDataWatcher().getWatchableObjectItemStack(10);
 
         if (item == null || item.stackSize <= 0)
@@ -350,6 +400,31 @@ public class EntityItem extends Entity
             ItemStack itemstack = this.getEntityItem();
             int i = itemstack.stackSize;
 
+            // CraftBukkit start
+            int canHold = p_70100_1_.inventory.canHold(itemstack);
+            int remaining = itemstack.stackSize - canHold;
+
+            if (this.delayBeforeCanPickup <= 0 && canHold > 0)
+            {
+                itemstack.stackSize = canHold;
+                // Cauldron start - rename to cbEvent to fix naming collision
+                PlayerPickupItemEvent cbEvent = new PlayerPickupItemEvent((org.bukkit.entity.Player) p_70100_1_.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                //cbEvent.setCancelled(!par1EntityPlayer.canPickUpLoot); TODO
+                this.worldObj.getServer().getPluginManager().callEvent(cbEvent);
+                itemstack.stackSize = canHold + remaining;
+
+                if (cbEvent.isCancelled())
+                {
+                    return;
+                }
+                // Cauldron end
+
+                // Possibly < 0; fix here so we do not have to modify code below
+                this.delayBeforeCanPickup = 0;
+            }
+
+            // CraftBukkit end
+
             if (this.delayBeforeCanPickup <= 0 && (this.field_145802_g == null || lifespan - this.age <= 200 || this.field_145802_g.equals(p_70100_1_.getCommandSenderName())) && (event.getResult() == Result.ALLOW || i <= 0 || p_70100_1_.inventory.addItemStackToInventory(itemstack)))
             {
                 if (itemstack.getItem() == Item.getItemFromBlock(Blocks.log))
@@ -423,7 +498,7 @@ public class EntityItem extends Entity
     public ItemStack getEntityItem()
     {
         ItemStack itemstack = this.getDataWatcher().getWatchableObjectItemStack(10);
-        return itemstack == null ? new ItemStack(Blocks.stone) : itemstack;
+        return itemstack == null ? new ItemStack(Blocks.air, 0) : itemstack;
     }
 
     public void setEntityItemStack(ItemStack p_92058_1_)
@@ -451,4 +526,10 @@ public class EntityItem extends Entity
     {
         this.field_145801_f = p_145799_1_;
     }
+    
+    @Override
+    public boolean entityAllowedToSpawn() {
+        ItemStack stack = getDataWatcher().getWatchableObjectItemStack(10);
+        return stack != null && stack.getItem() != null && stack.stackSize > 0;
+    }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityItemFrame.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityItemFrame.java
index 468dd09..fa9cc9f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityItemFrame.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityItemFrame.java
@@ -45,6 +45,13 @@ public class EntityItemFrame extends EntityHanging
         {
             if (!this.worldObj.isRemote)
             {
+                // CraftBukkit start
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_70097_1_, p_70097_2_) || this.isDead)
+                {
+                    return true;
+                }
+                // CraftBukkit end
+
                 this.func_146065_b(p_70097_1_.getEntity(), false);
                 this.setDisplayedItem((ItemStack)null);
             }
@@ -203,4 +210,11 @@ public class EntityItemFrame extends EntityHanging
 
         return true;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityMinecart.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityMinecart.java
index 654250b..2e8836f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityMinecart.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityMinecart.java
@@ -28,6 +28,15 @@ import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.minecart.MinecartCollisionEvent;
 import net.minecraftforge.event.entity.minecart.MinecartUpdateEvent;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
+// CraftBukkit end
+
 public abstract class EntityMinecart extends Entity
 {
     private boolean isInReverse;
@@ -47,6 +56,17 @@ public abstract class EntityMinecart extends Entity
     private double velocityZ;
     private static final String __OBFID = "CL_00001670";
 
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5D;
+    private double derailedY = 0.5D;
+    private double derailedZ = 0.5D;
+    private double flyingX = 0.95D;
+    private double flyingY = 0.95D;
+    private double flyingZ = 0.95D;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
+
     /* Forge: Minecart Compatibility Layer Integration. */
     public static float defaultMaxSpeedAirLateral = 0.4f;
     public static float defaultMaxSpeedAirVertical = -1f;
@@ -138,6 +158,7 @@ public abstract class EntityMinecart extends Entity
         this.prevPosX = p_i1713_2_;
         this.prevPosY = p_i1713_4_;
         this.prevPosZ = p_i1713_6_;
+        this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleCreateEvent((Vehicle) this.getBukkitEntity())); // CraftBukkit
     }
 
     public double getMountedYOffset()
@@ -155,6 +176,19 @@ public abstract class EntityMinecart extends Entity
             }
             else
             {
+                // CraftBukkit start
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (p_70097_1_.getEntity() == null) ? null : p_70097_1_.getEntity().getBukkitEntity();
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, p_70097_2_);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return true;
+                }
+
+                p_70097_2_ = (float) event.getDamage();
+                // CraftBukkit end
                 this.setRollingDirection(-this.getRollingDirection());
                 this.setRollingAmplitude(10);
                 this.setBeenAttacked();
@@ -168,6 +202,18 @@ public abstract class EntityMinecart extends Entity
                         this.riddenByEntity.mountEntity(this);
                     }
 
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled())
+                    {
+                        this.setDamage(40); // Maximize damage so this doesn't
+                                            // get triggered again right away
+                        return true;
+                    }
+                    // CraftBukkit end
+
                     if (flag && !this.hasCustomInventoryName())
                     {
                         this.setDead();
@@ -220,6 +266,14 @@ public abstract class EntityMinecart extends Entity
 
     public void onUpdate()
     {
+        // CraftBukkit start
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
+        // CraftBukkit end
+
         if (this.getRollingAmplitude() > 0)
         {
             this.setRollingAmplitude(this.getRollingAmplitude() - 1);
@@ -245,7 +299,7 @@ public abstract class EntityMinecart extends Entity
 
             if (this.inPortal)
             {
-                if (minecraftserver.getAllowNether())
+                if (true || minecraftserver.getAllowNether())   // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled
                 {
                     if (this.ridingEntity == null && this.portalCounter++ >= i)
                     {
@@ -324,7 +378,7 @@ public abstract class EntityMinecart extends Entity
                 --i;
             }
 
-            double d0 = 0.4D;
+            double d0 = this.maxSpeed; // CraftBukkit
             double d2 = 0.0078125D;
             Block block = this.worldObj.getBlock(l, i, i1);
 
@@ -368,7 +422,18 @@ public abstract class EntityMinecart extends Entity
             }
 
             this.setRotation(this.rotationYaw, this.rotationPitch);
-
+            // CraftBukkit start
+            org.bukkit.World bworld = this.worldObj.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to))
+            {
+                this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+            }
+            // CraftBukkit end
             AxisAlignedBB box;
             if (getCollisionHandler() != null)
             {
@@ -445,18 +510,22 @@ public abstract class EntityMinecart extends Entity
 
         if (this.onGround)
         {
-            this.motionX *= 0.5D;
-            this.motionY *= 0.5D;
-            this.motionZ *= 0.5D;
+            // CraftBukkit start
+            this.motionX *= this.derailedX;
+            this.motionY *= this.derailedY;
+            this.motionZ *= this.derailedZ;
+            // CraftBukkit end
         }
 
         this.moveEntity(this.motionX, moveY, this.motionZ);
 
         if (!this.onGround)
         {
+            // CraftBukkit start // Cauldron - CB changed to flyingX but Forge changed to getDragAir() - prefer Forge in this case
             this.motionX *= getDragAir();
             this.motionY *= getDragAir();
             this.motionZ *= getDragAir();
+            // CraftBukkit end
         }
     }
 
@@ -678,7 +747,7 @@ public abstract class EntityMinecart extends Entity
 
     protected void applyDrag()
     {
-        if (this.riddenByEntity != null)
+        if (this.riddenByEntity != null || !this.slowWhenEmpty) // CraftBukkit
         {
             this.motionX *= 0.996999979019165D;
             this.motionY *= 0.0D;
@@ -866,6 +935,18 @@ public abstract class EntityMinecart extends Entity
         {
             if (p_70108_1_ != this.riddenByEntity)
             {
+                // CraftBukkit start
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity hitEntity = (p_70108_1_ == null) ? null : p_70108_1_.getBukkitEntity();
+                VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, hitEntity);
+                this.worldObj.getServer().getPluginManager().callEvent(collisionEvent);
+
+                if (collisionEvent.isCancelled())
+                {
+                    return;
+                }
+                // CraftBukkit end
+
                 if (p_70108_1_ instanceof EntityLivingBase && !(p_70108_1_ instanceof EntityPlayer) && !(p_70108_1_ instanceof EntityIronGolem) && canBeRidden()               && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && p_70108_1_.ridingEntity == null)
                 {
                     p_70108_1_.mountEntity(this);
@@ -875,7 +956,8 @@ public abstract class EntityMinecart extends Entity
                 double d1 = p_70108_1_.posZ - this.posZ;
                 double d2 = d0 * d0 + d1 * d1;
 
-                if (d2 >= 9.999999747378752E-5D)
+                // CraftBukkit - collision
+                if (d2 >= 9.999999747378752E-5D && !collisionEvent.isCollisionCancelled())
                 {
                     d2 = (double)MathHelper.sqrt_double(d2);
                     d0 /= d2;
@@ -1089,6 +1171,34 @@ public abstract class EntityMinecart extends Entity
     {
         return this.entityName;
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed
+    // velocity modifiers
+    public Vector getFlyingVelocityMod()
+    {
+        return new Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying)
+    {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod()
+    {
+        return new Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed)
+    {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
+
     /* =================================== FORGE START ===========================================*/
     /**
      * Moved to allow overrides.
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityMinecartContainer.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityMinecartContainer.java
index 303c867..aa615fb 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityMinecartContainer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityMinecartContainer.java
@@ -9,12 +9,61 @@ import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.DamageSource;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
+
 public abstract class EntityMinecartContainer extends EntityMinecart implements IInventory
 {
     private ItemStack[] minecartContainerItems = new ItemStack[36];
     private boolean dropContentsWhenDead = true;
     private static final String __OBFID = "CL_00001674";
 
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.minecartContainerItems;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner()
+    {
+        org.bukkit.entity.Entity cart = getBukkitEntity();
+
+        if (cart instanceof InventoryHolder)
+        {
+            return (InventoryHolder) cart;
+        }
+
+        return null;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public EntityMinecartContainer(World p_i1716_1_)
     {
         super(p_i1716_1_);
@@ -147,6 +196,13 @@ public abstract class EntityMinecartContainer extends EntityMinecart implements
 
     public void travelToDimension(int p_71027_1_)
     {
+        // Spigot Start
+        for (HumanEntity human : new java.util.ArrayList<HumanEntity>(transaction))
+        {
+            human.closeInventory();
+        }
+
+        // Spigot End
         this.dropContentsWhenDead = false;
         super.travelToDimension(p_71027_1_);
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityPainting.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityPainting.java
index 7bbe2b5..2d2b75f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityPainting.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityPainting.java
@@ -19,6 +21,7 @@ public class EntityPainting extends EntityHanging
     public EntityPainting(World p_i1599_1_)
     {
         super(p_i1599_1_);
+        this.art = EntityPainting.EnumArt.values()[this.rand.nextInt(EntityPainting.EnumArt.values().length)]; // CraftBukkit - generate a non-null painting
     }
 
     public EntityPainting(World p_i1600_1_, int p_i1600_2_, int p_i1600_3_, int p_i1600_4_, int p_i1600_5_)
@@ -170,4 +173,11 @@ public class EntityPainting extends EntityHanging
             this.offsetY = p_i1598_7_;
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityTNTPrimed.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityTNTPrimed.java
index ad14ce4..69e28e0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityTNTPrimed.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityTNTPrimed.java
@@ -7,11 +7,15 @@ import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
+
 public class EntityTNTPrimed extends Entity
 {
     public int fuse;
     private EntityLivingBase tntPlacedBy;
     private static final String __OBFID = "CL_00001681";
+    public float yield = 4; // CraftBukkit
+    public boolean isIncendiary = false; // CraftBukkit
 
     public EntityTNTPrimed(World p_i1729_1_)
     {
@@ -68,12 +72,14 @@ public class EntityTNTPrimed extends Entity
 
         if (this.fuse-- <= 0)
         {
-            this.setDead();
-
+            // CraftBukkit start - Need to reverse the order of the explosion and the entity death so we have a location for the event
             if (!this.worldObj.isRemote)
             {
                 this.explode();
             }
+
+            this.setDead();
+            // CraftBukkit end
         }
         else
         {
@@ -83,8 +89,19 @@ public class EntityTNTPrimed extends Entity
 
     private void explode()
     {
-        float f = 4.0F;
-        this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, f, true);
+        // CraftBukkit start
+        // float f = 4.0F;
+        org.bukkit.craftbukkit.CraftServer server = this.worldObj.getServer();
+        ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) org.bukkit.craftbukkit.entity.CraftEntity.getEntity(server, this));
+        server.getPluginManager().callEvent(event);
+
+        if (!event.isCancelled())
+        {
+            // give 'this' instead of (Entity) null so we know what causes the damage
+            this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), true);
+        }
+
+        // CraftBukkit end
     }
 
     protected void writeEntityToNBT(NBTTagCompound p_70014_1_)
@@ -107,4 +124,11 @@ public class EntityTNTPrimed extends Entity
     {
         return this.tntPlacedBy;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityXPOrb.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityXPOrb.java
index 084150a..d6ae7f2 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/item/EntityXPOrb.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/item/EntityXPOrb.java
@@ -12,13 +12,19 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.PlayerPickupXpEvent;
 
+
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class EntityXPOrb extends Entity
 {
     public int xpColor;
     public int xpOrbAge;
     public int field_70532_c;
     private int xpOrbHealth = 5;
-    public int xpValue;
+    public int xpValue; // CraftBukkit - private -> public
     private EntityPlayer closestPlayer;
     private int xpTargetColor;
     private static final String __OBFID = "CL_00001544";
@@ -115,18 +121,27 @@ public class EntityXPOrb extends Entity
 
         if (this.closestPlayer != null)
         {
-            double d1 = (this.closestPlayer.posX - this.posX) / d0;
-            double d2 = (this.closestPlayer.posY + (double)this.closestPlayer.getEyeHeight() - this.posY) / d0;
-            double d3 = (this.closestPlayer.posZ - this.posZ) / d0;
-            double d4 = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
-            double d5 = 1.0D - d4;
+            // CraftBukkit start
+            EntityTargetEvent event = CraftEventFactory.callEntityTargetEvent(this, closestPlayer, EntityTargetEvent.TargetReason.CLOSEST_PLAYER);
+            Entity target = event.getTarget() == null ? null : ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
 
-            if (d5 > 0.0D)
+            if (!event.isCancelled() && target != null)
             {
-                d5 *= d5;
-                this.motionX += d1 / d4 * d5 * 0.1D;
-                this.motionY += d2 / d4 * d5 * 0.1D;
-                this.motionZ += d3 / d4 * d5 * 0.1D;
+                double d1 = (target.posX - this.posX) / d0;
+                double d2 = (target.posY + (double) target.getEyeHeight() - this.posY) / d0;
+                double d3 = (target.posZ - this.posZ) / d0;
+                double d4 = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
+                double d5 = 1.0D - d4;
+
+                if (d5 > 0.0D)
+                {
+                    d5 *= d5;
+                    this.motionX += d1 / d4 * d5 * 0.1D;
+                    this.motionY += d2 / d4 * d5 * 0.1D;
+                    this.motionZ += d3 / d4 * d5 * 0.1D;
+                }
+
+                // CraftBukkit end
             }
         }
 
@@ -210,7 +225,7 @@ public class EntityXPOrb extends Entity
                 p_70100_1_.xpCooldown = 2;
                 this.worldObj.playSoundAtEntity(p_70100_1_, "random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
                 p_70100_1_.onItemPickup(this, 1);
-                p_70100_1_.addExperience(this.xpValue);
+                p_70100_1_.addExperience(CraftEventFactory.callPlayerExpChangeEvent(p_70100_1_, this.xpValue).getAmount());
                 this.setDead();
             }
         }
@@ -229,6 +244,88 @@ public class EntityXPOrb extends Entity
 
     public static int getXPSplit(int p_70527_0_)
     {
+        // CraftBukkit start
+        if (p_70527_0_ > 162670129)
+        {
+            return p_70527_0_ - 100000;
+        }
+
+        if (p_70527_0_ > 81335063)
+        {
+            return 81335063;
+        }
+
+        if (p_70527_0_ > 40667527)
+        {
+            return 40667527;
+        }
+
+        if (p_70527_0_ > 20333759)
+        {
+            return 20333759;
+        }
+
+        if (p_70527_0_ > 10166857)
+        {
+            return 10166857;
+        }
+
+        if (p_70527_0_ > 5083423)
+        {
+            return 5083423;
+        }
+
+        if (p_70527_0_ > 2541701)
+        {
+            return 2541701;
+        }
+
+        if (p_70527_0_ > 1270849)
+        {
+            return 1270849;
+        }
+
+        if (p_70527_0_ > 635413)
+        {
+            return 635413;
+        }
+
+        if (p_70527_0_ > 317701)
+        {
+            return 317701;
+        }
+
+        if (p_70527_0_ > 158849)
+        {
+            return 158849;
+        }
+
+        if (p_70527_0_ > 79423)
+        {
+            return 79423;
+        }
+
+        if (p_70527_0_ > 39709)
+        {
+            return 39709;
+        }
+
+        if (p_70527_0_ > 19853)
+        {
+            return 19853;
+        }
+
+        if (p_70527_0_ > 9923)
+        {
+            return 9923;
+        }
+
+        if (p_70527_0_ > 4957)
+        {
+            return 4957;
+        }
+
+        // CraftBukkit end
         return p_70527_0_ >= 2477 ? 2477 : (p_70527_0_ >= 1237 ? 1237 : (p_70527_0_ >= 617 ? 617 : (p_70527_0_ >= 307 ? 307 : (p_70527_0_ >= 149 ? 149 : (p_70527_0_ >= 73 ? 73 : (p_70527_0_ >= 37 ? 37 : (p_70527_0_ >= 17 ? 17 : (p_70527_0_ >= 7 ? 7 : (p_70527_0_ >= 3 ? 3 : 1)))))))));
     }
 
@@ -236,4 +333,11 @@ public class EntityXPOrb extends Entity
     {
         return false;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityCreeper.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityCreeper.java
index db426a5..fd4e2f4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityCreeper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityCreeper.java
@@ -23,6 +23,11 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.DamageSource;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+// CraftBukkit end
+
 public class EntityCreeper extends EntityMob
 {
     private int lastActiveTime;
@@ -207,7 +212,33 @@ public class EntityCreeper extends EntityMob
     public void onStruckByLightning(EntityLightningBolt p_70077_1_)
     {
         super.onStruckByLightning(p_70077_1_);
-        this.dataWatcher.updateObject(17, Byte.valueOf((byte)1));
+
+        // Cauldron start
+        if (p_70077_1_ != null)
+        {
+            // CraftBukkit start
+            if (CraftEventFactory.callCreeperPowerEvent(this, p_70077_1_, org.bukkit.event.entity.CreeperPowerEvent.PowerCause.LIGHTNING).isCancelled())
+            {
+                return;
+            }
+        }
+        // Cauldron end
+
+        this.setPowered(true);
+    }
+
+    public void setPowered(boolean powered)
+    {
+        if (!powered)
+        {
+            this.dataWatcher.updateObject(17, Byte.valueOf((byte) 0));
+        }
+        else
+        {
+            this.dataWatcher.updateObject(17, Byte.valueOf((byte) 1));
+        }
+
+        // CraftBukkit end
     }
 
     protected boolean interact(EntityPlayer p_70085_1_)
@@ -235,17 +266,22 @@ public class EntityCreeper extends EntityMob
         if (!this.worldObj.isRemote)
         {
             boolean flag = this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing");
+            // CraftBukkit start
+            float radius = this.getPowered() ? 6.0F : 3.0F;
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), radius, false);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
 
-            if (this.getPowered())
+            if (!event.isCancelled())
             {
-                this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), flag);
+                this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), flag);
+                this.setDead();
             }
             else
             {
-                this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, flag);
+                this.timeSinceIgnited = 0;
             }
 
-            this.setDead();
+            // CraftBukkit end
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityEnderman.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityEnderman.java
index fbc6267..bf76f04 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityEnderman.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityEnderman.java
@@ -24,6 +24,12 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.living.EnderTeleportEvent;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTeleportEvent;
+// CraftBukkit end
+
 public class EntityEnderman extends EntityMob
 {
     private static final UUID attackingSpeedBoostModifierUUID = UUID.fromString("020E0DFB-87AE-4653-9556-831010E291A0");
@@ -161,9 +167,15 @@ public class EntityEnderman extends EntityMob
 
                     if (EntityEnderman.getCarriable(block))
                     {
-                        this.func_146081_a(block);
-                        this.setCarryingData(this.worldObj.getBlockMetadata(k, i, j));
-                        this.worldObj.setBlock(k, i, j, Blocks.air);
+                        // CraftBukkit start - Pickup event
+                        if (this.worldObj.getWorld() == null || !CraftEventFactory.callEntityChangeBlockEvent(this, this.worldObj.getWorld().getBlockAt(i, j, k), org.bukkit.Material.AIR).isCancelled()) // Cauldron
+                        {
+                            this.func_146081_a(block);
+                            this.setCarryingData(this.worldObj.getBlockMetadata(i, j, k));
+                            this.worldObj.setBlock(i, j, k, Blocks.air);
+                        }
+
+                        // CraftBukkit end
                     }
                 }
             }
@@ -177,8 +189,14 @@ public class EntityEnderman extends EntityMob
 
                 if (block.getMaterial() == Material.air && block1.getMaterial() != Material.air && block1.renderAsNormalBlock())
                 {
-                    this.worldObj.setBlock(k, i, j, this.func_146080_bZ(), this.getCarryingData(), 3);
-                    this.func_146081_a(Blocks.air);
+                    // CraftBukkit start - Place event
+                    if (!CraftEventFactory.callEntityChangeBlockEvent(this, i, j, k, this.func_146080_bZ(), this.getCarryingData()).isCancelled())
+                    {
+                        this.worldObj.setBlock(i, j, k, this.func_146080_bZ(), this.getCarryingData(), 3);
+                        this.func_146081_a(Blocks.air);
+                    }
+
+                    // CraftBukkit end
                 }
             }
         }
@@ -306,7 +324,18 @@ public class EntityEnderman extends EntityMob
 
             if (flag1)
             {
-                this.setPosition(this.posX, this.posY, this.posZ);
+                // CraftBukkit start - Teleport event
+                EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.worldObj.getWorld(), d3, d4, d5), new Location(this.worldObj.getWorld(), this.posX, this.posY, this.posZ));
+                this.worldObj.getServer().getPluginManager().callEvent(teleport);
+
+                if (teleport.isCancelled())
+                {
+                    return false;
+                }
+
+                Location to = teleport.getTo();
+                this.setPosition(to.getX(), to.getY(), to.getZ());
+                // CraftBukkit end
 
                 if (this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox))
                 {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityGhast.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityGhast.java
index 13b9941..8eb03d5 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityGhast.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityGhast.java
@@ -18,6 +18,11 @@ import net.minecraft.util.Vec3;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class EntityGhast extends EntityFlying implements IMob
 {
     public int courseChangeCooldown;
@@ -117,12 +122,49 @@ public class EntityGhast extends EntityFlying implements IMob
 
         if (this.targetedEntity != null && this.targetedEntity.isDead)
         {
-            this.targetedEntity = null;
+            // CraftBukkit start
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), null, EntityTargetEvent.TargetReason.TARGET_DIED);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                if (event.getTarget() == null)
+                {
+                    this.targetedEntity = null;
+                }
+                else
+                {
+                    this.targetedEntity = ((CraftEntity) event.getTarget()).getHandle();
+                }
+            }
+
+            // CraftBukkit end
         }
 
         if (this.targetedEntity == null || this.aggroCooldown-- <= 0)
         {
-            this.targetedEntity = this.worldObj.getClosestVulnerablePlayerToEntity(this, 100.0D);
+            // CraftBukkit start
+            Entity target = this.worldObj.getClosestVulnerablePlayerToEntity(this, 100.0D);
+
+            if (target != null)
+            {
+                EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), target.getBukkitEntity(), EntityTargetEvent.TargetReason.CLOSEST_PLAYER);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    if (event.getTarget() == null)
+                    {
+                        this.targetedEntity = null;
+                    }
+                    else
+                    {
+                        this.targetedEntity = ((CraftEntity) event.getTarget()).getHandle();
+                    }
+                }
+            }
+
+            // CraftBukkit end
 
             if (this.targetedEntity != null)
             {
@@ -152,7 +194,8 @@ public class EntityGhast extends EntityFlying implements IMob
                 {
                     this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1008, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
                     EntityLargeFireball entitylargefireball = new EntityLargeFireball(this.worldObj, this, d5, d6, d7);
-                    entitylargefireball.field_92057_e = this.explosionStrength;
+                    // CraftBukkit - set bukkitYield when setting explosionpower
+                    entitylargefireball.bukkitYield = entitylargefireball.field_92057_e  = this.explosionStrength;
                     double d8 = 4.0D;
                     Vec3 vec3 = this.getLook(1.0F);
                     entitylargefireball.posX = this.posX + vec3.xCoord * d8;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityMob.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityMob.java
index 2bf5a01..c1e810a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityMob.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityMob.java
@@ -1,5 +1,6 @@
 package net.minecraft.entity.monster;
 
+import org.bukkit.event.entity.EntityTargetEvent; // CraftBukkit
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityCreature;
@@ -75,7 +76,29 @@ public abstract class EntityMob extends EntityCreature implements IMob
             {
                 if (entity != this)
                 {
-                    this.entityToAttack = entity;
+                    // CraftBukkit start - We still need to call events for entities without goals
+                    if (entity != this.entityToAttack && (this instanceof EntityBlaze || this instanceof EntityEnderman || this instanceof EntitySpider || this instanceof EntityGiantZombie || this instanceof EntitySilverfish))
+                    {
+                        EntityTargetEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetEvent(this, entity, EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY);
+
+                        if (!event.isCancelled())
+                        {
+                            if (event.getTarget() == null)
+                            {
+                                this.entityToAttack = null;
+                            }
+                            else
+                            {
+                                this.entityToAttack = ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+                            }
+                        }
+                    }
+                    else
+                    {
+                        this.entityToAttack = entity;
+                    }
+
+                    // CraftBukkit end
                 }
 
                 return true;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityPigZombie.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityPigZombie.java
index bbb3925..47fe196 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityPigZombie.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityPigZombie.java
@@ -15,11 +15,13 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityTargetEvent; // CraftBukkit
+
 public class EntityPigZombie extends EntityZombie
 {
     private static final UUID field_110189_bq = UUID.fromString("49455A49-7EC5-45BA-B886-3B90B23A1718");
     private static final AttributeModifier field_110190_br = (new AttributeModifier(field_110189_bq, "Attacking speed boost", 0.45D, 0)).setSaved(false);
-    private int angerLevel;
+    public int angerLevel; // CraftBukkit - private -> public
     private int randomSoundDelay;
     private Entity field_110191_bu;
     private static final String __OBFID = "CL_00001693";
@@ -122,6 +124,24 @@ public class EntityPigZombie extends EntityZombie
 
     private void becomeAngryAt(Entity p_70835_1_)
     {
+        // CraftBukkit start
+        org.bukkit.entity.Entity bukkitTarget = p_70835_1_ == null ? null : p_70835_1_.getBukkitEntity();
+        EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), bukkitTarget, EntityTargetEvent.TargetReason.PIG_ZOMBIE_TARGET);
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled())
+        {
+            return;
+        }
+
+        if (event.getTarget() == null)
+        {
+            this.entityToAttack = null;
+            return;
+        }
+
+        p_70835_1_ = ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+        // CraftBukkit end
         this.entityToAttack = p_70835_1_;
         this.angerLevel = 400 + this.rand.nextInt(400);
         this.randomSoundDelay = this.rand.nextInt(40);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySilverfish.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySilverfish.java
index 946203c..4d46a36 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySilverfish.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySilverfish.java
@@ -15,6 +15,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntitySilverfish extends EntityMob
 {
     private int allySummonCooldown;
@@ -132,6 +134,13 @@ public class EntitySilverfish extends EntityMob
                             {
                                 if (this.worldObj.getBlock(i + i1, j + l, k + j1) == Blocks.monster_egg)
                                 {
+                                    // CraftBukkit start
+                                    if (CraftEventFactory.callEntityChangeBlockEvent(this, i + i1, j + l, k + j1, Blocks.air, 0).isCancelled())
+                                    {
+                                        continue;
+                                    }
+
+                                    // CraftBukkit end
                                     if (!this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"))
                                     {
                                         int k1 = this.worldObj.getBlockMetadata(i + i1, j + l, k + j1);
@@ -168,6 +177,13 @@ public class EntitySilverfish extends EntityMob
 
                 if (BlockSilverfish.func_150196_a(block))
                 {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callEntityChangeBlockEvent(this, i + Facing.offsetsXForSide[l1], j + Facing.offsetsYForSide[l1], k + Facing.offsetsZForSide[l1], Blocks.monster_egg, Block.getIdFromBlock(BlockSilverfish.getBlockById(i1))).isCancelled())
+                    {
+                        return;
+                    }
+
+                    // CraftBukkit end
                     this.worldObj.setBlock(i + Facing.offsetsXForSide[l1], j + Facing.offsetsYForSide[l1], k + Facing.offsetsZForSide[l1], Blocks.monster_egg, BlockSilverfish.func_150195_a(block, i1), 3);
                     this.spawnExplosionParticle();
                     this.setDead();
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySkeleton.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySkeleton.java
index 794e9db..07b9014 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySkeleton.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySkeleton.java
@@ -36,6 +36,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProviderHell;
 
+import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
+
 public class EntitySkeleton extends EntityMob implements IRangedAttackMob
 {
     private EntityAIArrowAttack aiArrowAttack = new EntityAIArrowAttack(this, 1.0D, 20, 60, 15.0F);
@@ -148,7 +150,16 @@ public class EntitySkeleton extends EntityMob implements IRangedAttackMob
 
                 if (flag)
                 {
-                    this.setFire(8);
+                    // CraftBukkit start
+                    EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
+                    this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled())
+                    {
+                        this.setFire(event.getDuration());
+                    }
+
+                    // CraftBukkit end
                 }
             }
         }
@@ -312,8 +323,23 @@ public class EntitySkeleton extends EntityMob implements IRangedAttackMob
             entityarrow.setFire(100);
         }
 
+        // CraftBukkit start
+        org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(this, this.getHeldItem(), entityarrow, 0.8F);
+
+        if (event.isCancelled())
+        {
+            event.getProjectile().remove();
+            return;
+        }
+
+        if (event.getProjectile() == entityarrow.getBukkitEntity())
+        {
+            worldObj.spawnEntityInWorld(entityarrow);
+        }
+
+        // CraftBukkit end
         this.playSound("random.bow", 1.0F, 1.0F / (this.getRNG().nextFloat() * 0.4F + 0.8F));
-        this.worldObj.spawnEntityInWorld(entityarrow);
+        // this.worldObj.spawnEntityInWorld(entityarrow); // CraftBukkit - moved up
     }
 
     public int getSkeletonType()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySlime.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySlime.java
index 729738f..13f0bb8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySlime.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySlime.java
@@ -14,12 +14,21 @@ import net.minecraft.world.WorldType;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.chunk.Chunk;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.SlimeSplitEvent;
+import net.minecraft.entity.Entity;
+// CraftBukkit end
+
 public class EntitySlime extends EntityLiving implements IMob
 {
     public float squishAmount;
     public float squishFactor;
     public float prevSquishFactor;
     private int slimeJumpDelay;
+    private Entity lastTarget; // CraftBukkit
     private static final String __OBFID = "CL_00001698";
 
     public EntitySlime(World p_i1742_1_)
@@ -37,7 +46,7 @@ public class EntitySlime extends EntityLiving implements IMob
         this.dataWatcher.addObject(16, new Byte((byte)1));
     }
 
-    protected void setSlimeSize(int p_70799_1_)
+    public void setSlimeSize(int p_70799_1_) // CraftBukkit - protected -> public
     {
         this.dataWatcher.updateObject(16, new Byte((byte)p_70799_1_));
         this.setSize(0.6F * (float)p_70799_1_, 0.6F * (float)p_70799_1_);
@@ -131,7 +140,26 @@ public class EntitySlime extends EntityLiving implements IMob
     protected void updateEntityActionState()
     {
         this.despawnEntity();
-        EntityPlayer entityplayer = this.worldObj.getClosestVulnerablePlayerToEntity(this, 16.0D);
+        // CraftBukkit start
+        Entity entityplayer = this.worldObj.getClosestVulnerablePlayerToEntity(this, 16.0D); // EntityPlayer -> Entity
+        EntityTargetEvent event = null;
+
+        if (entityplayer != null && !entityplayer.equals(lastTarget))
+        {
+            event = CraftEventFactory.callEntityTargetEvent(this, entityplayer, EntityTargetEvent.TargetReason.CLOSEST_PLAYER);
+        }
+        else if (lastTarget != null && entityplayer == null)
+        {
+            event = CraftEventFactory.callEntityTargetEvent(this, entityplayer, EntityTargetEvent.TargetReason.FORGOT_TARGET);
+        }
+
+        if (event != null && !event.isCancelled())
+        {
+            entityplayer = event.getTarget() == null ? null : ((CraftEntity) event.getTarget()).getHandle();
+        }
+
+        this.lastTarget = entityplayer;
+        // CraftBukkit end
 
         if (entityplayer != null)
         {
@@ -190,6 +218,21 @@ public class EntitySlime extends EntityLiving implements IMob
         if (!this.worldObj.isRemote && i > 1 && this.getHealth() <= 0.0F)
         {
             int j = 2 + this.rand.nextInt(3);
+            // CraftBukkit start
+            SlimeSplitEvent event = new SlimeSplitEvent((org.bukkit.entity.Slime) this.getBukkitEntity(), j);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled() && event.getCount() > 0)
+            {
+                j = event.getCount();
+            }
+            else
+            {
+                super.setDead();
+                return;
+            }
+
+            // CraftBukkit end
 
             for (int k = 0; k < j; ++k)
             {
@@ -198,7 +241,7 @@ public class EntitySlime extends EntityLiving implements IMob
                 EntitySlime entityslime = this.createInstance();
                 entityslime.setSlimeSize(i / 2);
                 entityslime.setLocationAndAngles(this.posX + (double)f, this.posY + 0.5D, this.posZ + (double)f1, this.rand.nextFloat() * 360.0F, 0.0F);
-                this.worldObj.spawnEntityInWorld(entityslime);
+                this.worldObj.addEntity(entityslime, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SLIME_SPLIT); // CraftBukkit - SpawnReason
             }
         }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySnowman.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySnowman.java
index c26fe5a..9405f33 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySnowman.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySnowman.java
@@ -19,6 +19,12 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.event.block.EntityBlockFormEvent;
+// CraftBukkit end
+
 public class EntitySnowman extends EntityGolem implements IRangedAttackMob
 {
     private static final String __OBFID = "CL_00001650";
@@ -61,7 +67,7 @@ public class EntitySnowman extends EntityGolem implements IRangedAttackMob
 
         if (this.worldObj.getBiomeGenForCoords(i, k).getFloatTemperature(i, j, k) > 1.0F)
         {
-            this.attackEntityFrom(DamageSource.onFire, 1.0F);
+            this.attackEntityFrom(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
         }
 
         for (int l = 0; l < 4; ++l)
@@ -72,7 +78,18 @@ public class EntitySnowman extends EntityGolem implements IRangedAttackMob
 
             if (this.worldObj.getBlock(i, j, k).getMaterial() == Material.air && this.worldObj.getBiomeGenForCoords(i, k).getFloatTemperature(i, j, k) < 0.8F && Blocks.snow_layer.canPlaceBlockAt(this.worldObj, i, j, k))
             {
-                this.worldObj.setBlock(i, j, k, Blocks.snow_layer);
+                // CraftBukkit start
+                org.bukkit.block.BlockState blockState = this.worldObj.getWorld().getBlockAt(i, j, k).getState();
+                blockState.setType(CraftMagicNumbers.getMaterial(Blocks.snow_layer));
+                EntityBlockFormEvent event = new EntityBlockFormEvent(this.getBukkitEntity(), blockState.getBlock(), blockState);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    blockState.update(true);
+                }
+
+                // CraftBukkit end
             }
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySpider.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySpider.java
index ecca43c..912c670 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntitySpider.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntitySpider.java
@@ -14,6 +14,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityTargetEvent; // CraftBukkit
+
 public class EntitySpider extends EntityMob
 {
     private static final String __OBFID = "CL_00001699";
@@ -88,7 +90,25 @@ public class EntitySpider extends EntityMob
 
         if (f1 > 0.5F && this.rand.nextInt(100) == 0)
         {
-            this.entityToAttack = null;
+            // CraftBukkit start
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), null, EntityTargetEvent.TargetReason.FORGOT_TARGET);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                if (event.getTarget() == null)
+                {
+                    this.entityToAttack = null;
+                }
+                else
+                {
+                    this.entityToAttack = ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+                }
+
+                return;
+            }
+
+            // CraftBukkit end
         }
         else
         {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityZombie.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityZombie.java
index a137fa3..bd504fe 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/monster/EntityZombie.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/monster/EntityZombie.java
@@ -46,6 +46,13 @@ import cpw.mods.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.event.entity.living.ZombieEvent.SummonAidEvent;
 
+//CraftBukkit start
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+//CraftBukkit end
+
 public class EntityZombie extends EntityMob
 {
     protected static final IAttribute field_110186_bp = (new RangedAttribute("zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).setDescription("Spawn Reinforcements Chance");
@@ -56,6 +63,7 @@ public class EntityZombie extends EntityMob
     private boolean field_146076_bu = false;
     private float field_146074_bv = -1.0F;
     private float field_146073_bw;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit
     private static final String __OBFID = "CL_00001702";
 
     public EntityZombie(World p_i1745_1_)
@@ -64,7 +72,12 @@ public class EntityZombie extends EntityMob
         this.getNavigator().setBreakDoors(true);
         this.tasks.addTask(0, new EntityAISwimming(this));
         this.tasks.addTask(2, new EntityAIAttackOnCollide(this, EntityPlayer.class, 1.0D, false));
-        this.tasks.addTask(4, new EntityAIAttackOnCollide(this, EntityVillager.class, 1.0D, true));
+
+        if (p_i1745_1_.getSpigotConfig().zombieAggressiveTowardsVillager) // Cauldron
+        {
+            this.tasks.addTask(4, new EntityAIAttackOnCollide(this, EntityVillager.class, 1.0D, true));    // Spigot
+        }
+
         this.tasks.addTask(5, new EntityAIMoveTowardsRestriction(this, 1.0D));
         this.tasks.addTask(6, new EntityAIMoveThroughVillage(this, 1.0D, false));
         this.tasks.addTask(7, new EntityAIWander(this, 1.0D));
@@ -72,14 +85,19 @@ public class EntityZombie extends EntityMob
         this.tasks.addTask(8, new EntityAILookIdle(this));
         this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, true));
         this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, 0, true));
-        this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityVillager.class, 0, false));
+
+        if (p_i1745_1_.getSpigotConfig().zombieAggressiveTowardsVillager) // Cauldron
+        {
+            this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityVillager.class, 0, false));    // Spigot
+        }
+
         this.setSize(0.6F, 1.8F);
     }
 
     protected void applyEntityAttributes()
     {
         super.applyEntityAttributes();
-        this.getEntityAttribute(SharedMonsterAttributes.followRange).setBaseValue(40.0D);
+        this.getEntityAttribute(SharedMonsterAttributes.followRange).setBaseValue(16.0D);
         this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.23000000417232513D);
         this.getEntityAttribute(SharedMonsterAttributes.attackDamage).setBaseValue(3.0D);
         this.getAttributeMap().registerAttribute(field_110186_bp).setBaseValue(this.rand.nextDouble() * ForgeModContainer.zombieSummonBaseChance);
@@ -204,7 +222,16 @@ public class EntityZombie extends EntityMob
 
                 if (flag)
                 {
-                    this.setFire(8);
+                    // CraftBukkit start
+                    EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
+                    this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled())
+                    {
+                        this.setFire(event.getDuration());
+                    }
+
+                    // CraftBukkit end
                 }
             }
         }
@@ -272,7 +299,7 @@ public class EntityZombie extends EntityMob
 
                         if (this.worldObj.checkNoEntityCollision(entityzombie.boundingBox) && this.worldObj.getCollidingBoundingBoxes(entityzombie, entityzombie.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(entityzombie.boundingBox))
                         {
-                            this.worldObj.spawnEntityInWorld(entityzombie);
+                            this.worldObj.addEntity(entityzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             if (entitylivingbase != null) entityzombie.setAttackTarget(entitylivingbase);
                             entityzombie.onSpawnWithEgg((IEntityLivingData)null);
                             this.getEntityAttribute(field_110186_bp).applyModifier(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, 0));
@@ -292,6 +319,11 @@ public class EntityZombie extends EntityMob
         if (!this.worldObj.isRemote && this.isConverting())
         {
             int i = this.getConversionTimeBoost();
+            // CraftBukkit start - Use wall time instead of ticks for villager conversion
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            this.lastTick = MinecraftServer.currentTick;
+            i *= elapsedTicks;
+            // CraftBukkit end
             this.conversionTime -= i;
 
             if (this.conversionTime <= 0)
@@ -313,7 +345,16 @@ public class EntityZombie extends EntityMob
 
             if (this.getHeldItem() == null && this.isBurning() && this.rand.nextFloat() < (float)i * 0.3F)
             {
-                p_70652_1_.setFire(2 * i);
+                // CraftBukkit start
+                EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_70652_1_.getBukkitEntity(), 2 * i);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    p_70652_1_.setFire(event.getDuration());
+                }
+
+                // CraftBukkit end
             }
         }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityCow.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityCow.java
index 267010e..277346b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityCow.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityCow.java
@@ -17,6 +17,11 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+// CraftBukkit end
+
 public class EntityCow extends EntityAnimal
 {
     private static final String __OBFID = "CL_00001640";
@@ -109,15 +114,25 @@ public class EntityCow extends EntityAnimal
 
         if (itemstack != null && itemstack.getItem() == Items.bucket && !p_70085_1_.capabilities.isCreativeMode)
         {
+            // CraftBukkit start - Got milk?
+            org.bukkit.Location loc = this.getBukkitEntity().getLocation();
+            org.bukkit.event.player.PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(p_70085_1_, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), -1, itemstack, Items.milk_bucket);
+
+            if (event.isCancelled())
+            {
+                return false;
+            }
+
             if (itemstack.stackSize-- == 1)
             {
-                p_70085_1_.inventory.setInventorySlotContents(p_70085_1_.inventory.currentItem, new ItemStack(Items.milk_bucket));
+                p_70085_1_.inventory.setInventorySlotContents(p_70085_1_.inventory.currentItem, CraftItemStack.asNMSCopy(event.getItemStack()));
             }
             else if (!p_70085_1_.inventory.addItemStackToInventory(new ItemStack(Items.milk_bucket)))
             {
-                p_70085_1_.dropPlayerItemWithRandomChoice(new ItemStack(Items.milk_bucket, 1, 0), false);
+                p_70085_1_.dropPlayerItemWithRandomChoice(CraftItemStack.asNMSCopy(event.getItemStack()), false);
             }
 
+            // CraftBukkit end
             return true;
         }
         else
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityHorse.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityHorse.java
index a93d16e..eb27c59 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityHorse.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityHorse.java
@@ -50,7 +50,7 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
             return p_82704_1_ instanceof EntityHorse && ((EntityHorse)p_82704_1_).func_110205_ce();
         }
     };
-    private static final IAttribute horseJumpStrength = (new RangedAttribute("horse.jumpStrength", 0.7D, 0.0D, 2.0D)).setDescription("Jump Strength").setShouldWatch(true);
+    public static final IAttribute horseJumpStrength = (new RangedAttribute("horse.jumpStrength", 0.7D, 0.0D, 2.0D)).setDescription("Jump Strength").setShouldWatch(true); // CraftBukkit - private -> public
     private static final String[] horseArmorTextures = new String[] {null, "textures/entity/horse/armor/horse_armor_iron.png", "textures/entity/horse/armor/horse_armor_gold.png", "textures/entity/horse/armor/horse_armor_diamond.png"};
     private static final String[] field_110273_bx = new String[] {"", "meo", "goo", "dio"};
     private static final int[] armorValues = new int[] {0, 5, 7, 11};
@@ -64,7 +64,7 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
     public int field_110278_bp;
     public int field_110279_bq;
     protected boolean horseJumping;
-    private AnimalChest horseChest;
+    public AnimalChest horseChest; // CraftBukkit - private -> public
     private boolean hasReproduced;
     protected int temper;
     protected float jumpPower;
@@ -78,6 +78,7 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
     private int field_110285_bP;
     private String field_110286_bQ;
     private String[] field_110280_bR = new String[3];
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
     private static final String __OBFID = "CL_00001641";
 
     public EntityHorse(World p_i1685_1_)
@@ -403,13 +404,13 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
     private int func_110225_cC()
     {
         int i = this.getHorseType();
-        return this.isChested() && (i == 1 || i == 2) ? 17 : 2;
+        return this.isChested() /* && (i == 1 || i == 2) */ ? 17 : 2; // CraftBukkit - Remove type check
     }
 
-    private void func_110226_cD()
+    public void func_110226_cD()   // CraftBukkit - private -> public
     {
         AnimalChest animalchest = this.horseChest;
-        this.horseChest = new AnimalChest("HorseChest", this.func_110225_cC());
+        this.horseChest = new AnimalChest("HorseChest", this.func_110225_cC(), this); // CraftBukkit - add this horse
         this.horseChest.func_110133_a(this.getCommandSenderName());
 
         if (animalchest != null)
@@ -950,12 +951,25 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
     {
         super.onDeath(p_70645_1_);
 
+        /* CraftBukkit start - Handle chest dropping in dropFewItems below
         if (!this.worldObj.isRemote)
         {
             this.dropChestItems();
         }
+        // CraftBukkit end */
     }
 
+    // CraftBukkit start - Add method
+    protected void dropFewItems(boolean flag, int i) {
+        super.dropFewItems(flag, i);
+
+        // Moved from die method above
+        if (!this.worldObj.isRemote) {
+            this.dropChestItems();
+        }
+    }
+    // CraftBukkit end
+
     public void onLivingUpdate()
     {
         if (this.rand.nextInt(200) == 0)
@@ -1278,6 +1292,7 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
         p_70014_1_.setInteger("Temper", this.getTemper());
         p_70014_1_.setBoolean("Tame", this.isTame());
         p_70014_1_.setString("OwnerUUID", this.func_152119_ch());
+        p_70014_1_.setInteger("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
         if (this.isChested())
         {
@@ -1327,6 +1342,13 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
             this.func_152120_b(p_70037_1_.getString("OwnerUUID"));
         }
 
+        // CraftBukkit start
+        if (p_70037_1_.hasKey("Bukkit.MaxDomestication"))
+        {
+            this.maxDomestication = p_70037_1_.getInteger("Bukkit.MaxDomestication");
+        }
+
+        // CraftBukkit end
         IAttributeInstance iattributeinstance = this.getAttributeMap().getAttributeInstanceByName("Speed");
 
         if (iattributeinstance != null)
@@ -1566,24 +1588,33 @@ public class EntityHorse extends EntityAnimal implements IInvBasic
     {
         if (this.isHorseSaddled())
         {
+            // CraftBukkit start - fire HorseJumpEvent, use event power
             if (p_110206_1_ < 0)
             {
                 p_110206_1_ = 0;
             }
-            else
-            {
-                this.field_110294_bI = true;
-                this.makeHorseRear();
-            }
+
+            float power;
 
             if (p_110206_1_ >= 90)
             {
-                this.jumpPower = 1.0F;
+                power = 1.0F;
             }
             else
             {
-                this.jumpPower = 0.4F + 0.4F * (float)p_110206_1_ / 90.0F;
+                power = 0.4F + 0.4F * (float)p_110206_1_ / 90.0F;
+            }
+
+            org.bukkit.event.entity.HorseJumpEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callHorseJumpEvent(this, power);
+
+            if (!event.isCancelled())
+            {
+                this.field_110294_bI = true;
+                this.makeHorseRear();
+                this.jumpPower = event.getPower();
             }
+
+            // CraftBukkit end
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java
index 84ea3cb..e4e9591 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java
@@ -12,6 +12,8 @@ import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraftforge.common.IShearable;
 
+import org.bukkit.event.player.PlayerShearEntityEvent; // CraftBukkit
+
 public class EntityMooshroom extends EntityCow implements IShearable
 {
     private static final String __OBFID = "CL_00001645";
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityOcelot.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityOcelot.java
index a0c265c..62fa6cf 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityOcelot.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityOcelot.java
@@ -89,7 +89,7 @@ public class EntityOcelot extends EntityTameable
 
     protected boolean canDespawn()
     {
-        return !this.isTamed() && this.ticksExisted > 2400;
+        return !this.isTamed(); // CraftBukkit
     }
 
     public boolean isAIEnabled()
@@ -188,7 +188,8 @@ public class EntityOcelot extends EntityTameable
 
             if (!this.worldObj.isRemote)
             {
-                if (this.rand.nextInt(3) == 0)
+                // CraftBukkit - added event call and isCancelled check
+                if (this.rand.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, p_70085_1_).isCancelled())
                 {
                     this.setTamed(true);
                     this.setTameSkin(1 + this.worldObj.rand.nextInt(3));
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityPig.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityPig.java
index 5f00752..da49d00 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityPig.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityPig.java
@@ -22,6 +22,8 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntityPig extends EntityAnimal
 {
     private final EntityAIControlledByPlayer aiControlledByPlayer;
@@ -171,9 +173,23 @@ public class EntityPig extends EntityAnimal
         if (!this.worldObj.isRemote)
         {
             EntityPigZombie entitypigzombie = new EntityPigZombie(this.worldObj);
+
+            // Cauldron start
+            if (p_70077_1_ != null)
+            {
+                // CraftBukkit start
+                if (CraftEventFactory.callPigZapEvent(this, p_70077_1_, entitypigzombie).isCancelled())
+                {
+                    return;
+                }
+
+                // CraftBukkit end
+            }
+            // Cauldron end
             entitypigzombie.setCurrentItemOrArmor(0, new ItemStack(Items.golden_sword));
             entitypigzombie.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-            this.worldObj.spawnEntityInWorld(entitypigzombie);
+            // CraftBukkit - added a reason for spawning this creature
+            this.worldObj.addEntity(entitypigzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
             this.setDead();
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntitySheep.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntitySheep.java
index 2b3f6a1..c4595a5 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntitySheep.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntitySheep.java
@@ -32,6 +32,12 @@ import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraftforge.common.IShearable;
 
+// CraftBukkit start
+import net.minecraft.inventory.InventoryCraftResult;
+import org.bukkit.event.entity.SheepRegrowWoolEvent;
+import org.bukkit.event.player.PlayerShearEntityEvent;
+// CraftBukkit end
+
 public class EntitySheep extends EntityAnimal implements IShearable
 {
     private final InventoryCrafting field_90016_e = new InventoryCrafting(new Container()
@@ -63,6 +69,7 @@ public class EntitySheep extends EntityAnimal implements IShearable
         this.tasks.addTask(8, new EntityAILookIdle(this));
         this.field_90016_e.setInventorySlotContents(0, new ItemStack(Items.dye, 1, 0));
         this.field_90016_e.setInventorySlotContents(1, new ItemStack(Items.dye, 1, 0));
+        this.field_90016_e.resultInventory = new InventoryCraftResult(); // CraftBukkit - add result slot for event
     }
 
     protected boolean isAIEnabled()
@@ -231,7 +238,16 @@ public class EntitySheep extends EntityAnimal implements IShearable
 
     public void eatGrassBonus()
     {
-        this.setSheared(false);
+        // CraftBukkit start
+        SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((org.bukkit.entity.Sheep) this.getBukkitEntity());
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (!event.isCancelled())
+        {
+            this.setSheared(false);
+        }
+
+        // CraftBukkit end
 
         if (this.isChild())
         {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntitySquid.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntitySquid.java
index a8a0aad..269b0bb 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntitySquid.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntitySquid.java
@@ -8,6 +8,8 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.TrigMath; // CraftBukkit
+
 public class EntitySquid extends EntityWaterMob
 {
     public float squidPitch;
@@ -79,10 +81,12 @@ public class EntitySquid extends EntityWaterMob
         }
     }
 
+    /* CraftBukkit start - Delegate to Entity to use existing inWater value
     public boolean isInWater()
     {
         return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.6000000238418579D, 0.0D), Material.water, this);
     }
+    // CraftBukkit end */
 
     public void onLivingUpdate()
     {
@@ -137,10 +141,12 @@ public class EntitySquid extends EntityWaterMob
             }
 
             f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.renderYawOffset += (-((float)Math.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI - this.renderYawOffset) * 0.1F;
+            // CraftBukkit - Math -> TrigMath
+            this.renderYawOffset += (-((float) TrigMath.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI - this.renderYawOffset) * 0.1F;
             this.rotationYaw = this.renderYawOffset;
             this.squidYaw += (float)Math.PI * this.field_70871_bB * 1.5F;
-            this.squidPitch += (-((float)Math.atan2((double)f, this.motionY)) * 180.0F / (float)Math.PI - this.squidPitch) * 0.1F;
+            // CraftBukkit - Math -> TrigMath
+            this.squidPitch += (-((float) TrigMath.atan2((double) f, this.motionY)) * 180.0F / (float)Math.PI - this.squidPitch) * 0.1F;
         }
         else
         {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityWolf.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityWolf.java
index d77be48..4423e3a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/passive/EntityWolf.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/passive/EntityWolf.java
@@ -139,7 +139,8 @@ public class EntityWolf extends EntityTameable
 
     protected String getLivingSound()
     {
-        return this.isAngry() ? "mob.wolf.growl" : (this.rand.nextInt(3) == 0 ? (this.isTamed() && this.dataWatcher.getWatchableObjectFloat(18) < 10.0F ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark");
+        // CraftBukkit - (getFloat(18) < 10) -> (getFloat(18) < this.getMaxHealth() / 2)
+        return this.isAngry() ? "mob.wolf.growl" : (this.rand.nextInt(3) == 0 ? (this.isTamed() && this.dataWatcher.getWatchableObjectFloat(18) < (this.getMaxHealth() / 2) ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark");
     }
 
     protected String getHurtSound()
@@ -527,7 +528,7 @@ public class EntityWolf extends EntityTameable
 
     protected boolean canDespawn()
     {
-        return !this.isTamed() && this.ticksExisted > 2400;
+        return !this.isTamed(); // CraftBukkit
     }
 
     public boolean func_142018_a(EntityLivingBase p_142018_1_, EntityLivingBase p_142018_2_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/player/EntityPlayer.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/EntityPlayer.java
index c01b6d5..1e4c17f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/player/EntityPlayer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/EntityPlayer.java
@@ -92,6 +92,22 @@ import net.minecraftforge.event.entity.player.PlayerDropsEvent;
 import net.minecraftforge.event.entity.player.PlayerFlyableFallEvent;
 import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
 
+// CraftBukkit start
+import net.minecraft.network.play.server.S2FPacketSetSlot;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.inventory.InventoryCloseEvent;
+import org.bukkit.event.player.PlayerBedEnterEvent;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+// CraftBukkit end
+
 public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender
 {
     public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
@@ -102,7 +118,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
     public Container inventoryContainer;
     public Container openContainer;
-    protected FoodStats foodStats = new FoodStats();
+    protected FoodStats foodStats = new FoodStats(this); // CraftBukkit - add this argument
     protected int flyToggleTimer;
     public float prevCameraYaw;
     public float cameraYaw;
@@ -113,9 +129,19 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
     public double field_71094_bP;
     public double field_71095_bQ;
     public double field_71085_bR;
-    protected boolean sleeping;
+    // CraftBukkit start
+    public boolean sleeping; // protected -> public
+    public boolean fauxSleeping;
+    public String spawnWorld = "";
+
+    @Override
+    public CraftHumanEntity getBukkitEntity()
+    {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
     public ChunkCoordinates playerLocation;
-    private int sleepTimer;
+    public int sleepTimer; // CraftBukkit - private -> public
     public float field_71079_bU;
     @SideOnly(Side.CLIENT)
     public float field_71082_cx;
@@ -124,6 +150,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
     private boolean spawnForced;
     private ChunkCoordinates startMinecartRidingCoordinate;
     public PlayerCapabilities capabilities = new PlayerCapabilities();
+    public int oldLevel = -1; // CraftBukkit
     public int experienceLevel;
     public int experienceTotal;
     public float experience;
@@ -416,6 +443,42 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
         {
             this.updateItemUse(this.itemInUse, 16);
             int i = this.itemInUse.stackSize;
+            // CraftBukkit start
+            org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.itemInUse);
+            PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem);
+            worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // Update client
+                if (this instanceof EntityPlayerMP)
+                {
+                    ((EntityPlayerMP) this).playerNetServerHandler.sendPacket(new S2FPacketSetSlot((byte) 0, openContainer.getSlotFromInventory(
+                            (IInventory) this.inventory, this.inventory.currentItem).slotIndex, this.itemInUse));
+                    // Spigot Start
+                    ((EntityPlayerMP) this).getBukkitEntity().updateInventory();
+                    ((EntityPlayerMP) this).getBukkitEntity().updateScaledHealth();
+                    // Spigot End
+                }
+
+                return;
+            }
+
+            // Plugin modified the item, process it but don't remove it
+            if (!craftItem.equals(event.getItem()))
+            {
+                CraftItemStack.asNMSCopy(event.getItem()).onFoodEaten(this.worldObj, this);
+
+                // Update client
+                if (this instanceof EntityPlayerMP)
+                {
+                    ((EntityPlayerMP) this).playerNetServerHandler.sendPacket(new S2FPacketSetSlot((byte) 0, openContainer.getSlotFromInventory(
+                            (IInventory) this.inventory, this.inventory.currentItem).slotIndex, this.itemInUse));
+                }
+
+                return;
+            }
+            // CraftBukkit end
             ItemStack itemstack = this.itemInUse.onFoodEaten(this.worldObj, this);
 
             itemstack = ForgeEventFactory.onItemUseFinish(this, itemInUse, itemInUseCount, itemstack);
@@ -452,6 +515,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
         return this.getHealth() <= 0.0F || this.isPlayerSleeping();
     }
 
+    // CraftBukkit - protected -> public
     public void closeScreen()
     {
         this.openContainer = this.inventoryContainer;
@@ -459,23 +523,40 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
     public void mountEntity(Entity p_70078_1_)
     {
+        // CraftBukkit start - mirror Entity mount changes
+        this.setPassengerOf(p_70078_1_);
+    }
+
+    public void setPassengerOf(Entity p_70078_1_)
+    {
+        // CraftBukkit end
         if (this.ridingEntity != null && p_70078_1_ == null)
         {
-            if (!this.worldObj.isRemote)
-            {
-                this.dismountEntity(this.ridingEntity);
-            }
-
-            if (this.ridingEntity != null)
+            worldObj.getServer().getPluginManager()
+                    .callEvent(new org.spigotmc.event.entity.EntityDismountEvent(this.getBukkitEntity(), this.ridingEntity.getBukkitEntity())); // Spigot
+            // CraftBukkit start - use parent method instead to correctly fire
+            // VehicleExitEvent
+            Entity originalVehicle = this.ridingEntity;
+            // First statement moved down, second statement handled in parent
+            // method.
+            /*
+             * if (!this.world.isStatic) { this.l(this.vehicle); }
+             * 
+             * if (this.vehicle != null) { this.vehicle.passenger = null; }
+             * 
+             * this.vehicle = null;
+             */
+            super.setPassengerOf(p_70078_1_);
+
+            if (!this.worldObj.isRemote && this.ridingEntity == null)
             {
-                this.ridingEntity.riddenByEntity = null;
+                this.dismountEntity(originalVehicle);
             }
-
-            this.ridingEntity = null;
+            // CraftBukkit end
         }
         else
         {
-            super.mountEntity(p_70078_1_);
+            super.setPassengerOf(p_70078_1_); // CraftBukkit - call new parent
         }
     }
 
@@ -532,7 +613,8 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
         if (this.worldObj.difficultySetting == EnumDifficulty.PEACEFUL && this.getHealth() < this.getMaxHealth() && this.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.ticksExisted % 20 * 12 == 0)
         {
-            this.heal(1.0F);
+            // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+            this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
         }
 
         this.inventory.decrementAnimations();
@@ -554,7 +636,8 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
         this.setAIMoveSpeed((float)iattributeinstance.getAttributeValue());
         float f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        float f1 = (float)Math.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
+        // CraftBukkit - Math -> TrigMath
+        float f1 = (float) org.bukkit.craftbukkit.TrigMath.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
 
         if (f > 0.1F)
         {
@@ -589,7 +672,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
             List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, axisalignedbb);
 
-            if (list != null)
+            if (list != null && this.canBeCollidedWith()) // Spigot: this.canBeCollidedWith() condition
             {
                 for (int i = 0; i < list.size(); ++i)
                 {
@@ -687,12 +770,14 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
     public void addToPlayerScore(Entity p_70084_1_, int p_70084_2_)
     {
         this.addScore(p_70084_2_);
-        Collection collection = this.getWorldScoreboard().func_96520_a(IScoreObjectiveCriteria.totalKillCount);
+        // CraftBukkit - Get our scores instead
+        Collection<Score> collection = this.worldObj.getServer().getScoreboardManager().getScoreboardScores(IScoreObjectiveCriteria.totalKillCount, this.getCommandSenderName(), new java.util.ArrayList<Score>());
 
         if (p_70084_1_ instanceof EntityPlayer)
         {
             this.addStat(StatList.playerKillsStat, 1);
-            collection.addAll(this.getWorldScoreboard().func_96520_a(IScoreObjectiveCriteria.playerKillCount));
+            // CraftBukkit - Get our scores instead
+            this.worldObj.getServer().getScoreboardManager().getScoreboardScores(IScoreObjectiveCriteria.playerKillCount, this.getCommandSenderName(), collection);
         }
         else
         {
@@ -703,8 +788,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
         while (iterator.hasNext())
         {
-            ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-            Score score = this.getWorldScoreboard().func_96529_a(this.getCommandSenderName(), scoreobjective);
+            Score score = (Score) iterator.next(); // CraftBukkit - Use our scores instead
             score.func_96648_a();
         }
     }
@@ -777,6 +861,36 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
                 entityitem.motionZ += Math.sin((double)f1) * (double)f;
             }
 
+            // CraftBukkit start
+            Player player = (Player) this.getBukkitEntity();
+            CraftItem drop = new CraftItem(this.worldObj.getServer(), entityitem);
+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // player.getInventory().addItem(drop.getItemStack());
+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+                if (p_146097_3_ && (cur == null || cur.getAmount() == 0))
+                {
+                    // The complete stack was dropped
+                    player.getInventory().setItemInHand(drop.getItemStack());
+                }
+                else if (p_146097_3_ && cur.isSimilar(drop.getItemStack()) && drop.getItemStack().getAmount() == 1)
+                {
+                    // Only one item is dropped
+                    cur.setAmount(cur.getAmount() + 1);
+                    player.getInventory().setItemInHand(cur);
+                }
+                else
+                {
+                    // Fallback
+                    player.getInventory().addItem(drop.getItemStack());
+                }
+                return null;
+            }
+            // CraftBukkit end
+
             this.joinEntityItemWithWorld(entityitem);
             this.addStat(StatList.dropStat, 1);
             return entityitem;
@@ -881,6 +995,15 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
             this.wakeUpPlayer(true, true, false);
         }
 
+        // CraftBukkit start
+        this.spawnWorld = p_70037_1_.getString("SpawnWorld");
+
+        if ("".equals(spawnWorld))
+        {
+            this.spawnWorld = this.worldObj.getServer().getWorlds().get(0).getName();
+        }
+        // CraftBukkit end
+
         if (p_70037_1_.hasKey("SpawnX", 99) && p_70037_1_.hasKey("SpawnY", 99) && p_70037_1_.hasKey("SpawnZ", 99))
         {
             this.spawnChunk = new ChunkCoordinates(p_70037_1_.getInteger("SpawnX"), p_70037_1_.getInteger("SpawnY"), p_70037_1_.getInteger("SpawnZ"));
@@ -925,6 +1048,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
             p_70014_1_.setInteger("SpawnY", this.spawnChunk.posY);
             p_70014_1_.setInteger("SpawnZ", this.spawnChunk.posZ);
             p_70014_1_.setBoolean("SpawnForced", this.spawnForced);
+            p_70014_1_.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
         }
 
         NBTTagList spawnlist = new NBTTagList();
@@ -1003,7 +1127,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
                 {
                     if (this.worldObj.difficultySetting == EnumDifficulty.PEACEFUL)
                     {
-                        p_70097_2_ = 0.0F;
+                        return false; // CraftBukkit - p_70097_2_ = 0.0F; -> return false
                     }
 
                     if (this.worldObj.difficultySetting == EnumDifficulty.EASY)
@@ -1017,7 +1141,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
                     }
                 }
 
-                if (p_70097_2_ == 0.0F)
+                if (false && p_70097_2_ == 0.0F)   // CraftBukkit - Don't filter out 0 damage
                 {
                     return false;
                 }
@@ -1039,9 +1163,40 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
     public boolean canAttackPlayer(EntityPlayer p_96122_1_)
     {
-        Team team = this.getTeam();
-        Team team1 = p_96122_1_.getTeam();
-        return team == null ? true : (!team.isSameTeam(team1) ? true : team.getAllowFriendlyFire());
+        // CraftBukkit start - Change to check OTHER player's scoreboard team
+        // according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+
+        if (p_96122_1_ instanceof EntityPlayerMP)
+        {
+            EntityPlayerMP thatPlayer = (EntityPlayerMP) p_96122_1_;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+
+            if (team == null || team.allowFriendlyFire())
+            {
+                return true;
+            }
+        }
+        else
+        {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = p_96122_1_.worldObj.getServer().getOfflinePlayer(p_96122_1_.getCommandSenderName());
+            team = p_96122_1_.worldObj.getServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+
+            if (team == null || team.allowFriendlyFire())
+            {
+                return true;
+            }
+        }
+
+        if (this instanceof EntityPlayerMP)
+        {
+            return !team.hasPlayer(((EntityPlayerMP) this).getBukkitEntity());
+        }
+
+        return !team.hasPlayer(this.worldObj.getServer().getOfflinePlayer(this.getCommandSenderName()));
+        // CraftBukkit end
     }
 
     protected void damageArmor(float p_70675_1_)
@@ -1073,19 +1228,34 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
         return (float)i / (float)this.inventory.armorInventory.length;
     }
 
+    // Cauldron start - vanilla compatibility
     protected void damageEntity(DamageSource p_70665_1_, float p_70665_2_)
     {
+        this.damageEntity_CB(p_70665_1_, p_70665_2_);
+    }
+    // Cauldron end
+
+    // CraftBukkit start
+    protected boolean damageEntity_CB(DamageSource p_70665_1_, float p_70665_2_) // void
+                                                                                 // ->
+                                                                                 // boolean
+    {
+        if (true)
+        {
+            return super.damageEntity_CB(p_70665_1_, p_70665_2_);
+        }
+        // CraftBukkit end
         if (!this.isEntityInvulnerable())
         {
             p_70665_2_ = ForgeHooks.onLivingHurt(this, p_70665_1_, p_70665_2_);
-            if (p_70665_2_ <= 0) return;
+            if (p_70665_2_ <= 0) return false;
             if (!p_70665_1_.isUnblockable() && this.isBlocking() && p_70665_2_ > 0.0F)
             {
                 p_70665_2_ = (1.0F + p_70665_2_) * 0.5F;
             }
 
             p_70665_2_ = ArmorProperties.ApplyArmor(this, inventory.armorInventory, p_70665_1_, p_70665_2_);
-            if (p_70665_2_ <= 0) return;
+            if (p_70665_2_ <= 0) return false;
             p_70665_2_ = this.applyPotionDamageCalculations(p_70665_1_, p_70665_2_);
             float f1 = p_70665_2_;
             p_70665_2_ = Math.max(p_70665_2_ - this.getAbsorptionAmount(), 0.0F);
@@ -1099,6 +1269,7 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
                 this.func_110142_aN().func_94547_a(p_70665_1_, f2, p_70665_2_);
             }
         }
+        return true;
     }
 
     public void func_146101_a(TileEntityFurnace p_146101_1_) {}
@@ -1134,7 +1305,8 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
                 if (itemstack.interactWithEntity(this, (EntityLivingBase)p_70998_1_))
                 {
-                    if (itemstack.stackSize <= 0 && !this.capabilities.isCreativeMode)
+                    // CraftBukkit - bypass infinite items; <= 0 -> == 0
+                    if (itemstack.stackSize == 0 && !this.capabilities.isCreativeMode)
                     {
                         this.destroyCurrentEquippedItem();
                     }
@@ -1281,7 +1453,8 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
                         {
                             itemstack.hitEntity((EntityLivingBase)object, this);
 
-                            if (itemstack.stackSize <= 0)
+                            // CraftBukkit - bypass infinite items; <= 0 -> == 0
+                            if (itemstack.stackSize == 0)
                             {
                                 this.destroyCurrentEquippedItem();
                             }
@@ -1293,7 +1466,17 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
                             if (j > 0)
                             {
-                                p_71059_1_.setFire(j * 4);
+                                // CraftBukkit start - Call a combust event when
+                                // somebody hits with a fire enchanted item
+                                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_71059_1_.getBukkitEntity(),
+                                        j * 4);
+                                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+                                if (!combustEvent.isCancelled())
+                                {
+                                    p_71059_1_.setFire(combustEvent.getDuration());
+                                }
+                                // CraftBukkit end
                             }
                         }
 
@@ -1322,6 +1505,10 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
 
         if (this.openContainer != null)
         {
+            // CraftBukkit start
+            InventoryCloseEvent event = new InventoryCloseEvent(this.openContainer.getBukkitView());
+            if (this.openContainer.getBukkitView() != null) Bukkit.getServer().getPluginManager().callEvent(event); // Cauldron - allow vanilla mods to bypass
+            // CraftBukkit end
             this.openContainer.onContainerClosed(this);
         }
     }
@@ -1381,6 +1568,20 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
             this.mountEntity((Entity)null);
         }
 
+        // CraftBukkit start
+        if (this.getBukkitEntity() instanceof Player)
+        {
+            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.block.Block bed = this.worldObj.getWorld().getBlockAt(p_71018_1_, p_71018_2_, p_71018_3_);
+            PlayerBedEnterEvent cbEvent = new PlayerBedEnterEvent(player, bed);
+            this.worldObj.getServer().getPluginManager().callEvent(cbEvent);
+
+            if (cbEvent.isCancelled())
+            {
+                return EntityPlayer.EnumStatus.OTHER_PROBLEM;
+            }
+        }
+        // CraftBukkit end
         this.setSize(0.2F, 0.2F);
         this.yOffset = 0.2F;
 
@@ -1476,6 +1677,26 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
             this.worldObj.updateAllPlayersSleepingFlag();
         }
 
+        // CraftBukkit start
+        if (this.getBukkitEntity() instanceof Player)
+        {
+            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.block.Block bed;
+
+            if (chunkcoordinates != null)
+            {
+                bed = this.worldObj.getWorld().getBlockAt(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ);
+            }
+            else
+            {
+                bed = this.worldObj.getWorld().getBlockAt(player.getLocation());
+            }
+
+            PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+        }
+        // CraftBukkit end
+
         if (p_70999_1_)
         {
             this.sleepTimer = 0;
@@ -1606,11 +1827,13 @@ public abstract class EntityPlayer extends EntityLivingBase implements ICommandS
         {
             this.spawnChunk = new ChunkCoordinates(p_71063_1_);
             this.spawnForced = p_71063_2_;
+            this.spawnWorld = this.worldObj.worldInfo.getWorldName(); // CraftBukkit
         }
         else
         {
             this.spawnChunk = null;
             this.spawnForced = false;
+            this.spawnWorld = ""; // CraftBukkit
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
index bd354f1..89dd1a4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
@@ -83,6 +84,7 @@ import net.minecraft.tileentity.TileEntityDropper;
 import net.minecraft.tileentity.TileEntityFurnace;
 import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.tileentity.TileEntitySign;
+import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.ChunkCoordinates;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntityDamageSource;
@@ -106,24 +108,38 @@ import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.PlayerDropsEvent;
 import net.minecraftforge.event.world.ChunkWatchEvent;
 
+// CraftBukkit start
+import net.minecraft.util.CombatTracker;
+import net.minecraft.util.FoodStats;
+import net.minecraft.world.World;
+import org.bukkit.Bukkit;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+// CraftBukkit end
+
 public class EntityPlayerMP extends EntityPlayer implements ICrafting
 {
     private static final Logger logger = LogManager.getLogger();
-    private String translator = "en_US";
+    public String translator = "en_US"; // CraftBukkit - private -> public
     public NetHandlerPlayServer playerNetServerHandler;
     public final MinecraftServer mcServer;
     public final ItemInWorldManager theItemInWorldManager;
     public double managedPosX;
     public double managedPosZ;
     public final List loadedChunks = new LinkedList();
-    private final List destroyedItemsNetCache = new LinkedList();
+    public final List destroyedItemsNetCache = new LinkedList();
     private final StatisticsFile field_147103_bO;
     private float field_130068_bO = Float.MIN_VALUE;
     private float lastHealth = -1.0E8F;
     private int lastFoodLevel = -99999999;
     private boolean wasHungry = true;
-    private int lastExperience = -99999999;
-    private int field_147101_bU = 60;
+    public int lastExperience = -99999999; // CraftBukkit - private -> public
+    public int field_147101_bU = 60; // CraftBukkit - private -> public
     private EntityPlayer.EnumChatVisibility chatVisibility;
     private boolean chatColours = true;
     private long field_143005_bX = System.currentTimeMillis();
@@ -131,6 +147,39 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
     public boolean isChangingQuantityOnly;
     public int ping;
     public boolean playerConqueredTheEnd;
+    // CraftBukkit start
+    public String displayName;
+    public String listName;
+    public org.bukkit.Location compassTarget;
+    public int newExp = 0;
+    public int newLevel = 0;
+    public int newTotalExp = 0;
+    public boolean keepLevel = false;
+    public double maxHealthCache;
+    // CraftBukkit end
+    // Spigot start
+    public boolean collidesWithEntities = true;
+
+    @Override
+
+    /**
+     * Returns true if other Entities should be prevented from moving through this Entity.
+     */
+    public boolean canBeCollidedWith()
+    {
+        return this.collidesWithEntities && super.canBeCollidedWith();
+    }
+
+    @Override
+
+    /**
+     * Returns true if this entity should push and be pushed by other entities when colliding.
+     */
+    public boolean canBePushed()
+    {
+        return this.collidesWithEntities && super.canBePushed();
+    }
+    // Spigot end
     private static final String __OBFID = "CL_00001440";
 
     public EntityPlayerMP(MinecraftServer p_i45285_1_, WorldServer p_i45285_2_, GameProfile p_i45285_3_, ItemInWorldManager p_i45285_4_)
@@ -153,6 +202,13 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
         {
             this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
         }
+
+        // CraftBukkit start
+        this.displayName = this.getCommandSenderName();
+        this.listName = this.getCommandSenderName();
+        // this.canPickUpLoot = true; TODO
+        this.maxHealthCache = this.getMaxHealth();
+        // CraftBukkit end
     }
 
     public void readEntityFromNBT(NBTTagCompound p_70037_1_)
@@ -170,13 +226,56 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
                 this.theItemInWorldManager.setGameType(WorldSettings.GameType.getByID(p_70037_1_.getInteger("playerGameType")));
             }
         }
+
+        this.getBukkitEntity().readExtraData(p_70037_1_); // CraftBukkit
     }
 
     public void writeEntityToNBT(NBTTagCompound p_70014_1_)
     {
         super.writeEntityToNBT(p_70014_1_);
         p_70014_1_.setInteger("playerGameType", this.theItemInWorldManager.getGameType().getID());
+        this.getBukkitEntity().setExtraData(p_70014_1_); // CraftBukkit
+    }
+
+    // CraftBukkit start - World fallback code, either respawn location or global spawn
+
+    /**
+     * Sets the reference to the World object.
+     */
+    public void setWorld(World world)
+    {
+        super.setWorld(world);
+
+        if (world == null)
+        {
+            this.isDead = false;
+            ChunkCoordinates position = null;
+
+            if (this.spawnWorld != null && !this.spawnWorld.equals(""))
+            {
+                CraftWorld cworld = (CraftWorld) Bukkit.getServer().getWorld(this.spawnWorld);
+
+                if (cworld != null && this.getBedLocation() != null)
+                {
+                    world = cworld.getHandle();
+                    position = EntityPlayer.verifyRespawnCoordinates(cworld.getHandle(), this.getBedLocation(), false);
+                }
+            }
+
+            if (world == null || position == null)
+            {
+                world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+                position = world.getSpawnPoint();
+            }
+
+            this.worldObj = world;
+            this.setPosition(position.posX + 0.5, position.posY, position.posZ + 0.5);
+        }
+
+        this.dimension = ((WorldServer) this.worldObj).provider.dimensionId;
+        this.theItemInWorldManager.setWorld((WorldServer) world);
     }
+    // CraftBukkit end
 
     public void addExperienceLevel(int p_82242_1_)
     {
@@ -240,7 +339,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
             ArrayList arraylist1 = new ArrayList();
             Chunk chunk;
 
-            while (iterator1.hasNext() && arraylist.size() < S26PacketMapChunkBulk.func_149258_c())
+            while (iterator1.hasNext() && arraylist.size() < this.worldObj.getSpigotConfig().maxBulkChunk)   // Spigot // Cauldron
             {
                 ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair)iterator1.next();
 
@@ -253,8 +352,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
                         if (chunk.func_150802_k())
                         {
                             arraylist.add(chunk);
-                            arraylist1.addAll(((WorldServer)this.worldObj).func_147486_a(chunkcoordintpair.chunkXPos * 16, 0, chunkcoordintpair.chunkZPos * 16, chunkcoordintpair.chunkXPos * 16 + 15, 256, chunkcoordintpair.chunkZPos * 16 + 15));
-                            //BugFix: 16 makes it load an extra chunk, which isn't associated with a player, which makes it not unload unless a player walks near it.
+                            arraylist1.addAll(chunk.chunkTileEntityMap.values()); // CraftBukkit - Get tile entities directly from the chunk instead of the world
                             iterator1.remove();
                         }
                     }
@@ -309,9 +407,10 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
                 }
             }
 
+            // CraftBukkit - Optionally scale health
             if (this.getHealth() != this.lastHealth || this.lastFoodLevel != this.foodStats.getFoodLevel() || this.foodStats.getSaturationLevel() == 0.0F != this.wasHungry)
             {
-                this.playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(this.getHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
+                this.playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(this.getBukkitEntity().getScaledHealth(), this.foodStats.getFoodLevel(), this.foodStats.getSaturationLevel()));
                 this.lastHealth = this.getHealth();
                 this.lastFoodLevel = this.foodStats.getFoodLevel();
                 this.wasHungry = this.foodStats.getSaturationLevel() == 0.0F;
@@ -320,16 +419,18 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
             if (this.getHealth() + this.getAbsorptionAmount() != this.field_130068_bO)
             {
                 this.field_130068_bO = this.getHealth() + this.getAbsorptionAmount();
-                Collection collection = this.getWorldScoreboard().func_96520_a(IScoreObjectiveCriteria.health);
-                Iterator iterator = collection.iterator();
+                // CraftBukkit - Update ALL the scores!
+                this.worldObj.getServer().getScoreboardManager().updateAllScoresForList(IScoreObjectiveCriteria.health, this.getCommandSenderName(), com.google.common.collect.ImmutableList.of(this));
+            }
 
-                while (iterator.hasNext())
-                {
-                    ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-                    this.getWorldScoreboard().func_96529_a(this.getCommandSenderName(), scoreobjective).func_96651_a(Arrays.asList(new EntityPlayer[] {this}));
-                }
+            // CraftBukkit start - Force max health updates
+            if (this.maxHealthCache != this.getMaxHealth())
+            {
+                this.getBukkitEntity().updateScaledHealth();
             }
 
+            // CraftBukkit end
+
             if (this.experienceTotal != this.lastExperience)
             {
                 this.lastExperience = this.experienceTotal;
@@ -340,6 +441,20 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
             {
                 this.func_147098_j();
             }
+
+            // CraftBukkit start
+            if (this.oldLevel == -1)
+            {
+                this.oldLevel = this.experienceLevel;
+            }
+
+            if (this.oldLevel != this.experienceLevel)
+            {
+                CraftEventFactory.callPlayerLevelChangeEvent(this.worldObj.getServer().getPlayer((EntityPlayerMP) this), this.oldLevel, this.experienceLevel);
+                this.oldLevel = this.experienceLevel;
+            }
+
+            // CraftBukkit end
         }
         catch (Throwable throwable)
         {
@@ -402,34 +517,74 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
     public void onDeath(DamageSource p_70645_1_)
     {
-        if (ForgeHooks.onLivingDeath(this, p_70645_1_)) return;
-        this.mcServer.getConfigurationManager().sendChatMsg(this.func_110142_aN().func_151521_b());
+        // CraftBukkit start
+        if (this.isDead || ForgeHooks.onLivingDeath(this, p_70645_1_)) // Cauldron - call Forge hook
+        {
+            return;
+        }
+
+        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+        boolean keepInventory = this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory");
 
-        if (!this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory"))
+        if (!keepInventory)
         {
+            // Cauldron start - rework CraftBukkit logic to support Forge better
             captureDrops = true;
             capturedDrops.clear();
-
             this.inventory.dropAllItems();
+            for (int i = 0; i < capturedDrops.size(); ++i)
+            {
+                if (capturedDrops.get(i) != null)
+                {
+                    loot.add(CraftItemStack.asCraftMirror(capturedDrops.get(i).getEntityItem()));
+                }
+            }
+            // Cauldron end
+        }
 
+        IChatComponent chatmessage = this.func_110142_aN().func_151521_b();
+        String deathmessage = chatmessage.getUnformattedText();
+        org.bukkit.event.entity.PlayerDeathEvent event = CraftEventFactory.callPlayerDeathEvent(this, loot, deathmessage, keepInventory);
+        String deathMessage = event.getDeathMessage();
+
+        if (deathMessage != null && deathMessage.length() > 0)
+        {
+            if (deathMessage.equals(deathmessage))
+            {
+                this.mcServer.getConfigurationManager().sendChatMsg(chatmessage);
+            }
+            else
+            {
+                this.mcServer.getConfigurationManager().sendMessage(org.bukkit.craftbukkit.util.CraftChatMessage.fromString(deathMessage));
+            }
+        }
+
+        if (!event.getKeepInventory())
+        {
+            // Cauldron start - rework CraftBukkit logic to support Forge better
+            this.inventory.clearInventory(null, -1); // CraftBukkit - we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
             captureDrops = false;
-            PlayerDropsEvent event = new PlayerDropsEvent(this, p_70645_1_, capturedDrops, recentlyHit > 0);
-            if (!MinecraftForge.EVENT_BUS.post(event))
+            PlayerDropsEvent forgeEvent = new PlayerDropsEvent(this, p_70645_1_, capturedDrops, recentlyHit > 0);
+
+            if (!MinecraftForge.EVENT_BUS.post(forgeEvent))
             {
                 for (EntityItem item : capturedDrops)
                 {
                     joinEntityItemWithWorld(item);
                 }
             }
+            // Cauldron end
         }
 
-        Collection collection = this.worldObj.getScoreboard().func_96520_a(IScoreObjectiveCriteria.deathCount);
+        this.closeScreen();
+        // CraftBukkit end
+        // CraftBukkit - Get our scores instead
+        Collection<Score> collection = this.worldObj.getServer().getScoreboardManager().getScoreboardScores(IScoreObjectiveCriteria.deathCount, this.getCommandSenderName(), new java.util.ArrayList<Score>());
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext())
         {
-            ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-            Score score = this.getWorldScoreboard().func_96529_a(this.getCommandSenderName(), scoreobjective);
+            Score score = (Score) iterator.next(); // CraftBukkit - Use our scores instead
             score.func_96648_a();
         }
 
@@ -495,7 +650,8 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
     public boolean canAttackPlayer(EntityPlayer p_96122_1_)
     {
-        return !this.mcServer.isPVPEnabled() ? false : super.canAttackPlayer(p_96122_1_);
+        // CraftBukkit - this.mcServer.isPVPEnabled() -> this.world.pvpMode
+        return !this.worldObj.pvpMode ? false : super.canAttackPlayer(p_96122_1_);
     }
 
     public void travelToDimension(int p_71027_1_)
@@ -526,7 +682,10 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
                 this.triggerAchievement(AchievementList.portal);
             }
 
-            this.mcServer.getConfigurationManager().transferPlayerToDimension(this, p_71027_1_);
+            // CraftBukkit start
+            TeleportCause cause = (this.dimension == 1 || p_71027_1_ == 1) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
+            this.mcServer.getConfigurationManager().transferPlayerToDimension(this, p_71027_1_, cause); // Cauldron
+            // CraftBukkit end
             this.lastExperience = -1;
             this.lastHealth = -1.0F;
             this.lastFoodLevel = -1;
@@ -569,6 +728,11 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
     public void wakeUpPlayer(boolean p_70999_1_, boolean p_70999_2_, boolean p_70999_3_)
     {
+        if (this.fauxSleeping && !this.sleeping)
+        {
+            return;    // CraftBukkit - Can't leave bed if not in one!
+        }
+
         if (this.isPlayerSleeping())
         {
             this.getServerForPlayer().getEntityTracker().func_151248_b(this, new S0BPacketAnimation(this, 2));
@@ -584,9 +748,25 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
     public void mountEntity(Entity p_70078_1_)
     {
-        super.mountEntity(p_70078_1_);
-        this.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this, this.ridingEntity));
-        this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+        // CraftBukkit start
+        this.setPassengerOf(p_70078_1_);
+    }
+
+    public void setPassengerOf(Entity entity)
+    {
+        // mount(null) doesn't really fly for overloaded methods,
+        // so this method is needed
+        Entity currentVehicle = this.ridingEntity;
+        super.setPassengerOf(entity);
+
+        // Check if the vehicle actually changed.
+        if (currentVehicle != this.ridingEntity)
+        {
+            this.playerNetServerHandler.sendPacket(new S1BPacketEntityAttach(0, this, this.ridingEntity));
+            this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+        }
+
+        // CraftBukkit end
     }
 
     protected void updateFallState(double p_70064_1_, boolean p_70064_3_) {}
@@ -610,29 +790,64 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
         this.currentWindowId = this.currentWindowId % 100 + 1;
     }
 
+    // CraftBukkit start - change signature from void to int
+    public int nextContainerCounter()
+    {
+        this.currentWindowId = this.currentWindowId % 100 + 1;
+        return this.currentWindowId;
+    }
+    // CraftBukkit end
+
     public void displayGUIWorkbench(int p_71058_1_, int p_71058_2_, int p_71058_3_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerWorkbench(this.inventory, this.worldObj, p_71058_1_, p_71058_2_, p_71058_3_));
+
+        if (container == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 1, "Crafting", 9, true));
-        this.openContainer = new ContainerWorkbench(this.inventory, this.worldObj, p_71058_1_, p_71058_2_, p_71058_3_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void displayGUIEnchantment(int p_71002_1_, int p_71002_2_, int p_71002_3_, String p_71002_4_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerEnchantment(this.inventory, this.worldObj, p_71002_1_, p_71002_2_, p_71002_3_));
+
+        if (container == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 4, p_71002_4_ == null ? "" : p_71002_4_, 9, p_71002_4_ != null));
-        this.openContainer = new ContainerEnchantment(this.inventory, this.worldObj, p_71002_1_, p_71002_2_, p_71002_3_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void displayGUIAnvil(int p_82244_1_, int p_82244_2_, int p_82244_3_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerRepair(this.inventory, this.worldObj, p_82244_1_, p_82244_2_, p_82244_3_, this));
+
+        if (container == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 8, "Repairing", 9, true));
-        this.openContainer = new ContainerRepair(this.inventory, this.worldObj, p_82244_1_, p_82244_2_, p_82244_3_, this);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
@@ -644,71 +859,150 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
             this.closeScreen();
         }
 
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerChest(this.inventory, p_71007_1_));
+
+        if (container == null)
+        {
+            p_71007_1_.closeInventory(); // Cauldron - prevent chest from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 0, p_71007_1_.getInventoryName(), p_71007_1_.getSizeInventory(), p_71007_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerChest(this.inventory, p_71007_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void func_146093_a(TileEntityHopper p_146093_1_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerHopper(this.inventory, p_146093_1_));
+
+        if (container == null)
+        {
+            p_146093_1_.closeInventory(); // Cauldron - prevent chest from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 9, p_146093_1_.getInventoryName(), p_146093_1_.getSizeInventory(), p_146093_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerHopper(this.inventory, p_146093_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void displayGUIHopperMinecart(EntityMinecartHopper p_96125_1_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerHopper(this.inventory, p_96125_1_));
+
+        if (container == null)
+        {
+            p_96125_1_.closeInventory(); // Cauldron - prevent chest from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 9, p_96125_1_.getInventoryName(), p_96125_1_.getSizeInventory(), p_96125_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerHopper(this.inventory, p_96125_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void func_146101_a(TileEntityFurnace p_146101_1_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerFurnace(this.inventory, p_146101_1_));
+
+        if (container == null)
+        {
+            p_146101_1_.closeInventory(); // Cauldron - prevent chests from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 2, p_146101_1_.getInventoryName(), p_146101_1_.getSizeInventory(), p_146101_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerFurnace(this.inventory, p_146101_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void func_146102_a(TileEntityDispenser p_146102_1_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerDispenser(this.inventory, p_146102_1_));
+
+        if (container == null)
+        {
+            p_146102_1_.closeInventory(); // Cauldron - prevent chests from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, p_146102_1_ instanceof TileEntityDropper ? 10 : 3, p_146102_1_.getInventoryName(), p_146102_1_.getSizeInventory(), p_146102_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerDispenser(this.inventory, p_146102_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void func_146098_a(TileEntityBrewingStand p_146098_1_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerBrewingStand(this.inventory, p_146098_1_));
+
+        if (container == null)
+        {
+            p_146098_1_.closeInventory(); // Cauldron - prevent chests from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 5, p_146098_1_.getInventoryName(), p_146098_1_.getSizeInventory(), p_146098_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerBrewingStand(this.inventory, p_146098_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void func_146104_a(TileEntityBeacon p_146104_1_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerBeacon(this.inventory, p_146104_1_));
+
+        if (container == null)
+        {
+            p_146104_1_.closeInventory(); // Cauldron - prevent chests from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 7, p_146104_1_.getInventoryName(), p_146104_1_.getSizeInventory(), p_146104_1_.hasCustomInventoryName()));
-        this.openContainer = new ContainerBeacon(this.inventory, p_146104_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
 
     public void displayGUIMerchant(IMerchant p_71030_1_, String p_71030_2_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerMerchant(this.inventory, p_71030_1_, this.worldObj));
+
+        if (container == null)
+        {
+            return;
+        }
+
+        // CraftBukkit end
         this.getNextWindowId();
-        this.openContainer = new ContainerMerchant(this.inventory, p_71030_1_, this.worldObj);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
         InventoryMerchant inventorymerchant = ((ContainerMerchant)this.openContainer).getMerchantInventory();
@@ -725,7 +1019,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
                 merchantrecipelist.func_151391_a(packetbuffer);
                 this.playerNetServerHandler.sendPacket(new S3FPacketCustomPayload("MC|TrList", packetbuffer));
             }
-            catch (IOException ioexception)
+            catch (Exception ioexception)     // CraftBukkit - IOException -> Exception
             {
                 logger.error("Couldn\'t send trade list", ioexception);
             }
@@ -738,6 +1032,17 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
     public void displayGUIHorse(EntityHorse p_110298_1_, IInventory p_110298_2_)
     {
+        // CraftBukkit start - Inventory open hook
+        Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerHorseInventory(this.inventory, p_110298_2_, p_110298_1_));
+
+        if (container == null)
+        {
+            p_110298_2_.closeInventory(); // Cauldron - prevent chests from being stuck in open state on clients
+            return;
+        }
+
+        // CraftBukkit end
+
         if (this.openContainer != this.inventoryContainer)
         {
             this.closeScreen();
@@ -745,7 +1050,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
         this.getNextWindowId();
         this.playerNetServerHandler.sendPacket(new S2DPacketOpenWindow(this.currentWindowId, 11, p_110298_2_.getInventoryName(), p_110298_2_.getSizeInventory(), p_110298_2_.hasCustomInventoryName(), p_110298_1_.getEntityId()));
-        this.openContainer = new ContainerHorseInventory(this.inventory, p_110298_2_, p_110298_1_);
+        this.openContainer = container; // CraftBukkit - Use container we passed to event
         this.openContainer.windowId = this.currentWindowId;
         this.openContainer.addCraftingToCrafters(this);
     }
@@ -770,6 +1075,15 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
     {
         this.playerNetServerHandler.sendPacket(new S30PacketWindowItems(p_71110_1_.windowId, p_71110_2_));
         this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, this.inventory.getItemStack()));
+
+        if (p_71110_1_.getBukkitView() == null) return; // Cauldron - allow vanilla mods to bypass
+        // CraftBukkit start - Send a Set Slot to update the crafting result slot
+        if (java.util.EnumSet.of(InventoryType.CRAFTING, InventoryType.WORKBENCH).contains(p_71110_1_.getBukkitView().getType()))
+        {
+            this.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(p_71110_1_.windowId, 0, p_71110_1_.getSlot(0).getStack()));
+        }
+
+        // CraftBukkit end
     }
 
     public void sendProgressBarUpdate(Container p_71112_1_, int p_71112_2_, int p_71112_3_)
@@ -779,6 +1093,7 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
 
     public void closeScreen()
     {
+        CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
         this.playerNetServerHandler.sendPacket(new S2EPacketCloseWindow(this.openContainer.windowId));
         this.closeContainer();
     }
@@ -853,7 +1168,18 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
     public void setPlayerHealthUpdated()
     {
         this.lastHealth = -1.0E8F;
+        this.lastExperience = -1; // CraftBukkit - Added to reset
+    }
+
+    // CraftBukkit start - Support multi-line messages
+    public void sendMessage(IChatComponent[] ichatcomponent) 
+    {
+        for (IChatComponent component : ichatcomponent)
+        {
+            this.addChatComponentMessage(component);
+        }
     }
+    // CraftBukkit end
 
     public void addChatComponentMessage(IChatComponent p_146105_1_)
     {
@@ -1037,6 +1363,114 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
         return this.field_143005_bX;
     }
 
+    // CraftBukkit start
+    public long timeOffset = 0;
+    public boolean relativeTime = true;
+
+    public long getPlayerTime()
+    {
+        if (this.relativeTime)
+        {
+            // Adds timeOffset to the current server time.
+            return this.worldObj.getWorldTime() + this.timeOffset;
+        }
+        else
+        {
+            // Adds timeOffset to the beginning of this day.
+            return this.worldObj.getWorldTime() - (this.worldObj.getWorldTime() % 24000) + this.timeOffset;
+        }
+    }
+
+    public WeatherType weather = null;
+
+    public WeatherType getPlayerWeather()
+    {
+        return this.weather;
+    }
+
+    public void setPlayerWeather(WeatherType type, boolean plugin)
+    {
+        if (!plugin && this.weather != null)
+        {
+            return;
+        }
+
+        if (plugin)
+        {
+            this.weather = type;
+        }
+
+        if (type == WeatherType.DOWNFALL)
+        {
+            this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(2, 0));
+            // this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(7, this.world.j(1.0F)));
+            // this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(8, this.world.h(1.0F)));
+        }
+        else
+        {
+            this.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(1, 0));
+        }
+    }
+
+    public void resetPlayerWeather()
+    {
+        this.weather = null;
+        this.setPlayerWeather(this.worldObj.getWorldInfo().isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
+    }
+
+    @Override
+    public String toString()
+    {
+        return super.toString() + "(" + this.getCommandSenderName() + " at " + this.posX + "," + this.posY + "," + this.posZ + ")";
+    }
+
+    public void reset()
+    {
+        float exp = 0;
+        boolean keepInventory = this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory");
+
+        if (this.keepLevel || keepInventory)
+        {
+            exp = this.experience;
+            this.newTotalExp = this.experienceTotal;
+            this.newLevel = this.experienceLevel;
+        }
+
+        this.setHealth(this.getMaxHealth());
+        this.fire = 0;
+        this.fallDistance = 0;
+        this.foodStats = new FoodStats(this);
+        this.experienceLevel = this.newLevel;
+        this.experienceTotal = this.newTotalExp;
+        this.experience = 0;
+        this.deathTime = 0;
+        this.clearActivePotions(); // Should be remapped: removeAllEffects should be remapped to this.
+        super.potionsNeedUpdate = true; // Cauldron - change to super to temporarily workaround remapping bug with SpecialSource
+        this.openContainer = this.inventoryContainer;
+        this.attackingPlayer = null;
+        this.entityLivingToAttack = null;
+        this._combatTracker = new CombatTracker(this);
+        this.lastExperience = -1;
+
+        if (this.keepLevel || keepInventory)
+        {
+            this.experience = exp;
+        }
+        else
+        {
+            this.addExperience(this.newExp);
+        }
+
+        this.keepLevel = false;
+    }
+
+    @Override
+    public CraftPlayer getBukkitEntity()
+    {
+        return (CraftPlayer) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+
     /* ===================================== FORGE START =====================================*/
     /**
      * Returns the default eye height of the player
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/player/InventoryPlayer.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/InventoryPlayer.java
index 4ac0a5c..05a87f7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/player/InventoryPlayer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/InventoryPlayer.java
@@ -13,6 +15,12 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.ReportedException;
+// CraftBukkit start
+import java.util.List;
+
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class InventoryPlayer implements IInventory
 {
@@ -25,6 +33,45 @@ public class InventoryPlayer implements IInventory
     private ItemStack itemStack;
     public boolean inventoryChanged;
     private static final String __OBFID = "CL_00001709";
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.mainInventory;
+    }
+
+    public ItemStack[] getArmorContents()
+    {
+        return this.armorInventory;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        return this.player.getBukkitEntity();
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
 
     public InventoryPlayer(EntityPlayer p_i1750_1_)
     {
@@ -81,6 +128,34 @@ public class InventoryPlayer implements IInventory
         return -1;
     }
 
+    // CraftBukkit start - Watch method above! :D
+    public int canHold(ItemStack itemstack)
+    {
+        int remains = itemstack.stackSize;
+
+        for (int i = 0; i < this.mainInventory.length; ++i)
+        {
+            if (this.mainInventory[i] == null)
+            {
+                return itemstack.stackSize;
+            }
+
+            // Taken from firstPartial(ItemStack)
+            if (this.mainInventory[i] != null && this.mainInventory[i].getItem() == itemstack.getItem() && this.mainInventory[i].isStackable() && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[i].getHasSubtypes() || this.mainInventory[i].getItemDamage() == itemstack.getItemDamage()) && ItemStack.areItemStackTagsEqual(this.mainInventory[i], itemstack))
+            {
+                remains -= (this.mainInventory[i].getMaxStackSize() < this.getInventoryStackLimit() ? this.mainInventory[i].getMaxStackSize() : this.getInventoryStackLimit()) - this.mainInventory[i].stackSize;
+            }
+
+            if (remains <= 0)
+            {
+                return itemstack.stackSize;
+            }
+        }
+
+        return itemstack.stackSize - remains;
+    }
+    // CraftBukkit end
+
     public int getFirstEmptyStack()
     {
         for (int i = 0; i < this.mainInventory.length; ++i)
@@ -430,25 +505,24 @@ public class InventoryPlayer implements IInventory
 
         if (aitemstack[p_70298_1_] != null)
         {
-            ItemStack itemstack;
+            ItemStack itemstack = aitemstack[p_70298_1_], result;
 
-            if (aitemstack[p_70298_1_].stackSize <= p_70298_2_)
+            if (itemstack.stackSize <= p_70298_2_)
             {
-                itemstack = aitemstack[p_70298_1_];
+                result = itemstack.copy();
+                itemstack.stackSize = 0;
                 aitemstack[p_70298_1_] = null;
-                return itemstack;
             }
             else
             {
-                itemstack = aitemstack[p_70298_1_].splitStack(p_70298_2_);
+                result = itemstack.splitStack(p_70298_2_);
 
-                if (aitemstack[p_70298_1_].stackSize == 0)
+                if (itemstack.stackSize == 0)
                 {
-                    aitemstack[p_70298_1_] = null;
+                    itemstack = null;
                 }
-
-                return itemstack;
             }
+            return result;
         }
         else
         {
@@ -658,7 +732,7 @@ public class InventoryPlayer implements IInventory
             if (this.mainInventory[i] != null)
             {
                 this.player.func_146097_a(this.mainInventory[i], true, false);
-                this.mainInventory[i] = null;
+                //this.mainInventory[i] = null; // Cauldron - we clear this in EntityPlayerMP.onDeath after PlayerDeathEvent
             }
         }
 
@@ -667,7 +741,7 @@ public class InventoryPlayer implements IInventory
             if (this.armorInventory[i] != null)
             {
                 this.player.func_146097_a(this.armorInventory[i], true, false);
-                this.armorInventory[i] = null;
+                //this.armorInventory[i] = null; // Cauldron - we clear this in EntityPlayerMP.onDeath after PlayerDeathEvent
             }
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/player/PlayerCapabilities.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/PlayerCapabilities.java
index 615f239..8f36f70 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/player/PlayerCapabilities.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/player/PlayerCapabilities.java
@@ -11,8 +11,8 @@ public class PlayerCapabilities
     public boolean allowFlying;
     public boolean isCreativeMode;
     public boolean allowEdit = true;
-    private float flySpeed = 0.05F;
-    private float walkSpeed = 0.1F;
+    public float flySpeed = 0.05F; // CraftBukkit private -> public
+    public float walkSpeed = 0.1F; // CraftBukkit private -> public
     private static final String __OBFID = "CL_00001708";
 
     public void writeCapabilitiesToNBT(NBTTagCompound p_75091_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityArrow.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityArrow.java
index fff1f2c..60bd6bb 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityArrow.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityArrow.java
@@ -23,6 +25,14 @@ import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.item.EntityItem;
+
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
+// CraftBukkit end
+
 public class EntityArrow extends Entity implements IProjectile
 {
     private int field_145791_d = -1;
@@ -30,14 +40,14 @@ public class EntityArrow extends Entity implements IProjectile
     private int field_145789_f = -1;
     private Block field_145790_g;
     private int inData;
-    private boolean inGround;
+    public boolean inGround = false; // Spigot - private -> public
     public int canBePickedUp;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
     private double damage = 2.0D;
-    private int knockbackStrength;
+    public int knockbackStrength; // CraftBukkit - private -> public
     private static final String __OBFID = "CL_00001715";
 
     public EntityArrow(World p_i1753_1_)
@@ -61,6 +71,7 @@ public class EntityArrow extends Entity implements IProjectile
         super(p_i1755_1_);
         this.renderDistanceWeight = 10.0D;
         this.shootingEntity = p_i1755_2_;
+        this.projectileSource = (LivingEntity) p_i1755_2_.getBukkitEntity(); // CraftBukkit
 
         if (p_i1755_2_ instanceof EntityPlayer)
         {
@@ -91,6 +102,7 @@ public class EntityArrow extends Entity implements IProjectile
         super(p_i1756_1_);
         this.renderDistanceWeight = 10.0D;
         this.shootingEntity = p_i1756_2_;
+        this.projectileSource = (LivingEntity) p_i1756_2_.getBukkitEntity(); // CraftBukkit
 
         if (p_i1756_2_ instanceof EntityPlayer)
         {
@@ -199,7 +211,7 @@ public class EntityArrow extends Entity implements IProjectile
             {
                 ++this.ticksInGround;
 
-                if (this.ticksInGround == 1200)
+                if (this.ticksInGround == worldObj.getSpigotConfig().arrowDespawnRate)   // Spigot // Cauldron
                 {
                     this.setDead();
                 }
@@ -246,7 +258,7 @@ public class EntityArrow extends Entity implements IProjectile
 
                     if (movingobjectposition1 != null)
                     {
-                        double d1 = vec31.distanceTo(movingobjectposition1.hitVec);
+                        double d1 = vec31.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
                         if (d1 < d0 || d0 == 0.0D)
                         {
@@ -277,6 +289,8 @@ public class EntityArrow extends Entity implements IProjectile
 
             if (movingobjectposition != null)
             {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this); // CraftBukkit - Call event
+
                 if (movingobjectposition.entityHit != null)
                 {
                     f2 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
@@ -298,13 +312,23 @@ public class EntityArrow extends Entity implements IProjectile
                         damagesource = DamageSource.causeArrowDamage(this, this.shootingEntity);
                     }
 
-                    if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman))
+                    // CraftBukkit start - Moved damage call
+                    if (movingobjectposition.entityHit.attackEntityFrom(damagesource, k))
                     {
-                        movingobjectposition.entityHit.setFire(5);
-                    }
+                        if (this.isBurning() && !(movingobjectposition.entityHit instanceof EntityEnderman) && (!(movingobjectposition.entityHit instanceof EntityPlayerMP) || !(this.shootingEntity instanceof EntityPlayerMP) || this.worldObj.pvpMode))   // CraftBukkit - abide by pvp setting if destination is a player
+                        {
+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
 
-                    if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float)k))
-                    {
+                            if (!combustEvent.isCancelled())
+                            {
+                                movingobjectposition.entityHit.setFire(combustEvent.getDuration());
+                            }
+
+                            // CraftBukkit end
+                        }
+
+                    // if (movingobjectposition.entityHit.attackEntityFrom(damagesource, (float)k)) { // CraftBukkit - moved up
                         if (movingobjectposition.entityHit instanceof EntityLivingBase)
                         {
                             EntityLivingBase entitylivingbase = (EntityLivingBase)movingobjectposition.entityHit;
@@ -487,6 +511,23 @@ public class EntityArrow extends Entity implements IProjectile
     {
         if (!this.worldObj.isRemote && this.inGround && this.arrowShake <= 0)
         {
+            // CraftBukkit start
+            ItemStack itemstack = new ItemStack(Items.arrow);
+
+            if (this.canBePickedUp == 1 && p_70100_1_.inventory.canHold(itemstack) > 0)
+            {
+                EntityItem item = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, itemstack);
+                PlayerPickupItemEvent event = new PlayerPickupItemEvent((org.bukkit.entity.Player) p_70100_1_.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(this.worldObj.getServer(), this, item), 0);
+                // event.setCancelled(!entityplayer.canPickUpLoot); TODO
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return;
+                }
+            }
+
+            // CraftBukkit end
             boolean flag = this.canBePickedUp == 1 || this.canBePickedUp == 2 && p_70100_1_.capabilities.isCreativeMode;
 
             if (this.canBePickedUp == 1 && !p_70100_1_.inventory.addItemStackToInventory(new ItemStack(Items.arrow, 1)))
@@ -553,4 +594,18 @@ public class EntityArrow extends Entity implements IProjectile
         byte b0 = this.dataWatcher.getWatchableObjectByte(16);
         return (b0 & 1) != 0;
     }
+
+    // CraftBukkit start
+    public boolean isInGround()
+    {
+        return inGround;
+    }
+    // CraftBukkit end
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityEgg.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityEgg.java
index c8eb986..df9f43b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityEgg.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityEgg.java
@@ -6,6 +6,17 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+
+import org.bukkit.entity.Ageable;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerEggThrowEvent;
+
+import net.minecraft.entity.Entity;
+// CraftBukkit end
+
 public class EntityEgg extends EntityThrowable
 {
     private static final String __OBFID = "CL_00001724";
@@ -32,24 +43,43 @@ public class EntityEgg extends EntityThrowable
             p_70184_1_.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.getThrower()), 0.0F);
         }
 
-        if (!this.worldObj.isRemote && this.rand.nextInt(8) == 0)
+        // CraftBukkit start
+        boolean hatching = !this.worldObj.isRemote && this.rand.nextInt(8) == 0;
+        int numHatching = (this.rand.nextInt(32) == 0) ? 4 : 1;
+
+        if (!hatching)
         {
-            byte b0 = 1;
+            numHatching = 0;
+        }
 
-            if (this.rand.nextInt(32) == 0)
-            {
-                b0 = 4;
-            }
+        EntityType hatchingType = EntityType.CHICKEN;
+        Entity shooter = this.getThrower();
 
-            for (int i = 0; i < b0; ++i)
+        if (shooter instanceof EntityPlayerMP)
+        {
+            Player player = (shooter == null) ? null : (Player) shooter.getBukkitEntity();
+            PlayerEggThrowEvent event = new PlayerEggThrowEvent(player, (org.bukkit.entity.Egg) this.getBukkitEntity(), hatching, (byte) numHatching, hatchingType);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            hatching = event.isHatching();
+            numHatching = event.getNumHatches();
+            hatchingType = event.getHatchingType();
+        }
+
+        if (hatching)
+        {
+            for (int k = 0; k < numHatching; k++)
             {
-                EntityChicken entitychicken = new EntityChicken(this.worldObj);
-                entitychicken.setGrowingAge(-24000);
-                entitychicken.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
-                this.worldObj.spawnEntityInWorld(entitychicken);
+                org.bukkit.entity.Entity entity = worldObj.getWorld().spawn(new org.bukkit.Location(worldObj.getWorld(), this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F), hatchingType.getEntityClass(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.EGG);
+
+                if (entity instanceof Ageable)
+                {
+                    ((Ageable) entity).setBaby();
+                }
             }
         }
 
+        // CraftBukkit end
+
         for (int j = 0; j < 8; ++j)
         {
             this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
@@ -60,4 +90,11 @@ public class EntityEgg extends EntityThrowable
             this.setDead();
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityFireball.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityFireball.java
index 4bf84a9..6bbcd07 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityFireball.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityFireball.java
@@ -15,6 +17,8 @@ import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public abstract class EntityFireball extends Entity
 {
     private int field_145795_e = -1;
@@ -28,6 +32,8 @@ public abstract class EntityFireball extends Entity
     public double accelerationX;
     public double accelerationY;
     public double accelerationZ;
+    public float bukkitYield = 1; // CraftBukkit
+    public boolean isIncendiary = true; // CraftBukkit
     private static final String __OBFID = "CL_00001717";
 
     public EntityFireball(World p_i1759_1_)
@@ -62,11 +68,19 @@ public abstract class EntityFireball extends Entity
     {
         super(p_i1761_1_);
         this.shootingEntity = p_i1761_2_;
+        this.projectileSource = (org.bukkit.entity.LivingEntity) p_i1761_2_.getBukkitEntity(); // CraftBukkit
         this.setSize(1.0F, 1.0F);
         this.setLocationAndAngles(p_i1761_2_.posX, p_i1761_2_.posY, p_i1761_2_.posZ, p_i1761_2_.rotationYaw, p_i1761_2_.rotationPitch);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.yOffset = 0.0F;
         this.motionX = this.motionY = this.motionZ = 0.0D;
+        // CraftBukkit start - Added setDirection method
+        this.setDirection(p_i1761_3_, p_i1761_5_, p_i1761_7_);
+    }
+
+    public void setDirection(double p_i1761_3_, double p_i1761_5_, double p_i1761_7_)
+    {
+        // CraftBukkit end
         p_i1761_3_ += this.rand.nextGaussian() * 0.4D;
         p_i1761_5_ += this.rand.nextGaussian() * 0.4D;
         p_i1761_7_ += this.rand.nextGaussian() * 0.4D;
@@ -140,7 +154,7 @@ public abstract class EntityFireball extends Entity
 
                     if (movingobjectposition1 != null)
                     {
-                        double d1 = vec3.distanceTo(movingobjectposition1.hitVec);
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
                         if (d1 < d0 || d0 == 0.0D)
                         {
@@ -159,6 +173,14 @@ public abstract class EntityFireball extends Entity
             if (movingobjectposition != null)
             {
                 this.onImpact(movingobjectposition);
+
+                // CraftBukkit start
+                if (this.isDead)
+                {
+                    CraftEventFactory.callProjectileHitEvent(this);
+                }
+
+                // CraftBukkit end
             }
 
             this.posX += this.motionX;
@@ -227,6 +249,8 @@ public abstract class EntityFireball extends Entity
         p_70014_1_.setShort("zTile", (short)this.field_145794_g);
         p_70014_1_.setByte("inTile", (byte)Block.getIdFromBlock(this.field_145796_h));
         p_70014_1_.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+        // CraftBukkit - Fix direction being mismapped to invalid variables
+        p_70014_1_.setTag("power", this.newDoubleNBTList(new double[] { this.accelerationX, this.accelerationY, this.accelerationZ}));
         p_70014_1_.setTag("direction", this.newDoubleNBTList(new double[] {this.motionX, this.motionY, this.motionZ}));
     }
 
@@ -238,7 +262,16 @@ public abstract class EntityFireball extends Entity
         this.field_145796_h = Block.getBlockById(p_70037_1_.getByte("inTile") & 255);
         this.inGround = p_70037_1_.getByte("inGround") == 1;
 
-        if (p_70037_1_.hasKey("direction", 9))
+        // CraftBukkit start - direction -> power
+        if (p_70037_1_.hasKey("power", 9))
+        {
+            NBTTagList nbttaglist = p_70037_1_.getTagList("power", 6);
+            this.accelerationX = nbttaglist.func_150309_d(0);
+            this.accelerationY = nbttaglist.func_150309_d(1);
+            this.accelerationZ = nbttaglist.func_150309_d(2);
+            // CraftBukkit end
+        }
+        else if (p_70037_1_.hasKey("direction", 9))
         {
             NBTTagList nbttaglist = p_70037_1_.getTagList("direction", 6);
             this.motionX = nbttaglist.func_150309_d(0);
@@ -273,6 +306,13 @@ public abstract class EntityFireball extends Entity
 
             if (p_70097_1_.getEntity() != null)
             {
+                // CraftBukkit start
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_70097_1_, p_70097_2_))
+                {
+                    return false;
+                }
+
+                // CraftBukkit end
                 Vec3 vec3 = p_70097_1_.getEntity().getLookVec();
 
                 if (vec3 != null)
@@ -288,6 +328,7 @@ public abstract class EntityFireball extends Entity
                 if (p_70097_1_.getEntity() instanceof EntityLivingBase)
                 {
                     this.shootingEntity = (EntityLivingBase)p_70097_1_.getEntity();
+                    this.projectileSource = (org.bukkit.projectiles.ProjectileSource) this.shootingEntity.getBukkitEntity(); // CraftBukkit
                 }
 
                 return true;
@@ -315,4 +356,11 @@ public abstract class EntityFireball extends Entity
     {
         return 15728880;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java
index 6a8c742..5320cb1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java
@@ -27,6 +27,12 @@ import net.minecraft.util.WeightedRandomFishable;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 
+// CraftBukkit start
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Fish;
+import org.bukkit.event.player.PlayerFishEvent;
+// CraftBukkit end
+
 public class EntityFishHook extends Entity
 {
     public static final List field_146039_d = Arrays.asList(new WeightedRandomFishable[] {(new WeightedRandomFishable(new ItemStack(Items.leather_boots), 10)).func_150709_a(0.9F), new WeightedRandomFishable(new ItemStack(Items.leather), 10), new WeightedRandomFishable(new ItemStack(Items.bone), 10), new WeightedRandomFishable(new ItemStack(Items.potionitem), 10), new WeightedRandomFishable(new ItemStack(Items.string), 5), (new WeightedRandomFishable(new ItemStack(Items.fishing_rod), 2)).func_150709_a(0.9F), new WeightedRandomFishable(new ItemStack(Items.bowl), 10), new WeightedRandomFishable(new ItemStack(Items.stick), 5), new WeightedRandomFishable(new ItemStack(Items.dye, 10, 0), 1), new WeightedRandomFishable(new ItemStack(Blocks.tripwire_hook), 10), new WeightedRandomFishable(new ItemStack(Items.rotten_flesh), 10)});
@@ -258,7 +264,7 @@ public class EntityFishHook extends Entity
 
                     if (movingobjectposition1 != null)
                     {
-                        d2 = vec31.distanceTo(movingobjectposition1.hitVec);
+                        d2 = vec31.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
                         if (d2 < d0 || d0 == 0.0D)
                         {
@@ -276,6 +282,8 @@ public class EntityFishHook extends Entity
 
             if (movingobjectposition != null)
             {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this); // Craftbukkit - Call event
+
                 if (movingobjectposition.entityHit != null)
                 {
                     if (movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.field_146042_b), 0.0F))
@@ -509,6 +517,16 @@ public class EntityFishHook extends Entity
 
             if (this.field_146043_c != null)
             {
+                // CraftBukkit start
+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.field_146042_b.getBukkitEntity(), this.field_146043_c.getBukkitEntity(), (Fish) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_ENTITY);
+                this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
+
+                if (playerFishEvent.isCancelled())
+                {
+                    return 0;
+                }
+
+                // CraftBukkit end
                 double d0 = this.field_146042_b.posX - this.posX;
                 double d2 = this.field_146042_b.posY - this.posY;
                 double d4 = this.field_146042_b.posZ - this.posZ;
@@ -522,6 +540,17 @@ public class EntityFishHook extends Entity
             else if (this.field_146045_ax > 0)
             {
                 EntityItem entityitem = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, this.func_146033_f());
+                // CraftBukkit start
+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.field_146042_b.getBukkitEntity(), entityitem.getBukkitEntity(), (Fish) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_FISH);
+                playerFishEvent.setExpToDrop(this.rand.nextInt(6) + 1);
+                this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
+
+                if (playerFishEvent.isCancelled())
+                {
+                    return 0;
+                }
+
+                // CraftBukkit end
                 double d1 = this.field_146042_b.posX - this.posX;
                 double d3 = this.field_146042_b.posY - this.posY;
                 double d5 = this.field_146042_b.posZ - this.posZ;
@@ -531,15 +560,37 @@ public class EntityFishHook extends Entity
                 entityitem.motionY = d3 * d9 + (double)MathHelper.sqrt_double(d7) * 0.08D;
                 entityitem.motionZ = d5 * d9;
                 this.worldObj.spawnEntityInWorld(entityitem);
-                this.field_146042_b.worldObj.spawnEntityInWorld(new EntityXPOrb(this.field_146042_b.worldObj, this.field_146042_b.posX, this.field_146042_b.posY + 0.5D, this.field_146042_b.posZ + 0.5D, this.rand.nextInt(6) + 1));
+                // CraftBukkit - this.random.nextInt(6) + 1 -> playerFishEvent.getExpToDrop()
+                this.field_146042_b.worldObj.spawnEntityInWorld(new EntityXPOrb(this.field_146042_b.worldObj, this.field_146042_b.posX, this.field_146042_b.posY + 0.5D, this.field_146042_b.posZ + 0.5D, playerFishEvent.getExpToDrop()));
                 b0 = 1;
             }
 
             if (this.field_146051_au)
             {
+                // CraftBukkit start
+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.field_146042_b.getBukkitEntity(), null, (Fish) this.getBukkitEntity(), PlayerFishEvent.State.IN_GROUND);
+                this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
+
+                if (playerFishEvent.isCancelled())
+                {
+                    return 0;
+                }
+                // CraftBukkit end
                 b0 = 2;
             }
 
+            // CraftBukkit start
+            if (b0 == 0)
+            {
+                PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.field_146042_b.getBukkitEntity(), null, (Fish) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
+                this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
+
+                if (playerFishEvent.isCancelled())
+                {
+                    return 0;
+                }
+            }
+            // CraftBukkit end
             this.setDead();
             this.field_146042_b.fishEntity = null;
             return b0;
@@ -580,7 +631,7 @@ public class EntityFishHook extends Entity
             {
                 float f3 = f - f2;
                 this.field_146042_b.addStat(StatList.fishCaughtStat, 1);
-                return ((WeightedRandomFishable)WeightedRandom.getRandomItem(this.rand, field_146036_f)).func_150708_a(this.rand);
+                return ((WeightedRandomFishable) WeightedRandom.getRandomItem(this.rand, EntityFishHook.field_146036_f)).func_150708_a(this.rand); // CraftBukkit - fix static reference to fish list
             }
         }
     }
@@ -594,4 +645,11 @@ public class EntityFishHook extends Entity
             this.field_146042_b.fishEntity = null;
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityLargeFireball.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityLargeFireball.java
index 4194087..0b61f1e 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityLargeFireball.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityLargeFireball.java
@@ -9,6 +9,8 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
+
 public class EntityLargeFireball extends EntityFireball
 {
     public int field_92057_e = 1;
@@ -39,7 +41,17 @@ public class EntityLargeFireball extends EntityFireball
                 p_70227_1_.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this, this.shootingEntity), 6.0F);
             }
 
-            this.worldObj.newExplosion((Entity)null, this.posX, this.posY, this.posZ, (float)this.field_92057_e, true, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+            // CraftBukkit start
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) org.bukkit.craftbukkit.entity.CraftEntity.getEntity(this.worldObj.getServer(), this));
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                // give 'this' instead of (Entity) null so we know what causes the damage
+                this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+            }
+
+            // CraftBukkit end
             this.setDead();
         }
     }
@@ -56,7 +68,8 @@ public class EntityLargeFireball extends EntityFireball
 
         if (p_70037_1_.hasKey("ExplosionPower", 99))
         {
-            this.field_92057_e = p_70037_1_.getInteger("ExplosionPower");
+            // CraftBukkit - set bukkitYield when setting explosionpower
+            this.bukkitYield = this.field_92057_e = p_70037_1_.getInteger("ExplosionPower");
         }
     }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityPotion.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityPotion.java
index 283b569..e3c53bb 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityPotion.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityPotion.java
@@ -14,9 +16,19 @@ import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.world.World;
 
+
+// CraftBukkit start
+import java.util.HashMap;
+
+import net.minecraft.entity.player.EntityPlayerMP;
+
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.LivingEntity;
+// CraftBukkit end
+
 public class EntityPotion extends EntityThrowable
 {
-    private ItemStack potionDamage;
+    public ItemStack potionDamage; // CraftBukkit private --> public
     private static final String __OBFID = "CL_00001727";
 
     public EntityPotion(World p_i1788_1_)
@@ -88,14 +100,16 @@ public class EntityPotion extends EntityThrowable
         {
             List list = Items.potionitem.getEffects(this.potionDamage);
 
-            if (list != null && !list.isEmpty())
+            if (true || list != null && !list.isEmpty())   // CraftBukkit - Call event even if no effects to apply
             {
                 AxisAlignedBB axisalignedbb = this.boundingBox.expand(4.0D, 2.0D, 4.0D);
                 List list1 = this.worldObj.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb);
 
-                if (list1 != null && !list1.isEmpty())
+                if (list1 != null)   // CraftBukkit - Run code even if there are no entities around
                 {
                     Iterator iterator = list1.iterator();
+                    // CraftBukkit
+                    HashMap<LivingEntity, Double> affected = new HashMap<LivingEntity, Double>();
 
                     while (iterator.hasNext())
                     {
@@ -111,6 +125,25 @@ public class EntityPotion extends EntityThrowable
                                 d1 = 1.0D;
                             }
 
+                            // CraftBukkit start
+                            affected.put((LivingEntity) entitylivingbase.getBukkitEntity(), d1);
+                        }
+                    }
+
+                    org.bukkit.event.entity.PotionSplashEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPotionSplashEvent(this, affected);
+
+                    if (!event.isCancelled() && list != null && !list.isEmpty())   // do not process effects if there are no effects to process
+                    {
+                        for (LivingEntity victim : event.getAffectedEntities())
+                        {
+                            if (!(victim instanceof CraftLivingEntity))
+                            {
+                                continue;
+                            }
+
+                            EntityLivingBase entitylivingbase = ((CraftLivingEntity) victim).getHandle();
+                            double d1 = event.getIntensity(victim);
+                            // CraftBukkit end
                             Iterator iterator1 = list.iterator();
 
                             while (iterator1.hasNext())
@@ -118,9 +151,22 @@ public class EntityPotion extends EntityThrowable
                                 PotionEffect potioneffect = (PotionEffect)iterator1.next();
                                 int i = potioneffect.getPotionID();
 
+                                // CraftBukkit start - Abide by PVP settings - for players only!
+                                if (!this.worldObj.pvpMode && this.getThrower() instanceof EntityPlayerMP && entitylivingbase instanceof EntityPlayerMP && entitylivingbase != this.getThrower())
+                                {
+                                    // Block SLOWER_MOVEMENT, SLOWER_DIG, HARM, BLINDNESS, HUNGER, WEAKNESS and POISON potions
+                                    if (i == 2 || i == 4 || i == 7 || i == 15 || i == 17 || i == 18 || i == 19)
+                                    {
+                                        continue;
+                                    }
+                                }
+
+                                // CraftBukkit end
+
                                 if (Potion.potionTypes[i].isInstant())
                                 {
-                                    Potion.potionTypes[i].affectEntity(this.getThrower(), entitylivingbase, potioneffect.getAmplifier(), d1);
+                                    // CraftBukkit - Added 'this'
+                                    Potion.potionTypes[i].applyInstantEffect(this.getThrower(), entitylivingbase, potioneffect.getAmplifier(), d1, this);
                                 }
                                 else
                                 {
@@ -170,4 +216,11 @@ public class EntityPotion extends EntityThrowable
             p_70014_1_.setTag("Potion", this.potionDamage.writeToNBT(new NBTTagCompound()));
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntitySmallFireball.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntitySmallFireball.java
index 6a9633f..66416a2 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntitySmallFireball.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntitySmallFireball.java
@@ -6,6 +6,8 @@ import net.minecraft.util.DamageSource;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.EntityCombustByEntityEvent; // CraftBukkit
+
 public class EntitySmallFireball extends EntityFireball
 {
     private static final String __OBFID = "CL_00001721";
@@ -36,7 +38,16 @@ public class EntitySmallFireball extends EntityFireball
             {
                 if (!p_70227_1_.entityHit.isImmuneToFire() && p_70227_1_.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this, this.shootingEntity), 5.0F))
                 {
-                    p_70227_1_.entityHit.setFire(5);
+                    // CraftBukkit start - Entity damage by entity event + combust event
+                    EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), p_70227_1_.entityHit.getBukkitEntity(), 5);
+                    p_70227_1_.entityHit.worldObj.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled())
+                    {
+                        p_70227_1_.entityHit.setFire(event.getDuration());
+                    }
+
+                    // CraftBukkit end
                 }
             }
             else
@@ -68,7 +79,13 @@ public class EntitySmallFireball extends EntityFireball
 
                 if (this.worldObj.isAirBlock(i, j, k))
                 {
-                    this.worldObj.setBlock(i, j, k, Blocks.fire);
+                    // CraftBukkit start
+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(worldObj, i, j, k, this).isCancelled())
+                    {
+                        this.worldObj.setBlock(i, j, k, Blocks.fire);
+                    }
+
+                    // CraftBukkit end
                 }
             }
 
@@ -85,4 +102,11 @@ public class EntitySmallFireball extends EntityFireball
     {
         return false;
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntitySnowball.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntitySnowball.java
index ea33159..fe532a3 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntitySnowball.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntitySnowball.java
@@ -49,4 +49,11 @@ public class EntitySnowball extends EntityThrowable
             this.setDead();
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityThrowable.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityThrowable.java
index e6c5059..94c1dea 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityThrowable.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityThrowable.java
@@ -24,8 +24,8 @@ public abstract class EntityThrowable extends Entity implements IProjectile
     private Block field_145785_f;
     protected boolean inGround;
     public int throwableShake;
-    private EntityLivingBase thrower;
-    private String throwerName;
+    public EntityLivingBase thrower; // CraftBukkit - private -> public
+    public String throwerName; // CraftBukkit - private -> public
     private int ticksInGround;
     private int ticksInAir;
     private static final String __OBFID = "CL_00001723";
@@ -50,6 +50,7 @@ public abstract class EntityThrowable extends Entity implements IProjectile
     {
         super(p_i1777_1_);
         this.thrower = p_i1777_2_;
+        this.projectileSource = (org.bukkit.entity.LivingEntity) p_i1777_2_.getBukkitEntity(); // CraftBukkit
         this.setSize(0.25F, 0.25F);
         this.setLocationAndAngles(p_i1777_2_.posX, p_i1777_2_.posY + (double)p_i1777_2_.getEyeHeight(), p_i1777_2_.posZ, p_i1777_2_.rotationYaw, p_i1777_2_.rotationPitch);
         this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
@@ -187,7 +188,7 @@ public abstract class EntityThrowable extends Entity implements IProjectile
 
                     if (movingobjectposition1 != null)
                     {
-                        double d1 = vec3.distanceTo(movingobjectposition1.hitVec);
+                        double d1 = vec3.squareDistanceTo(movingobjectposition1.hitVec); // CraftBukkit - distance efficiency
 
                         if (d1 < d0 || d0 == 0.0D)
                         {
@@ -213,6 +214,14 @@ public abstract class EntityThrowable extends Entity implements IProjectile
             else
             {
                 this.onImpact(movingobjectposition);
+
+                // CraftBukkit start
+                if (this.isDead)
+                {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this);
+                }
+
+                // CraftBukkit end
             }
         }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityWitherSkull.java ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityWitherSkull.java
index 7fc1c91..701b4d0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/entity/projectile/EntityWitherSkull.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/entity/projectile/EntityWitherSkull.java
@@ -13,6 +13,8 @@ import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
+
 public class EntityWitherSkull extends EntityFireball
 {
     private static final String __OBFID = "CL_00001728";
@@ -68,7 +70,7 @@ public class EntityWitherSkull extends EntityFireball
                 {
                     if (p_70227_1_.entityHit.attackEntityFrom(DamageSource.causeMobDamage(this.shootingEntity), 8.0F) && !p_70227_1_.entityHit.isEntityAlive())
                     {
-                        this.shootingEntity.heal(5.0F);
+                        this.shootingEntity.heal(5.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.WITHER); // CraftBukkit
                     }
                 }
                 else
@@ -96,7 +98,16 @@ public class EntityWitherSkull extends EntityFireball
                 }
             }
 
-            this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, 1.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+            // CraftBukkit start
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 1.0F, false);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+            }
+
+            // CraftBukkit end
             this.setDead();
         }
     }
@@ -125,4 +136,11 @@ public class EntityWitherSkull extends EntityFireball
     {
         this.dataWatcher.updateObject(10, Byte.valueOf((byte)(p_82343_1_ ? 1 : 0)));
     }
+
+    // Cauldron start
+    @Override
+    public boolean entityProjectileHook() {
+        return true;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/init/Bootstrap.java ./eclipse/cauldron/src/main/java/net/minecraft/init/Bootstrap.java
index 43c4015..783ef92 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/init/Bootstrap.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/init/Bootstrap.java
@@ -34,6 +35,11 @@ import net.minecraft.tileentity.TileEntityDispenser;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+// CraftBukkit end
+
 public class Bootstrap
 {
     private static boolean field_151355_a = false;
@@ -116,14 +122,48 @@ public class Bootstrap
                 double d0 = p_82487_1_.getX() + (double)enumfacing.getFrontOffsetX();
                 double d1 = (double)((float)p_82487_1_.getYInt() + 0.2F);
                 double d2 = p_82487_1_.getZ() + (double)enumfacing.getFrontOffsetZ();
-                Entity entity = ItemMonsterPlacer.spawnCreature(p_82487_1_.getWorld(), p_82487_2_.getItemDamage(), d0, d1, d2);
+                // CraftBukkit start
+                World world = p_82487_1_.getWorld();
+                ItemStack itemstack1 = p_82487_2_.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1, d2));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    p_82487_2_.stackSize++;
+                    return p_82487_2_;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    p_82487_2_.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                    {
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
+                    }
+                }
+
+                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+                Entity entity = ItemMonsterPlacer.spawnCreature(p_82487_1_.getWorld(), p_82487_2_.getItemDamage(), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
 
                 if (entity instanceof EntityLivingBase && p_82487_2_.hasDisplayName())
                 {
-                    ((EntityLiving)entity).setCustomNameTag(p_82487_2_.getDisplayName());
+                    ((EntityLiving) entity).setCustomNameTag(p_82487_2_.getDisplayName());
                 }
 
-                p_82487_2_.splitStack(1);
+                // p_82487_2_.splitStack(1); // Handled during event processing
+                // CraftBukkit end
                 return p_82487_2_;
             }
         });
@@ -136,9 +176,43 @@ public class Bootstrap
                 double d0 = p_82487_1_.getX() + (double)enumfacing.getFrontOffsetX();
                 double d1 = (double)((float)p_82487_1_.getYInt() + 0.2F);
                 double d2 = p_82487_1_.getZ() + (double)enumfacing.getFrontOffsetZ();
-                EntityFireworkRocket entityfireworkrocket = new EntityFireworkRocket(p_82487_1_.getWorld(), d0, d1, d2, p_82487_2_);
+                // CraftBukkit start
+                World world = p_82487_1_.getWorld();
+                ItemStack itemstack1 = p_82487_2_.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1, d2));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    p_82487_2_.stackSize++;
+                    return p_82487_2_;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    p_82487_2_.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                    {
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
+                    }
+                }
+
+                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+                EntityFireworkRocket entityfireworkrocket = new EntityFireworkRocket(p_82487_1_.getWorld(), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), itemstack1);
                 p_82487_1_.getWorld().spawnEntityInWorld(entityfireworkrocket);
-                p_82487_2_.splitStack(1);
+                // p_82487_2_.splitStack(1); // Handled during event processing
+                // CraftBukkit end
                 return p_82487_2_;
             }
             protected void playDispenseSound(IBlockSource p_82485_1_)
@@ -161,8 +235,42 @@ public class Bootstrap
                 double d3 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetX();
                 double d4 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetY();
                 double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetZ();
-                world.spawnEntityInWorld(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
-                p_82487_2_.splitStack(1);
+                // CraftBukkit start
+                ItemStack itemstack1 = p_82487_2_.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    p_82487_2_.stackSize++;
+                    return p_82487_2_;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    p_82487_2_.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                    {
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
+                    }
+                }
+
+                EntitySmallFireball entitysmallfireball = new EntitySmallFireball(world, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+                entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) p_82487_1_.getBlockTileEntity());
+                world.spawnEntityInWorld(entitysmallfireball);
+                // p_82487_2_.splitStack(1); // Handled during event processing
+                // CraftBukkit end
                 return p_82487_2_;
             }
             protected void playDispenseSound(IBlockSource p_82485_1_)
@@ -201,9 +309,41 @@ public class Bootstrap
                     d3 = 0.0D;
                 }
 
-                EntityBoat entityboat = new EntityBoat(world, d0, d1 + d3, d2);
+                // CraftBukkit start
+                ItemStack itemstack1 = p_82487_2_.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    p_82487_2_.stackSize++;
+                    return p_82487_2_;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    p_82487_2_.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                    {
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
+                    }
+                }
+
+                EntityBoat entityboat = new EntityBoat(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+                // CraftBukkit end
                 world.spawnEntityInWorld(entityboat);
-                p_82487_2_.splitStack(1);
+                // p_82487_2_.splitStack(1); // CraftBukkit - handled during event processing
                 return p_82487_2_;
             }
             protected void playDispenseSound(IBlockSource p_82485_1_)
@@ -217,16 +357,67 @@ public class Bootstrap
             private static final String __OBFID = "CL_00001399";
             public ItemStack dispenseStack(IBlockSource p_82487_1_, ItemStack p_82487_2_)
             {
-                ItemBucket itembucket = (ItemBucket)p_82487_2_.getItem();
+                ItemBucket itembucket = (ItemBucket) p_82487_2_.getItem();
                 int i = p_82487_1_.getXInt();
                 int j = p_82487_1_.getYInt();
                 int k = p_82487_1_.getZInt();
                 EnumFacing enumfacing = BlockDispenser.func_149937_b(p_82487_1_.getBlockMetadata());
+                // CraftBukkit start
+                World world = p_82487_1_.getWorld();
+                int x = i + enumfacing.getFrontOffsetX();
+                int y = j + enumfacing.getFrontOffsetY();
+                int z = k + enumfacing.getFrontOffsetZ();
+
+                if (world.isAirBlock(x, y, z) || !world.getBlock(x, y, z).getMaterial().isSolid())
+                {
+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+                    CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_82487_2_);
+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
+
+                    if (!BlockDispenser.eventFired)
+                    {
+                        world.getServer().getPluginManager().callEvent(event);
+                    }
+
+                    if (event.isCancelled())
+                    {
+                        return p_82487_2_;
+                    }
+
+                    if (!event.getItem().equals(craftItem))
+                    {
+                        // Chain to handler for new item
+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                        IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                        if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                        {
+                            ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                            return p_82487_2_;
+                        }
+                    }
+
+                    itembucket = (ItemBucket) CraftItemStack.asNMSCopy(event.getItem()).getItem();
+                }
+
+                // CraftBukkit end
 
                 if (itembucket.tryPlaceContainedLiquid(p_82487_1_.getWorld(), i + enumfacing.getFrontOffsetX(), j + enumfacing.getFrontOffsetY(), k + enumfacing.getFrontOffsetZ()))
                 {
-                    p_82487_2_.func_150996_a(Items.bucket);
-                    p_82487_2_.stackSize = 1;
+                    // CraftBukkit start - Handle stacked buckets
+                    Item item = Items.bucket;
+
+                    if (--p_82487_2_.stackSize == 0)
+                    {
+                        p_82487_2_.func_150996_a(Items.bucket);
+                        p_82487_2_.stackSize = 1;
+                    }
+                    else if (((TileEntityDispenser) p_82487_1_.getBlockTileEntity()).func_146019_a(new ItemStack(item)) < 0)
+                    {
+                        this.field_150841_b.dispense(p_82487_1_, new ItemStack(item));
+                    }
+
+                    // CraftBukkit end
                     return p_82487_2_;
                 }
                 else
@@ -266,6 +457,36 @@ public class Bootstrap
                     item = Items.lava_bucket;
                 }
 
+                // CraftBukkit start
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_82487_2_);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(i, j, k));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    return p_82487_2_;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                    {
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
+                    }
+                }
+
+                // CraftBukkit end
+
                 world.setBlockToAir(i, j, k);
 
                 if (--p_82487_2_.stackSize == 0)
@@ -292,16 +513,51 @@ public class Bootstrap
                 int i = p_82487_1_.getXInt() + enumfacing.getFrontOffsetX();
                 int j = p_82487_1_.getYInt() + enumfacing.getFrontOffsetY();
                 int k = p_82487_1_.getZInt() + enumfacing.getFrontOffsetZ();
+                // CraftBukkit start
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_82487_2_);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
 
-                if (world.isAirBlock(i, j, k))
+                if (!BlockDispenser.eventFired)
                 {
-                    world.setBlock(i, j, k, Blocks.fire);
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    return p_82487_2_;
+                }
 
-                    if (p_82487_2_.attemptDamageItem(1, world.rand))
+                if (!event.getItem().equals(craftItem))
+                {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
                     {
-                        p_82487_2_.stackSize = 0;
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
                     }
                 }
+
+                // CraftBukkit end
+
+                if (world.isAirBlock(i, j, k))
+                {
+                    // CraftBukkit start - Ignition by dispensing flint and steel
+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, i, j, k, p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt()).isCancelled())
+                    {
+                        world.setBlock(i, j, k, Blocks.fire);
+
+                        if (p_82487_2_.attemptDamageItem(1, world.rand))
+                        {
+                            p_82487_2_.stackSize = 0;
+                        }
+                    }
+
+                    // CraftBukkit end
+                }
                 else if (world.getBlock(i, j, k) == Blocks.tnt)
                 {
                     Blocks.tnt.onBlockDestroyedByPlayer(world, i, j, k, 1);
@@ -339,6 +595,35 @@ public class Bootstrap
                     int i = p_82487_1_.getXInt() + enumfacing.getFrontOffsetX();
                     int j = p_82487_1_.getYInt() + enumfacing.getFrontOffsetY();
                     int k = p_82487_1_.getZInt() + enumfacing.getFrontOffsetZ();
+                    // CraftBukkit start
+                    org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                    CraftItemStack craftItem = CraftItemStack.asNewCraftStack(p_82487_2_.getItem());
+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+
+                    if (!BlockDispenser.eventFired)
+                    {
+                        world.getServer().getPluginManager().callEvent(event);
+                    }
+
+                    if (event.isCancelled())
+                    {
+                        return p_82487_2_;
+                    }
+
+                    if (!event.getItem().equals(craftItem))
+                    {
+                        // Chain to handler for new item
+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                        IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                        if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                        {
+                            ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                            return p_82487_2_;
+                        }
+                    }
+
+                    // CraftBukkit end
 
                     if (ItemDye.func_150919_a(p_82487_2_, world, i, j, k))
                     {
@@ -381,9 +666,41 @@ public class Bootstrap
                 int i = p_82487_1_.getXInt() + enumfacing.getFrontOffsetX();
                 int j = p_82487_1_.getYInt() + enumfacing.getFrontOffsetY();
                 int k = p_82487_1_.getZInt() + enumfacing.getFrontOffsetZ();
-                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), (EntityLivingBase)null);
+                // CraftBukkit start
+                ItemStack itemstack1 = p_82487_2_.splitStack(1);
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(p_82487_1_.getXInt(), p_82487_1_.getYInt(), p_82487_1_.getZInt());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(i + 0.5, j + 0.5, k + 0.5));
+
+                if (!BlockDispenser.eventFired)
+                {
+                    world.getServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled())
+                {
+                    p_82487_2_.stackSize++;
+                    return p_82487_2_;
+                }
+
+                if (!event.getItem().equals(craftItem))
+                {
+                    p_82487_2_.stackSize++;
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    IBehaviorDispenseItem ibehaviordispenseitem = (IBehaviorDispenseItem) BlockDispenser.dispenseBehaviorRegistry.getObject(eventStack.getItem());
+
+                    if (ibehaviordispenseitem != IBehaviorDispenseItem.itemDispenseBehaviorProvider && ibehaviordispenseitem != this)
+                    {
+                        ibehaviordispenseitem.dispense(p_82487_1_, eventStack);
+                        return p_82487_2_;
+                    }
+                }
+
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (EntityLivingBase) null);
+                // CraftBukkit end
                 world.spawnEntityInWorld(entitytntprimed);
-                --p_82487_2_.stackSize;
+                // --p_82487_2_.stackSize; // CraftBukkit - handled above
                 return p_82487_2_;
             }
         });
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/AnimalChest.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/AnimalChest.java
index 75e6144..c294251 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/AnimalChest.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/AnimalChest.java
@@ -3,6 +3,14 @@ package net.minecraft.inventory;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import net.minecraft.entity.passive.EntityHorse;
+import net.minecraft.item.ItemStack;
+// CraftBukkit end
+
 public class AnimalChest extends InventoryBasic
 {
     private static final String __OBFID = "CL_00001731";
@@ -12,6 +20,65 @@ public class AnimalChest extends InventoryBasic
         super(p_i1796_1_, false, p_i1796_2_);
     }
 
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private EntityHorse horse;
+    private int maxStack = MAX_STACK;
+
+    public AnimalChest(String s, int i, EntityHorse horse)
+    {
+        this(s, i);
+        this.horse = horse;
+    }
+
+    @Override
+    public ItemStack[] getContents()
+    {
+        return this.inventoryContents;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    @Override
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        return (org.bukkit.entity.Horse) this.horse.getBukkitEntity();
+    }
+
+    @Override
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+
+    @Override
+
+    /**
+     * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't
+     * this more of a set than a get?*
+     */
+    public int getInventoryStackLimit()
+    {
+        return maxStack;
+    }
+    // CraftBukkit end
+
     @SideOnly(Side.CLIENT)
     public AnimalChest(String p_i1797_1_, boolean p_i1797_2_, int p_i1797_3_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/Container.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/Container.java
index dc74325..85209f9 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/Container.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/Container.java
@@ -13,6 +15,21 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
 
+
+// CraftBukkit start
+import java.util.HashMap;
+import java.util.Map;
+
+import net.minecraft.entity.player.EntityPlayerMP;
+
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
+import org.spigotmc.SpigotConfig;
+
 public abstract class Container
 {
     public List inventoryItemStacks = new ArrayList();
@@ -21,12 +38,53 @@ public abstract class Container
     @SideOnly(Side.CLIENT)
     private short transactionID;
     private int field_94535_f = -1;
-    private int field_94536_g;
+    public int field_94536_g; // CraftBukkit - private -> public
     private final Set field_94537_h = new HashSet();
+    public InventoryView bukkitView = null; // Cauldron
+    private int tickCount = 0; // Spigot
+    private final int fullMatchRate = SpigotConfig.fullMatchRate; // Spigot
     protected List crafters = new ArrayList();
     private Set playerList = new HashSet();
     private static final String __OBFID = "CL_00001730";
 
+    // CraftBukkit start
+    public boolean checkReachable = true;
+    public InventoryView getBukkitView() { return bukkitView; } // Cauldron
+    public void transferTo(Container other, org.bukkit.craftbukkit.entity.CraftHumanEntity player)
+    {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        // Cauldron start - add null checks to skip modded inventories with no Bukkit wrappers, and
+        // catch AbstractMethodErrors for modded IInventory's with no onClose()
+        if (source != null) {
+            try {
+                ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+
+            try {
+                ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+        }
+        if (destination != null) {
+            try {
+                ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+
+            try {
+                ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+        }
+        // Cauldron end
+    }
+    // CraftBukkit end
+
     protected Slot addSlotToContainer(Slot p_75146_1_)
     {
         p_75146_1_.slotNumber = this.inventorySlots.size();
@@ -39,7 +97,11 @@ public abstract class Container
     {
         if (this.crafters.contains(p_75132_1_))
         {
-            throw new IllegalArgumentException("Listener already listening");
+            // Cauldron start - As we do not create a new player object on respawn, we need to update the client with changes if listener already exists
+            //throw new IllegalArgumentException("Listener already listening");
+            p_75132_1_.sendContainerAndContentsToPlayer(this, this.getInventory());
+            this.detectAndSendChanges();
+            // Cauldron end
         }
         else
         {
@@ -74,7 +136,7 @@ public abstract class Container
             ItemStack itemstack = ((Slot)this.inventorySlots.get(i)).getStack();
             ItemStack itemstack1 = (ItemStack)this.inventoryItemStacks.get(i);
 
-            if (!ItemStack.areItemStacksEqual(itemstack1, itemstack))
+            if (!areItemStacksEqual(itemstack1, itemstack))
             {
                 itemstack1 = itemstack == null ? null : itemstack.copy();
                 this.inventoryItemStacks.set(i, itemstack1);
@@ -85,6 +147,7 @@ public abstract class Container
                 }
             }
         }
+        tickCount++;
     }
 
     public boolean enchantItem(EntityPlayer p_75140_1_, int p_75140_2_)
@@ -109,6 +172,10 @@ public abstract class Container
 
     public Slot getSlot(int p_75139_1_)
     {
+        // Cauldron start - vanilla compatibility. fixes NPE with ProjectRed's Item Stock Keeper
+        if (p_75139_1_ < 0 || p_75139_1_ >= this.inventorySlots.size())
+            return null;
+        // Cauldron end
         return (Slot)this.inventorySlots.get(p_75139_1_);
     }
 
@@ -168,6 +235,7 @@ public abstract class Container
                     itemstack3 = inventoryplayer.getItemStack().copy();
                     i1 = inventoryplayer.getItemStack().stackSize;
                     Iterator iterator = this.field_94537_h.iterator();
+                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
                     while (iterator.hasNext())
                     {
@@ -190,18 +258,55 @@ public abstract class Container
                             }
 
                             i1 -= itemstack1.stackSize - j1;
-                            slot1.putStack(itemstack1);
+                            draggedSlots.put(slot1.slotNumber, itemstack1); // CraftBukkit - Put in map instead of setting
                         }
                     }
 
-                    itemstack3.stackSize = i1;
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack3);
+                    newcursor.setAmount(i1);
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
 
-                    if (itemstack3.stackSize <= 0)
+                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet())
                     {
-                        itemstack3 = null;
+                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
                     }
 
-                    inventoryplayer.setItemStack(itemstack3);
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = inventoryplayer.getItemStack();
+                    inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(newcursor));
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.field_94535_f == i1, eventmap); // Should be dragButton
+                    p_75144_4_.worldObj.getServer().getPluginManager().callEvent(event);
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Result.DEFAULT;
+
+                    if (event.getResult() != Result.DENY)
+                    {
+                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet())
+                        {
+                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        }
+
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (inventoryplayer.getItemStack() != null)
+                        {
+                            inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        }
+                    }
+                    else
+                    {
+                        inventoryplayer.setItemStack(oldCursor);
+                    }
+
+                    if (needsUpdate && p_75144_4_ instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP) p_75144_4_).sendContainerToPlayer(this);
+                    }
+
+                    // CraftBukkit end
                 }
 
                 this.func_94533_d();
@@ -235,10 +340,17 @@ public abstract class Container
 
                         if (p_75144_2_ == 1)
                         {
-                            p_75144_4_.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack().splitStack(1), true);
+                            // CraftBukkit start - Store a reference
+                            ItemStack itemstack4 = inventoryplayer.getItemStack();
 
                             if (inventoryplayer.getItemStack().stackSize == 0)
                             {
+                                p_75144_4_.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack().splitStack(1), true);
+                            }
+
+                            if (itemstack4.stackSize == 0)
+                            {
+                                // CraftBukkit end
                                 inventoryplayer.setItemStack((ItemStack)null);
                             }
                         }
@@ -730,4 +842,10 @@ public abstract class Container
             return MathHelper.floor_float(f * 14.0F) + (i > 0 ? 1 : 0);
         }
     }
+    
+    // Spigot start
+    public boolean areItemStacksEqual(ItemStack is1, ItemStack is2) {
+        return tickCount % fullMatchRate == 0 ? ItemStack.areItemStacksEqual(is1, is2) : ItemStack.fastMatches(is1, is2);
+    }
+    // Spigot
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerBeacon.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerBeacon.java
index b43275e..098a3cd 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerBeacon.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerBeacon.java
@@ -8,6 +8,8 @@ import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntityBeacon;
 
+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
+
 public class ContainerBeacon extends Container
 {
     private TileEntityBeacon tileBeacon;
@@ -15,10 +17,15 @@ public class ContainerBeacon extends Container
     private int field_82865_g;
     private int field_82867_h;
     private int field_82868_i;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001735";
 
     public ContainerBeacon(InventoryPlayer p_i1802_1_, TileEntityBeacon p_i1802_2_)
     {
+        player = p_i1802_1_; // CraftBukkit
         this.tileBeacon = p_i1802_2_;
         this.addSlotToContainer(this.beaconSlot = new ContainerBeacon.BeaconSlot(p_i1802_2_, 0, 136, 110));
         byte b0 = 36;
@@ -77,6 +84,13 @@ public class ContainerBeacon extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        // CraftBukkit start
+        if (!this.checkReachable)
+        {
+            return true;
+        }
+        // CraftBukkit end
+
         return this.tileBeacon.isUseableByPlayer(p_75145_1_);
     }
 
@@ -145,6 +159,20 @@ public class ContainerBeacon extends Container
         return itemstack;
     }
 
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryBeacon(this.tileBeacon);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
+
     class BeaconSlot extends Slot
     {
         private static final String __OBFID = "CL_00001736";
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerBrewingStand.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerBrewingStand.java
index 51a14c5..0615d68 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerBrewingStand.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerBrewingStand.java
@@ -10,15 +10,25 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.tileentity.TileEntityBrewingStand;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftInventoryBrewer;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerBrewingStand extends Container
 {
     private TileEntityBrewingStand tileBrewingStand;
     private final Slot theSlot;
     private int brewTime;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001737";
 
     public ContainerBrewingStand(InventoryPlayer p_i1805_1_, TileEntityBrewingStand p_i1805_2_)
     {
+        this.player = p_i1805_1_; // CraftBukkit
         this.tileBrewingStand = p_i1805_2_;
         this.addSlotToContainer(new ContainerBrewingStand.Potion(p_i1805_1_.player, p_i1805_2_, 0, 56, 46));
         this.addSlotToContainer(new ContainerBrewingStand.Potion(p_i1805_1_.player, p_i1805_2_, 1, 79, 53));
@@ -74,6 +84,13 @@ public class ContainerBrewingStand extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        // CraftBukkit start
+        if (!this.checkReachable)
+        {
+            return true;
+        }
+        // CraftBukkit end
+
         return this.tileBrewingStand.isUseableByPlayer(p_75145_1_);
     }
 
@@ -152,6 +169,20 @@ public class ContainerBrewingStand extends Container
         return itemstack;
     }
 
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryBrewer inventory = new CraftInventoryBrewer(this.tileBrewingStand);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
+
     class Ingredient extends Slot
     {
         private static final String __OBFID = "CL_00001738";
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerChest.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerChest.java
index 11ab809..ec21cfa 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerChest.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerChest.java
@@ -3,10 +3,46 @@ package net.minecraft.inventory;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 
+// CraftBukkit start
+import net.minecraft.entity.player.InventoryPlayer;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerChest extends Container
 {
-    private IInventory lowerChestInventory;
+    public IInventory lowerChestInventory; // CraftBukkit - private->public
     private int numRows;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null || player == null) // Cauldron
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventory inventory;
+
+        if (this.lowerChestInventory instanceof InventoryPlayer)
+        {
+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryPlayer((InventoryPlayer) this.lowerChestInventory);
+        }
+        else if (this.lowerChestInventory instanceof InventoryLargeChest)
+        {
+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) this.lowerChestInventory);
+        }
+        else
+        {
+            inventory = new CraftInventory(this.lowerChestInventory);
+        }
+
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001742";
 
     public ContainerChest(IInventory p_i1806_1_, IInventory p_i1806_2_)
@@ -15,6 +51,12 @@ public class ContainerChest extends Container
         this.numRows = p_i1806_2_.getSizeInventory() / 9;
         p_i1806_2_.openInventory();
         int i = (this.numRows - 4) * 18;
+        // CraftBukkit start - Save player
+        if (p_i1806_1_ instanceof InventoryPlayer) // Cauldron - make sure it is an InventoryPlayer before casting
+        {
+            this.player = (InventoryPlayer) p_i1806_1_;
+        }
+        // CraftBukkit end
         int j;
         int k;
 
@@ -42,6 +84,13 @@ public class ContainerChest extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        // CraftBukkit start
+        if (!this.checkReachable)
+        {
+            return true;
+        }
+        // CraftBukkit end
+
         return this.lowerChestInventory.isUseableByPlayer(p_75145_1_);
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerDispenser.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerDispenser.java
index 8e0c0d9..d536995 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerDispenser.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerDispenser.java
@@ -4,14 +4,28 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntityDispenser;
 
+// CraftBukkit start
+import net.minecraft.entity.player.InventoryPlayer;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerDispenser extends Container
 {
-    private TileEntityDispenser tileDispenser;
+    public TileEntityDispenser tileDispenser; // CraftBukkit - private -> public
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001763";
 
     public ContainerDispenser(IInventory p_i1825_1_, TileEntityDispenser p_i1825_2_)
     {
         this.tileDispenser = p_i1825_2_;
+        // CraftBukkit start - Save player
+        // TODO: Should we check to make sure it really is an InventoryPlayer?
+        this.player = (InventoryPlayer)p_i1825_1_;
+        // CraftBukkit end
         int i;
         int j;
 
@@ -39,6 +53,13 @@ public class ContainerDispenser extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        // CraftBukkit start
+        if (!this.checkReachable)
+        {
+            return true;
+        }
+        // CraftBukkit end
+
         return this.tileDispenser.isUseableByPlayer(p_75145_1_);
     }
 
@@ -83,4 +104,18 @@ public class ContainerDispenser extends Container
 
         return itemstack;
     }
+
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventory inventory = new CraftInventory(this.tileDispenser);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerEnchantment.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerEnchantment.java
index 11d615a..025e09e 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerEnchantment.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerEnchantment.java
@@ -4,6 +4,8 @@ import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.List;
 import java.util.Random;
+
+import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentData;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.player.EntityPlayer;
@@ -14,21 +16,22 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 import net.minecraftforge.common.ForgeHooks;
 
+// CraftBukkit start
+import java.util.Map;
+
+import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.enchantment.EnchantItemEvent;
+import org.bukkit.event.enchantment.PrepareItemEnchantEvent;
+import org.bukkit.entity.Player;
+// CraftBukkit end
+
 public class ContainerEnchantment extends Container
 {
-    public IInventory tableInventory = new InventoryBasic("Enchant", true, 1)
-    {
-        private static final String __OBFID = "CL_00001746";
-        public int getInventoryStackLimit()
-        {
-            return 1;
-        }
-        public void markDirty()
-        {
-            super.markDirty();
-            ContainerEnchantment.this.onCraftMatrixChanged(this);
-        }
-    };
+    // CraftBukkit - make type specific (changed from IInventory)
+    public ContainerEnchantTableInventory tableInventory_CB = new ContainerEnchantTableInventory(this, "Enchant", true, 1); // CraftBukkit
+    public IInventory tableInventory = tableInventory_CB;
     private World worldPointer;
     private int posX;
     private int posY;
@@ -36,6 +39,10 @@ public class ContainerEnchantment extends Container
     private Random rand = new Random();
     public long nameSeed;
     public int[] enchantLevels = new int[3];
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Player player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001745";
 
     public ContainerEnchantment(InventoryPlayer p_i1811_1_, World p_i1811_2_, int p_i1811_3_, int p_i1811_4_, int p_i1811_5_)
@@ -66,6 +73,11 @@ public class ContainerEnchantment extends Container
         {
             this.addSlotToContainer(new Slot(p_i1811_1_, l, 8 + l * 18, 142));
         }
+
+        // CraftBukkit start
+        player = (Player) p_i1811_1_.player.getBukkitEntity();
+        tableInventory_CB.player = player; // Cauldron
+        // CraftBukkit end
     }
 
     public void addCraftingToCrafters(ICrafting p_75132_1_)
@@ -109,7 +121,7 @@ public class ContainerEnchantment extends Container
             ItemStack itemstack = p_75130_1_.getStackInSlot(0);
             int i;
 
-            if (itemstack != null && itemstack.isItemEnchantable())
+            if (itemstack != null)   // CraftBukkit - relax condition
             {
                 this.nameSeed = this.rand.nextLong();
 
@@ -144,6 +156,23 @@ public class ContainerEnchantment extends Container
                         this.enchantLevels[j] = EnchantmentHelper.calcItemStackEnchantability(this.rand, j, (int)power, itemstack);
                     }
 
+                    // CraftBukkit start
+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+                    PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(player, this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(this.posX, this.posY, this.posZ), item, this.enchantLevels, i);
+                    event.setCancelled(!itemstack.isItemEnchantable());
+                    if (this.getBukkitView() != null) this.worldPointer.getServer().getPluginManager().callEvent(event); // Cauldron - allow vanilla mods to byp
+
+                    if (event.isCancelled())
+                    {
+                        for (i = 0; i < 3; ++i)
+                        {
+                            this.enchantLevels[i] = 0;
+                        }
+
+                        return;
+                    }
+
+                    // CraftBukkit end
                     this.detectAndSendChanges();
                 }
             }
@@ -170,32 +199,64 @@ public class ContainerEnchantment extends Container
 
                 if (list != null)
                 {
-                    p_75140_1_.addExperienceLevel(-this.enchantLevels[p_75140_2_]);
+                    // CraftBukkit start
+                    Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<org.bukkit.enchantments.Enchantment, Integer>();
 
-                    if (flag)
+                    for (Object obj : list)
                     {
-                        itemstack.func_150996_a(Items.enchanted_book);
+                        EnchantmentData instance = (EnchantmentData) obj;
+                        enchants.put(org.bukkit.enchantments.Enchantment.getById(instance.enchantmentobj.effectId), instance.enchantmentLevel);
                     }
 
-                    int j = flag && list.size() > 1 ? this.rand.nextInt(list.size()) : -1;
+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+                    EnchantItemEvent event = new EnchantItemEvent((Player) p_75140_1_.getBukkitEntity(), this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(this.posX, this.posY, this.posZ), item, this.enchantLevels[p_75140_2_], enchants, p_75140_2_);
+                    if (this.getBukkitView() != null) this.worldPointer.getServer().getPluginManager().callEvent(event); // Cauldron - allow vanilla mods to bypass
+                    int level = event.getExpLevelCost();
 
-                    for (int k = 0; k < list.size(); ++k)
+                    if (event.isCancelled() || (level > p_75140_1_.experienceLevel && !p_75140_1_.capabilities.isCreativeMode) || enchants.isEmpty())
                     {
-                        EnchantmentData enchantmentdata = (EnchantmentData)list.get(k);
+                        return false;
+                    }
 
-                        if (!flag || k != j)
+                    boolean applied = !flag;
+
+                    for (Map.Entry<org.bukkit.enchantments.Enchantment, Integer> entry : event.getEnchantsToAdd().entrySet())
+                    {
+                        try
                         {
                             if (flag)
                             {
-                                Items.enchanted_book.addEnchantment(itemstack, enchantmentdata);
+                                int enchantId = entry.getKey().getId();
+
+                                if (Enchantment.enchantmentsList[enchantId] == null)
+                                {
+                                    continue;
+                                }
+
+                                EnchantmentData enchantment = new EnchantmentData(enchantId, entry.getValue());
+                                Items.enchanted_book.addEnchantment(itemstack, enchantment);
+                                applied = true;
+                                itemstack.func_150996_a(Items.enchanted_book);
+                                break;
                             }
                             else
                             {
-                                itemstack.addEnchantment(enchantmentdata.enchantmentobj, enchantmentdata.enchantmentLevel);
+                                item.addEnchantment(entry.getKey(), entry.getValue());
                             }
                         }
+                        catch (IllegalArgumentException e)
+                        {
+                            /* Just swallow invalid enchantments */
+                        }
+                    }
+
+                    // Only down level if we've applied the enchantments
+                    if (applied)
+                    {
+                        p_75140_1_.addExperienceLevel(-level);
                     }
 
+                    // CraftBukkit end
                     this.onCraftMatrixChanged(this.tableInventory);
                 }
             }
@@ -225,6 +286,11 @@ public class ContainerEnchantment extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        if (!this.checkReachable)
+        {
+            return true;    // CraftBukkit
+        }
+
         return this.worldPointer.getBlock(this.posX, this.posY, this.posZ) != Blocks.enchanting_table ? false : p_75145_1_.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
     }
 
@@ -283,4 +349,18 @@ public class ContainerEnchantment extends Container
 
         return itemstack;
     }
+
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryEnchanting inventory = new CraftInventoryEnchanting(this.tableInventory_CB);
+        bukkitEntity = new CraftInventoryView(this.player, inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerFurnace.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerFurnace.java
index 19c7a77..5a87b72 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerFurnace.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerFurnace.java
@@ -8,12 +8,34 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.FurnaceRecipes;
 import net.minecraft.tileentity.TileEntityFurnace;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftInventoryFurnace;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerFurnace extends Container
 {
     private TileEntityFurnace tileFurnace;
     private int lastCookTime;
     private int lastBurnTime;
     private int lastItemBurnTime;
+
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryFurnace inventory = new CraftInventoryFurnace(this.tileFurnace);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001748";
 
     public ContainerFurnace(InventoryPlayer p_i1812_1_, TileEntityFurnace p_i1812_2_)
@@ -22,6 +44,7 @@ public class ContainerFurnace extends Container
         this.addSlotToContainer(new Slot(p_i1812_2_, 0, 56, 17));
         this.addSlotToContainer(new Slot(p_i1812_2_, 1, 56, 53));
         this.addSlotToContainer(new SlotFurnace(p_i1812_1_.player, p_i1812_2_, 2, 116, 35));
+        this.player = p_i1812_1_; // CraftBukkit - save player
         int i;
 
         for (i = 0; i < 3; ++i)
@@ -96,6 +119,11 @@ public class ContainerFurnace extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        if (!this.checkReachable)
+        {
+            return true;    // CraftBukkit
+        }
+
         return this.tileFurnace.isUseableByPlayer(p_75145_1_);
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerHopper.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerHopper.java
index b9e5238..2e714c0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerHopper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerHopper.java
@@ -4,13 +4,36 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.ItemStack;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerHopper extends Container
 {
     private final IInventory field_94538_a;
     private static final String __OBFID = "CL_00001750";
 
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventory inventory = new CraftInventory(this.field_94538_a);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
+
     public ContainerHopper(InventoryPlayer p_i1814_1_, IInventory p_i1814_2_)
     {
+        this.player = p_i1814_1_; // CraftBukkit - save player
         this.field_94538_a = p_i1814_2_;
         p_i1814_2_.openInventory();
         byte b0 = 51;
@@ -37,6 +60,11 @@ public class ContainerHopper extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        if (!this.checkReachable)
+        {
+            return true;    // CraftBukkit
+        }
+
         return this.field_94538_a.isUseableByPlayer(p_75145_1_);
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerMerchant.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerMerchant.java
index 819d6f0..00ba767 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerMerchant.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerMerchant.java
@@ -8,6 +8,8 @@ import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
+
 public class ContainerMerchant extends Container
 {
     private IMerchant theMerchant;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerPlayer.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerPlayer.java
index 7b365fc..68f5329 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerPlayer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerPlayer.java
@@ -12,18 +12,33 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.CraftingManager;
 import net.minecraft.util.IIcon;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S2FPacketSetSlot;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerPlayer extends Container
 {
     public InventoryCrafting craftMatrix = new InventoryCrafting(this, 2, 2);
     public IInventory craftResult = new InventoryCraftResult();
     public boolean isLocalWorld;
     private final EntityPlayer thePlayer;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001754";
 
     public ContainerPlayer(final InventoryPlayer p_i1819_1_, boolean p_i1819_2_, EntityPlayer p_i1819_3_)
     {
         this.isLocalWorld = p_i1819_2_;
         this.thePlayer = p_i1819_3_;
+        this.craftResult = new InventoryCraftResult(); // CraftBukkit - moved to before InventoryCrafting construction
+        this.craftMatrix = new InventoryCrafting(this, 2, 2, p_i1819_1_.player); // CraftBukkit - pass player
+        this.craftMatrix.resultInventory = this.craftResult; // CraftBukkit - let InventoryCrafting know about its result slot
+        this.player = p_i1819_1_; // CraftBukkit - save player
         this.addSlotToContainer(new SlotCrafting(p_i1819_1_.player, this.craftMatrix, this.craftResult, 0, 144, 36));
         int i;
         int j;
@@ -72,12 +87,24 @@ public class ContainerPlayer extends Container
             this.addSlotToContainer(new Slot(p_i1819_1_, i, 8 + i * 18, 142));
         }
 
-        this.onCraftMatrixChanged(this.craftMatrix);
+       // this.onCraftMatrixChanged(this.craftMatrix); // CraftBukkit - unneeded since it just sets result slot to empty
     }
 
     public void onCraftMatrixChanged(IInventory p_75130_1_)
     {
-        this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj));
+        // CraftBukkit start (Note: the following line would cause an error if called during construction)
+        CraftingManager.getInstance().lastCraftView = getBukkitView();
+        ItemStack craftResult = CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj);
+        this.craftResult.setInventorySlotContents(0, craftResult);
+
+        if (super.crafters.size() < 1)
+        {
+            return;
+        }
+
+        EntityPlayerMP player = (EntityPlayerMP) super.crafters.get(0); // TODO: Is this _always_ correct? Seems like it.
+        player.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(player.openContainer.windowId, 0, craftResult));
+        // CraftBukkit end
     }
 
     public void onContainerClosed(EntityPlayer p_75134_1_)
@@ -187,4 +214,18 @@ public class ContainerPlayer extends Container
     {
         return p_94530_2_.inventory != this.craftResult && super.func_94530_a(p_94530_1_, p_94530_2_);
     }
+
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftMatrix, this.craftResult);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerRepair.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerRepair.java
index 3ffb888..34ef749 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerRepair.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerRepair.java
@@ -17,19 +17,13 @@ import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
+
 public class ContainerRepair extends Container
 {
     private static final Logger logger = LogManager.getLogger();
     private IInventory outputSlot = new InventoryCraftResult();
-    private IInventory inputSlots = new InventoryBasic("Repair", true, 2)
-    {
-        private static final String __OBFID = "CL_00001733";
-        public void markDirty()
-        {
-            super.markDirty();
-            ContainerRepair.this.onCraftMatrixChanged(this);
-        }
-    };
+    private IInventory inputSlots = new ContainerRepairInventory(this, "Repair", true, 2);
     private World theWorld;
     private int field_82861_i;
     private int field_82858_j;
@@ -39,9 +33,14 @@ public class ContainerRepair extends Container
     private String repairedItemName;
     private final EntityPlayer thePlayer;
     private static final String __OBFID = "CL_00001732";
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
 
     public ContainerRepair(InventoryPlayer p_i1800_1_, final World p_i1800_2_, final int p_i1800_3_, final int p_i1800_4_, final int p_i1800_5_, EntityPlayer p_i1800_6_)
     {
+        this.player = p_i1800_1_;
+        // CraftBukkit end
         this.theWorld = p_i1800_2_;
         this.field_82861_i = p_i1800_3_;
         this.field_82858_j = p_i1800_4_;
@@ -461,6 +460,11 @@ public class ContainerRepair extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        if (!this.checkReachable)
+        {
+            return true; // CraftBukkit
+        }
+
         return this.theWorld.getBlock(this.field_82861_i, this.field_82858_j, this.field_82859_k) != Blocks.anvil ? false : p_75145_1_.getDistanceSq((double)this.field_82861_i + 0.5D, (double)this.field_82858_j + 0.5D, (double)this.field_82859_k + 0.5D) <= 64.0D;
     }
 
@@ -535,4 +539,18 @@ public class ContainerRepair extends Container
 
         this.updateRepairOutput();
     }
+
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryAnvil(this.inputSlots, this.outputSlot);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerWorkbench.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerWorkbench.java
index 77b663e..1b2e2a4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/ContainerWorkbench.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/ContainerWorkbench.java
@@ -7,18 +7,35 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.CraftingManager;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S2FPacketSetSlot;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class ContainerWorkbench extends Container
 {
-    public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
-    public IInventory craftResult = new InventoryCraftResult();
+    public InventoryCrafting craftMatrix; // CraftBukkit - move initialization into constructor
+    public IInventory craftResult; // CraftBukkit - move initialization into constructor
     private World worldObj;
     private int posX;
     private int posY;
     private int posZ;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private InventoryPlayer player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001744";
 
     public ContainerWorkbench(InventoryPlayer p_i1808_1_, World p_i1808_2_, int p_i1808_3_, int p_i1808_4_, int p_i1808_5_)
     {
+        // CraftBukkit start - Switched order of IInventory construction and stored player
+        this.craftResult = new InventoryCraftResult();
+        this.craftMatrix = new InventoryCrafting(this, 3, 3, p_i1808_1_.player); // CraftBukkit - pass player
+        this.craftMatrix.resultInventory = this.craftResult;
+        this.player = p_i1808_1_;
+        // CraftBukkit end
         this.worldObj = p_i1808_2_;
         this.posX = p_i1808_3_;
         this.posY = p_i1808_4_;
@@ -53,7 +70,19 @@ public class ContainerWorkbench extends Container
 
     public void onCraftMatrixChanged(IInventory p_75130_1_)
     {
-        this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj));
+        // CraftBukkit start
+        CraftingManager.getInstance().lastCraftView = getBukkitView();
+        ItemStack craftResult = CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj);
+        this.craftResult.setInventorySlotContents(0, craftResult);
+
+        if (super.crafters.size() < 1)
+        {
+            return;
+        }
+
+        EntityPlayerMP player = (EntityPlayerMP) super.crafters.get(0); // TODO: Is this _always_ correct? Seems like it.
+        player.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(player.openContainer.windowId, 0, craftResult));
+        // CraftBukkit end
     }
 
     public void onContainerClosed(EntityPlayer p_75134_1_)
@@ -76,6 +105,11 @@ public class ContainerWorkbench extends Container
 
     public boolean canInteractWith(EntityPlayer p_75145_1_)
     {
+        if (!this.checkReachable)
+        {
+            return true;    // CraftBukkit
+        }
+
         return this.worldObj.getBlock(this.posX, this.posY, this.posZ) != Blocks.crafting_table ? false : p_75145_1_.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
     }
 
@@ -141,4 +175,18 @@ public class ContainerWorkbench extends Container
     {
         return p_94530_2_.inventory != this.craftResult && super.func_94530_a(p_94530_1_, p_94530_2_);
     }
+
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftMatrix, this.craftResult);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/IInventory.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/IInventory.java
index 3472ec4..6880cf0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/IInventory.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/IInventory.java
@@ -3,6 +3,8 @@ package net.minecraft.inventory;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity; // CraftBukkit
+
 public interface IInventory
 {
     int getSizeInventory();
@@ -30,4 +32,20 @@ public interface IInventory
     void closeInventory();
 
     boolean isItemValidForSlot(int p_94041_1_, ItemStack p_94041_2_);
+
+    // CraftBukkit start
+    ItemStack[] getContents();
+
+    void onOpen(CraftHumanEntity who);
+
+    void onClose(CraftHumanEntity who);
+
+    java.util.List<org.bukkit.entity.HumanEntity> getViewers();
+
+    org.bukkit.inventory.InventoryHolder getOwner();
+
+    void setMaxStackSize(int size);
+
+    int MAX_STACK = 64;
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryBasic.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryBasic.java
index 5b22a44..f3b98ab 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryBasic.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryBasic.java
@@ -2,6 +2,11 @@ package net.minecraft.inventory;
 
 import java.util.ArrayList;
 import java.util.List;
+
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 
@@ -9,7 +14,7 @@ public class InventoryBasic implements IInventory
 {
     private String inventoryTitle;
     private int slotsCount;
-    private ItemStack[] inventoryContents;
+    protected ItemStack[] inventoryContents; // CraftBukkit - protected
     private List field_70480_d;
     private boolean field_94051_e;
     private static final String __OBFID = "CL_00001514";
@@ -150,4 +155,33 @@ public class InventoryBasic implements IInventory
     {
         return true;
     }
+
+    // Cauldron start
+    @Override
+    public ItemStack[] getContents()
+    {
+        return null;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {}
+
+    @Override
+    public void onClose(CraftHumanEntity who) {}
+
+    @Override
+    public List<HumanEntity> getViewers()
+    {
+        return null;
+    }
+
+    @Override
+    public InventoryHolder getOwner()
+    {
+        return null;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {}
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryCraftResult.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryCraftResult.java
index d2ae0d6..e0805ea 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryCraftResult.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryCraftResult.java
@@ -2,10 +2,41 @@ package net.minecraft.inventory;
 
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class InventoryCraftResult implements IInventory
 {
     private ItemStack[] stackResult = new ItemStack[1];
+
+    // CraftBukkit start
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.stackResult;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        return null; // Result slots don't get an owner
+    }
+
+    // Don't need a transaction; the InventoryCrafting keeps track of it for us
+    public void onOpen(CraftHumanEntity who) {}
+    public void onClose(CraftHumanEntity who) {}
+    public java.util.List<HumanEntity> getViewers()
+    {
+        return new java.util.ArrayList<HumanEntity>();
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001760";
 
     public int getSizeInventory()
@@ -63,7 +94,7 @@ public class InventoryCraftResult implements IInventory
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public void markDirty() {}
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryCrafting.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryCrafting.java
index 378945a..6d80773 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryCrafting.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryCrafting.java
@@ -3,11 +3,69 @@ package net.minecraft.inventory;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 
+// CraftBukkit start
+import java.util.List;
+import net.minecraft.item.crafting.IRecipe;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+// CraftBukkit end
+
 public class InventoryCrafting implements IInventory
 {
     private ItemStack[] stackList;
     private int inventoryWidth;
     private Container eventHandler;
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public IRecipe currentRecipe;
+    public IInventory resultInventory;
+    private EntityPlayer owner;
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.stackList;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public InventoryType getInvType()
+    {
+        return stackList.length == 4 ? InventoryType.CRAFTING : InventoryType.WORKBENCH;
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        if (owner == null) return null; // Cauldron
+        return owner.getBukkitEntity();
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+        resultInventory.setMaxStackSize(size);
+    }
+
+    public InventoryCrafting(Container container, int i, int j, EntityPlayer player)
+    {
+        this(container, i, j);
+        this.owner = player;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001743";
 
     public InventoryCrafting(Container p_i1807_1_, int p_i1807_2_, int p_i1807_3_)
@@ -105,7 +163,7 @@ public class InventoryCrafting implements IInventory
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public void markDirty() {}
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryEnderChest.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryEnderChest.java
index 5871846..a9e2379 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryEnderChest.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryEnderChest.java
@@ -6,9 +6,61 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.tileentity.TileEntityEnderChest;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
+
 public class InventoryEnderChest extends InventoryBasic
 {
     private TileEntityEnderChest associatedChest;
+
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public org.bukkit.entity.Player player;
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.inventoryContents;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        return this.player;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+
+    /**
+     * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't
+     * this more of a set than a get?*
+     */
+    public int getInventoryStackLimit()
+    {
+        return maxStack;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001759";
 
     public InventoryEnderChest()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryLargeChest.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryLargeChest.java
index 6e1e698..9cc9782 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryLargeChest.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryLargeChest.java
@@ -3,11 +3,62 @@ package net.minecraft.inventory;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class InventoryLargeChest implements IInventory
 {
     private String name;
-    private IInventory upperChest;
-    private IInventory lowerChest;
+    public IInventory upperChest; // CraftBukkit - private -> public
+    public IInventory lowerChest; // CraftBukkit - private -> public
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public ItemStack[] getContents()
+    {
+        ItemStack[] result = new ItemStack[this.getSizeInventory()];
+
+        for (int i = 0; i < result.length; i++)
+        {
+            result[i] = this.getStackInSlot(i);
+        }
+
+        return result;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        this.upperChest.onOpen(who);
+        this.lowerChest.onOpen(who);
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        this.upperChest.onClose(who);
+        this.lowerChest.onClose(who);
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        return null; // This method won't be called since CraftInventoryDoubleChest doesn't defer to here
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        this.upperChest.setMaxStackSize(size);
+        this.lowerChest.setMaxStackSize(size);
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001507";
 
     public InventoryLargeChest(String p_i1559_1_, IInventory p_i1559_2_, IInventory p_i1559_3_)
@@ -77,7 +128,7 @@ public class InventoryLargeChest implements IInventory
 
     public int getInventoryStackLimit()
     {
-        return this.upperChest.getInventoryStackLimit();
+        return Math.min(this.upperChest.getInventoryStackLimit(), this.lowerChest.getInventoryStackLimit()); // CraftBukkit - check both sides
     }
 
     public void markDirty()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryMerchant.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryMerchant.java
index df1f78c..23f9f6d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/InventoryMerchant.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/InventoryMerchant.java
@@ -6,6 +6,12 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.village.MerchantRecipe;
 import net.minecraft.village.MerchantRecipeList;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class InventoryMerchant implements IInventory
 {
     private final IMerchant theMerchant;
@@ -13,6 +19,40 @@ public class InventoryMerchant implements IInventory
     private final EntityPlayer thePlayer;
     private MerchantRecipe currentRecipe;
     private int currentRecipeIndex;
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.theInventory;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int i)
+    {
+        maxStack = i;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner()
+    {
+        return thePlayer.getBukkitEntity();
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001756";
 
     public InventoryMerchant(EntityPlayer p_i1820_1_, IMerchant p_i1820_2_)
@@ -124,7 +164,7 @@ public class InventoryMerchant implements IInventory
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer p_70300_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/Slot.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/Slot.java
index e74dd18..7260ea1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/Slot.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/Slot.java
@@ -10,7 +10,7 @@ import net.minecraft.util.ResourceLocation;
 
 public class Slot
 {
-    private final int slotIndex;
+    public final int slotIndex; // CraftBukkit - private -> public
     public final IInventory inventory;
     public int slotNumber;
     public int xDisplayPosition;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/inventory/SlotFurnace.java ./eclipse/cauldron/src/main/java/net/minecraft/inventory/SlotFurnace.java
index 3c043ca..d10cb1c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/inventory/SlotFurnace.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/inventory/SlotFurnace.java
@@ -9,6 +9,12 @@ import net.minecraft.item.crafting.FurnaceRecipes;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.util.MathHelper;
 
+// CraftBukkit start
+import net.minecraft.tileentity.TileEntityFurnace;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+// CraftBukkit end
+
 public class SlotFurnace extends Slot
 {
     private EntityPlayer thePlayer;
@@ -74,6 +80,20 @@ public class SlotFurnace extends Slot
                 i = j;
             }
 
+            // Cauldron start - validate inventory before attempting to cast it
+            if (this.inventory instanceof TileEntityFurnace) 
+            {
+                // CraftBukkit start
+                Player player = (Player) thePlayer.getBukkitEntity();
+                TileEntityFurnace furnace = ((TileEntityFurnace) this.inventory);
+                org.bukkit.block.Block block = thePlayer.worldObj.getWorld().getBlockAt(furnace.xCoord, furnace.yCoord, furnace.zCoord);
+                FurnaceExtractEvent event = new FurnaceExtractEvent(player, block, org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(p_75208_1_.getItem()), p_75208_1_.stackSize, i);
+                thePlayer.worldObj.getServer().getPluginManager().callEvent(event);
+                i = event.getExpToDrop();
+                // CraftBukkit end
+            }
+            // Cauldron end
+
             while (i > 0)
             {
                 j = EntityXPOrb.getXPSplit(i);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/Item.java ./eclipse/cauldron/src/main/java/net/minecraft/item/Item.java
index 8a249dd..3495b6a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/Item.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/Item.java
@@ -54,6 +54,7 @@ import net.minecraft.util.Vec3;
 import net.minecraft.util.WeightedRandomChestContent;
 import net.minecraft.world.World;
 import net.minecraftforge.common.ChestGenHooks;
+import net.minecraftforge.common.DimensionManager; // Cauldron
 import net.minecraftforge.common.util.EnumHelper;
 
 public class Item
@@ -402,6 +403,12 @@ public class Item
             {
                 object = (new ItemDoublePlant(Blocks.double_plant, Blocks.double_plant, BlockDoublePlant.field_149892_a)).setUnlocalizedName("doublePlant");
             }
+            // CraftBukkit start - allow certain blocks to retain data
+            else if (block == Blocks.mob_spawner || block == Blocks.brown_mushroom_block || block == Blocks.red_mushroom_block)
+            {
+                object = new ItemColored(block, true);
+            }
+            // CraftBukkit end
             else
             {
                 if (hashset.contains(block))
@@ -923,7 +930,13 @@ public class Item
      */
     public int getEntityLifespan(ItemStack itemStack, World world)
     {
-        return 6000;
+        // Cauldron start - fixes MFR proxy worlds used with grinder/slaughterhouse
+        if (world == null)
+        {
+            return 6000;
+        }
+        return world.getSpigotConfig().itemDespawnRate; // Spigot
+        // Cauldron end
     }
 
     /**
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemBoat.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemBoat.java
index a14d26c..766f252 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemBoat.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemBoat.java
@@ -80,6 +80,15 @@ public class ItemBoat extends Item
                     i = movingobjectposition.blockX;
                     int j = movingobjectposition.blockY;
                     int k = movingobjectposition.blockZ;
+                    // CraftBukkit start - Boat placement
+                    org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(p_77659_3_, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, i, j, k, movingobjectposition.sideHit, p_77659_1_);
+
+                    if (event.isCancelled())
+                    {
+                        return p_77659_1_;
+                    }
+
+                    // CraftBukkit end
 
                     if (p_77659_2_.getBlock(i, j, k) == Blocks.snow_layer)
                     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemBow.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemBow.java
index 4a80dd2..4070b42 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemBow.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemBow.java
@@ -84,6 +84,21 @@ public class ItemBow extends Item
                 entityarrow.setFire(100);
             }
 
+            // CraftBukkit start
+            org.bukkit.event.entity.EntityShootBowEvent cbEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(p_77615_3_, p_77615_1_, entityarrow, f);
+
+            if (cbEvent.isCancelled())
+            {
+                cbEvent.getProjectile().remove();
+                return;
+            }
+
+            if (cbEvent.getProjectile() == entityarrow.getBukkitEntity())
+            {
+                p_77615_2_.spawnEntityInWorld(entityarrow);
+            }
+
+            // CraftBukkit end
             p_77615_1_.damageItem(1, p_77615_3_);
             p_77615_2_.playSoundAtEntity(p_77615_3_, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
 
@@ -98,7 +113,7 @@ public class ItemBow extends Item
 
             if (!p_77615_2_.isRemote)
             {
-                p_77615_2_.spawnEntityInWorld(entityarrow);
+                // p_77615_2_.spawnEntityInWorld(entityarrow); // CraftBukkit - moved up
             }
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemBucket.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemBucket.java
index e362672..11bbd31 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemBucket.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemBucket.java
@@ -12,6 +12,13 @@ import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.FillBucketEvent;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.player.PlayerBucketEmptyEvent;
+import org.bukkit.event.player.PlayerBucketFillEvent;
+// CraftBukkit end
+
 public class ItemBucket extends Item
 {
     private Block isFull;
@@ -19,7 +26,13 @@ public class ItemBucket extends Item
 
     public ItemBucket(Block p_i45331_1_)
     {
-        this.maxStackSize = 1;
+        // PaperSpigot start - Stackable Buckets
+        if ((p_i45331_1_ == Blocks.lava) || (p_i45331_1_ == Blocks.water)) {
+            this.maxStackSize = org.bukkit.Material.BUCKET.getMaxStackSize();
+        } else {
+            this.maxStackSize = 1;
+        }
+        // PaperSpigot end
         this.isFull = p_i45331_1_;
         this.setCreativeTab(CreativeTabs.tabMisc);
     }
@@ -83,23 +96,52 @@ public class ItemBucket extends Item
 
                     if (material == Material.water && l == 0)
                     {
+                        // CraftBukkit start
+                        PlayerBucketFillEvent cbEvent = CraftEventFactory.callPlayerBucketFillEvent(p_77659_3_, i, j, k, -1, p_77659_1_, Items.water_bucket);
+
+                        if (cbEvent.isCancelled())
+                        {
+                            return p_77659_1_;
+                        }
+
+                        // CraftBukkit end
                         p_77659_2_.setBlockToAir(i, j, k);
-                        return this.func_150910_a(p_77659_1_, p_77659_3_, Items.water_bucket);
+                        return this.func_150910_a(p_77659_1_, p_77659_3_, Items.water_bucket, cbEvent.getItemStack()); // CraftBukkit - added Event stack
                     }
 
                     if (material == Material.lava && l == 0)
                     {
+                        // CraftBukkit start
+                        PlayerBucketFillEvent cbEvent = CraftEventFactory.callPlayerBucketFillEvent(p_77659_3_, i, j, k, -1, p_77659_1_, Items.lava_bucket);
+
+                        if (cbEvent.isCancelled())
+                        {
+                            return p_77659_1_;
+                        }
+
+                        // CraftBukkit end
                         p_77659_2_.setBlockToAir(i, j, k);
-                        return this.func_150910_a(p_77659_1_, p_77659_3_, Items.lava_bucket);
+                        return this.func_150910_a(p_77659_1_, p_77659_3_, Items.lava_bucket, cbEvent.getItemStack()); // CraftBukkit - added Event stack
                     }
                 }
                 else
                 {
                     if (this.isFull == Blocks.air)
                     {
-                        return new ItemStack(Items.bucket);
+                        // CraftBukkit start
+                        PlayerBucketEmptyEvent cbEvent = CraftEventFactory.callPlayerBucketEmptyEvent(p_77659_3_, i, j, k, movingobjectposition.sideHit, p_77659_1_);
+
+                        if (cbEvent.isCancelled())
+                        {
+                            return p_77659_1_;
+                        }
+
+                        return CraftItemStack.asNMSCopy(cbEvent.getItemStack());
                     }
 
+                    int clickedX = i, clickedY = j, clickedZ = k;
+                    // CraftBukkit end
+
                     if (movingobjectposition.sideHit == 0)
                     {
                         --j;
@@ -135,9 +177,19 @@ public class ItemBucket extends Item
                         return p_77659_1_;
                     }
 
+                    // CraftBukkit start
+                    PlayerBucketEmptyEvent cbEvent = CraftEventFactory.callPlayerBucketEmptyEvent(p_77659_3_, clickedX, clickedY, clickedZ, movingobjectposition.sideHit, p_77659_1_);
+
+                    if (cbEvent.isCancelled())
+                    {
+                        return p_77659_1_;
+                    }
+
+                    // CraftBukkit end
+
                     if (this.tryPlaceContainedLiquid(p_77659_2_, i, j, k) && !p_77659_3_.capabilities.isCreativeMode)
                     {
-                        return new ItemStack(Items.bucket);
+                        return CraftItemStack.asNMSCopy(cbEvent.getItemStack()); // CraftBukkit
                     }
                 }
             }
@@ -146,24 +198,32 @@ public class ItemBucket extends Item
         }
     }
 
+    // Cauldron start - vanilla compatibility
     private ItemStack func_150910_a(ItemStack p_150910_1_, EntityPlayer p_150910_2_, Item p_150910_3_)
     {
-        if (p_150910_2_.capabilities.isCreativeMode)
+        return this.func_150910_a(p_150910_1_, p_150910_2_, p_150910_3_, null);
+    }
+    // Cauldron end
+
+    // CraftBukkit - added ob.ItemStack result - TODO: Is this... the right way to handle this?
+    private ItemStack func_150910_a(ItemStack itemstack, EntityPlayer entityplayer, Item item, org.bukkit.inventory.ItemStack result)
+    {
+        if (entityplayer.capabilities.isCreativeMode)
         {
-            return p_150910_1_;
+            return itemstack;
         }
-        else if (--p_150910_1_.stackSize <= 0)
+        else if (--itemstack.stackSize <= 0)
         {
-            return new ItemStack(p_150910_3_);
+            return CraftItemStack.asNMSCopy(result); // CraftBukkit
         }
         else
         {
-            if (!p_150910_2_.inventory.addItemStackToInventory(new ItemStack(p_150910_3_)))
+            if (!entityplayer.inventory.addItemStackToInventory(CraftItemStack.asNMSCopy(result)))   // CraftBukkit
             {
-                p_150910_2_.dropPlayerItemWithRandomChoice(new ItemStack(p_150910_3_, 1, 0), false);
+                entityplayer.dropPlayerItemWithRandomChoice(CraftItemStack.asNMSCopy(result), false); // CraftBukkit
             }
 
-            return p_150910_1_;
+            return itemstack;
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemDye.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemDye.java
index 4e692ea..b37eb73 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemDye.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemDye.java
@@ -23,6 +23,8 @@ import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.util.FakePlayerFactory;
 import net.minecraftforge.event.entity.player.BonemealEvent;
 
+import org.bukkit.event.entity.SheepDyeWoolEvent; // CraftBukkit
+
 public class ItemDye extends Item
 {
     public static final String[] field_150923_a = new String[] {"black", "red", "green", "brown", "blue", "purple", "cyan", "silver", "gray", "pink", "lime", "yellow", "lightBlue", "magenta", "orange", "white"};
@@ -220,6 +222,18 @@ public class ItemDye extends Item
 
             if (!entitysheep.getSheared() && entitysheep.getFleeceColor() != i)
             {
+                // CraftBukkit start
+                byte bColor = (byte) i;
+                SheepDyeWoolEvent event = new SheepDyeWoolEvent((org.bukkit.entity.Sheep) entitysheep.getBukkitEntity(), org.bukkit.DyeColor.getByData(bColor));
+                entitysheep.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return false;
+                }
+
+                i = (byte) event.getColor().getWoolData();
+                // CraftBukkit end
                 entitysheep.setFleeceColor(i);
                 --p_111207_1_.stackSize;
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemEmptyMap.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemEmptyMap.java
index 969ed49..0825e15 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemEmptyMap.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemEmptyMap.java
@@ -27,6 +27,7 @@ public class ItemEmptyMap extends ItemMapBase
         mapdata.zCenter = (int)(Math.round(p_77659_3_.posZ / (double)i) * (long)i);
         mapdata.dimension = p_77659_2_.provider.dimensionId;
         mapdata.markDirty();
+        org.bukkit.craftbukkit.event.CraftEventFactory.callEvent(new org.bukkit.event.server.MapInitializeEvent(mapdata.mapView)); // CraftBukkit
         --p_77659_1_.stackSize;
 
         if (p_77659_1_.stackSize <= 0)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemFireball.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemFireball.java
index 7e9fa56..f0e3725 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemFireball.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemFireball.java
@@ -61,6 +61,18 @@ public class ItemFireball extends Item
             {
                 if (p_77648_3_.getBlock(p_77648_4_, p_77648_5_, p_77648_6_).getMaterial() == Material.air)
                 {
+                    // CraftBukkit start
+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(p_77648_3_, p_77648_4_, p_77648_5_, p_77648_6_, org.bukkit.event.block.BlockIgniteEvent.IgniteCause.FIREBALL, p_77648_2_).isCancelled())
+                    {
+                        if (!p_77648_2_.capabilities.isCreativeMode)
+                        {
+                            --p_77648_1_.stackSize;
+                        }
+
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     p_77648_3_.playSoundEffect((double)p_77648_4_ + 0.5D, (double)p_77648_5_ + 0.5D, (double)p_77648_6_ + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
                     p_77648_3_.setBlock(p_77648_4_, p_77648_5_, p_77648_6_, Blocks.fire);
                 }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemFishingRod.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemFishingRod.java
index 694c831..52e1f04 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemFishingRod.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemFishingRod.java
@@ -9,6 +9,8 @@ import net.minecraft.entity.projectile.EntityFishHook;
 import net.minecraft.util.IIcon;
 import net.minecraft.world.World;
 
+import org.bukkit.event.player.PlayerFishEvent; // CraftBukkit
+
 public class ItemFishingRod extends Item
 {
     @SideOnly(Side.CLIENT)
@@ -44,11 +46,22 @@ public class ItemFishingRod extends Item
         }
         else
         {
+            // CraftBukkit start
+            EntityFishHook hook = new EntityFishHook(p_77659_2_, p_77659_3_);
+            PlayerFishEvent playerFishEvent = new PlayerFishEvent((org.bukkit.entity.Player) p_77659_3_.getBukkitEntity(), null, (org.bukkit.entity.Fish) hook.getBukkitEntity(), PlayerFishEvent.State.FISHING);
+            p_77659_2_.getServer().getPluginManager().callEvent(playerFishEvent);
+
+            if (playerFishEvent.isCancelled())
+            {
+                return p_77659_1_;
+            }
+
+            // CraftBukkit end
             p_77659_2_.playSoundAtEntity(p_77659_3_, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
 
             if (!p_77659_2_.isRemote)
             {
-                p_77659_2_.spawnEntityInWorld(new EntityFishHook(p_77659_2_, p_77659_3_));
+                p_77659_2_.spawnEntityInWorld(hook); // CraftBukkit - moved creation up
             }
 
             p_77659_3_.swingItem();
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemFlintAndSteel.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemFlintAndSteel.java
index 3f9aa54..644a0d4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemFlintAndSteel.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemFlintAndSteel.java
@@ -6,6 +6,11 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
+
 public class ItemFlintAndSteel extends Item
 {
     private static final String __OBFID = "CL_00000035";
@@ -19,6 +24,8 @@ public class ItemFlintAndSteel extends Item
 
     public boolean onItemUse(ItemStack p_77648_1_, EntityPlayer p_77648_2_, World p_77648_3_, int p_77648_4_, int p_77648_5_, int p_77648_6_, int p_77648_7_, float p_77648_8_, float p_77648_9_, float p_77648_10_)
     {
+        int clickedX = p_77648_4_, clickedY = p_77648_5_, clickedZ = p_77648_6_; // CraftBukkit
+
         if (p_77648_7_ == 0)
         {
             --p_77648_5_;
@@ -57,8 +64,27 @@ public class ItemFlintAndSteel extends Item
         {
             if (p_77648_3_.isAirBlock(p_77648_4_, p_77648_5_, p_77648_6_))
             {
+                // CraftBukkit start - Store the clicked block
+                if (CraftEventFactory.callBlockIgniteEvent(p_77648_3_, p_77648_4_, p_77648_5_, p_77648_6_, org.bukkit.event.block.BlockIgniteEvent.IgniteCause.FLINT_AND_STEEL, p_77648_2_).isCancelled())
+                {
+                    p_77648_1_.damageItem(1, p_77648_2_);
+                    return false;
+                }
+
+                CraftBlockState blockState = CraftBlockState.getBlockState(p_77648_3_, p_77648_4_, p_77648_5_, p_77648_6_);
+                // CraftBukkit end
                 p_77648_3_.playSoundEffect((double)p_77648_4_ + 0.5D, (double)p_77648_5_ + 0.5D, (double)p_77648_6_ + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
                 p_77648_3_.setBlock(p_77648_4_, p_77648_5_, p_77648_6_, Blocks.fire);
+                // CraftBukkit start
+                org.bukkit.event.block.BlockPlaceEvent placeEvent = CraftEventFactory.callBlockPlaceEvent(p_77648_3_, p_77648_2_, blockState, clickedX, clickedY, clickedZ);
+
+                if (placeEvent.isCancelled() || !placeEvent.canBuild())
+                {
+                    placeEvent.getBlockPlaced().setTypeIdAndData(0, (byte) 0, false);
+                    return false;
+                }
+
+                // CraftBukkit end
             }
 
             p_77648_1_.damageItem(1, p_77648_2_);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemHangingEntity.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemHangingEntity.java
index 2e25220..456a71c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemHangingEntity.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemHangingEntity.java
@@ -8,6 +8,12 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.Direction;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.entity.Player;
+import org.bukkit.event.hanging.HangingPlaceEvent;
+import org.bukkit.event.painting.PaintingPlaceEvent;
+// CraftBukkit end
+
 public class ItemHangingEntity extends Item
 {
     private final Class hangingEntityClass;
@@ -44,6 +50,28 @@ public class ItemHangingEntity extends Item
                 {
                     if (!p_77648_3_.isRemote)
                     {
+                        // CraftBukkit start
+                        Player who = (Player) p_77648_2_.getBukkitEntity();
+                        org.bukkit.block.Block blockClicked = p_77648_3_.getWorld().getBlockAt(p_77648_4_, p_77648_5_, p_77648_6_);
+                        org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(p_77648_7_);
+                        HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) entityhanging.getBukkitEntity(), who, blockClicked, blockFace);
+                        p_77648_3_.getServer().getPluginManager().callEvent(event);
+                        PaintingPlaceEvent paintingEvent = null;
+
+                        if (entityhanging instanceof EntityPainting)
+                        {
+                            // Fire old painting event until it can be removed
+                            paintingEvent = new PaintingPlaceEvent((org.bukkit.entity.Painting) entityhanging.getBukkitEntity(), who, blockClicked, blockFace);
+                            paintingEvent.setCancelled(event.isCancelled());
+                            p_77648_3_.getServer().getPluginManager().callEvent(paintingEvent);
+                        }
+
+                        if (event.isCancelled() || (paintingEvent != null && paintingEvent.isCancelled()))
+                        {
+                            return false;
+                        }
+
+                        // CraftBukkit end
                         p_77648_3_.spawnEntityInWorld(entityhanging);
                     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemLead.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemLead.java
index 8b4d1bb..8c1a14c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemLead.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemLead.java
@@ -10,6 +10,8 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.world.World;
 
+import org.bukkit.event.hanging.HangingPlaceEvent; // CraftBukkit
+
 public class ItemLead extends Item
 {
     private static final String __OBFID = "CL_00000045";
@@ -61,8 +63,26 @@ public class ItemLead extends Item
                     if (entityleashknot == null)
                     {
                         entityleashknot = EntityLeashKnot.func_110129_a(p_150909_1_, p_150909_2_, p_150909_3_, p_150909_4_);
+                        // CraftBukkit start
+                        HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) entityleashknot.getBukkitEntity(), p_150909_0_ != null ? (org.bukkit.entity.Player) p_150909_0_.getBukkitEntity() : null, p_150909_1_.getWorld().getBlockAt(p_150909_2_, p_150909_3_, p_150909_4_), org.bukkit.block.BlockFace.SELF);
+                        p_150909_1_.getServer().getPluginManager().callEvent(event);
+
+                        if (event.isCancelled())
+                        {
+                            entityleashknot.setDead();
+                            return false;
+                        }
+
+                        // CraftBukkit end
+                    }
+
+                    // CraftBukkit start
+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerLeashEntityEvent(entityliving, entityleashknot, p_150909_0_).isCancelled())
+                    {
+                        continue;
                     }
 
+                    // CraftBukkit end
                     entityliving.setLeashedToEntity(entityleashknot, true);
                     flag = true;
                 }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemLilyPad.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemLilyPad.java
index bcffa49..c2eeae7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemLilyPad.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemLilyPad.java
@@ -48,7 +48,17 @@ public class ItemLilyPad extends ItemColored
                 {
                     // special case for handling block placement with water lilies
                     net.minecraftforge.common.util.BlockSnapshot blocksnapshot = net.minecraftforge.common.util.BlockSnapshot.getBlockSnapshot(p_77659_2_, i, j + 1, k);
+                    // Cauldron start - special case for handling block placement with water lilies
+                    org.bukkit.block.BlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(p_77659_2_, i, j + 1, k);
                     p_77659_2_.setBlock(i, j + 1, k, Blocks.waterlily);
+                    org.bukkit.event.block.BlockPlaceEvent placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(p_77659_2_,
+                            p_77659_3_, blockstate, i, j, k);
+                    if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild()))
+                    {
+                        blockstate.update(true, false);
+                        return p_77659_1_;
+                    }
+                    // Cauldron end
                     if (net.minecraftforge.event.ForgeEventFactory.onPlayerBlockPlace(p_77659_3_, blocksnapshot, net.minecraftforge.common.util.ForgeDirection.UP).isCanceled()) 
                     {
                         blocksnapshot.restore(true, false);
@@ -66,6 +76,15 @@ public class ItemLilyPad extends ItemColored
         }
     }
 
+    // Cauldron start
+    public boolean onItemUse(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, World par3World, int par4, int par5, int par6, int par7, float par8,
+            float par9, float par10)
+    {
+        cpw.mods.fml.relauncher.FMLRelaunchLog.info("onItemUse par1ItemStack = " + par1ItemStack);
+        return super.onItemUse(par1ItemStack, par2EntityPlayer, par3World, par4, par5, par6, par7, par8, par9, par10);
+    }
+    // Cauldron end
+
     @SideOnly(Side.CLIENT)
     public int getColorFromItemStack(ItemStack p_82790_1_, int p_82790_2_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemMap.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemMap.java
index 0174b5a..045e290 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemMap.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemMap.java
@@ -19,6 +19,11 @@ import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.storage.MapData;
 
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.event.server.MapInitializeEvent;
+// CraftBukkit end
+
 public class ItemMap extends ItemMapBase
 {
     private static final String __OBFID = "CL_00000047";
@@ -56,10 +61,14 @@ public class ItemMap extends ItemMapBase
             mapdata.scale = 3;
             int i = 128 * (1 << mapdata.scale);
             mapdata.xCenter = Math.round((float)p_77873_2_.getWorldInfo().getSpawnX() / (float)i) * i;
-            mapdata.zCenter = Math.round((float)(p_77873_2_.getWorldInfo().getSpawnZ() / i)) * i;
+            mapdata.zCenter = Math.round((float) p_77873_2_.getWorldInfo().getSpawnZ() / (float)i) * i;
             mapdata.dimension = p_77873_2_.provider.dimensionId;
             mapdata.markDirty();
             p_77873_2_.setItemData(s, mapdata);
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(mapdata.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
 
         return mapdata;
@@ -279,6 +288,10 @@ public class ItemMap extends ItemMapBase
             mapdata1.dimension = mapdata.dimension;
             mapdata1.markDirty();
             p_77622_2_.setItemData("map_" + p_77622_1_.getItemDamage(), mapdata1);
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(mapdata1.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemMinecart.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemMinecart.java
index dd45541..f6cf42a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemMinecart.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemMinecart.java
@@ -79,6 +79,15 @@ public class ItemMinecart extends Item
         {
             if (!p_77648_3_.isRemote)
             {
+                // CraftBukkit start - Minecarts
+                org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(p_77648_2_, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, p_77648_4_, p_77648_5_, p_77648_6_, p_77648_7_, p_77648_1_);
+
+                if (event.isCancelled())
+                {
+                    return false;
+                }
+
+                // CraftBukkit end
                 EntityMinecart entityminecart = EntityMinecart.createMinecart(p_77648_3_, (double)((float)p_77648_4_ + 0.5F), (double)((float)p_77648_5_ + 0.5F), (double)((float)p_77648_6_ + 0.5F), this.minecartType);
 
                 if (p_77648_1_.hasDisplayName())
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemMonsterPlacer.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemMonsterPlacer.java
index 2ac413d..e15944b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemMonsterPlacer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemMonsterPlacer.java
@@ -55,7 +55,7 @@ public class ItemMonsterPlacer extends Item
 
     public boolean onItemUse(ItemStack p_77648_1_, EntityPlayer p_77648_2_, World p_77648_3_, int p_77648_4_, int p_77648_5_, int p_77648_6_, int p_77648_7_, float p_77648_8_, float p_77648_9_, float p_77648_10_)
     {
-        if (p_77648_3_.isRemote)
+        if (p_77648_3_.isRemote || p_77648_1_.getItemDamage() == 48 || p_77648_1_.getItemDamage() == 49 || p_77648_1_.getItemDamage() == 63 || p_77648_1_.getItemDamage() == 64)   // CraftBukkit
         {
             return true;
         }
@@ -168,7 +168,7 @@ public class ItemMonsterPlacer extends Item
                     entityliving.rotationYawHead = entityliving.rotationYaw;
                     entityliving.renderYawOffset = entityliving.rotationYaw;
                     entityliving.onSpawnWithEgg((IEntityLivingData)null);
-                    p_77840_0_.spawnEntityInWorld(entity);
+                    p_77840_0_.addEntity(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG); // CraftBukkit
                     entityliving.playLivingSound();
                 }
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemShears.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemShears.java
index e6dd15d..422210b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemShears.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemShears.java
@@ -3,6 +3,8 @@ package net.minecraft.item;
 import java.util.ArrayList;
 import java.util.Random;
 
+import org.bukkit.event.player.PlayerShearEntityEvent;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.creativetab.CreativeTabs;
@@ -61,6 +63,16 @@ public class ItemShears extends Item
             IShearable target = (IShearable)entity;
             if (target.isShearable(itemstack, entity.worldObj, (int)entity.posX, (int)entity.posY, (int)entity.posZ))
             {
+                // Cauldron start
+                PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) player.getBukkitEntity(), entity.getBukkitEntity());
+                player.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return false;
+                }
+
+                // Cauldron end
                 ArrayList<ItemStack> drops = target.onSheared(itemstack, entity.worldObj, (int)entity.posX, (int)entity.posY, (int)entity.posZ,
                         EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId, itemstack));
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/ItemStack.java ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemStack.java
index 1270e5d..5619d3d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/ItemStack.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/ItemStack.java
@@ -2,8 +2,11 @@ package net.minecraft.item;
 
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
+
+import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -35,6 +39,21 @@ import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
 import net.minecraftforge.event.ForgeEventFactory;
 
+import org.bukkit.craftbukkit.util.CraftMagicNumbers; // CraftBukkit
+
+import net.minecraft.entity.player.EntityPlayerMP; // Spigot
+// Cauldron start
+import net.minecraft.block.BlockSapling;
+import net.minecraft.block.BlockMushroom;
+
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.entity.Player;
+import org.bukkit.event.world.StructureGrowEvent;
+// Cauldron end
+
 public final class ItemStack
 {
     public static final DecimalFormat field_111284_a = new DecimalFormat("#.###");
@@ -43,7 +62,12 @@ public final class ItemStack
     private Item field_151002_e;
     public NBTTagCompound stackTagCompound;
     int itemDamage;
-    private EntityItemFrame itemFrame;
+    // Cauldron - due to a bug in Gson(https://code.google.com/p/google-gson/issues/detail?id=440), a stackoverflow 
+    //         can occur when gson attempts to resolve a field of a class that points to itself.
+    //         As a temporary workaround, we will prevent serialization for this object until the bug is fixed.
+    //         This fixes EE3's serialization of ItemStack.
+    private transient EntityItemFrame itemFrame;
+    public static EntityPlayer currentPlayer; // Cauldron - reference to current player calling onItemUse
     private static final String __OBFID = "CL_00000043";
 
     private cpw.mods.fml.common.registry.RegistryDelegate<Item> delegate;
@@ -126,12 +150,14 @@ public final class ItemStack
     public boolean tryPlaceItemIntoWorld(EntityPlayer p_77943_1_, World p_77943_2_, int p_77943_3_, int p_77943_4_, int p_77943_5_, int p_77943_6_, float p_77943_7_, float p_77943_8_, float p_77943_9_)
     {
         if (!p_77943_2_.isRemote) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(this, p_77943_1_, p_77943_2_, p_77943_3_, p_77943_4_, p_77943_5_, p_77943_6_, p_77943_7_, p_77943_8_, p_77943_9_);
-        boolean flag = this.getItem().onItemUse(this, p_77943_1_, p_77943_2_, p_77943_3_, p_77943_4_, p_77943_5_, p_77943_6_, p_77943_7_, p_77943_8_, p_77943_9_);
 
+        // Cauldron start - handle all placement events here
+        boolean flag = this.getItem().onItemUse(this, p_77943_1_, p_77943_2_, p_77943_3_, p_77943_4_, p_77943_5_, p_77943_6_, p_77943_7_, p_77943_8_, p_77943_9_);
         if (flag)
         {
             p_77943_1_.addStat(StatList.objectUseStats[Item.getIdFromItem(this.field_151002_e)], 1);
         }
+        // Cauldron end
 
         return flag;
     }
@@ -227,8 +253,22 @@ public final class ItemStack
         return getItem().getMaxDamage(this);
     }
 
+    // Spigot start
+
+    /**
+     * Attempts to damage the ItemStack with par1 amount of damage, If the ItemStack has the Unbreaking enchantment
+     * there is a chance for each point of damage to be negated. Returns true if it takes more damage than
+     * getMaxDamage(). Returns false otherwise or if the ItemStack can't be damaged or if all points of damage are
+     * negated.
+     */
     public boolean attemptDamageItem(int p_96631_1_, Random p_96631_2_)
     {
+        return isDamaged(p_96631_1_, p_96631_2_, null);
+    }
+
+    public boolean isDamaged(int p_96631_1_, Random p_96631_2_, EntityLivingBase entitylivingbase)
+    {
+        // Spigot end
         if (!this.isItemStackDamageable())
         {
             return false;
@@ -250,6 +290,23 @@ public final class ItemStack
 
                 p_96631_1_ -= k;
 
+                // Spigot start
+                if (entitylivingbase instanceof EntityPlayerMP)
+                {
+                    org.bukkit.craftbukkit.inventory.CraftItemStack item = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(this);
+                    org.bukkit.event.player.PlayerItemDamageEvent event = new org.bukkit.event.player.PlayerItemDamageEvent(
+                            (org.bukkit.entity.Player) entitylivingbase.getBukkitEntity(), item, p_96631_1_);
+                    org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        return false;
+                    }
+
+                    p_96631_1_ = event.getDamage();
+                }
+                // Spigot end
+
                 if (p_96631_1_ <= 0)
                 {
                     return false;
@@ -267,7 +324,7 @@ public final class ItemStack
         {
             if (this.isItemStackDamageable())
             {
-                if (this.attemptDamageItem(p_77972_1_, p_77972_2_.getRNG()))
+                if (this.isDamaged(p_77972_1_, p_77972_2_.getRNG(), p_77972_2_))
                 {
                     p_77972_2_.renderBrokenItemStack(this);
                     --this.stackSize;
@@ -288,6 +345,12 @@ public final class ItemStack
                         this.stackSize = 0;
                     }
 
+                    // CraftBukkit start - Check for item breaking
+                    if (this.stackSize == 0 && p_77972_2_ instanceof EntityPlayer)
+                    {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemBreakEvent((EntityPlayer) p_77972_2_, this);
+                    }
+                    // CraftBukkit end
                     this.itemDamage = 0;
                 }
             }
@@ -419,6 +482,7 @@ public final class ItemStack
 
     public void setTagCompound(NBTTagCompound p_77982_1_)
     {
+        // Cauldron - do not alter name of compound. Fixes Ars Magica 2 Spellbooks
         this.stackTagCompound = p_77982_1_;
     }
 
@@ -768,4 +832,12 @@ public final class ItemStack
 
         return ichatcomponent;
     }
+    
+    // Spigot start
+    public static boolean fastMatches(ItemStack is1, ItemStack is2) {
+        if (is1 == null && is2 == null) return true;
+        if (is1 != null && is2 != null) return is1.stackSize == is2.stackSize && is1.field_151002_e == is2.field_151002_e && is1.itemDamage == is2.itemDamage;
+        return false;
+    }
+    // Spigot end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/CraftingManager.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/CraftingManager.java
index 4c5813a..8e9ea76 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/CraftingManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/CraftingManager.java
@@ -13,10 +13,17 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class CraftingManager
 {
     private static final CraftingManager instance = new CraftingManager();
-    private List recipes = new ArrayList();
+    // CraftBukkit start
+    /** A list of all the recipes added */
+    public List recipes = new ArrayList(); // private -> public
+    public IRecipe lastRecipe;
+    public org.bukkit.inventory.InventoryView lastCraftView;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00000090";
 
     public static final CraftingManager getInstance()
@@ -24,7 +31,8 @@ public class CraftingManager
         return instance;
     }
 
-    private CraftingManager()
+    // CraftBukkit - private -> public
+    public CraftingManager()
     {
         (new RecipesTools()).addRecipes(this);
         (new RecipesWeapons()).addRecipes(this);
@@ -152,6 +160,23 @@ public class CraftingManager
         this.addShapelessRecipe(new ItemStack(Items.fire_charge, 3), new Object[] {Items.gunpowder, Items.blaze_powder, new ItemStack(Items.coal, 1, 1)});
         this.addRecipe(new ItemStack(Blocks.daylight_detector), new Object[] {"GGG", "QQQ", "WWW", 'G', Blocks.glass, 'Q', Items.quartz, 'W', Blocks.wooden_slab});
         this.addRecipe(new ItemStack(Blocks.hopper), new Object[] {"I I", "ICI", " I ", 'I', Items.iron_ingot, 'C', Blocks.chest});
+        /*Collections.sort(this.recipes, new Comparator() // CraftBukkit - moved below
+        {
+            private static final String __OBFID = "CL_00000091";
+            public int compare(IRecipe par1IRecipe, IRecipe par2IRecipe)
+            {
+                return par1IRecipe instanceof ShapelessRecipes && par2IRecipe instanceof ShapedRecipes ? 1 : (par2IRecipe instanceof ShapelessRecipes && par1IRecipe instanceof ShapedRecipes ? -1 : (par2IRecipe.getRecipeSize() < par1IRecipe.getRecipeSize() ? -1 : (par2IRecipe.getRecipeSize() > par1IRecipe.getRecipeSize() ? 1 : 0)));
+            }
+            public int compare(Object par1Obj, Object par2Obj)
+            {
+                return this.compare((IRecipe)par1Obj, (IRecipe)par2Obj);
+            }
+        });*/
+         this.sort(); // CraftBukkit - call new sort method
+    }
+
+    public void sort()
+    {
         Collections.sort(this.recipes, new Comparator()
         {
             private static final String __OBFID = "CL_00000091";
@@ -312,7 +337,22 @@ public class CraftingManager
                 i1 = 0;
             }
 
-            return new ItemStack(itemstack.getItem(), 1, i1);
+            // Cauldron start - vanilla compatibility
+            if (p_82787_1_.resultInventory == null)
+            {
+                return new ItemStack(itemstack.getItem(), 1, i1);
+            }
+            // Cauldron end
+            // CraftBukkit start - Construct a dummy repair recipe
+            ItemStack result = new ItemStack(itemstack.getItem(), 1, i1);
+            List<ItemStack> ingredients = new ArrayList<ItemStack>();
+            ingredients.add(itemstack.copy());
+            ingredients.add(itemstack1.copy());
+            ShapelessRecipes recipe = new ShapelessRecipes(result.copy(), ingredients);
+            p_82787_1_.currentRecipe = recipe;
+            result = CraftEventFactory.callPreCraftEvent(p_82787_1_, result, lastCraftView, true);
+            return result;
+            // CraftBukkit end
         }
         else
         {
@@ -320,12 +360,23 @@ public class CraftingManager
             {
                 IRecipe irecipe = (IRecipe)this.recipes.get(j);
 
-                if (irecipe.matches(p_82787_1_, p_82787_2_))
+                if (irecipe.matches(p_82787_1_, p_82787_2_) && p_82787_1_.resultInventory != null) // Cauldron - add null check for vanilla compatibility
+                {
+                    // CraftBukkit start - INVENTORY_PRE_CRAFT event
+                    p_82787_1_.currentRecipe = irecipe;
+                    ItemStack result = irecipe.getCraftingResult(p_82787_1_);
+                    return CraftEventFactory.callPreCraftEvent(p_82787_1_, result, lastCraftView, false);
+                    // CraftBukkit end
+                }
+                // Cauldron start - vanilla
+                else if (irecipe.matches(p_82787_1_, p_82787_2_))
                 {
                     return irecipe.getCraftingResult(p_82787_1_);
                 }
+                // Cauldron end
             }
 
+            p_82787_1_.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
             return null;
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/FurnaceRecipes.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/FurnaceRecipes.java
index 49e90c9..d5bea01 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/FurnaceRecipes.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/FurnaceRecipes.java
@@ -14,8 +14,9 @@ import net.minecraft.item.ItemStack;
 public class FurnaceRecipes
 {
     private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-    private Map smeltingList = new HashMap();
+    public Map smeltingList = new HashMap(); // CraftBukkit - private -> public
     private Map experienceList = new HashMap();
+    public Map customRecipes = new HashMap(); // CraftBukkit
     private static final String __OBFID = "CL_00000085";
 
     public static FurnaceRecipes smelting()
@@ -23,7 +24,7 @@ public class FurnaceRecipes
         return smeltingBase;
     }
 
-    private FurnaceRecipes()
+    public FurnaceRecipes()   // CraftBukkit - private -> public
     {
         this.func_151393_a(Blocks.iron_ore, new ItemStack(Items.iron_ingot), 0.7F);
         this.func_151393_a(Blocks.gold_ore, new ItemStack(Items.gold_ingot), 1.0F);
@@ -76,16 +77,37 @@ public class FurnaceRecipes
         this.experienceList.put(p_151394_2_, Float.valueOf(p_151394_3_));
     }
 
+    // CraftBukkit start
+    public void registerRecipe(ItemStack itemstack, ItemStack itemstack1)
+    {
+        this.customRecipes.put(itemstack, itemstack1);
+    }
+    // CraftBukkit end
+
     public ItemStack getSmeltingResult(ItemStack p_151395_1_)
     {
-        Iterator iterator = this.smeltingList.entrySet().iterator();
+        // CraftBukkit start
+        boolean vanilla = false;
+        Iterator iterator = this.customRecipes.entrySet().iterator();
+        // CraftBukkit end
         Entry entry;
 
         do
         {
             if (!iterator.hasNext())
             {
-                return null;
+                // CraftBukkit start
+                if (!vanilla)
+                {
+                    iterator = this.smeltingList.entrySet().iterator();
+                    vanilla = true;
+                }
+                else
+                {
+                    return null;
+                }
+
+                // CraftBukkit end
             }
 
             entry = (Entry)iterator.next();
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/IRecipe.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/IRecipe.java
index 8324c30..4381e24 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/IRecipe.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/IRecipe.java
@@ -13,4 +13,6 @@ public interface IRecipe
     int getRecipeSize();
 
     ItemStack getRecipeOutput();
+
+    org.bukkit.inventory.Recipe toBukkitRecipe(); // CraftBukkit
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipeBookCloning.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipeBookCloning.java
index dfb6f5a..a43ebb4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipeBookCloning.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipeBookCloning.java
@@ -6,10 +6,17 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.World;
 
-public class RecipeBookCloning implements IRecipe
+public class RecipeBookCloning extends ShapelessRecipes implements IRecipe   // CraftBukkit - added extends
 {
     private static final String __OBFID = "CL_00000081";
 
+    // CraftBukkit start - Delegate to new parent class
+    public RecipeBookCloning()
+    {
+        super(new ItemStack(Items.written_book, 0, -1), java.util.Arrays.asList(new ItemStack(Items.writable_book, 0, 0)));
+    }
+    // CraftBukkit end
+
     public boolean matches(InventoryCrafting p_77569_1_, World p_77569_2_)
     {
         int i = 0;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipeFireworks.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipeFireworks.java
index 4bfa038..14fd847 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipeFireworks.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipeFireworks.java
@@ -9,11 +9,18 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.world.World;
 
-public class RecipeFireworks implements IRecipe
+public class RecipeFireworks extends ShapelessRecipes implements IRecipe   // CraftBukkit - added extends
 {
     private ItemStack field_92102_a;
     private static final String __OBFID = "CL_00000083";
 
+    // CraftBukkit start - Delegate to new parent class with bogus info
+    public RecipeFireworks()
+    {
+        super(new ItemStack(Items.fireworks, 0, 0), java.util.Arrays.asList(new ItemStack(Items.gunpowder, 0, 5)));
+    }
+    // CraftBukkit end
+
     public boolean matches(InventoryCrafting p_77569_1_, World p_77569_2_)
     {
         this.field_92102_a = null;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipesArmorDyes.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipesArmorDyes.java
index 5d66073..7fdb908 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipesArmorDyes.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipesArmorDyes.java
@@ -9,10 +9,17 @@ import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
-public class RecipesArmorDyes implements IRecipe
+public class RecipesArmorDyes extends ShapelessRecipes implements IRecipe   // CraftBukkit - added extends
 {
     private static final String __OBFID = "CL_00000079";
 
+    // CraftBukkit start - Delegate to new parent class with bogus info
+    public RecipesArmorDyes()
+    {
+        super(new ItemStack(Items.leather_helmet, 0, 0), java.util.Arrays.asList(new ItemStack(Items.dye, 0, 5)));
+    }
+    // CraftBukkit end
+
     public boolean matches(InventoryCrafting p_77569_1_, World p_77569_2_)
     {
         ItemStack itemstack = null;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipesMapCloning.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipesMapCloning.java
index af033a8..665bc4d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/RecipesMapCloning.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/RecipesMapCloning.java
@@ -5,10 +5,17 @@ import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
-public class RecipesMapCloning implements IRecipe
+public class RecipesMapCloning extends ShapelessRecipes implements IRecipe   // CraftBukkit - added extends
 {
     private static final String __OBFID = "CL_00000087";
 
+    // CraftBukkit start - Delegate to new parent class
+    public RecipesMapCloning()
+    {
+        super(new ItemStack(Items.filled_map, 0, -1), java.util.Arrays.asList(new ItemStack(Items.map, 0, 0)));
+    }
+    // CraftBukkit end
+
     public boolean matches(InventoryCrafting p_77569_1_, World p_77569_2_)
     {
         int i = 0;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/ShapedRecipes.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/ShapedRecipes.java
index 2b8cf0e..7090ab1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/ShapedRecipes.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/ShapedRecipes.java
@@ -5,6 +5,11 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
+// CraftBukkit end
+
 public class ShapedRecipes implements IRecipe
 {
     public final int recipeWidth;
@@ -22,6 +27,77 @@ public class ShapedRecipes implements IRecipe
         this.recipeOutput = p_i1917_4_;
     }
 
+    // CraftBukkit start
+    public org.bukkit.inventory.ShapedRecipe toBukkitRecipe()
+    {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.recipeOutput);
+        CraftShapedRecipe recipe = new CraftShapedRecipe(result, this);
+
+        switch (this.recipeHeight)
+        {
+            case 1:
+                switch (this.recipeWidth)
+                {
+                    case 1:
+                        recipe.shape("a");
+                        break;
+                    case 2:
+                        recipe.shape("ab");
+                        break;
+                    case 3:
+                        recipe.shape("abc");
+                        break;
+                }
+
+                break;
+            case 2:
+                switch (this.recipeWidth)
+                {
+                    case 1:
+                        recipe.shape("a", "b");
+                        break;
+                    case 2:
+                        recipe.shape("ab", "cd");
+                        break;
+                    case 3:
+                        recipe.shape("abc", "def");
+                        break;
+                }
+
+                break;
+            case 3:
+                switch (this.recipeWidth)
+                {
+                    case 1:
+                        recipe.shape("a", "b", "c");
+                        break;
+                    case 2:
+                        recipe.shape("ab", "cd", "ef");
+                        break;
+                    case 3:
+                        recipe.shape("abc", "def", "ghi");
+                        break;
+                }
+
+                break;
+        }
+
+        char c = 'a';
+
+        for (ItemStack stack : this.recipeItems)
+        {
+            if (stack != null)
+            {
+                recipe.setIngredient(c, org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), stack.getItemDamage());
+            }
+
+            c++;
+        }
+
+        return recipe;
+    }
+    // CraftBukkit end
+
     public ItemStack getRecipeOutput()
     {
         return this.recipeOutput;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java
index c1ed2f6..bb88739 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java
@@ -7,6 +7,11 @@ import net.minecraft.inventory.InventoryCrafting;
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
+// CraftBukkit end
+
 public class ShapelessRecipes implements IRecipe
 {
     private final ItemStack recipeOutput;
@@ -19,6 +24,25 @@ public class ShapelessRecipes implements IRecipe
         this.recipeItems = p_i1918_2_;
     }
 
+    // CraftBukkit start
+    @SuppressWarnings("unchecked")
+    public org.bukkit.inventory.ShapelessRecipe toBukkitRecipe()
+    {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.recipeOutput);
+        CraftShapelessRecipe recipe = new CraftShapelessRecipe(result, this);
+
+        for (ItemStack stack : (List<ItemStack>) this.recipeItems)
+        {
+            if (stack != null)
+            {
+                recipe.addIngredient(org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), stack.getItemDamage());
+            }
+        }
+
+        return recipe;
+    }
+    // CraftBukkit end
+
     public ItemStack getRecipeOutput()
     {
         return this.recipeOutput;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/NetHandlerPlayServer.java ./eclipse/cauldron/src/main/java/net/minecraft/network/NetHandlerPlayServer.java
index 82678d5..a2d097f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/NetHandlerPlayServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/NetHandlerPlayServer.java
@@ -13,6 +13,7 @@ import java.util.Date;
 import java.util.Iterator;
 import java.util.Random;
 import java.util.concurrent.Callable;
+import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.crash.CrashReport;
@@ -32,6 +33,7 @@ import net.minecraft.inventory.ContainerBeacon;
 import net.minecraft.inventory.ContainerMerchant;
 import net.minecraft.inventory.ContainerRepair;
 import net.minecraft.inventory.Slot;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemEditableBook;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ItemWritableBook;
@@ -61,6 +63,7 @@ import net.minecraft.network.play.client.C17PacketCustomPayload;
 import net.minecraft.network.play.server.S00PacketKeepAlive;
 import net.minecraft.network.play.server.S02PacketChat;
 import net.minecraft.network.play.server.S08PacketPlayerPosLook;
+import net.minecraft.network.play.server.S1CPacketEntityMetadata;
 import net.minecraft.network.play.server.S23PacketBlockChange;
 import net.minecraft.network.play.server.S2FPacketSetSlot;
 import net.minecraft.network.play.server.S32PacketConfirmTransaction;
@@ -81,18 +84,74 @@ import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.IntHashMap;
 import net.minecraft.util.ReportedException;
+import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import net.minecraftforge.cauldron.CauldronUtils;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.MinecraftForge;
-import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.event.ServerChatEvent;
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;
-import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;
+
+// CraftBukkit start
+import java.io.UnsupportedEncodingException;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+import java.util.HashSet;
+
+import net.minecraft.entity.EntityLiving;
+import net.minecraft.init.Blocks;
+import net.minecraft.network.play.server.S05PacketSpawnPosition;
+import net.minecraft.network.play.server.S09PacketHeldItemChange;
+import net.minecraft.network.play.server.S1BPacketEntityAttach;
+import net.minecraft.network.play.server.S33PacketUpdateSign;
+import net.minecraft.util.MathHelper;
+import net.minecraft.util.MovingObjectPosition;
+import net.minecraft.util.Vec3;
+
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.craftbukkit.util.Waitable;
+
+import org.bukkit.Location;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.SignChangeEvent;
+import org.bukkit.event.inventory.ClickType;
+import org.bukkit.event.inventory.CraftItemEvent;
+import org.bukkit.event.inventory.InventoryAction;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.event.inventory.InventoryCreativeEvent;
+import org.bukkit.event.inventory.InventoryType.SlotType;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerAnimationEvent;
+import org.bukkit.event.player.PlayerChatEvent;
+import org.bukkit.event.player.PlayerCommandPreprocessEvent;
+import org.bukkit.event.player.PlayerInteractEntityEvent;
+import org.bukkit.event.player.PlayerItemHeldEvent;
+import org.bukkit.event.player.PlayerKickEvent;
+import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerToggleFlightEvent;
+import org.bukkit.event.player.PlayerToggleSneakEvent;
+import org.bukkit.event.player.PlayerToggleSprintEvent;
+import org.bukkit.inventory.CraftingInventory;
+import org.bukkit.inventory.InventoryView;
+import org.bukkit.util.NumberConversions;
+// CraftBukkit end
+// Cauldron start
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.event.inventory.InventoryType;
+// Cauldron end
 
 public class NetHandlerPlayServer implements INetHandlerPlayServer
 {
@@ -107,13 +166,12 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
     private long field_147379_i;
     private static Random field_147376_j = new Random();
     private long field_147377_k;
-    private int chatSpamThresholdCount;
+    private volatile int chatSpamThresholdCount; // Cauldron - set to volatile to fix multithreaded issues
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(NetHandlerPlayServer.class, CauldronUtils.deobfuscatedEnvironment() ? "chatSpamThresholdCount" : "fiel" + "d_147374_l"); // CraftBukkit - multithreaded field
     private int field_147375_m;
     private IntHashMap field_147372_n = new IntHashMap();
-    private double lastPosX;
-    private double lastPosY;
-    private double lastPosZ;
-    private boolean hasMoved = true;
+    public boolean hasMoved = true; // CraftBukkit - private -> public
+    private boolean processedDisconnect; // CraftBukkit - added
     private static final String __OBFID = "CL_00001452";
 
     public NetHandlerPlayServer(MinecraftServer p_i1530_1_, NetworkManager p_i1530_2_, EntityPlayerMP p_i1530_3_)
@@ -123,8 +181,41 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
         p_i1530_2_.setNetHandler(this);
         this.playerEntity = p_i1530_3_;
         p_i1530_3_.playerNetServerHandler = this;
+        // CraftBukkit start
+        this.server = p_i1530_1_.server;
     }
 
+    private final org.bukkit.craftbukkit.CraftServer server;
+    private int lastTick = MinecraftServer.currentTick;
+    private int lastDropTick = MinecraftServer.currentTick;
+    private int dropCount = 0;
+    private static final int SURVIVAL_PLACE_DISTANCE_SQUARED = 6 * 6;
+    private static final int CREATIVE_PLACE_DISTANCE_SQUARED = 7 * 7;
+
+    private double lastPosX = Double.MAX_VALUE;
+    private double lastPosY = Double.MAX_VALUE;
+    private double lastPosZ = Double.MAX_VALUE;
+    private float lastPitch = Float.MAX_VALUE;
+    private float lastYaw = Float.MAX_VALUE;
+    private boolean justTeleported = false;
+
+    // For the PacketPlayOutBlockPlace hack :(
+    Long lastPacket;
+
+    // Store the last block right clicked and what type it was
+    private Item lastMaterial;
+
+    // Cauldron - rename getPlayer -> getPlayerB() to disambiguate with FML's getPlayer() method of the same name (below)
+    // Plugins calling this method will be remapped appropriately, but CraftBukkit code should be updated
+    public CraftPlayer getPlayerB()
+    {
+        return (this.playerEntity == null) ? null : (CraftPlayer) this.playerEntity.getBukkitEntity();
+    }
+
+    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63,
+            64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
+    // CraftBukkit end
+
     public void onNetworkTick()
     {
         this.field_147366_g = false;
@@ -139,10 +230,16 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             this.sendPacket(new S00PacketKeepAlive(this.field_147378_h));
         }
 
+        // CraftBukkit start
+        for (int spam; (spam = this.chatSpamThresholdCount) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1);) ;
+
+        /* Use thread-safe field access instead
         if (this.chatSpamThresholdCount > 0)
         {
             --this.chatSpamThresholdCount;
         }
+        */
+        // CraftBukkit end
 
         if (this.field_147375_m > 0)
         {
@@ -162,6 +259,24 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void kickPlayerFromServer(String p_147360_1_)
     {
+        // CraftBukkit start
+        String leaveMessage = EnumChatFormatting.YELLOW + this.playerEntity.getCommandSenderName() + " left the game.";
+        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.playerEntity), p_147360_1_, leaveMessage);
+
+        if (this.server.getServer().isServerRunning())
+        {
+            this.server.getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled())
+        {
+            // Do not kick the player
+            return;
+        }
+
+        // Send the possibly modified leave message
+        p_147360_1_ = event.getReason();
+        // CraftBukkit end
         final ChatComponentText chatcomponenttext = new ChatComponentText(p_147360_1_);
         this.netManager.scheduleOutboundPacket(new S40PacketDisconnect(chatcomponenttext), new GenericFutureListener[] {new GenericFutureListener()
         {
@@ -170,8 +285,8 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             {
                 NetHandlerPlayServer.this.netManager.closeChannel(chatcomponenttext);
             }
-        }
-                                                                                                     });
+        }});
+        this.onDisconnect(chatcomponenttext); // CraftBukkit - Process quit immediately
         this.netManager.disableAutoRead();
     }
 
@@ -182,6 +297,15 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processPlayer(C03PacketPlayer p_147347_1_)
     {
+        // CraftBukkit start - Check for NaN
+        if (Double.isNaN(p_147347_1_.field_149479_a) || Double.isNaN(p_147347_1_.field_149477_b) || Double.isNaN(p_147347_1_.field_149478_c)
+                || Double.isNaN(p_147347_1_.field_149475_d))
+        {
+            logger.warn(playerEntity.getCommandSenderName() + " was caught trying to crash the server with an invalid position.");
+            getPlayerB().kickPlayer("Nope!");
+            return;
+        }
+        // CraftBukkit end
         WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
         this.field_147366_g = true;
 
@@ -199,8 +323,71 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 }
             }
 
-            if (this.hasMoved)
+            // CraftBukkit start
+            Player player = this.getPlayerB();
+            Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
+            Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+
+            // If the packet contains movement information then we update the To location with the correct XYZ.
+            if (p_147347_1_.field_149480_h && !(p_147347_1_.field_149480_h && p_147347_1_.field_149477_b == -999.0D && p_147347_1_.field_149475_d == -999.0D))
             {
+                to.setX(p_147347_1_.field_149479_a);
+                to.setY(p_147347_1_.field_149477_b);
+                to.setZ(p_147347_1_.field_149478_c);
+            }
+
+            // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+            if (p_147347_1_.field_149481_i)
+            {
+                to.setYaw(p_147347_1_.field_149476_e);
+                to.setPitch(p_147347_1_.field_149473_f);
+            }
+
+            // Prevent 40 event-calls for less than a single pixel of movement >.>
+            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+            if ((delta > 1f / 256 || deltaAngle > 10f) && (this.hasMoved && !this.playerEntity.isDead))
+            {
+                this.lastPosX = to.getX();
+                this.lastPosY = to.getY();
+                this.lastPosZ = to.getZ();
+                this.lastYaw = to.getYaw();
+                this.lastPitch = to.getPitch();
+
+                Location oldTo = to.clone();
+                PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                this.server.getPluginManager().callEvent(event);
+
+                // If the event is cancelled we move the player back to their old location.
+                if (event.isCancelled())
+                {
+                    this.playerEntity.playerNetServerHandler.sendPacket(new S08PacketPlayerPosLook(from.getX(), from.getY() + 1.6200000047683716D, from
+                            .getZ(), from.getYaw(), from.getPitch(), false));
+                    return;
+                }
+
+                /* If a Plugin has changed the To destination then we teleport the Player
+                there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                We only do this if the Event was not cancelled. */
+                if (!oldTo.equals(event.getTo()) && !event.isCancelled())
+                {
+                    this.playerEntity.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.UNKNOWN);
+                    return;
+                }
+
+                /* Check to see if the Players Location has some how changed during the call of the event.
+                This can happen due to a plugin teleporting the player instead of using .setTo() */
+                if (!from.equals(this.getPlayerB().getLocation()) && this.justTeleported)
+                {
+                    this.justTeleported = false;
+                    return;
+                }
+            }
+
+            if (this.hasMoved && !this.playerEntity.isDead)
+            {
+                // CraftBukkit end
                 double d1;
                 double d2;
                 double d3;
@@ -280,13 +467,6 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                     d3 = p_147347_1_.func_149472_e();
                     d4 = p_147347_1_.func_149471_f() - p_147347_1_.func_149467_d();
 
-                    if (!this.playerEntity.isPlayerSleeping() && (d4 > 1.65D || d4 < 0.1D))
-                    {
-                        this.kickPlayerFromServer("Illegal stance");
-                        logger.warn(this.playerEntity.getCommandSenderName() + " had an illegal stance: " + d4);
-                        return;
-                    }
-
                     if (Math.abs(p_147347_1_.func_149464_c()) > 3.2E7D || Math.abs(p_147347_1_.func_149472_e()) > 3.2E7D)
                     {
                         this.kickPlayerFromServer("Illegal position");
@@ -318,7 +498,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 double d9 = Math.max(Math.abs(d6), Math.abs(this.playerEntity.motionZ));
                 double d10 = d7 * d7 + d8 * d8 + d9 * d9;
 
-                if (d10 > 100.0D && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(this.playerEntity.getCommandSenderName())))
+                if (d10 > 250.0D && this.hasMoved && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(this.playerEntity.getCommandSenderName())))   // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
                 {
                     logger.warn(this.playerEntity.getCommandSenderName() + " moved too quickly! " + d4 + "," + d5 + "," + d6 + " (" + d7 + ", " + d8 + ", " + d9 + ")");
                     this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
@@ -354,7 +534,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 d10 = d4 * d4 + d5 * d5 + d6 * d6;
                 boolean flag1 = false;
 
-                if (d10 > 0.0625D && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.theItemInWorldManager.isCreative())
+                if (d10 > 0.1625D && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.theItemInWorldManager.isCreative())
                 {
                     flag1 = true;
                     logger.warn(this.playerEntity.getCommandSenderName() + " moved wrongly!");
@@ -413,21 +593,85 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void setPlayerLocation(double p_147364_1_, double p_147364_3_, double p_147364_5_, float p_147364_7_, float p_147364_8_)
     {
+        // CraftBukkit start - Delegate to teleport(Location)
+        Player player = this.getPlayerB();
+        Location from = player.getLocation();
+        Location to = new Location(this.getPlayerB().getWorld(), p_147364_1_, p_147364_3_, p_147364_5_, p_147364_7_, p_147364_8_);
+        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from, to, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+        this.server.getPluginManager().callEvent(event);
+        from = event.getFrom();
+        to = event.isCancelled() ? from : event.getTo();
+        this.teleport(to);
+    }
+
+    public void teleport(Location dest)
+    {
+        double d0, d1, d2;
+        float f, f1;
+        d0 = dest.getX();
+        d1 = dest.getY();
+        d2 = dest.getZ();
+        f = dest.getYaw();
+        f1 = dest.getPitch();
+
+        // TODO: make sure this is the best way to address this.
+        if (Float.isNaN(f))
+        {
+            f = 0;
+        }
+
+        if (Float.isNaN(f1))
+        {
+            f1 = 0;
+        }
+
+        this.lastPosX = d0;
+        this.lastPosY = d1;
+        this.lastPosZ = d2;
+        this.lastYaw = f;
+        this.lastPitch = f1;
+        this.justTeleported = true;
+        // CraftBukkit end
         this.hasMoved = false;
-        this.lastPosX = p_147364_1_;
-        this.lastPosY = p_147364_3_;
-        this.lastPosZ = p_147364_5_;
-        this.playerEntity.setPositionAndRotation(p_147364_1_, p_147364_3_, p_147364_5_, p_147364_7_, p_147364_8_);
-        this.playerEntity.playerNetServerHandler.sendPacket(new S08PacketPlayerPosLook(p_147364_1_, p_147364_3_ + 1.6200000047683716D, p_147364_5_, p_147364_7_, p_147364_8_, false));
+        this.lastPosX = d0;
+        this.lastPosY = d1;
+        this.lastPosZ = d2;
+        this.playerEntity.setPositionAndRotation(d0, d1, d2, f, f1);
+        this.playerEntity.playerNetServerHandler.sendPacket(new S08PacketPlayerPosLook(d0, d1 + 1.6200000047683716D, d2, f, f1, false));
     }
 
     public void processPlayerDigging(C07PacketPlayerDigging p_147345_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
         WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
         this.playerEntity.func_143004_u();
 
         if (p_147345_1_.func_149506_g() == 4)
         {
+            // CraftBukkit start
+            // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+            if (this.lastDropTick != MinecraftServer.currentTick)
+            {
+                this.dropCount = 0;
+                this.lastDropTick = MinecraftServer.currentTick;
+            }
+            else
+            {
+                // Else we increment the drop count and check the amount.
+                this.dropCount++;
+
+                if (this.dropCount >= 20)
+                {
+                    this.logger.warn(this.playerEntity.getCommandSenderName() + " dropped their items too quickly!");
+                    this.kickPlayerFromServer("You dropped your items too quickly (Hacking?)");
+                    return;
+                }
+            }
+            // CraftBukkit end
             this.playerEntity.dropOneItem(false);
         }
         else if (p_147345_1_.func_149506_g() == 3)
@@ -490,7 +734,17 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 }
                 else
                 {
+                    // CraftBukkit start
+                    CraftEventFactory.callPlayerInteractEvent(this.playerEntity, Action.LEFT_CLICK_BLOCK, i, j, k, p_147345_1_.func_149501_f(), this.playerEntity.inventory.getCurrentItem());
                     this.playerEntity.playerNetServerHandler.sendPacket(new S23PacketBlockChange(i, j, k, worldserver));
+                    // Update any tile entity data for this block
+                    TileEntity tileentity = worldserver.getTileEntity(i, j, k);
+
+                    if (tileentity != null)
+                    {
+                        this.playerEntity.playerNetServerHandler.sendPacket(tileentity.getDescriptionPacket());
+                    }
+                    // CraftBukkit end
                 }
             }
             else if (p_147345_1_.func_149506_g() == 2)
@@ -517,6 +771,34 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
     public void processPlayerBlockPlacement(C08PacketPlayerBlockPlacement p_147346_1_)
     {
         WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
+        // CraftBukkit start
+        if (this.playerEntity.isDead)
+        {
+            return;
+        }
+
+        // This is a horrible hack needed because the client sends 2 packets on 'right mouse click'
+        // aimed at a block. We shouldn't need to get the second packet if the data is handled
+        // but we cannot know what the client will do, so we might still get it
+        //
+        // If the time between packets is small enough, and the 'signature' similar, we discard the
+        // second one. This sadly has to remain until Mojang makes their packets saner. :(
+        //  -- Grum
+        if (p_147346_1_.func_149568_f() == 255)
+        {
+            if (p_147346_1_.func_149574_g() != null && p_147346_1_.func_149574_g().getItem() == this.lastMaterial && this.lastPacket != null
+                    && p_147346_1_.timestamp - this.lastPacket < 100)
+            {
+                this.lastPacket = null;
+                return;
+            }
+        }
+        else
+        {
+            this.lastMaterial = p_147346_1_.func_149574_g() == null ? null : p_147346_1_.func_149574_g().getItem();
+            this.lastPacket = p_147346_1_.timestamp;
+        }
+
         ItemStack itemstack = this.playerEntity.inventory.getCurrentItem();
         boolean flag = false;
         boolean placeResult = true;
@@ -533,11 +815,21 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 return;
             }
 
-            PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(playerEntity, PlayerInteractEvent.Action.RIGHT_CLICK_AIR, 0, 0, 0, -1, worldserver);
-            if (event.useItem != Event.Result.DENY)
+            PlayerInteractEvent forgeEvent = ForgeEventFactory.onPlayerInteract(playerEntity, PlayerInteractEvent.Action.RIGHT_CLICK_AIR, 0, 0, 0, -1,
+                    worldserver); // Cauldron - rename event
+            // CraftBukkit start
+            int itemstackAmount = itemstack.stackSize;
+            org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.playerEntity, Action.RIGHT_CLICK_AIR, itemstack);
+
+            if (forgeEvent.useItem != cpw.mods.fml.common.eventhandler.Event.Result.DENY && event.useItemInHand() != Event.Result.DENY)
             {
                 this.playerEntity.theItemInWorldManager.tryUseItem(this.playerEntity, worldserver, itemstack);
             }
+            // CraftBukkit - notch decrements the counter by 1 in the above method with food,
+            // snowballs and so forth, but he does it in a place that doesn't cause the
+            // inventory update packet to get sent
+            placeResult = itemstack.stackSize != itemstackAmount;
+            // CraftBukkit end
         }
         else if (p_147346_1_.func_149571_d() >= this.serverController.getBuildLimit() - 1 && (p_147346_1_.func_149568_f() == 1 || p_147346_1_.func_149571_d() >= this.serverController.getBuildLimit()))
         {
@@ -548,17 +840,24 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
         }
         else
         {
-            double dist = playerEntity.theItemInWorldManager.getBlockReachDistance() + 1;
-            dist *= dist;
-            if (this.hasMoved && this.playerEntity.getDistanceSq((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D) < dist && !this.serverController.isBlockProtected(worldserver, i, j, k, this.playerEntity))
+            // CraftBukkit start - Check if we can actually do something over this large a distance
+            Location eyeLoc = this.getPlayerB().getEyeLocation();
+            double reachDistance = NumberConversions.square(eyeLoc.getX() - i) + NumberConversions.square(eyeLoc.getY() - j)
+                    + NumberConversions.square(eyeLoc.getZ() - k);
+
+            if (reachDistance > (this.getPlayerB().getGameMode() == org.bukkit.GameMode.CREATIVE ? CREATIVE_PLACE_DISTANCE_SQUARED : SURVIVAL_PLACE_DISTANCE_SQUARED))
             {
-                // record block place result so we can update client itemstack size if place event was cancelled.
-                if (!this.playerEntity.theItemInWorldManager.activateBlockOrUseItem(this.playerEntity, worldserver, itemstack, i, j, k, l, p_147346_1_.func_149573_h(), p_147346_1_.func_149569_i(), p_147346_1_.func_149575_j()))
-                {
-                    placeResult = false;
-                }
+                return;
             }
 
+            // Cauldron start - record place result so we can update client inventory slot if place event is cancelled. Fixes stacksize client-side bug
+            if (!this.playerEntity.theItemInWorldManager.activateBlockOrUseItem(this.playerEntity, worldserver, itemstack, i, j, k, l,
+                    p_147346_1_.func_149573_h(), p_147346_1_.func_149569_i(), p_147346_1_.func_149575_j()))
+            {
+                placeResult = true;
+            }
+            // Cauldron end
+            // CraftBukkit end
             flag = true;
         }
 
@@ -615,7 +914,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             this.playerEntity.openContainer.detectAndSendChanges();
             this.playerEntity.isChangingQuantityOnly = false;
 
-            if (!ItemStack.areItemStacksEqual(this.playerEntity.inventory.getCurrentItem(), p_147346_1_.func_149574_g()) || !placeResult) // force client itemstack update if place event was cancelled
+            if (slot != null && (!ItemStack.areItemStacksEqual(this.playerEntity.inventory.getCurrentItem(), p_147346_1_.func_149574_g()) || !placeResult)) // Cauldron - always is needed to update client itemstack if placement is cancelled
             {
                 this.sendPacket(new S2FPacketSetSlot(this.playerEntity.openContainer.windowId, slot.slotNumber, this.playerEntity.inventory.getCurrentItem()));
             }
@@ -624,13 +923,33 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void onDisconnect(IChatComponent p_147231_1_)
     {
-        logger.info(this.playerEntity.getCommandSenderName() + " lost connection: " + p_147231_1_);
+        // CraftBukkit start - Rarely it would send a disconnect line twice
+        if (this.processedDisconnect)
+        {
+            return;
+        }
+        else
+        {
+            this.processedDisconnect = true;
+        }
+        // CraftBukkit end
+        logger.info(this.playerEntity.getCommandSenderName() + " lost connection: " + p_147231_1_.getUnformattedText()); // CraftBukkit - Don't toString the component
         this.serverController.func_147132_au();
-        ChatComponentTranslation chatcomponenttranslation = new ChatComponentTranslation("multiplayer.player.left", new Object[] {this.playerEntity.func_145748_c_()});
-        chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.YELLOW);
-        this.serverController.getConfigurationManager().sendChatMsg(chatcomponenttranslation);
+        // CraftBukkit start - Replace vanilla quit message handling with our own.
+        /*
+        ChatMessage chatcomponenttranslation = new ChatMessage("multiplayer.player.left", new Object[] { this.player.getScoreboardDisplayName()});
+        
+        chatcomponenttranslation.b().setColor(EnumChatFormat.YELLOW);
+        this.minecraftServer.getPlayerList().sendMessage(chatcomponenttranslation);
+        */
         this.playerEntity.mountEntityAndWakeUp();
-        this.serverController.getConfigurationManager().playerLoggedOut(this.playerEntity);
+        String quitMessage = this.serverController.getConfigurationManager().disconnect(this.playerEntity);
+
+        if ((quitMessage != null) && (quitMessage.length() > 0))
+        {
+            this.serverController.getConfigurationManager().sendMessage(CraftChatMessage.fromString(quitMessage));
+        }
+        // CraftBukkit end
 
         if (this.serverController.isSinglePlayer() && this.playerEntity.getCommandSenderName().equals(this.serverController.getServerOwner()))
         {
@@ -657,6 +976,18 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             }
         }
 
+        // CraftBukkit start
+        if (p_147359_1_ == null)
+        {
+            return;
+        }
+        else if (p_147359_1_ instanceof S05PacketSpawnPosition)
+        {
+            S05PacketSpawnPosition packet6 = (S05PacketSpawnPosition) p_147359_1_;
+            this.playerEntity.compassTarget = new Location(this.getPlayerB().getWorld(), packet6.field_149364_a, packet6.field_149362_b, packet6.field_149363_c);
+        }
+        // CraftBukkit end
+
         try
         {
             this.netManager.scheduleOutboundPacket(p_147359_1_, new GenericFutureListener[0]);
@@ -679,20 +1010,37 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processHeldItemChange(C09PacketHeldItemChange p_147355_1_)
     {
+        // CraftBukkit start
+        if (this.playerEntity.isDead)
+        {
+            return;
+        }
+
         if (p_147355_1_.func_149614_c() >= 0 && p_147355_1_.func_149614_c() < InventoryPlayer.getHotbarSize())
         {
+            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getPlayerB(), this.playerEntity.inventory.currentItem, p_147355_1_.func_149614_c());
+            this.server.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                this.sendPacket(new S09PacketHeldItemChange(this.playerEntity.inventory.currentItem));
+                this.playerEntity.func_143004_u();
+                return;
+            }
+            // CraftBukkit end
             this.playerEntity.inventory.currentItem = p_147355_1_.func_149614_c();
             this.playerEntity.func_143004_u();
         }
         else
         {
             logger.warn(this.playerEntity.getCommandSenderName() + " tried to set an invalid carried item");
+            this.kickPlayerFromServer("Nope!"); // CraftBukkit
         }
     }
 
     public void processChatMessage(C01PacketChatMessage p_147354_1_)
     {
-        if (this.playerEntity.func_147096_v() == EntityPlayer.EnumChatVisibility.HIDDEN)
+        if (this.playerEntity.isDead || this.playerEntity.func_147096_v() == EntityPlayer.EnumChatVisibility.HIDDEN) // CraftBukkit - dead men tell no tales
         {
             ChatComponentTranslation chatcomponenttranslation = new ChatComponentTranslation("chat.cannotSend", new Object[0]);
             chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
@@ -708,51 +1056,385 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             {
                 if (!ChatAllowedCharacters.isAllowedCharacter(s.charAt(i)))
                 {
-                    this.kickPlayerFromServer("Illegal characters in chat");
+                    // CraftBukkit start - threadsafety
+                    if (p_147354_1_.hasPriority())
+                    {
+                        Waitable waitable = new Waitable() {
+                            @Override
+                            protected Object evaluate()
+                            {
+                                NetHandlerPlayServer.this.kickPlayerFromServer("Illegal characters in chat");
+                                return null;
+                            }
+                        };
+                        this.serverController.processQueue.add(waitable);
+
+                        try
+                        {
+                            waitable.get();
+                        }
+                        catch (InterruptedException e)
+                        {
+                            Thread.currentThread().interrupt();
+                        }
+                        catch (ExecutionException e)
+                        {
+                            throw new RuntimeException(e);
+                        }
+                    }
+                    else
+                    {
+                        this.kickPlayerFromServer("Illegal characters in chat");
+                    }
+                    // CraftBukkit end
                     return;
                 }
             }
 
-            if (s.startsWith("/"))
+            // CraftBukkit start
+            if (!p_147354_1_.hasPriority())
             {
-                this.handleSlashCommand(s);
+                try
+                {
+                    this.serverController.server.playerCommandState = true;
+                    this.handleSlashCommand(s);
+                }
+                finally
+                {
+                    this.serverController.server.playerCommandState = false;
+                }
             }
-            else
+            else if (s.isEmpty())
+            {
+                logger.warn(this.playerEntity.getCommandSenderName() + " tried to send an empty message");
+            }
+            else if (getPlayerB().isConversing())
+            {
+                getPlayerB().acceptConversationInput(s);
+            }
+            else if (this.playerEntity.func_147096_v() == EntityPlayer.EnumChatVisibility.SYSTEM) // Re-add "Command Only" flag check
             {
-                ChatComponentTranslation chatcomponenttranslation1 = new ChatComponentTranslation("chat.type.text", new Object[] {this.playerEntity.func_145748_c_(), ForgeHooks.newChatWithLinks(s)}); // Fixes chat links
-                chatcomponenttranslation1 = ForgeHooks.onServerChatEvent(this, s, chatcomponenttranslation1);
-                if (chatcomponenttranslation1 == null) return;
-                this.serverController.getConfigurationManager().sendChatMsgImpl(chatcomponenttranslation1, false);
+                ChatComponentTranslation chatcomponenttranslation = new ChatComponentTranslation("chat.cannotSend", new Object[0]);
+                chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.RED);
+                this.sendPacket(new S02PacketChat(chatcomponenttranslation));
+            }
+            else if (true)
+            {
+                this.chat(s, true);
+                // CraftBukkit end - the below is for reference. :)
             }
 
-            this.chatSpamThresholdCount += 20;
+            // CraftBukkit start - replaced with thread safe throttle
+            // this.chatSpamThresholdCount += 20;
+            if (chatSpamField.addAndGet(this, 20) > 200 && !this.serverController.getConfigurationManager().func_152596_g(this.playerEntity.getGameProfile()))
+            {
+                if (p_147354_1_.hasPriority())
+                {
+                    Waitable waitable = new Waitable() {
+                        @Override
+                        protected Object evaluate()
+                        {
+                            NetHandlerPlayServer.this.kickPlayerFromServer("disconnect.spam");
+                            return null;
+                        }
+                    };
+                    this.serverController.processQueue.add(waitable);
+
+                    try
+                    {
+                        waitable.get();
+                    }
+                    catch (InterruptedException e)
+                    {
+                        Thread.currentThread().interrupt();
+                    }
+                    catch (ExecutionException e)
+                    {
+                        throw new RuntimeException(e);
+                    }
+                }
+                else
+                {
+                    this.kickPlayerFromServer("disconnect.spam");
+                }
 
-            if (this.chatSpamThresholdCount > 200 && !this.serverController.getConfigurationManager().func_152596_g(this.playerEntity.getGameProfile()))
+                // CraftBukkit end
+            }
+        }
+    }
+
+    // CraftBukkit start
+    public void chat(String s, boolean async)
+    {
+        if (s.isEmpty() || this.playerEntity.func_147096_v() == EntityPlayer.EnumChatVisibility.HIDDEN)
+        {
+            return;
+        }
+
+        if (!async && s.startsWith("/"))
+        {
+            this.handleSlashCommand(s);
+        }
+        else if (this.playerEntity.func_147096_v() == EntityPlayer.EnumChatVisibility.SYSTEM)
+        {
+            // Do nothing, this is coming from a plugin
+        }
+        else
+        {
+            // Cauldron start - handle Forge event
+            ChatComponentTranslation chatcomponenttranslation1 = new ChatComponentTranslation("chat.type.text", new Object[] {
+                    this.playerEntity.func_145748_c_(), s });
+            chatcomponenttranslation1 = ForgeHooks.onServerChatEvent(this, s, chatcomponenttranslation1);
+
+            if (chatcomponenttranslation1 != null
+                    && chatcomponenttranslation1.getFormatArgs()[chatcomponenttranslation1.getFormatArgs().length - 1] instanceof String)
             {
-                this.kickPlayerFromServer("disconnect.spam");
+                // use event message from Forge
+                s = (String) chatcomponenttranslation1.getFormatArgs()[chatcomponenttranslation1.getFormatArgs().length - 1];
+            }
+            // Cauldron end
+            Player player = this.getPlayerB();
+            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet()); // Cauldron - pass changed message if any from Forge
+            event.setCancelled(chatcomponenttranslation1 == null); // Cauldron - pre-cancel event if forge event was cancelled
+            this.server.getPluginManager().callEvent(event);
+            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0)
+            {
+                // Evil plugins still listening to deprecated event
+                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                queueEvent.setCancelled(event.isCancelled());
+                Waitable waitable = new Waitable() {
+                    @Override
+                    protected Object evaluate()
+                    {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+
+                        if (queueEvent.isCancelled())
+                        {
+                            return null;
+                        }
+
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        NetHandlerPlayServer.this.serverController.console.sendMessage(message);
+                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy())
+                        {
+                            for (Object recipient : serverController.getConfigurationManager().playerEntityList)
+                            {
+                                ((EntityPlayerMP) recipient).sendMessage(CraftChatMessage.fromString(message));
+                            }
+                        }
+                        else
+                        {
+                            for (Player player : queueEvent.getRecipients())
+                            {
+                                player.sendMessage(message);
+                            }
+                        }
+
+                        return null;
+                    }
+                };
+
+                if (async)
+                {
+                    serverController.processQueue.add(waitable);
+                }
+                else
+                {
+                    waitable.run();
+                }
+
+                try
+                {
+                    waitable.get();
+                }
+                catch (InterruptedException e)
+                {
+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                }
+                catch (ExecutionException e)
+                {
+                    throw new RuntimeException("Exception processing chat event", e.getCause());
+                }
+            }
+            else
+            {
+                if (event.isCancelled())
+                {
+                    return;
+                }
+
+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+                serverController.console.sendMessage(s);
+                if (((LazyPlayerSet) event.getRecipients()).isLazy())
+                {
+                    for (Object recipient : serverController.getConfigurationManager().playerEntityList)
+                    {
+                        for (IChatComponent component : CraftChatMessage.fromString(s))
+                        {
+                            ((EntityPlayerMP) recipient).sendMessage(CraftChatMessage.fromString(s));
+                        }
+                    }
+                }
+                else
+                {
+                    for (Player recipient : event.getRecipients())
+                    {
+                        recipient.sendMessage(s);
+                    }
+                }
             }
         }
     }
+    // CraftBukkit end
 
     private void handleSlashCommand(String p_147361_1_)
     {
-        this.serverController.getCommandManager().executeCommand(this.playerEntity, p_147361_1_);
+        org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.startTiming(); // Spigot
+        // CraftBukkit start
+        CraftPlayer player = this.getPlayerB();
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, p_147361_1_, new LazyPlayerSet());
+        this.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled())
+        {
+            org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            return;
+        }
+
+        try
+        {
+            // Spigot Start
+            if (org.spigotmc.SpigotConfig.logCommands)
+            {
+                this.logger.info(event.getPlayer().getName() + " issued server command: " + event.getMessage()); // CraftBukkit
+            }
+
+            // Spigot end
+            // Cauldron start - handle bukkit/vanilla commands
+            int space = event.getMessage().indexOf(" ");
+            // if bukkit command exists then execute it over vanilla
+            if (this.server.getCommandMap().getCommand(event.getMessage().substring(1, space != -1 ? space : event.getMessage().length())) != null)
+            {
+                this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1));
+                org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+                return;
+            }
+            else
+            // process vanilla command
+            {
+                this.server.dispatchVanillaCommand(event.getPlayer(), event.getMessage().substring(1));
+                org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+                return;
+            }
+        }
+        catch (org.bukkit.command.CommandException ex)
+        {
+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(NetHandlerPlayServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            return;
+        }
+
+        // this.serverController.getCommandManager().executeCommand(this.playerEntity, p_147361_1_);
+        // CraftBukkit end
     }
 
     public void processAnimation(C0APacketAnimation p_147350_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
         this.playerEntity.func_143004_u();
 
         if (p_147350_1_.func_149421_d() == 1)
         {
+            // CraftBukkit start - Raytrace to look for 'rogue armswings'
+            float f = 1.0F;
+            float f1 = this.playerEntity.prevRotationPitch + (this.playerEntity.rotationPitch - this.playerEntity.prevRotationPitch) * f;
+            float f2 = this.playerEntity.prevRotationYaw + (this.playerEntity.rotationYaw - this.playerEntity.prevRotationYaw) * f;
+            double d0 = this.playerEntity.prevPosX + (this.playerEntity.posX - this.playerEntity.prevPosX) * (double) f;
+            double d1 = this.playerEntity.prevPosY + (this.playerEntity.posY - this.playerEntity.prevPosY) * (double) f + 1.62D
+                    - (double) this.playerEntity.yOffset;
+            double d2 = this.playerEntity.prevPosZ + (this.playerEntity.posZ - this.playerEntity.prevPosZ) * (double) f;
+            Vec3 vec3 = Vec3.createVectorHelper(d0, d1, d2);
+            float f3 = MathHelper.cos(-f2 * 0.017453292F - (float) Math.PI);
+            float f4 = MathHelper.sin(-f2 * 0.017453292F - (float) Math.PI);
+            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+            float f6 = MathHelper.sin(-f1 * 0.017453292F);
+            float f7 = f4 * f5;
+            float f8 = f3 * f5;
+            double d3 = this.playerEntity.capabilities.isCreativeMode ? 5.0D : 4.5D;
+            Vec3 vec31 = vec3.addVector((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+            MovingObjectPosition movingobjectposition = this.playerEntity.worldObj.rayTraceBlocks(vec3, vec31, true);
+            boolean valid = false;
+
+            if (movingobjectposition == null || movingobjectposition.typeOfHit != MovingObjectPosition.MovingObjectType.BLOCK)
+            {
+                valid = true;
+            }
+            else
+            {
+                Block block = this.playerEntity.worldObj.getBlock(movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ);
+
+                if (!block.isOpaqueCube()) // Should be isBreakable?
+                {
+                    valid = true;
+                }
+            }
+
+            if (valid)
+            {
+                CraftEventFactory.callPlayerInteractEvent(this.playerEntity, Action.LEFT_CLICK_AIR, this.playerEntity.inventory.getCurrentItem());
+            }
+
+            // Arm swing animation
+            PlayerAnimationEvent event = new PlayerAnimationEvent(this.getPlayerB());
+            this.server.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+            // CraftBukkit end
             this.playerEntity.swingItem();
         }
     }
 
     public void processEntityAction(C0BPacketEntityAction p_147357_1_)
     {
+        // CraftBukkit start
+        if (this.playerEntity.isDead)
+        {
+            return;
+        }
+
         this.playerEntity.func_143004_u();
 
+        if (p_147357_1_.func_149513_d() == 1 || p_147357_1_.func_149513_d() == 2)
+        {
+            PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getPlayerB(), p_147357_1_.func_149513_d() == 1);
+            this.server.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+        }
+
+        if (p_147357_1_.func_149513_d() == 4 || p_147357_1_.func_149513_d() == 5)
+        {
+            PlayerToggleSprintEvent event = new PlayerToggleSprintEvent(this.getPlayerB(), p_147357_1_.func_149513_d() == 4);
+            this.server.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+        }
+        // CraftBukkit end
+
         if (p_147357_1_.func_149513_d() == 1)
         {
             this.playerEntity.setSneaking(true);
@@ -772,7 +1454,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
         else if (p_147357_1_.func_149513_d() == 3)
         {
             this.playerEntity.wakeUpPlayer(false, true, true);
-            this.hasMoved = false;
+            // this.hasMoved = false; // CraftBukkit - this is handled in teleport
         }
         else if (p_147357_1_.func_149513_d() == 6)
         {
@@ -789,8 +1471,20 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processUseEntity(C02PacketUseEntity p_147340_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
         WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
-        Entity entity = p_147340_1_.func_149564_a(worldserver);
+        Entity entity = p_147340_1_.func_149564_a((World) worldserver);
+        // Spigot Start
+        if (entity == playerEntity)
+        {
+            kickPlayerFromServer("Cannot interact with self!");
+            return;
+        }
+        // Spigot End
         this.playerEntity.func_143004_u();
 
         if (entity != null)
@@ -805,9 +1499,53 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
             if (this.playerEntity.getDistanceSqToEntity(entity) < d0)
             {
+                ItemStack itemInHand = this.playerEntity.inventory.getCurrentItem(); // CraftBukkit
+
                 if (p_147340_1_.func_149565_c() == C02PacketUseEntity.Action.INTERACT)
                 {
+                    // CraftBukkit start
+                    boolean triggerTagUpdate = itemInHand != null && itemInHand.getItem() == Items.name_tag && entity instanceof EntityLiving;
+                    boolean triggerChestUpdate = itemInHand != null && itemInHand.getItem() == Item.getItemFromBlock(Blocks.chest)
+                            && entity instanceof EntityHorse;
+                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.lead && entity instanceof EntityLiving;
+                    PlayerInteractEntityEvent event = new PlayerInteractEntityEvent((Player) this.getPlayerB(), entity.getBukkitEntity());
+                    this.server.getPluginManager().callEvent(event);
+
+                    if (triggerLeashUpdate
+                            && (event.isCancelled() || this.playerEntity.inventory.getCurrentItem() == null || this.playerEntity.inventory.getCurrentItem()
+                                    .getItem() != Items.lead))
+                    {
+                        // Refresh the current leash state
+                        this.sendPacket(new S1BPacketEntityAttach(1, entity, ((EntityLiving) entity).getLeashedToEntity()));
+                    }
+
+                    if (triggerTagUpdate
+                            && (event.isCancelled() || this.playerEntity.inventory.getCurrentItem() == null || this.playerEntity.inventory.getCurrentItem()
+                                    .getItem() != Items.name_tag))
+                    {
+                        // Refresh the current entity metadata
+                        this.sendPacket(new S1CPacketEntityMetadata(entity.getEntityId(), entity.dataWatcher, true));
+                    }
+
+                    if (triggerChestUpdate
+                            && (event.isCancelled() || this.playerEntity.inventory.getCurrentItem() == null || this.playerEntity.inventory.getCurrentItem()
+                                    .getItem() != Item.getItemFromBlock(Blocks.chest)))
+                    {
+                        this.sendPacket(new S1CPacketEntityMetadata(entity.getEntityId(), entity.dataWatcher, true));
+                    }
+
+                    if (event.isCancelled())
+                    {
+                        return;
+                    }
+                    // CraftBukkit end
                     this.playerEntity.interactWith(entity);
+                    // CraftBukkit start
+                    if (itemInHand != null && itemInHand.stackSize <= -1)
+                    {
+                        this.playerEntity.sendContainerToPlayer(this.playerEntity.openContainer);
+                    }
+                    // CraftBukkit end
                 }
                 else if (p_147340_1_.func_149565_c() == C02PacketUseEntity.Action.ATTACK)
                 {
@@ -819,6 +1557,13 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                     }
 
                     this.playerEntity.attackTargetEntityWithCurrentItem(entity);
+
+                    // CraftBukkit start
+                    if (itemInHand != null && itemInHand.stackSize <= -1)
+                    {
+                        this.playerEntity.sendContainerToPlayer(this.playerEntity.openContainer);
+                    }
+                    // CraftBukkit end
                 }
             }
         }
@@ -834,7 +1579,18 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             case 1:
                 if (this.playerEntity.playerConqueredTheEnd)
                 {
-                    this.playerEntity = this.serverController.getConfigurationManager().respawnPlayer(this.playerEntity, 0, true);
+                // Cauldron start
+                if (this.playerEntity.dimension == 1) // coming from end
+                {
+                    // We really should be calling transferPlayerToDimension since the player is coming in contact with a portal.
+                    this.serverController.getConfigurationManager().respawnPlayer(this.playerEntity, 0, true); // set flag to indicate player is leaving end.
+                }
+                else
+                // not coming from end
+                {
+                    this.playerEntity = this.serverController.getConfigurationManager().respawnPlayer(this.playerEntity, 0, false);
+                }
+                // Cauldron end
                 }
                 else if (this.playerEntity.getServerForPlayer().getWorldInfo().isHardcoreModeEnabled())
                 {
@@ -871,16 +1627,460 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processCloseWindow(C0DPacketCloseWindow p_147356_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
+        // Cauldron start - vanilla compatibility
+        try
+        {
+            if (this.playerEntity.openContainer.getBukkitView() != null)
+            {
+                CraftEventFactory.handleInventoryCloseEvent(this.playerEntity); // CraftBukkit
+            }
+        }
+        catch (AbstractMethodError e)
+        {
+            // do nothing
+        }
+        // Cauldron end
         this.playerEntity.closeContainer();
     }
 
     public void processClickWindow(C0EPacketClickWindow p_147351_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
         this.playerEntity.func_143004_u();
 
         if (this.playerEntity.openContainer.windowId == p_147351_1_.func_149548_c() && this.playerEntity.openContainer.isPlayerNotUsingContainer(this.playerEntity))
         {
-            ItemStack itemstack = this.playerEntity.openContainer.slotClick(p_147351_1_.func_149544_d(), p_147351_1_.func_149543_e(), p_147351_1_.func_149542_h(), this.playerEntity);
+            // CraftBukkit start - Call InventoryClickEvent
+            if (p_147351_1_.func_149544_d() < -1 && p_147351_1_.func_149544_d() != -999)
+            {
+                return;
+            }
+
+            InventoryView inventory = this.playerEntity.openContainer.getBukkitView();
+            SlotType type = CraftInventoryView.getSlotType(inventory, p_147351_1_.func_149544_d());
+            InventoryClickEvent event = null;
+            ClickType click = ClickType.UNKNOWN;
+            InventoryAction action = InventoryAction.UNKNOWN;
+            ItemStack itemstack = null;
+
+            // Cauldron start - some containers such as NEI's Creative Container does not have a view at this point so we need to create one
+            if (inventory == null)
+            {
+                inventory = new CraftInventoryView(this.playerEntity.getBukkitEntity(), MinecraftServer.getServer().server.createInventory(
+                        this.playerEntity.getBukkitEntity(), InventoryType.CHEST), this.playerEntity.openContainer);
+                this.playerEntity.openContainer.bukkitView = inventory;
+            }
+            // Cauldron end
+
+            if (p_147351_1_.func_149544_d() == -1)
+            {
+                type = SlotType.OUTSIDE; // override
+                click = p_147351_1_.func_149543_e() == 0 ? ClickType.WINDOW_BORDER_LEFT : ClickType.WINDOW_BORDER_RIGHT;
+                action = InventoryAction.NOTHING;
+            }
+            else if (p_147351_1_.func_149542_h() == 0)
+            {
+                if (p_147351_1_.func_149543_e() == 0)
+                {
+                    click = ClickType.LEFT;
+                }
+                else if (p_147351_1_.func_149543_e() == 1)
+                {
+                    click = ClickType.RIGHT;
+                }
+
+                if (p_147351_1_.func_149543_e() == 0 || p_147351_1_.func_149543_e() == 1)
+                {
+                    action = InventoryAction.NOTHING; // Don't want to repeat ourselves
+
+                    if (p_147351_1_.func_149544_d() == -999)
+                    {
+                        if (playerEntity.inventory.getItemStack() != null)
+                        {
+                            action = p_147351_1_.func_149543_e() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
+                        }
+                    }
+                    else
+                    {
+                        Slot slot = this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d());
+
+                        if (slot != null)
+                        {
+                            ItemStack clickedItem = slot.getStack();
+                            ItemStack cursor = playerEntity.inventory.getItemStack();
+
+                            if (clickedItem == null)
+                            {
+                                if (cursor != null)
+                                {
+                                    action = p_147351_1_.func_149543_e() == 0 ? InventoryAction.PLACE_ALL : InventoryAction.PLACE_ONE;
+                                }
+                            }
+                            else if (slot.canTakeStack(playerEntity)) // Should be Slot.isPlayerAllowed
+                            {
+                                if (cursor == null)
+                                {
+                                    action = p_147351_1_.func_149543_e() == 0 ? InventoryAction.PICKUP_ALL : InventoryAction.PICKUP_HALF;
+                                }
+                                else if (slot.isItemValid(cursor)) // Should be Slot.isItemAllowed
+                                {
+                                    if (clickedItem.isItemEqual(cursor) && ItemStack.areItemStackTagsEqual(clickedItem, cursor))
+                                    {
+                                        int toPlace = p_147351_1_.func_149543_e() == 0 ? cursor.stackSize : 1;
+                                        toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.stackSize);
+                                        toPlace = Math.min(toPlace, slot.inventory.getInventoryStackLimit() - clickedItem.stackSize);
+
+                                        if (toPlace == 1)
+                                        {
+                                            action = InventoryAction.PLACE_ONE;
+                                        }
+                                        else if (toPlace == cursor.stackSize)
+                                        {
+                                            action = InventoryAction.PLACE_ALL;
+                                        }
+                                        else if (toPlace < 0)
+                                        {
+                                            action = toPlace != -1 ? InventoryAction.PICKUP_SOME : InventoryAction.PICKUP_ONE; // this happens with oversized stacks
+                                        }
+                                        else if (toPlace != 0)
+                                        {
+                                            action = InventoryAction.PLACE_SOME;
+                                        }
+                                    }
+                                    else if (cursor.stackSize <= slot.getSlotStackLimit()) // Should be Slot.getMaxStackSize()
+                                    {
+                                        action = InventoryAction.SWAP_WITH_CURSOR;
+                                    }
+                                }
+                                else if (cursor.getItem() == clickedItem.getItem()
+                                        && (!cursor.getHasSubtypes() || cursor.getItemDamage() == clickedItem.getItemDamage())
+                                        && ItemStack.areItemStackTagsEqual(cursor, clickedItem))
+                                {
+                                    if (clickedItem.stackSize >= 0)
+                                    {
+                                        if (clickedItem.stackSize + cursor.stackSize <= cursor.getMaxStackSize())
+                                        {
+                                            // As of 1.5, this is result slots only
+                                            action = InventoryAction.PICKUP_ALL;
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+            else if (p_147351_1_.func_149542_h() == 1)
+            {
+                if (p_147351_1_.func_149543_e() == 0)
+                {
+                    click = ClickType.SHIFT_LEFT;
+                }
+                else if (p_147351_1_.func_149543_e() == 1)
+                {
+                    click = ClickType.SHIFT_RIGHT;
+                }
+
+                if (p_147351_1_.func_149543_e() == 0 || p_147351_1_.func_149543_e() == 1)
+                {
+                    if (p_147351_1_.func_149544_d() < 0)
+                    {
+                        action = InventoryAction.NOTHING;
+                    }
+                    else
+                    {
+                        Slot slot = this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d());
+
+                        if (slot != null && slot.canTakeStack(this.playerEntity) && slot.getHasStack()) // Should be Slot.hasItem()
+                        {
+                            action = InventoryAction.MOVE_TO_OTHER_INVENTORY;
+                        }
+                        else
+                        {
+                            action = InventoryAction.NOTHING;
+                        }
+                    }
+                }
+            }
+            else if (p_147351_1_.func_149542_h() == 2)
+            {
+                if (p_147351_1_.func_149543_e() >= 0 && p_147351_1_.func_149543_e() < 9)
+                {
+                    click = ClickType.NUMBER_KEY;
+                    Slot clickedSlot = this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d());
+
+                    if (clickedSlot.canTakeStack(playerEntity))
+                    {
+                        ItemStack hotbar = this.playerEntity.inventory.getStackInSlot(p_147351_1_.func_149543_e());
+                        boolean canCleanSwap = hotbar == null || (clickedSlot.inventory == playerEntity.inventory && clickedSlot.isItemValid(hotbar)); // the slot will accept the hotbar item
+
+                        if (clickedSlot.getHasStack())
+                        {
+                            if (canCleanSwap)
+                            {
+                                action = InventoryAction.HOTBAR_SWAP;
+                            }
+                            else
+                            {
+                                int firstEmptySlot = playerEntity.inventory.getFirstEmptyStack(); // Should be Inventory.firstEmpty()
+
+                                if (firstEmptySlot > -1)
+                                {
+                                    action = InventoryAction.HOTBAR_MOVE_AND_READD;
+                                }
+                                else
+                                {
+                                    action = InventoryAction.NOTHING; // This is not sane! Mojang: You should test for other slots of same type
+                                }
+                            }
+                        }
+                        else if (!clickedSlot.getHasStack() && hotbar != null && clickedSlot.isItemValid(hotbar))
+                        {
+                            action = InventoryAction.HOTBAR_SWAP;
+                        }
+                        else
+                        {
+                            action = InventoryAction.NOTHING;
+                        }
+                    }
+                    else
+                    {
+                        action = InventoryAction.NOTHING;
+                    }
+
+                    // Special constructor for number key
+                    event = new InventoryClickEvent(inventory, type, p_147351_1_.func_149544_d(), click, action, p_147351_1_.func_149543_e());
+                }
+            }
+            else if (p_147351_1_.func_149542_h() == 3)
+            {
+                if (p_147351_1_.func_149543_e() == 2)
+                {
+                    click = ClickType.MIDDLE;
+
+                    if (p_147351_1_.func_149544_d() == -999)
+                    {
+                        action = InventoryAction.NOTHING;
+                    }
+                    else
+                    {
+                        Slot slot = this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d());
+
+                        if (slot != null && slot.getHasStack() && playerEntity.capabilities.isCreativeMode && playerEntity.inventory.getItemStack() == null)
+                        {
+                            action = InventoryAction.CLONE_STACK;
+                        }
+                        else
+                        {
+                            action = InventoryAction.NOTHING;
+                        }
+                    }
+                }
+                else
+                {
+                    click = ClickType.UNKNOWN;
+                    action = InventoryAction.UNKNOWN;
+                }
+            }
+            else if (p_147351_1_.func_149542_h() == 4)
+            {
+                if (p_147351_1_.func_149544_d() >= 0)
+                {
+                    if (p_147351_1_.func_149543_e() == 0)
+                    {
+                        click = ClickType.DROP;
+                        Slot slot = this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d());
+
+                        if (slot != null && slot.getHasStack() && slot.canTakeStack(playerEntity) && slot.getStack() != null
+                                && slot.getStack().getItem() != Item.getItemFromBlock(Blocks.air))
+                        {
+                            action = InventoryAction.DROP_ONE_SLOT;
+                        }
+                        else
+                        {
+                            action = InventoryAction.NOTHING;
+                        }
+                    }
+                    else if (p_147351_1_.func_149543_e() == 1)
+                    {
+                        click = ClickType.CONTROL_DROP;
+                        Slot slot = this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d());
+
+                        if (slot != null && slot.getHasStack() && slot.canTakeStack(playerEntity) && slot.getStack() != null
+                                && slot.getStack().getItem() != Item.getItemFromBlock(Blocks.air))
+                        {
+                            action = InventoryAction.DROP_ALL_SLOT;
+                        }
+                        else
+                        {
+                            action = InventoryAction.NOTHING;
+                        }
+                    }
+                }
+                else
+                {
+                    // Sane default (because this happens when they are holding nothing. Don't ask why.)
+                    click = ClickType.LEFT;
+
+                    if (p_147351_1_.func_149543_e() == 1)
+                    {
+                        click = ClickType.RIGHT;
+                    }
+
+                    action = InventoryAction.NOTHING;
+                }
+            }
+            else if (p_147351_1_.func_149542_h() == 5)
+            {
+                itemstack = this.playerEntity.openContainer.slotClick(p_147351_1_.func_149544_d(), p_147351_1_.func_149543_e(), 5, this.playerEntity);
+            }
+            else if (p_147351_1_.func_149542_h() == 6)
+            {
+                click = ClickType.DOUBLE_CLICK;
+                action = InventoryAction.NOTHING;
+
+                if (p_147351_1_.func_149544_d() >= 0 && this.playerEntity.inventory.getItemStack() != null)
+                {
+                    ItemStack cursor = this.playerEntity.inventory.getItemStack();
+                    action = InventoryAction.NOTHING;
+
+                    // Quick check for if we have any of the item
+                    // Cauldron start - can't call getContents() on modded IInventory; CB-added method
+                    try
+                    {
+                        if (inventory.getTopInventory().contains(org.bukkit.Material.getMaterial(Item.getIdFromItem(cursor.getItem())))
+                                || inventory.getBottomInventory().contains(org.bukkit.Material.getMaterial(Item.getIdFromItem(cursor.getItem()))))
+                        {
+                            action = InventoryAction.COLLECT_TO_CURSOR;
+                        }
+                    }
+                    catch (AbstractMethodError ex)
+                    {
+                        // nothing we can do
+                    }
+                    // Cauldron end
+                }
+            }
+
+            // TODO check on updates
+
+            if (p_147351_1_.func_149542_h() != 5)
+            {
+                if (click == ClickType.NUMBER_KEY)
+                {
+                    event = new InventoryClickEvent(inventory, type, p_147351_1_.func_149544_d(), click, action, p_147351_1_.func_149543_e());
+                }
+                else
+                {
+                    event = new InventoryClickEvent(inventory, type, p_147351_1_.func_149544_d(), click, action);
+                }
+
+                org.bukkit.inventory.Inventory top = inventory.getTopInventory();
+
+                if (p_147351_1_.func_149544_d() == 0 && top instanceof CraftingInventory)
+                {
+                    // Cauldron start - vanilla compatibility (mod recipes)
+                    org.bukkit.inventory.Recipe recipe = null;
+                    try
+                    {
+                        recipe = ((CraftingInventory) top).getRecipe();
+                    }
+                    catch (AbstractMethodError e)
+                    {
+                        // do nothing
+                    }
+                    // Cauldron end
+
+                    if (recipe != null)
+                    {
+                        if (click == ClickType.NUMBER_KEY)
+                        {
+                            event = new CraftItemEvent(recipe, inventory, type, p_147351_1_.func_149544_d(), click, action, p_147351_1_.func_149543_e());
+                        }
+                        else
+                        {
+                            event = new CraftItemEvent(recipe, inventory, type, p_147351_1_.func_149544_d(), click, action);
+                        }
+                    }
+                }
+
+                server.getPluginManager().callEvent(event);
+
+                switch (event.getResult())
+                {
+                case ALLOW:
+                case DEFAULT:
+                    itemstack = this.playerEntity.openContainer.slotClick(p_147351_1_.func_149544_d(), p_147351_1_.func_149543_e(),
+                            p_147351_1_.func_149542_h(), this.playerEntity);
+                    break;
+                case DENY:
+                    /* Needs enum constructor in InventoryAction
+                    if (action.modifiesOtherSlots()) {
+                    } else {
+                        if (action.modifiesCursor()) {
+                            this.player.playerConnection.sendPacket(new Packet103SetSlot(-1, -1, this.player.inventory.getCarried()));
+                        }
+                        if (action.modifiesClicked()) {
+                            this.player.playerConnection.sendPacket(new Packet103SetSlot(this.player.activeContainer.windowId, packet102windowclick.slot, this.player.activeContainer.getSlot(packet102windowclick.slot).getItem()));
+                        }
+                    }*/
+                    switch (action)
+                    {
+                    // Modified other slots
+                    case PICKUP_ALL:
+                    case MOVE_TO_OTHER_INVENTORY:
+                    case HOTBAR_MOVE_AND_READD:
+                    case HOTBAR_SWAP:
+                    case COLLECT_TO_CURSOR:
+                    case UNKNOWN:
+                        this.playerEntity.sendContainerToPlayer(this.playerEntity.openContainer);
+                        break;
+
+                    // Modified cursor and clicked
+                    case PICKUP_SOME:
+                    case PICKUP_HALF:
+                    case PICKUP_ONE:
+                    case PLACE_ALL:
+                    case PLACE_SOME:
+                    case PLACE_ONE:
+                    case SWAP_WITH_CURSOR:
+                        this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, this.playerEntity.inventory.getItemStack()));
+                        this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.playerEntity.openContainer.windowId, p_147351_1_
+                                .func_149544_d(), this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d()).getStack()));
+                        break;
+
+                    // Modified clicked only
+                    case DROP_ALL_SLOT:
+                    case DROP_ONE_SLOT:
+                        this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.playerEntity.openContainer.windowId, p_147351_1_
+                                .func_149544_d(), this.playerEntity.openContainer.getSlot(p_147351_1_.func_149544_d()).getStack()));
+                        break;
+
+                    // Modified cursor only
+                    case DROP_ALL_CURSOR:
+                    case DROP_ONE_CURSOR:
+                    case CLONE_STACK:
+                        this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, this.playerEntity.inventory.getItemStack()));
+                        break;
+
+                    // Nothing
+                    case NOTHING:
+                        break;
+                    }
+
+                    return;
+                }
+            }
+            // CraftBukkit end
 
             if (ItemStack.areItemStacksEqual(p_147351_1_.func_149546_g(), itemstack))
             {
@@ -903,6 +2103,12 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 }
 
                 this.playerEntity.sendContainerAndContentsToPlayer(this.playerEntity.openContainer, arraylist);
+                // CraftBukkit start - Send a Set Slot to update the crafting result slot
+                if (type == SlotType.RESULT && itemstack != null)
+                {
+                    this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.playerEntity.openContainer.windowId, 0, itemstack));
+                }
+                // CraftBukkit end
             }
         }
     }
@@ -925,8 +2131,60 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             boolean flag = p_147344_1_.func_149627_c() < 0;
             ItemStack itemstack = p_147344_1_.func_149625_d();
             boolean flag1 = p_147344_1_.func_149627_c() >= 1 && p_147344_1_.func_149627_c() < 36 + InventoryPlayer.getHotbarSize();
-            boolean flag2 = itemstack == null || itemstack.getItem() != null;
+            // CraftBukkit - Add invalidItems check
+            boolean flag2 = itemstack == null || itemstack.getItem() != null && !invalidItems.contains(Item.getIdFromItem(itemstack.getItem()));
             boolean flag3 = itemstack == null || itemstack.getItemDamage() >= 0 && itemstack.stackSize <= 64 && itemstack.stackSize > 0;
+            // CraftBukkit start - Call click event
+            if (flag
+                    || (flag1 && !ItemStack.areItemStacksEqual(this.playerEntity.inventoryContainer.getSlot(p_147344_1_.func_149627_c()).getStack(),
+                            p_147344_1_.func_149625_d()))) // Insist on valid slot
+            {
+                org.bukkit.entity.HumanEntity player = this.playerEntity.getBukkitEntity();
+                InventoryView inventory = new CraftInventoryView(player, player.getInventory(), this.playerEntity.inventoryContainer);
+                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(p_147344_1_.func_149625_d()); // Should be packet107setcreativeslot.newitem
+                SlotType type = SlotType.QUICKBAR;
+
+                if (flag)
+                {
+                    type = SlotType.OUTSIDE;
+                }
+                else if (p_147344_1_.func_149627_c() < 36)
+                {
+                    if (p_147344_1_.func_149627_c() >= 5 && p_147344_1_.func_149627_c() < 9)
+                    {
+                        type = SlotType.ARMOR;
+                    }
+                    else
+                    {
+                        type = SlotType.CONTAINER;
+                    }
+                }
+
+                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type, flag ? -999 : p_147344_1_.func_149627_c(), item);
+                server.getPluginManager().callEvent(event);
+                itemstack = CraftItemStack.asNMSCopy(event.getCursor());
+
+                switch (event.getResult())
+                {
+                case ALLOW:
+                    // Plugin cleared the id / stacksize checks
+                    flag2 = flag3 = true;
+                    break;
+                case DEFAULT:
+                    break;
+                case DENY:
+                    // Reset the slot
+                    if (p_147344_1_.func_149627_c() >= 0)
+                    {
+                        this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(this.playerEntity.inventoryContainer.windowId, p_147344_1_
+                                .func_149627_c(), this.playerEntity.inventoryContainer.getSlot(p_147344_1_.func_149627_c()).getStack()));
+                        this.playerEntity.playerNetServerHandler.sendPacket(new S2FPacketSetSlot(-1, -1, null));
+                    }
+
+                    return;
+                }
+            }
+            // CraftBukkit end
 
             if (flag1 && flag2 && flag3)
             {
@@ -956,6 +2214,11 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processConfirmTransaction(C0FPacketConfirmTransaction p_147339_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
         Short oshort = (Short)this.field_147372_n.lookup(this.playerEntity.openContainer.windowId);
 
         if (oshort != null && p_147339_1_.func_149533_d() == oshort.shortValue() && this.playerEntity.openContainer.windowId == p_147339_1_.func_149532_c() && !this.playerEntity.openContainer.isPlayerNotUsingContainer(this.playerEntity))
@@ -966,6 +2229,11 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processUpdateSign(C12PacketUpdateSign p_147343_1_)
     {
+        if (this.playerEntity.isDead)
+        {
+            return; // CraftBukkit
+        }
+
         this.playerEntity.func_143004_u();
         WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
 
@@ -980,6 +2248,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 if (!tileentitysign.func_145914_a() || tileentitysign.func_145911_b() != this.playerEntity)
                 {
                     this.serverController.logWarning("Player " + this.playerEntity.getCommandSenderName() + " just tried to change non-editable sign");
+                    this.sendPacket(new S33PacketUpdateSign(p_147343_1_.func_149588_c(), p_147343_1_.func_149586_d(), p_147343_1_.func_149585_e(), tileentitysign.signText)); // CraftBukkit
                     return;
                 }
             }
@@ -990,6 +2259,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
             for (j = 0; j < 4; ++j)
             {
                 boolean flag = true;
+                p_147343_1_.func_149589_f()[j] = p_147343_1_.func_149589_f()[j].replaceAll("\uF700", "").replaceAll("\uF701", ""); // Spigot - Mac OSX sends weird chars
 
                 if (p_147343_1_.func_149589_f()[j].length() > 15)
                 {
@@ -1018,7 +2288,29 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 int k = p_147343_1_.func_149586_d();
                 i = p_147343_1_.func_149585_e();
                 TileEntitySign tileentitysign1 = (TileEntitySign)tileentity;
-                System.arraycopy(p_147343_1_.func_149589_f(), 0, tileentitysign1.signText, 0, 4);
+                // CraftBukkit start
+                Player player = this.server.getPlayer(this.playerEntity);
+                SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(j, k, i),
+                        this.server.getPlayer(this.playerEntity), p_147343_1_.func_149589_f());
+                this.server.getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    for (int l = 0; l < 4; ++l)
+                    {
+                        tileentitysign1.signText[l] = event.getLine(l);
+
+                        if (tileentitysign1.signText[l] == null)
+                        {
+                            tileentitysign1.signText[l] = "";
+                        }
+                    }
+
+                    tileentitysign1.field_145916_j = false;
+                }
+
+                // System.arraycopy(p_147343_1_.func_149589_f(), 0, tileentitysign1.signText, 0, 4);
+                // CraftBukkit end
                 tileentitysign1.markDirty();
                 worldserver.markBlockForUpdate(j, k, i);
             }
@@ -1041,7 +2333,22 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
     public void processPlayerAbilities(C13PacketPlayerAbilities p_147348_1_)
     {
-        this.playerEntity.capabilities.isFlying = p_147348_1_.func_149488_d() && this.playerEntity.capabilities.allowFlying;
+        // CraftBukkit start - d() should be isFlying()
+        if (this.playerEntity.capabilities.allowFlying && this.playerEntity.capabilities.isFlying != p_147348_1_.func_149488_d())
+        {
+            PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.server.getPlayer(this.playerEntity), p_147348_1_.func_149488_d());
+            this.server.getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.playerEntity.capabilities.isFlying = p_147348_1_.func_149488_d(); // Actually set the player's flying status
+            }
+            else
+            {
+                this.playerEntity.sendPlayerAbilities(); // Tell the player their ability was reverted
+            }
+        }
+        // CraftBukkit end
     }
 
     public void processTabComplete(C14PacketTabComplete p_147341_1_)
@@ -1093,16 +2399,18 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
 
                     if (itemstack.getItem() == Items.writable_book && itemstack.getItem() == itemstack1.getItem())
                     {
-                        itemstack1.setTagInfo("pages", itemstack.getTagCompound().getTagList("pages", 8));
+                        CraftEventFactory.handleEditBookEvent(playerEntity, itemstack); // CraftBukkit
                     }
 
                     return;
                 }
             }
-            catch (Exception exception4)
+            // CraftBukkit start
+            catch (Throwable throwable)
             {
-                logger.error("Couldn\'t handle book info", exception4);
-                return;
+                logger.error("Couldn\'t handle book info", throwable);
+                this.kickPlayerFromServer("Invalid book data!");
+                // CraftBukkit end
             }
             finally
             {
@@ -1135,19 +2443,18 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                 {
                     if (itemstack.getItem() == Items.written_book && itemstack1.getItem() == Items.writable_book)
                     {
-                        itemstack1.setTagInfo("author", new NBTTagString(this.playerEntity.getCommandSenderName()));
-                        itemstack1.setTagInfo("title", new NBTTagString(itemstack.getTagCompound().getString("title")));
-                        itemstack1.setTagInfo("pages", itemstack.getTagCompound().getTagList("pages", 8));
-                        itemstack1.func_150996_a(Items.written_book);
+                        CraftEventFactory.handleEditBookEvent(playerEntity, itemstack); // CraftBukkit
                     }
 
                     return;
                 }
             }
-            catch (Exception exception3)
+            // CraftBukkit start
+            catch (Throwable exception1)
             {
-                logger.error("Couldn\'t sign book", exception3);
-                return;
+                logger.error("Couldn\'t sign book", exception1);
+                this.kickPlayerFromServer("Invalid book data!");
+                // CraftBukkit end
             }
             finally
             {
@@ -1174,9 +2481,12 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                         ((ContainerMerchant)container).setCurrentRecipeIndex(i);
                     }
                 }
-                catch (Exception exception2)
+                // CraftBukkit start
+                catch (Throwable exception2)
                 {
                     logger.error("Couldn\'t select trade", exception2);
+                    this.kickPlayerFromServer("Invalid trade data!");
+                    // CraftBukkit end
                 }
             }
             else if ("MC|AdvCdm".equals(p_147349_1_.func_149559_c()))
@@ -1222,9 +2532,12 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                             this.playerEntity.addChatMessage(new ChatComponentTranslation("advMode.setCommand.success", new Object[] {s1}));
                         }
                     }
-                    catch (Exception exception1)
+                    // CraftBukkit start
+                    catch (Throwable exception3)
                     {
-                        logger.error("Couldn\'t set command block", exception1);
+                        logger.error("Couldn\'t set command block", exception3);
+                        this.kickPlayerFromServer("Invalid CommandBlock data!");
+                        // CraftBukkit end
                     }
                     finally
                     {
@@ -1257,9 +2570,12 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                             tileentitybeacon.markDirty();
                         }
                     }
-                    catch (Exception exception)
+                    // CraftBukkit start
+                    catch (Throwable exception4)
                     {
-                        logger.error("Couldn\'t set beacon", exception);
+                        logger.error("Couldn\'t set beacon", exception4);
+                        this.kickPlayerFromServer("Invalid beacon data!");
+                        // CraftBukkit end
                     }
                 }
             }
@@ -1281,6 +2597,13 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
                     containerrepair.updateItemName("");
                 }
             }
+            // CraftBukkit start
+            // Cauldron - bukkit registration moved to FML's ChannelRegistrationHandler
+            else
+            {
+                server.getMessenger().dispatchIncomingMessage(playerEntity.getBukkitEntity(), p_147349_1_.func_149559_c(), p_147349_1_.func_149558_e());
+            }
+            // CraftBukkit end
         }
     }
 
@@ -1292,6 +2615,21 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer
         }
     }
 
+    // CraftBukkit start - Add "isDisconnected" method
+    public final boolean isDisconnected()
+    {
+        return !this.netManager.channel().config().isAutoRead();
+    }
+
+    // CraftBukkit end
+
+    // Cauldron start
+    public CraftServer getCraftServer()
+    {
+        return this.server;
+    }
+    // Cauldron end
+
     static final class SwitchEnumState
         {
             static final int[] field_151290_a = new int[C16PacketClientStatus.EnumState.values().length];
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/NetworkManager.java ./eclipse/cauldron/src/main/java/net/minecraft/network/NetworkManager.java
index 98e6cb0..fc01da7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/NetworkManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/NetworkManager.java
@@ -25,6 +25,8 @@ import io.netty.util.concurrent.GenericFutureListener;
 import java.net.InetAddress;
 import java.net.SocketAddress;
 import java.util.Queue;
+import java.util.UUID;
+
 import javax.crypto.SecretKey;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraft.util.CryptManager;
@@ -38,6 +40,8 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import com.mojang.authlib.properties.Property;
+import com.google.common.collect.ImmutableSet; // Spigot
 
 public class NetworkManager extends SimpleChannelInboundHandler
 {
@@ -54,13 +58,32 @@ public class NetworkManager extends SimpleChannelInboundHandler
     private final Queue receivedPacketsQueue = Queues.newConcurrentLinkedQueue();
     private final Queue outboundPacketsQueue = Queues.newConcurrentLinkedQueue();
     private Channel channel;
-    private SocketAddress socketAddress;
+    // Spigot start
+    public SocketAddress socketAddress;
+    public Property[] spoofedProfile;
+    public UUID spoofedUUID;
+    // Spigot end
     private INetHandler netHandler;
     private EnumConnectionState connectionState;
     private IChatComponent terminationReason;
     private boolean field_152463_r;
     private static final String __OBFID = "CL_00001240";
 
+    // Spigot Start
+    public static final AttributeKey<Integer> protocolVersion = new AttributeKey<Integer>("protocol_version");
+    public static final ImmutableSet<Integer> SUPPORTED_VERSIONS = ImmutableSet.of(4, 5);
+    public static final int CURRENT_VERSION = 5;
+    public static int getVersion(Channel attr)
+    {
+        Integer ver = attr.attr( protocolVersion ).get();
+        return ( ver != null ) ? ver : CURRENT_VERSION;
+    }
+    public int getVersion()
+    {
+        return getVersion( this.channel );
+    }
+    // Spigot End
+
     public NetworkManager(boolean p_i45147_1_)
     {
         this.isClientSide = p_i45147_1_;
@@ -71,6 +94,7 @@ public class NetworkManager extends SimpleChannelInboundHandler
         super.channelActive(p_channelActive_1_);
         this.channel = p_channelActive_1_.channel();
         this.socketAddress = this.channel.remoteAddress();
+        this.field_152463_r = false; // Spigot
         this.setConnectionState(EnumConnectionState.HANDSHAKING);
     }
 
@@ -181,9 +205,9 @@ public class NetworkManager extends SimpleChannelInboundHandler
     {
         if (this.channel != null && this.channel.isOpen())
         {
-            while (!this.outboundPacketsQueue.isEmpty())
+            NetworkManager.InboundHandlerTuplePacketListener inboundhandlertuplepacketlistener = null;
+            while ((inboundhandlertuplepacketlistener = (NetworkManager.InboundHandlerTuplePacketListener)this.outboundPacketsQueue.poll()) != null)
             {
-                NetworkManager.InboundHandlerTuplePacketListener inboundhandlertuplepacketlistener = (NetworkManager.InboundHandlerTuplePacketListener)this.outboundPacketsQueue.poll();
                 this.dispatchPacket(inboundhandlertuplepacketlistener.field_150774_a, inboundhandlertuplepacketlistener.field_150773_b);
             }
         }
@@ -206,9 +230,17 @@ public class NetworkManager extends SimpleChannelInboundHandler
 
         if (this.netHandler != null)
         {
-            for (int i = 1000; !this.receivedPacketsQueue.isEmpty() && i >= 0; --i)
+            for (int i = 10000; !this.receivedPacketsQueue.isEmpty() && i >= 0; --i)
             {
-                Packet packet = (Packet)this.receivedPacketsQueue.poll();
+                Packet packet = (Packet) this.receivedPacketsQueue.poll();
+
+                // CraftBukkit start
+                if (!this.isChannelOpen() || !this.channel.config().isAutoRead())   // Should be isConnected
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
                 packet.processPacket(this.netHandler);
             }
 
@@ -225,6 +257,8 @@ public class NetworkManager extends SimpleChannelInboundHandler
 
     public void closeChannel(IChatComponent p_150718_1_)
     {
+        this.field_152463_r = false; // Spigot
+
         if (this.channel.isOpen())
         {
             this.channel.close();
@@ -254,7 +288,7 @@ public class NetworkManager extends SimpleChannelInboundHandler
                 {
                     ;
                 }
-
+                try { p_initChannel_1_.config().setOption(ChannelOption.SO_KEEPALIVE, true); } catch (ChannelException ignored) {}
                 try
                 {
                     p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(false));
@@ -322,6 +356,13 @@ public class NetworkManager extends SimpleChannelInboundHandler
         return channel;
     }
 
+    // Spigot Start
+    public SocketAddress getRawAddress()
+    {
+        return this.channel.remoteAddress();
+    }
+    // Spigot End
+
     static class InboundHandlerTuplePacketListener
         {
             private final Packet field_150774_a;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/NetworkSystem.java ./eclipse/cauldron/src/main/java/net/minecraft/network/NetworkSystem.java
index 68aa088..eca4f99 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/NetworkSystem.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/NetworkSystem.java
@@ -139,6 +139,14 @@ public class NetworkSystem
 
         synchronized (this.networkManagers)
         {
+            // Spigot Start
+            // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+            if (org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0)
+            {
+                Collections.shuffle(this.networkManagers);
+            }
+
+            // Spigot End
             Iterator iterator = this.networkManagers.iterator();
 
             while (iterator.hasNext())
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/Packet.java ./eclipse/cauldron/src/main/java/net/minecraft/network/Packet.java
index 2b0d210..dbf8164 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/Packet.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/Packet.java
@@ -9,6 +9,7 @@ import org.apache.logging.log4j.Logger;
 public abstract class Packet
 {
     private static final Logger logger = LogManager.getLogger();
+    public final long timestamp = System.currentTimeMillis(); // CraftBukkit
     private static final String __OBFID = "CL_00001272";
 
     public static Packet generatePacket(BiMap p_148839_0_, int p_148839_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/handshake/client/C00Handshake.java ./eclipse/cauldron/src/main/java/net/minecraft/network/handshake/client/C00Handshake.java
index d83af93..c9c6c22 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/handshake/client/C00Handshake.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/handshake/client/C00Handshake.java
@@ -12,8 +12,8 @@ import net.minecraft.network.handshake.INetHandlerHandshakeServer;
 public class C00Handshake extends Packet
 {
     private int field_149600_a;
-    private String field_149598_b;
-    private int field_149599_c;
+    public String field_149598_b; // CraftBukkit private -> public
+    public int field_149599_c; // CraftBukkit private -> public
     private EnumConnectionState field_149597_d;
     private static final String __OBFID = "CL_00001372";
 
@@ -31,7 +31,7 @@ public class C00Handshake extends Packet
     public void readPacketData(PacketBuffer p_148837_1_) throws IOException
     {
         this.field_149600_a = p_148837_1_.readVarIntFromBuffer();
-        this.field_149598_b = p_148837_1_.readStringFromBuffer(255);
+        this.field_149598_b = p_148837_1_.readStringFromBuffer(Short.MAX_VALUE); // Spigot
         this.field_149599_c = p_148837_1_.readUnsignedShort();
         this.field_149597_d = EnumConnectionState.func_150760_a(p_148837_1_.readVarIntFromBuffer());
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C01PacketChatMessage.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C01PacketChatMessage.java
index 0c60962..a0f4879 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C01PacketChatMessage.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C01PacketChatMessage.java
@@ -52,4 +52,11 @@ public class C01PacketChatMessage extends Packet
     {
         this.processPacket((INetHandlerPlayServer)p_148833_1_);
     }
+
+    // CraftBukkit start - make chat async
+    public boolean hasPriority()
+    {
+        return !this.field_149440_a.startsWith("/");
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C03PacketPlayer.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C03PacketPlayer.java
index d145e70..be60514 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C03PacketPlayer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C03PacketPlayer.java
@@ -10,15 +10,17 @@ import net.minecraft.network.play.INetHandlerPlayServer;
 
 public class C03PacketPlayer extends Packet
 {
-    protected double field_149479_a;
-    protected double field_149477_b;
-    protected double field_149478_c;
-    protected double field_149475_d;
-    protected float field_149476_e;
-    protected float field_149473_f;
+    // CraftBukkit start - protected -> public
+    public double field_149479_a;
+    public double field_149477_b;
+    public double field_149478_c;
+    public double field_149475_d;
+    public float field_149476_e;
+    public float field_149473_f;
+    // CraftBukkit end
     protected boolean field_149474_g;
-    protected boolean field_149480_h;
-    protected boolean field_149481_i;
+    public boolean field_149480_h; // CraftBukkit - protected -> public
+    public boolean field_149481_i;
     private static final String __OBFID = "CL_00001360";
 
     public C03PacketPlayer() {}
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C0DPacketCloseWindow.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C0DPacketCloseWindow.java
index 88b3f8f..ded915b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C0DPacketCloseWindow.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C0DPacketCloseWindow.java
@@ -15,11 +15,12 @@ public class C0DPacketCloseWindow extends Packet
 
     public C0DPacketCloseWindow() {}
 
-    @SideOnly(Side.CLIENT)
+    // CraftBukkit start - Add constructor
     public C0DPacketCloseWindow(int p_i45247_1_)
     {
         this.field_149556_a = p_i45247_1_;
     }
+    // CraftBukkit end
 
     public void processPacket(INetHandlerPlayServer p_148833_1_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C17PacketCustomPayload.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C17PacketCustomPayload.java
index 677136d..e60f4d6 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/client/C17PacketCustomPayload.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/client/C17PacketCustomPayload.java
@@ -12,7 +12,7 @@ import net.minecraft.network.play.INetHandlerPlayServer;
 public class C17PacketCustomPayload extends Packet
 {
     private String field_149562_a;
-    private int field_149560_b;
+    public int field_149560_b; // CraftBukkit - private -> public
     private byte[] field_149561_c;
     private static final String __OBFID = "CL_00001356";
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/server/S05PacketSpawnPosition.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/server/S05PacketSpawnPosition.java
index f483992..8fe0afa 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/server/S05PacketSpawnPosition.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/server/S05PacketSpawnPosition.java
@@ -10,9 +10,9 @@ import net.minecraft.network.play.INetHandlerPlayClient;
 
 public class S05PacketSpawnPosition extends Packet
 {
-    private int field_149364_a;
-    private int field_149362_b;
-    private int field_149363_c;
+    public int field_149364_a; // CraftBukkit - private -> public
+    public int field_149362_b; // CraftBukkit - private -> public
+    public int field_149363_c; // CraftBukkit - private -> public
     private static final String __OBFID = "CL_00001336";
 
     public S05PacketSpawnPosition() {}
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/server/S21PacketChunkData.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/server/S21PacketChunkData.java
index 1513e4e..2ffd736 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/server/S21PacketChunkData.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/server/S21PacketChunkData.java
@@ -45,7 +45,7 @@ public class S21PacketChunkData extends Packet
 
     private void deflate()
     {
-        Deflater deflater = new Deflater(-1);
+        Deflater deflater = new Deflater(4);
         try
         {
             deflater.setInput(this.field_149278_f, 0, this.field_149278_f.length);
@@ -198,8 +198,10 @@ public class S21PacketChunkData extends Packet
             if (aextendedblockstorage[l] != null && (!p_149269_1_ || !aextendedblockstorage[l].isEmpty()) && (p_149269_2_ & 1 << l) != 0)
             {
                 nibblearray = aextendedblockstorage[l].getMetadataArray();
-                System.arraycopy(nibblearray.data, 0, abyte, j, nibblearray.data.length);
-                j += nibblearray.data.length;
+                // Spigot start
+                nibblearray.copyToByteArray(abyte, j);
+                j += nibblearray.getByteLength();
+                // Spigot end
             }
         }
 
@@ -208,8 +210,10 @@ public class S21PacketChunkData extends Packet
             if (aextendedblockstorage[l] != null && (!p_149269_1_ || !aextendedblockstorage[l].isEmpty()) && (p_149269_2_ & 1 << l) != 0)
             {
                 nibblearray = aextendedblockstorage[l].getBlocklightArray();
-                System.arraycopy(nibblearray.data, 0, abyte, j, nibblearray.data.length);
-                j += nibblearray.data.length;
+                // Spigot start
+                nibblearray.copyToByteArray(abyte, j);
+                j += nibblearray.getByteLength();
+                // Spigot end
             }
         }
 
@@ -220,8 +224,10 @@ public class S21PacketChunkData extends Packet
                 if (aextendedblockstorage[l] != null && (!p_149269_1_ || !aextendedblockstorage[l].isEmpty()) && (p_149269_2_ & 1 << l) != 0)
                 {
                     nibblearray = aextendedblockstorage[l].getSkylightArray();
-                    System.arraycopy(nibblearray.data, 0, abyte, j, nibblearray.data.length);
-                    j += nibblearray.data.length;
+                    // Spigot start
+                    nibblearray.copyToByteArray(abyte, j);
+                    j += nibblearray.getByteLength();
+                    // Spigot end
                 }
             }
         }
@@ -233,8 +239,10 @@ public class S21PacketChunkData extends Packet
                 if (aextendedblockstorage[l] != null && (!p_149269_1_ || !aextendedblockstorage[l].isEmpty()) && aextendedblockstorage[l].getBlockMSBArray() != null && (p_149269_2_ & 1 << l) != 0)
                 {
                     nibblearray = aextendedblockstorage[l].getBlockMSBArray();
-                    System.arraycopy(nibblearray.data, 0, abyte, j, nibblearray.data.length);
-                    j += nibblearray.data.length;
+                    // Spigot start
+                    nibblearray.copyToByteArray(abyte, j);
+                    j += nibblearray.getByteLength();
+                    // Spigot end
                 }
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/play/server/S26PacketMapChunkBulk.java ./eclipse/cauldron/src/main/java/net/minecraft/network/play/server/S26PacketMapChunkBulk.java
index f156d1e..f9cd2e1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/play/server/S26PacketMapChunkBulk.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/play/server/S26PacketMapChunkBulk.java
@@ -24,10 +24,18 @@ public class S26PacketMapChunkBulk extends Packet
     private byte[][] field_149260_f;
     private int field_149261_g;
     private boolean field_149267_h;
-    private static byte[] field_149268_i = new byte[0];
-    private static final String __OBFID = "CL_00001306";
-    private int maxLen = 0;
-    private Semaphore deflateGate;
+    private byte[] field_149268_i = new byte[0]; // CraftBukkit - remove static
+    // CraftBukkit start
+    static final ThreadLocal<Deflater> localDeflater = new ThreadLocal<Deflater>()
+    {
+        @Override
+        protected Deflater initialValue()
+        {
+            // Don't use higher compression level, slows things down too much
+            return new Deflater(4);
+        }
+    };
+    // CraftBukkit end
 
     public S26PacketMapChunkBulk() {}
 
@@ -46,6 +54,15 @@ public class S26PacketMapChunkBulk extends Packet
         {
             Chunk chunk = (Chunk)p_i45197_1_.get(k);
             S21PacketChunkData.Extracted extracted = S21PacketChunkData.func_149269_a(chunk, true, 65535);
+
+            if (field_149268_i.length < j + extracted.field_150282_a.length)
+            {
+                byte[] abyte = new byte[j + extracted.field_150282_a.length];
+                System.arraycopy(field_149268_i, 0, abyte, 0, field_149268_i.length);
+                field_149268_i = abyte;
+            }
+
+            System.arraycopy(extracted.field_150282_a, 0, field_149268_i, j, extracted.field_150282_a.length);
             j += extracted.field_150282_a.length;
             this.field_149266_a[k] = chunk.xPosition;
             this.field_149264_b[k] = chunk.zPosition;
@@ -53,34 +70,36 @@ public class S26PacketMapChunkBulk extends Packet
             this.field_149262_d[k] = extracted.field_150281_c;
             this.field_149260_f[k] = extracted.field_150282_a;
         }
-        this.deflateGate = new Semaphore(1);
-        maxLen = j;
-    }
-
-    private void deflate()
-    {
-        byte[] data = new byte[maxLen];
-        int offset = 0;
-        for (int x = 0; x < field_149260_f.length; x++)
-        {
-            System.arraycopy(field_149260_f[x], 0, data, offset, field_149260_f[x].length);
-            offset += field_149260_f[x].length;
-        }
+        /* CraftBukkit start - Moved to compress()
         Deflater deflater = new Deflater(-1);
 
-        try
-        {
-            deflater.setInput(data, 0, data.length);
+        try {
+            deflater.setInput(buildBuffer, 0, j);
             deflater.finish();
-            byte[] deflated = new byte[data.length];
-            this.field_149261_g = deflater.deflate(deflated);
-            this.field_149263_e = deflated;
+            this.buffer = new byte[j];
+            this.size = deflater.deflate(this.buffer);
+        } finally {
+            deflater.end();
         }
-        finally
+        */
+    }
+
+    // Add compression method
+    public void compress()
+    {
+        if (this.field_149263_e != null)
         {
-            deflater.end();
+            return;
         }
+
+        Deflater deflater = localDeflater.get();
+        deflater.reset();
+        deflater.setInput(this.field_149268_i);
+        deflater.finish();
+        this.field_149263_e = new byte[this.field_149268_i.length + 100];
+        this.field_149261_g = deflater.deflate(this.field_149263_e);
     }
+    // CraftBukkit end
 
     public static int func_149258_c()
     {
@@ -155,16 +174,7 @@ public class S26PacketMapChunkBulk extends Packet
 
     public void writePacketData(PacketBuffer p_148840_1_) throws IOException
     {
-        if (this.field_149263_e == null)
-        {
-            deflateGate.acquireUninterruptibly();
-            if (this.field_149263_e == null)
-            {
-                deflate();
-            }
-            deflateGate.release();
-        }
-
+        compress(); // CraftBukkit
         p_148840_1_.writeShort(this.field_149266_a.length);
         p_148840_1_.writeInt(this.field_149261_g);
         p_148840_1_.writeBoolean(this.field_149267_h);
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/rcon/RConConsoleSource.java ./eclipse/cauldron/src/main/java/net/minecraft/network/rcon/RConConsoleSource.java
index 35e6ccc..5274190 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/rcon/RConConsoleSource.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/rcon/RConConsoleSource.java
@@ -25,6 +25,13 @@ public class RConConsoleSource implements ICommandSender
         return new ChatComponentText(this.getCommandSenderName());
     }
 
+    // CraftBukkit start - Send a String
+    public void sendMessage(String message)
+    {
+        this.buffer.append(message);
+    }
+    // CraftBukkit end
+
     public void addChatMessage(IChatComponent p_145747_1_)
     {
         this.buffer.append(p_145747_1_.getUnformattedText());
diff --git ./eclipse/Clean/src/main/java/net/minecraft/network/rcon/RConThreadClient.java ./eclipse/cauldron/src/main/java/net/minecraft/network/rcon/RConThreadClient.java
index aee0c58..343cfba 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/network/rcon/RConThreadClient.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/network/rcon/RConThreadClient.java
@@ -41,11 +41,11 @@ public class RConThreadClient extends RConThreadBase
 
     public void run()
     {
-        while (true)
+        try
         {
-            try
+            while (true)
             {
-                if (!this.running)
+                if (!this.running || clientSocket == null)
                 {
                     break;
                 }
@@ -53,13 +53,14 @@ public class RConThreadClient extends RConThreadBase
                 BufferedInputStream bufferedinputstream = new BufferedInputStream(this.clientSocket.getInputStream());
                 int i = bufferedinputstream.read(this.buffer, 0, 1460);
 
-                if (10 <= i)
+                if (i < 10)
                 {
                     byte b0 = 0;
                     int j = RConUtils.getBytesAsLEInt(this.buffer, 0, i);
 
                     if (j != i - 4)
                     {
+                         this.running = false; // Cauldron
                         return;
                     }
 
@@ -110,26 +111,23 @@ public class RConThreadClient extends RConThreadBase
                     }
                 }
             }
+            }
             catch (SocketTimeoutException sockettimeoutexception)
             {
-                break;
+                return;
             }
             catch (IOException ioexception)
             {
-                break;
+                return;
             }
             catch (Exception exception1)
             {
                 field_164005_h.error("Exception whilst parsing RCON input", exception1);
-                break;
             }
             finally
             {
                 this.closeSocket();
             }
-
-            return;
-        }
     }
 
     private void sendResponse(int p_72654_1_, int p_72654_2_, String p_72654_3_) throws IOException
@@ -167,6 +165,7 @@ public class RConThreadClient extends RConThreadBase
 
     private void closeSocket()
     {
+        this.running = false;
         if (null != this.clientSocket)
         {
             try
diff --git ./eclipse/Clean/src/main/java/net/minecraft/potion/Potion.java ./eclipse/cauldron/src/main/java/net/minecraft/potion/Potion.java
index 3adda09..014cfb0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/potion/Potion.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/potion/Potion.java
@@ -17,6 +17,12 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.StringUtils;
 
+// CraftBukkit start
+import net.minecraft.entity.projectile.EntityPotion;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+// CraftBukkit end
+
 public class Potion
 {
     public static final Potion[] potionTypes = new Potion[32];
@@ -78,6 +84,7 @@ public class Potion
         }
 
         this.liquidColor = p_i1573_3_;
+        org.bukkit.potion.PotionEffectType.registerPotionEffectType(new org.bukkit.craftbukkit.potion.CraftPotionEffectType(this)); // CraftBukkit
     }
 
     protected Potion setIconIndex(int p_76399_1_, int p_76399_2_)
@@ -97,14 +104,14 @@ public class Potion
         {
             if (p_76394_1_.getHealth() < p_76394_1_.getMaxHealth())
             {
-                p_76394_1_.heal(1.0F);
+                p_76394_1_.heal(1.0F, RegainReason.MAGIC_REGEN); // CraftBukkit
             }
         }
         else if (this.id == poison.id)
         {
             if (p_76394_1_.getHealth() > 1.0F)
             {
-                p_76394_1_.attackEntityFrom(DamageSource.magic, 1.0F);
+                p_76394_1_.attackEntityFrom(CraftEventFactory.POISON, 1.0F); // CraftBukkit - DamageSource.MAGIC -> CraftEventFactory.POISON
             }
         }
         else if (this.id == wither.id)
@@ -131,12 +138,19 @@ public class Potion
         }
         else
         {
-            p_76394_1_.heal((float)Math.max(4 << p_76394_2_, 0));
+            p_76394_1_.heal((float)Math.max(4 << p_76394_2_, 0), RegainReason.MAGIC); // CraftBukkit
         }
     }
 
     public void affectEntity(EntityLivingBase p_76402_1_, EntityLivingBase p_76402_2_, int p_76402_3_, double p_76402_4_)
     {
+        // CraftBukkit start - Delegate; we need EntityPotion
+        applyInstantEffect(p_76402_1_, p_76402_2_, p_76402_3_, p_76402_4_, null);
+    }
+
+    public void applyInstantEffect(EntityLivingBase p_76402_1_, EntityLivingBase p_76402_2_, int p_76402_3_, double p_76402_4_, EntityPotion potion)
+    {
+        // CraftBukkit end
         int j;
 
         if ((this.id != heal.id || p_76402_2_.isEntityUndead()) && (this.id != harm.id || !p_76402_2_.isEntityUndead()))
@@ -151,14 +165,15 @@ public class Potion
                 }
                 else
                 {
-                    p_76402_2_.attackEntityFrom(DamageSource.causeIndirectMagicDamage(p_76402_2_, p_76402_1_), (float)j);
+                    // CraftBukkit - The "damager" needs to be the potion
+                    p_76402_2_.attackEntityFrom(DamageSource.causeIndirectMagicDamage(potion != null ? potion : p_76402_2_, p_76402_1_), (float)j);
                 }
             }
         }
         else
         {
             j = (int)(p_76402_4_ * (double)(4 << p_76402_3_) + 0.5D);
-            p_76402_2_.heal((float)j);
+            p_76402_2_.heal((float)j, RegainReason.MAGIC); // CraftBukkit
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java ./eclipse/cauldron/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java
index 4bf8cee..d3542e4 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java
@@ -32,7 +32,7 @@ public class ServerScoreboard extends Scoreboard
 
         if (this.field_96553_b.contains(p_96536_1_.func_96645_d()))
         {
-            this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3CPacketUpdateScore(p_96536_1_, 0));
+            this.sendAll(new S3CPacketUpdateScore(p_96536_1_, 0)); // CraftBukkit - Internal packet method
         }
 
         this.func_96551_b();
@@ -41,7 +41,7 @@ public class ServerScoreboard extends Scoreboard
     public void func_96516_a(String p_96516_1_)
     {
         super.func_96516_a(p_96516_1_);
-        this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3CPacketUpdateScore(p_96516_1_));
+        this.sendAll(new S3CPacketUpdateScore(p_96516_1_)); // CraftBukkit - Internal packet method
         this.func_96551_b();
     }
 
@@ -54,7 +54,7 @@ public class ServerScoreboard extends Scoreboard
         {
             if (this.func_96552_h(scoreobjective1) > 0)
             {
-                this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3DPacketDisplayScoreboard(p_96530_1_, p_96530_2_));
+                this.sendAll(new S3DPacketDisplayScoreboard(p_96530_1_, p_96530_2_)); // CraftBukkit - Internal packet method
             }
             else
             {
@@ -66,7 +66,7 @@ public class ServerScoreboard extends Scoreboard
         {
             if (this.field_96553_b.contains(p_96530_2_))
             {
-                this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3DPacketDisplayScoreboard(p_96530_1_, p_96530_2_));
+                this.sendAll(new S3DPacketDisplayScoreboard(p_96530_1_, p_96530_2_)); // CraftBukkit - Internal packet method
             }
             else
             {
@@ -82,7 +82,7 @@ public class ServerScoreboard extends Scoreboard
         if (super.func_151392_a(p_151392_1_, p_151392_2_))
         {
             ScorePlayerTeam scoreplayerteam = this.getTeam(p_151392_2_);
-            this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3EPacketTeams(scoreplayerteam, Arrays.asList(new String[] {p_151392_1_}), 3));
+            this.sendAll(new S3EPacketTeams(scoreplayerteam, Arrays.asList(new String[] { p_151392_1_}), 3)); // CraftBukkit - Internal packet method
             this.func_96551_b();
             return true;
         }
@@ -95,7 +95,7 @@ public class ServerScoreboard extends Scoreboard
     public void removePlayerFromTeam(String p_96512_1_, ScorePlayerTeam p_96512_2_)
     {
         super.removePlayerFromTeam(p_96512_1_, p_96512_2_);
-        this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3EPacketTeams(p_96512_2_, Arrays.asList(new String[] {p_96512_1_}), 4));
+        this.sendAll(new S3EPacketTeams(p_96512_2_, Arrays.asList(new String[] { p_96512_1_}), 4)); // CraftBukkit - Internal packet method
         this.func_96551_b();
     }
 
@@ -111,7 +111,7 @@ public class ServerScoreboard extends Scoreboard
 
         if (this.field_96553_b.contains(p_96532_1_))
         {
-            this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3BPacketScoreboardObjective(p_96532_1_, 2));
+            this.sendAll(new S3BPacketScoreboardObjective(p_96532_1_, 2)); // CraftBukkit - Internal packet method
         }
 
         this.func_96551_b();
@@ -132,21 +132,21 @@ public class ServerScoreboard extends Scoreboard
     public void broadcastTeamCreated(ScorePlayerTeam p_96523_1_)
     {
         super.broadcastTeamCreated(p_96523_1_);
-        this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3EPacketTeams(p_96523_1_, 0));
+        this.sendAll(new S3EPacketTeams(p_96523_1_, 0)); // CraftBukkit - Internal packet method
         this.func_96551_b();
     }
 
     public void broadcastTeamRemoved(ScorePlayerTeam p_96538_1_)
     {
         super.broadcastTeamRemoved(p_96538_1_);
-        this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3EPacketTeams(p_96538_1_, 2));
+        this.sendAll(new S3EPacketTeams(p_96538_1_, 2)); // CraftBukkit - Internal packet method
         this.func_96551_b();
     }
 
     public void func_96513_c(ScorePlayerTeam p_96513_1_)
     {
         super.func_96513_c(p_96513_1_);
-        this.scoreboardMCServer.getConfigurationManager().sendPacketToAllPlayers(new S3EPacketTeams(p_96513_1_, 1));
+        this.sendAll(new S3EPacketTeams(p_96513_1_, 1)); // CraftBukkit - Internal packet method
         this.func_96551_b();
     }
 
@@ -194,7 +194,13 @@ public class ServerScoreboard extends Scoreboard
 
         while (iterator.hasNext())
         {
-            EntityPlayerMP entityplayermp = (EntityPlayerMP)iterator.next();
+            EntityPlayerMP entityplayermp = (EntityPlayerMP) iterator.next();
+
+            if (entityplayermp.getBukkitEntity().getScoreboard().getHandle() != this)
+            {
+                continue;    // CraftBukkit - Only players on this board
+            }
+
             Iterator iterator1 = list.iterator();
 
             while (iterator1.hasNext())
@@ -230,7 +236,13 @@ public class ServerScoreboard extends Scoreboard
 
         while (iterator.hasNext())
         {
-            EntityPlayerMP entityplayermp = (EntityPlayerMP)iterator.next();
+            EntityPlayerMP entityplayermp = (EntityPlayerMP) iterator.next();
+
+            if (entityplayermp.getBukkitEntity().getScoreboard().getHandle() != this)
+            {
+                continue;    // CraftBukkit - Only players on this board
+            }
+
             Iterator iterator1 = list.iterator();
 
             while (iterator1.hasNext())
@@ -257,4 +269,17 @@ public class ServerScoreboard extends Scoreboard
 
         return i;
     }
+
+    // CraftBukkit start - Send to players
+    private void sendAll(Packet packet)
+    {
+        for (EntityPlayerMP entityplayermp : (List<EntityPlayerMP>) this.scoreboardMCServer.getConfigurationManager().playerEntityList)
+        {
+            if (entityplayermp.getBukkitEntity().getScoreboard().getHandle() == this)
+            {
+                entityplayermp.playerNetServerHandler.sendPacket(packet);
+            }
+        }
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/MinecraftServer.java ./eclipse/cauldron/src/main/java/net/minecraft/server/MinecraftServer.java
index c23c8fa..9a3d8da 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/MinecraftServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -33,7 +34,10 @@ import java.util.List;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.Callable;
+import java.util.logging.Level;
+
 import javax.imageio.ImageIO;
+
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.ICommandManager;
 import net.minecraft.command.ICommandSender;
@@ -50,6 +54,7 @@ import net.minecraft.profiler.IPlayerUsage;
 import net.minecraft.profiler.PlayerUsageSnooper;
 import net.minecraft.profiler.Profiler;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.gui.IUpdatePlayerListBox;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.server.management.ServerConfigurationManager;
@@ -80,18 +86,54 @@ import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.WorldEvent;
 
+
+// CraftBukkit start
+import java.io.IOException;
+
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
+
+import org.bukkit.World.Environment;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.world.WorldSaveEvent;
+
+// CraftBukkit end
+// Cauldron start
+import java.util.Map;
+import java.lang.reflect.Constructor;
+
+import joptsimple.OptionParser;
+import kcauldron.KCauldronConfig;
+import cpw.mods.fml.common.asm.transformers.SideTransformer;
+import net.minecraft.command.ServerCommand;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.world.WorldProvider;
+import net.minecraftforge.cauldron.CauldronUtils;
+import net.minecraftforge.cauldron.configuration.CauldronConfig;
+import net.minecraftforge.cauldron.configuration.TileEntityConfig;
+import net.minecraftforge.common.util.EnumHelper;
+
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.block.CraftBlock;
+// Cauldron end
+
 public abstract class MinecraftServer implements ICommandSender, Runnable, IPlayerUsage
 {
     private static final Logger logger = LogManager.getLogger();
     public static final File field_152367_a = new File("usercache.json");
     private static MinecraftServer mcServer;
-    private final ISaveFormat anvilConverterForAnvilFile;
+    public ISaveFormat anvilConverterForAnvilFile; // CraftBukkit - private final -> public
     private final PlayerUsageSnooper usageSnooper = new PlayerUsageSnooper("server", this, getSystemTimeMillis());
-    private final File anvilFile;
+    public File anvilFile; // CraftBukkit - private final -> public
     private final List tickables = new ArrayList();
     private final ICommandManager commandManager;
     public final Profiler theProfiler = new Profiler();
-    private final NetworkSystem field_147144_o;
+    private NetworkSystem field_147144_o; // Spigot
     private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
     private final Random field_147146_q = new Random();
     @SideOnly(Side.SERVER)
@@ -135,8 +177,40 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
     private long field_147142_T = 0L;
     private final GameProfileRepository field_152365_W;
     private final PlayerProfileCache field_152366_X;
+    // CraftBukkit start
+    public List<WorldServer> worlds = new ArrayList<WorldServer>();
+    public org.bukkit.craftbukkit.CraftServer server;
+    public static OptionSet options; // Cauldron
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+    public ConsoleReader reader;
+    public static int currentTick = (int)(System.currentTimeMillis() / 50);
+    public final Thread primaryThread;
+    public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    // CraftBukkit end
+    // Spigot start
+    private static final int TPS = 20;
+    private static final int TICK_TIME = 1000000000 / TPS;
+    public final double[] recentTps = new double[ 3 ];
+    // Spigot end
+    // Cauldron start
+    public static CauldronConfig cauldronConfig;
+    public static KCauldronConfig kcauldronConfig;
+    public static TileEntityConfig tileEntityConfig;
+    public static YamlConfiguration configuration;
+    public static YamlConfiguration commandsConfiguration;
+    public static File configFile;
+    public static File commandFile;
+    public static double currentTps = 0;
+    public static boolean useJline = true;
+    public static boolean useConsole = true;
+    public static boolean callingForgeTick = false;
+    public static List<Class<? extends TileEntity>> bannedTileEntityUpdates = new ArrayList<Class<? extends TileEntity>>();
+    // Cauldron end
     private static final String __OBFID = "CL_00001462";
 
+    // Cauldron start - IntegratedServer requires this
     public MinecraftServer(File p_i45281_1_, Proxy p_i45281_2_)
     {
         this.field_152366_X = new PlayerProfileCache(this, field_152367_a);
@@ -149,9 +223,69 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         this.field_152364_T = new YggdrasilAuthenticationService(p_i45281_2_, UUID.randomUUID().toString());
         this.field_147143_S = this.field_152364_T.createMinecraftSessionService();
         this.field_152365_W = this.field_152364_T.createProfileRepository();
+        this.primaryThread = new Thread(this, "Server thread"); // CraftBukkit
+        kcauldronConfig = new KCauldronConfig();
+        cauldronConfig = new CauldronConfig("cauldron.yml", "cauldron");
+        tileEntityConfig = new TileEntityConfig("tileentities.yml", "cauldron_te");
     }
+    // Cauldron end
 
-    protected abstract boolean startServer() throws IOException;
+    public MinecraftServer(OptionSet options, Proxy proxy)   // CraftBukkit - signature file -> OptionSet
+    {
+        this.field_152366_X = new PlayerProfileCache(this, field_152367_a);
+        mcServer = this;
+        this.serverProxy = proxy;
+        // this.anvilFile = p_i45281_1_; // CraftBukkit
+        // this.field_147144_o = new NetworkSystem(this); // Spigot
+        this.commandManager = new ServerCommandManager();
+        // this.anvilConverterForAnvilFile = new AnvilSaveConverter(p_i45281_1_);  // CraftBukkit - moved to DedicatedServer.init
+        this.field_152364_T = new YggdrasilAuthenticationService(proxy, UUID.randomUUID().toString());
+        this.field_147143_S = this.field_152364_T.createMinecraftSessionService();
+        this.field_152365_W = this.field_152364_T.createProfileRepository();
+        // Cauldron start
+        kcauldronConfig = new KCauldronConfig();
+        cauldronConfig = new CauldronConfig("cauldron.yml", "cauldron");
+        tileEntityConfig = new TileEntityConfig("tileentities.yml", "cauldron_te");
+        // Cauldron end
+        // CraftBukkit start
+        this.options = options;
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null)
+        {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            this.useJline = false; // Cauldron
+        }
+
+        try
+        {
+            this.reader = new ConsoleReader(System.in, System.out);
+            this.reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+        }
+        catch (Throwable e)
+        {
+            try
+            {
+                // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                this.useJline = false; // Cauldron
+                this.reader = new ConsoleReader(System.in, System.out);
+                this.reader.setExpandEvents(false);
+            }
+            catch (IOException ex)
+            {
+                logger.warn((String) null, ex);
+            }
+        }
+        net.minecraftforge.cauldron.CauldronHooks.enableThreadContentionMonitoring();
+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
+        primaryThread = new Thread(this, "Server thread"); // Moved from main
+    }
+    
+    public abstract PropertyManager getPropertyManager();
+    // CraftBukkit end
+
+    protected abstract boolean startServer() throws java.net.UnknownHostException; // CraftBukkit - throws UnknownHostException
 
     protected void convertMapIfNeeded(String p_71237_1_)
     {
@@ -195,10 +330,17 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
     protected void loadAllWorlds(String p_71247_1_, String p_71247_2_, long p_71247_3_, WorldType p_71247_5_, String p_71247_6_)
     {
+        // Cauldron start - register vanilla server commands
+        ServerCommandManager vanillaCommandManager = (ServerCommandManager)this.getCommandManager();
+        vanillaCommandManager.registerVanillaCommands();
+        // Cauldron end
         this.convertMapIfNeeded(p_71247_1_);
         this.setUserMessage("menu.loadingLevel");
-        ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(p_71247_1_, true);
-        WorldInfo worldinfo = isavehandler.loadWorldInfo();
+        // Cauldron start - SaveHandler/WorldInfo below are not used and must be disabled to prevent FML receiving different handlers for overworld
+        //ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(p_71247_1_, true);
+        //WorldInfo worldinfo = isavehandler.loadWorldInfo();
+        // Cauldron end
+        /* CraftBukkit start - Removed worldsettings
         WorldSettings worldsettings;
 
         if (worldinfo == null)
@@ -215,11 +357,79 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         {
             worldsettings.enableBonusChest();
         }
+        // */
 
-        WorldServer overWorld = (isDemo() ? new DemoWorldServer(this, isavehandler, p_71247_2_, 0, theProfiler) : new WorldServer(this, isavehandler, p_71247_2_, 0, worldsettings, theProfiler));
-        for (int dim : DimensionManager.getStaticDimensionIDs())
+        WorldSettings worldsettings = new WorldSettings(p_71247_3_, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), p_71247_5_);
+        worldsettings.func_82750_a(p_71247_6_);
+        WorldServer world;
+
+        // Cauldron - overworld generator is handled in World after plugins load
+        WorldServer overWorld = (isDemo() ? new DemoWorldServer(this, new AnvilSaveHandler(server.getWorldContainer(), p_71247_2_, true), p_71247_2_, 0, theProfiler) : new WorldServer(this, new AnvilSaveHandler(server.getWorldContainer(), p_71247_2_, true), p_71247_2_, 0, worldsettings, theProfiler, Environment.getEnvironment(0), null));
+
+        for (int dimension : DimensionManager.getStaticDimensionIDs())
         {
-            WorldServer world = (dim == 0 ? overWorld : new WorldServerMulti(this, isavehandler, p_71247_2_, dim, worldsettings, overWorld, theProfiler));
+            String worldType = "";
+            String name = "";
+            String oldName = "";
+            org.bukkit.generator.ChunkGenerator gen = null;
+            // Cauldron start
+            Environment env = Environment.getEnvironment(dimension);
+            if (dimension != 0)
+            {
+                if ((dimension == -1 && !this.getAllowNether()) || (dimension == 1 && !this.server.getAllowEnd()))
+                    continue;
+
+                if (env == null)
+                {
+                    WorldProvider provider = WorldProvider.getProviderForDimension(dimension);
+                    worldType = provider.getClass().getSimpleName().toLowerCase();
+                    worldType = worldType.replace("worldprovider", "");
+                    oldName = "world_" + worldType.toLowerCase();
+                    worldType = worldType.replace("provider", "");
+                    env = Environment.getEnvironment(DimensionManager.getProviderType(provider.getClass()));
+                    name = provider.getSaveFolder();
+                    if (name == null) name = "DIM0";
+                }
+                else 
+                {
+                    worldType = env.toString().toLowerCase();
+                    name = "DIM" + dimension;
+                    oldName = p_71247_1_ + "_" + worldType;
+                    oldName = oldName.replaceAll(" ", "_");
+                }
+
+                // check if the world is enabled or not
+                if (!configuration.isBoolean("world-settings." + worldType + ".enabled")) {
+                    configuration.set("world-settings." + worldType + ".enabled", true);
+                }
+                boolean enabled = configuration.getBoolean("world-settings." + worldType + ".enabled");
+                try {
+                    configuration.save(MinecraftServer.configFile);
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+                if (!enabled)
+                    continue;
+                // end world enabled check
+
+                gen = this.server.getGenerator(name);
+                worldsettings = new WorldSettings(p_71247_3_, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), p_71247_5_);
+                worldsettings.func_82750_a(p_71247_6_);
+
+                CauldronUtils.migrateWorlds(worldType, oldName, p_71247_1_, name);
+
+                this.setUserMessage(name);
+            }
+
+            world = (dimension == 0 ? overWorld : new WorldServerMulti(this, new AnvilSaveHandler(server.getWorldContainer(), name, true), name, dimension, worldsettings, overWorld, this.theProfiler, env, gen));
+            // Cauldron end
+            if (gen != null)
+            {
+                world.getWorld().getPopulators().addAll(gen.getDefaultPopulators(world.getWorld()));
+            }
+
+            this.server.scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(this, world.getScoreboard());
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
             world.addWorldAccess(new WorldManager(this, world));
 
             if (!this.isSinglePlayer())
@@ -227,12 +437,14 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
                 world.getWorldInfo().setGameType(this.getGameType());
             }
 
-            MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+            this.serverConfigManager.setPlayerManager(this.worlds.toArray(new WorldServer[this.worlds.size()]));
+            // CraftBukkit end
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Load((World)world)); // Forge
         }
-
-        this.serverConfigManager.setPlayerManager(new WorldServer[]{ overWorld });
         this.func_147139_a(this.func_147135_j());
         this.initialWorldChunkLoad();
+        CraftBlock.dumpMaterials();
+        // Cauldron end
     }
 
     protected void initialWorldChunkLoad()
@@ -244,9 +456,12 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         int i = 0;
         this.setUserMessage("menu.generatingTerrain");
         byte b0 = 0;
+        // Cauldron start - we now handle CraftBukkit's keepSpawnInMemory logic in DimensionManager. Prevents crashes with mods such as DivineRPG and speeds up server startup time by a ton.
         logger.info("Preparing start region for level " + b0);
         WorldServer worldserver = this.worldServers[b0];
         ChunkCoordinates chunkcoordinates = worldserver.getSpawnPoint();
+        boolean before = worldserver.theChunkProviderServer.loadChunkOnProvideRequest;
+        worldserver.theChunkProviderServer.loadChunkOnProvideRequest = true;
         long j = getSystemTimeMillis();
 
         for (int k = -192; k <= 192 && this.isServerRunning(); k += 16)
@@ -265,7 +480,8 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
                 worldserver.theChunkProviderServer.loadChunk(chunkcoordinates.posX + k >> 4, chunkcoordinates.posZ + l >> 4);
             }
         }
-
+        worldserver.theChunkProviderServer.loadChunkOnProvideRequest = before;
+        // Cauldron end
         this.clearCurrentTask();
     }
 
@@ -292,19 +508,17 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
     {
         this.currentTask = null;
         this.percentDone = 0;
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD); // CraftBukkit
     }
 
-    protected void saveAllWorlds(boolean p_71267_1_)
+    protected void saveAllWorlds(boolean p_71267_1_) throws MinecraftException   // CraftBukkit - added throws
     {
         if (!this.worldIsBeingDeleted)
         {
-            WorldServer[] aworldserver = this.worldServers;
-            if (aworldserver == null) return; //Forge: Just in case, NPE protection as it has been encountered.
-            int i = aworldserver.length;
-
-            for (int j = 0; j < i; ++j)
+            // CraftBukkit start
+            for (int j = 0; j < this.worlds.size(); ++j)
             {
-                WorldServer worldserver = aworldserver[j];
+                WorldServer worldserver = this.worlds.get(j);
 
                 if (worldserver != null)
                 {
@@ -313,25 +527,41 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
                         logger.info("Saving chunks for level \'" + worldserver.getWorldInfo().getWorldName() + "\'/" + worldserver.provider.getDimensionName());
                     }
 
-                    try
+                    worldserver.saveAllChunks(true, (IProgressUpdate) null);
+                    worldserver.flush();
+                    WorldSaveEvent event = new WorldSaveEvent(worldserver.getWorld());
+                    this.server.getPluginManager().callEvent(event);
+                    // Cauldron start - save world configs
+                    if (worldserver.cauldronConfig != null)
                     {
-                        worldserver.saveAllChunks(true, (IProgressUpdate)null);
+                        worldserver.cauldronConfig.save();
                     }
-                    catch (MinecraftException minecraftexception)
+                    if (worldserver.tileentityConfig != null)
                     {
-                        logger.warn(minecraftexception.getMessage());
+                        worldserver.tileentityConfig.save();
                     }
+                    // Cauldron end
                 }
             }
+
+            // CraftBukkit end
         }
     }
 
-    public void stopServer()
+    public void stopServer() throws MinecraftException // CraftBukkit - added throws
     {
         if (!this.worldIsBeingDeleted && Loader.instance().hasReachedState(LoaderState.SERVER_STARTED) && !serverStopped) // make sure the save is valid and we don't save twice
         {
             logger.info("Stopping server");
 
+            // CraftBukkit start
+            if (this.server != null)
+            {
+                this.server.disablePlugins();
+            }
+
+            // CraftBukkit end
+
             if (this.func_147137_ag() != null)
             {
                 this.func_147137_ag().terminateEndpoints();
@@ -347,7 +577,14 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
             if (this.worldServers != null)
             {
                 logger.info("Saving worlds");
-                this.saveAllWorlds(false);
+                try
+                {
+                    this.saveAllWorlds(false);
+                }
+                catch (MinecraftException e)
+                {
+                    e.printStackTrace();
+                }
 
                 for (int i = 0; i < this.worldServers.length; ++i)
                 {
@@ -380,6 +617,13 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         this.serverRunning = false;
     }
 
+    // Spigot Start
+    private static double calcTps(double avg, double exp, double tps)
+    {
+        return (avg * exp) + (tps * (1 - exp));
+    }
+    // Spigot End
+
     public void run()
     {
         try
@@ -392,45 +636,41 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
                 this.field_147147_p.func_151315_a(new ChatComponentText(this.motd));
                 this.field_147147_p.func_151321_a(new ServerStatusResponse.MinecraftProtocolVersionIdentifier("1.7.10", 5));
                 this.func_147138_a(this.field_147147_p);
+                DedicatedServer.allowPlayerLogins = true; // Cauldron - server is ready, allow player logins
+                // Spigot start
+                Arrays.fill(recentTps, 20);
+                long lastTick = 0, catchupTime = 0, curTime, wait;
 
                 while (this.serverRunning)
                 {
-                    long j = getSystemTimeMillis();
-                    long k = j - i;
+                    curTime = System.nanoTime();
+                    wait = TICK_TIME - (curTime - lastTick) - catchupTime;
 
-                    if (k > 2000L && i - this.timeOfLastWarning >= 15000L)
+                    if (wait > 0)
                     {
-                        logger.warn("Can\'t keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", new Object[] {Long.valueOf(k), Long.valueOf(k / 50L)});
-                        k = 2000L;
-                        this.timeOfLastWarning = i;
+                        //Thread.sleep(wait / 1000000); // FFoKC - dont Thread sleep
+                        catchupTime = 0;
+                        continue;
                     }
-
-                    if (k < 0L)
+                    else
                     {
-                        logger.warn("Time ran backwards! Did the system time change?");
-                        k = 0L;
+                        catchupTime = Math.min(1000000000, Math.abs(wait));
                     }
 
-                    l += k;
-                    i = j;
-
-                    if (this.worldServers[0].areAllPlayersAsleep())
+                    if (MinecraftServer.currentTick++ % 100 == 0)
                     {
-                        this.tick();
-                        l = 0L;
-                    }
-                    else
-                    {
-                        while (l > 50L)
-                        {
-                            l -= 50L;
-                            this.tick();
-                        }
+                        currentTps = 1E9 / (curTime - lastTick);
+                        recentTps[0] = calcTps(recentTps[0], 0.92, currentTps);   // 1/exp(5sec/1min)
+                        recentTps[1] = calcTps(recentTps[1], 0.9835, currentTps);   // 1/exp(5sec/5min)
+                        recentTps[2] = calcTps(recentTps[2], 0.9945, currentTps);   // 1/exp(5sec/15min)
                     }
 
-                    Thread.sleep(Math.max(1L, 50L - l));
+                    lastTick = curTime;
+                    this.tick();
                     this.serverIsRunning = true;
                 }
+
+                // Spigot end
                 FMLCommonHandler.instance().handleServerStopping();
                 FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             }
@@ -448,6 +688,14 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         catch (Throwable throwable1)
         {
             logger.error("Encountered an unexpected exception", throwable1);
+
+            // Spigot Start
+            if (throwable1.getCause() != null)
+            {
+                logger.error("\tCause of unexpected exception was", throwable1.getCause());
+            }
+
+            // Spigot End
             CrashReport crashreport = null;
 
             if (throwable1 instanceof ReportedException)
@@ -477,6 +725,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         {
             try
             {
+                org.spigotmc.WatchdogThread.doStop(); // Spigot
                 this.stopServer();
                 this.serverStopped = true;
             }
@@ -486,6 +735,16 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
             }
             finally
             {
+                // CraftBukkit start - Restore terminal to original settings
+                try
+                {
+                    this.reader.getTerminal().restore();
+                }
+                catch (Exception e)
+                {
+                }
+
+                // CraftBukkit end
                 FMLCommonHandler.instance().handleServerStopped();
                 this.serverStopped = true;
                 this.systemExitNow();
@@ -532,8 +791,11 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
     public void tick()
     {
+        SpigotTimings.serverTickTimer.startTiming(); // Spigot
         long i = System.nanoTime();
+        callingForgeTick = true; // Cauldron start - handle loadOnProviderRequests during forge tick event
         FMLCommonHandler.instance().onPreServerTick();
+        callingForgeTick = false; // Cauldron end
         ++this.tickCounter;
 
         if (this.startProfiling)
@@ -562,12 +824,21 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
             this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
         }
 
-        if (this.tickCounter % 900 == 0)
+        if ((this.autosavePeriod > 0) && ((this.tickCounter % this.autosavePeriod) == 0))   // CraftBukkit
         {
+            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.theProfiler.startSection("save");
             this.serverConfigManager.saveAllPlayerData();
-            this.saveAllWorlds(true);
+            try
+            {
+                this.saveAllWorlds(true);
+            }
+            catch (MinecraftException e)
+            {
+                e.printStackTrace();
+            }
             this.theProfiler.endSection();
+            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         this.theProfiler.startSection("tallying");
@@ -575,25 +846,57 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         this.theProfiler.endSection();
         this.theProfiler.startSection("snooper");
 
-        if (!this.usageSnooper.isSnooperRunning() && this.tickCounter > 100)
+        if (isSnooperEnabled() && !this.usageSnooper.isSnooperRunning() && this.tickCounter > 100)   // Spigot
         {
             this.usageSnooper.startSnooper();
         }
 
-        if (this.tickCounter % 6000 == 0)
+        if (isSnooperEnabled() && this.tickCounter % 6000 == 0)   // Spigot
         {
             this.usageSnooper.addMemoryStatsToSnooper();
         }
 
         this.theProfiler.endSection();
         this.theProfiler.endSection();
+        callingForgeTick = true; // Cauldron start - handle loadOnProviderRequests during forge tick event
         FMLCommonHandler.instance().onPostServerTick();
+        callingForgeTick = false; // Cauldron end
+        SpigotTimings.serverTickTimer.stopTiming(); // Spigot
+        org.spigotmc.CustomTimingsHandler.tick(); // Spigot
     }
 
     public void updateTimeLightAndEntities()
     {
         this.theProfiler.startSection("levels");
+        SpigotTimings.schedulerTimer.startTiming(); // Spigot
+        // CraftBukkit start
+        this.server.getScheduler().mainThreadHeartbeat(this.tickCounter);
+        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
+
+        // Run tasks that are waiting on processing
+        SpigotTimings.processQueueTimer.startTiming(); // Spigot
+        while (!processQueue.isEmpty())
+        {
+            processQueue.remove().run();
+        }
+        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
+
+        SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
         net.minecraftforge.common.chunkio.ChunkIOExecutor.tick();
+        SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
+
+        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.tickCounter % 20 == 0)
+        {
+            for (int i = 0; i < this.getConfigurationManager().playerEntityList.size(); ++i)
+            {
+                EntityPlayerMP entityplayermp = (EntityPlayerMP) this.getConfigurationManager().playerEntityList.get(i);
+                entityplayermp.playerNetServerHandler.sendPacket(new S03PacketTimeUpdate(entityplayermp.worldObj.getTotalWorldTime(), entityplayermp.getPlayerTime(), entityplayermp.worldObj.getGameRules().getGameRuleBooleanValue("doDaylightCycle"))); // Add support for per player time
+            }
+        }
+        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
+
         int i;
 
         Integer[] ids = DimensionManager.getIDs(this.tickCounter % 200 == 0);
@@ -602,19 +905,21 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
             int id = ids[x];
             long j = System.nanoTime();
 
-            if (id == 0 || this.getAllowNether())
-            {
+            // CraftBukkit start
+            //if (id == 0 || this.getAllowNether())
+            //{
                 WorldServer worldserver = DimensionManager.getWorld(id);
                 this.theProfiler.startSection(worldserver.getWorldInfo().getWorldName());
                 this.theProfiler.startSection("pools");
                 this.theProfiler.endSection();
-
+                /* Drop global time updates
                 if (this.tickCounter % 20 == 0)
                 {
                     this.theProfiler.startSection("timeSync");
                     this.serverConfigManager.sendPacketToAllPlayersInDimension(new S03PacketTimeUpdate(worldserver.getTotalWorldTime(), worldserver.getWorldTime(), worldserver.getGameRules().getGameRuleBooleanValue("doDaylightCycle")), worldserver.provider.dimensionId);
                     this.theProfiler.endSection();
                 }
+                // CraftBukkit end */
 
                 this.theProfiler.startSection("tick");
                 FMLCommonHandler.instance().onPreWorldTick(worldserver);
@@ -622,22 +927,46 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
                 try
                 {
+                    worldserver.timings.doTick.startTiming(); // Spigot
                     worldserver.tick();
+                    worldserver.timings.doTick.stopTiming(); // Spigot
                 }
                 catch (Throwable throwable1)
                 {
-                    crashreport = CrashReport.makeCrashReport(throwable1, "Exception ticking world");
+                    // Spigot Start
+                    try
+                    {
+                        crashreport = CrashReport.makeCrashReport(throwable1, "Exception ticking world");
+                    }
+                    catch (Throwable t)
+                    {
+                        throw new RuntimeException("Error generating crash report", t);
+                    }
+    
+                    // Spigot End
                     worldserver.addWorldInfoToCrashReport(crashreport);
                     throw new ReportedException(crashreport);
                 }
 
                 try
                 {
+                    worldserver.timings.tickEntities.startTiming(); // Spigot
                     worldserver.updateEntities();
+                    worldserver.timings.tickEntities.stopTiming(); // Spigot
                 }
                 catch (Throwable throwable)
                 {
-                    crashreport = CrashReport.makeCrashReport(throwable, "Exception ticking world entities");
+                    // Spigot Start
+                    try
+                    {
+                        crashreport = CrashReport.makeCrashReport(throwable, "Exception ticking world entities");
+                    }
+                    catch (Throwable t)
+                    {
+                        throw new RuntimeException("Error generating crash report", t);
+                    }
+    
+                    // Spigot End
                     worldserver.addWorldInfoToCrashReport(crashreport);
                     throw new ReportedException(crashreport);
                 }
@@ -645,10 +974,12 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
                 FMLCommonHandler.instance().onPostWorldTick(worldserver);
                 this.theProfiler.endSection();
                 this.theProfiler.startSection("tracker");
+                worldserver.timings.tracker.startTiming(); // Spigot
                 worldserver.getEntityTracker().updateTrackedEntities();
+                worldserver.timings.tracker.stopTiming(); // Spigot
                 this.theProfiler.endSection();
                 this.theProfiler.endSection();
-            }
+            // } // CraftBukkit
 
             worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - j;
         }
@@ -656,15 +987,21 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         this.theProfiler.endStartSection("dim_unloading");
         DimensionManager.unloadWorlds(worldTickTimes);
         this.theProfiler.endStartSection("connection");
+        SpigotTimings.connectionTimer.startTiming(); // Spigot
         this.func_147137_ag().networkTick();
+        SpigotTimings.connectionTimer.stopTiming(); // Spigot
         this.theProfiler.endStartSection("players");
+        SpigotTimings.playerListTimer.startTiming(); // Spigot
         this.serverConfigManager.sendPlayerInfoToAllPlayers();
+        SpigotTimings.playerListTimer.stopTiming(); // Spigot
         this.theProfiler.endStartSection("tickables");
 
+        SpigotTimings.tickablesTimer.startTiming(); // Spigot
         for (i = 0; i < this.tickables.size(); ++i)
         {
             ((IUpdatePlayerListBox)this.tickables.get(i)).update();
         }
+        SpigotTimings.tickablesTimer.stopTiming(); // Spigot
 
         this.theProfiler.endSection();
     }
@@ -699,6 +1036,13 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
     public WorldServer worldServerForDimension(int p_71218_1_)
     {
+        // Cauldron start - this is required for MystCraft agebooks to teleport correctly
+        // verify the nether or the end is allowed, and if not return overworld
+        if ((p_71218_1_ == -1 && !this.getAllowNether()) || (p_71218_1_ == 1 && !this.server.getAllowEnd()))
+        {
+            return DimensionManager.getWorld(0);
+        }
+        // Cauldron end
         WorldServer ret = DimensionManager.getWorld(p_71218_1_);
         if (ret == null)
         {
@@ -784,13 +1128,14 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
     public List getPossibleCompletions(ICommandSender p_71248_1_, String p_71248_2_)
     {
-        ArrayList arraylist = new ArrayList();
+        // Cauldron start - add mod commands to list then pass to bukkit
+        java.util.HashSet arraylist = new java.util.HashSet(); // use a set here to avoid duplicates
 
         if (p_71248_2_.startsWith("/"))
         {
-            p_71248_2_ = p_71248_2_.substring(1);
-            boolean flag = !p_71248_2_.contains(" ");
-            List list = this.commandManager.getPossibleCommands(p_71248_1_, p_71248_2_);
+            String char1 = p_71248_2_.substring(1); // rename var to avoid removing slash from passed message
+            boolean flag = !char1.contains(" ");
+            List list = this.commandManager.getPossibleCommands(p_71248_1_, char1);
 
             if (list != null)
             {
@@ -798,40 +1143,25 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
                 while (iterator.hasNext())
                 {
-                    String s3 = (String)iterator.next();
+                    String command = (String)iterator.next();
 
                     if (flag)
                     {
-                        arraylist.add("/" + s3);
+                        arraylist.add("/" + command);
                     }
                     else
                     {
-                        arraylist.add(s3);
+                        arraylist.add(command);
                     }
                 }
             }
-
-            return arraylist;
         }
-        else
-        {
-            String[] astring = p_71248_2_.split(" ", -1);
-            String s1 = astring[astring.length - 1];
-            String[] astring1 = this.serverConfigManager.getAllUsernames();
-            int i = astring1.length;
 
-            for (int j = 0; j < i; ++j)
-            {
-                String s2 = astring1[j];
-
-                if (CommandBase.doesStringStartWith(s1, s2))
-                {
-                    arraylist.add(s2);
-                }
-            }
-
-            return arraylist;
-        }
+        arraylist.addAll(this.server.tabComplete(p_71248_1_, p_71248_2_));  // add craftbukkit commands
+        ArrayList completions = new ArrayList(arraylist);
+        Collections.sort(completions); // sort the final list
+        return completions;
+        // Cauldron end
     }
 
     public static MinecraftServer getServer()
@@ -1034,7 +1364,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
     public boolean isServerInOnlineMode()
     {
-        return this.onlineMode;
+        return this.server.getOnlineMode(); // CraftBukkit
     }
 
     public void setOnlineMode(boolean p_71229_1_)
@@ -1124,7 +1454,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
 
     public NetworkSystem func_147137_ag()
     {
-        return this.field_147144_o;
+        return (this.field_147144_o) == null ? this.field_147144_o = new NetworkSystem(this) : this.field_147144_o;     // Spigot
     }
 
     @SideOnly(Side.CLIENT)
@@ -1259,8 +1589,11 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
     {
         Bootstrap.func_151354_b();
 
+        OptionSet options = loadOptions(p_main_0_);
+
         try
         {
+            /* CraftBukkit start - Replace everything
             boolean flag = true;
             String s = null;
             String s1 = ".";
@@ -1356,16 +1689,34 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
             {
                 dedicatedserver.setGuiEnabled();
             }
+            // */
+            // CraftBukkit end
+            if (CauldronUtils.deobfuscatedEnvironment()) useJline = false; // Cauldron
+            DedicatedServer dedicatedserver = new DedicatedServer(options);
 
-            dedicatedserver.startServerThread();
-            Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread")
+            if (options.has("port"))
             {
-                private static final String __OBFID = "CL_00001806";
-                public void run()
+                int port = (Integer) options.valueOf("port");
+
+                if (port > 0)
                 {
-                    dedicatedserver.stopServer();
+                    dedicatedserver.setServerPort(port);
                 }
-            });
+            }
+
+            if (options.has("universe"))
+            {
+                dedicatedserver.anvilFile = (File) options.valueOf("universe");
+            }
+
+            if (options.has("world"))
+            {
+                dedicatedserver.setFolderName((String) options.valueOf("world"));
+            }
+
+            dedicatedserver.primaryThread.start();
+            // Runtime.getRuntime().addShutdownHook(new ThreadShutdown("Server Shutdown Thread", dedicatedserver));
+            // CraftBukkit end
         }
         catch (Exception exception)
         {
@@ -1400,15 +1751,70 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
     @SideOnly(Side.SERVER)
     public String getPlugins()
     {
-        return "";
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+        result.append(server.getName());
+        result.append(" on Bukkit ");
+        result.append(server.getBukkitVersion());
+
+        if (plugins.length > 0 && this.server.getQueryPlugins())
+        {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++)
+            {
+                if (i > 0)
+                {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
+
+        return result.toString();
+        // CraftBukkit end
     }
 
     @SideOnly(Side.SERVER)
-    public String handleRConCommand(String p_71252_1_)
+    public String handleRConCommand(final String par1Str)
     {
-        RConConsoleSource.instance.resetLog();
-        this.commandManager.executeCommand(RConConsoleSource.instance, p_71252_1_);
-        return RConConsoleSource.instance.getLogContents();
+        Waitable<String> waitable = new Waitable<String>()
+        {
+            @Override
+            protected String evaluate()
+            {
+                RConConsoleSource.instance.resetLog();
+                // Event changes start
+                RemoteServerCommandEvent event = new RemoteServerCommandEvent(MinecraftServer.this.remoteConsole, par1Str);
+                MinecraftServer.this.server.getPluginManager().callEvent(event);
+                // Event changes end
+                ServerCommand servercommand = new ServerCommand(event.getCommand(), RConConsoleSource.instance);
+                MinecraftServer.this.server.dispatchServerCommand(MinecraftServer.this.remoteConsole, servercommand); // CraftBukkit
+                // this.n.a(RemoteControlCommandListener.instance, s);
+                return RConConsoleSource.instance.getLogContents();
+            }
+        };
+        processQueue.add(waitable);
+
+        try
+        {
+            return waitable.get();
+        }
+        catch (java.util.concurrent.ExecutionException e)
+        {
+            throw new RuntimeException("Exception processing rcon command " + par1Str, e.getCause());
+        }
+        catch (InterruptedException e)
+        {
+            Thread.currentThread().interrupt(); // Maintain interrupted state
+            throw new RuntimeException("Interrupted processing rcon command " + par1Str, e);
+        }
+
+        // CraftBukkit end
     }
 
     @SideOnly(Side.SERVER)
@@ -1455,9 +1861,213 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         return this.serverStopped;
     }
 
+    public static OptionSet loadOptions(String[] args) {
+        OptionParser parser = new OptionParser() {
+            {
+                acceptsAll(Arrays.asList("?", "help"), "Show the help");
+
+                acceptsAll(Arrays.asList("c", "config"), "Properties file to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("server.properties"))
+                        .describedAs("Properties file");
+
+                acceptsAll(Arrays.asList("P", "plugins"), "Plugin directory to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("plugins"))
+                        .describedAs("Plugin directory");
+
+                acceptsAll(Arrays.asList("h", "host", "server-ip"), "Host to listen on")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("Hostname or IP");
+
+                acceptsAll(Arrays.asList("W", "world-dir", "universe", "world-container"), "World container")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .describedAs("Directory containing worlds");
+
+                acceptsAll(Arrays.asList("w", "world", "level-name"), "World name")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("World name");
+
+                acceptsAll(Arrays.asList("p", "port", "server-port"), "Port to listen on")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Port");
+
+                acceptsAll(Arrays.asList("o", "online-mode"), "Whether to use online authentication")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Authentication");
+
+                acceptsAll(Arrays.asList("s", "size", "max-players"), "Maximum amount of players")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Server size");
+
+                acceptsAll(Arrays.asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
+                        .withRequiredArg()
+                        .ofType(SimpleDateFormat.class)
+                        .describedAs("Log date format");
+
+                acceptsAll(Arrays.asList("log-pattern"), "Specfies the log filename pattern")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .defaultsTo("server.log")
+                        .describedAs("Log filename");
+
+                acceptsAll(Arrays.asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(0)
+                        .describedAs("Max log size");
+
+                acceptsAll(Arrays.asList("log-count"), "Specified how many log files to cycle through")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(1)
+                        .describedAs("Log count");
+
+                acceptsAll(Arrays.asList("log-append"), "Whether to append to the log file")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .defaultsTo(true)
+                        .describedAs("Log append");
+
+                acceptsAll(Arrays.asList("log-strip-color"), "Strips color codes from log file");
+
+                acceptsAll(Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bukkit.yml"))
+                        .describedAs("Yml file");
+
+                acceptsAll(Arrays.asList("C", "commands-settings"), "File for command settings")
+                         .withRequiredArg()
+                         .ofType(File.class)
+                         .defaultsTo(new File("commands.yml"))
+                         .describedAs("Yml file");
+
+                acceptsAll(Arrays.asList("nojline"), "Disables jline and emulates the vanilla console");
+
+                acceptsAll(Arrays.asList("noconsole"), "Disables the console");
+
+                acceptsAll(Arrays.asList("v", "version"), "Show the CraftBukkit Version");
+
+                acceptsAll(Arrays.asList("demo"), "Demo mode");
+            }
+        };
+
+        OptionSet options = null;
+
+        try {
+            options = parser.parse(args);
+        } catch (joptsimple.OptionException ex) {
+            logger.log(org.apache.logging.log4j.Level.ERROR, ex.getLocalizedMessage());
+        }
+
+        if ((options == null) || (options.has("?"))) {
+            try {
+                parser.printHelpOn(System.out);
+            } catch (IOException ex) {
+                logger.log(org.apache.logging.log4j.Level.ERROR, ex);
+            }
+        } else {
+            try {
+                // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
+                String jline_UnsupportedTerminal = new String(new char[] {'j','l','i','n','e','.','U','n','s','u','p','p','o','r','t','e','d','T','e','r','m','i','n','a','l'});
+                String jline_terminal = new String(new char[] {'j','l','i','n','e','.','t','e','r','m','i','n','a','l'});
+
+                useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
+
+                if (options.has("nojline")) {
+                    System.setProperty("user.language", "en");
+                    useJline = false;
+                }
+
+                if (!useJline) {
+                    // This ensures the terminal literal will always match the jline implementation
+                    System.setProperty(jline.TerminalFactory.JLINE_TERMINAL, jline.UnsupportedTerminal.class.getName());
+                }
+
+
+                if (options.has("noconsole")) {
+                    useConsole = false;
+                }
+                // Cauldron start - initialize config
+                configFile = (File) options.valueOf("bukkit-settings");
+                commandFile = (File)options.valueOf("commands-settings");
+                configuration = YamlConfiguration.loadConfiguration(configFile);
+                configuration.options().copyDefaults(true);
+                configuration.setDefaults(YamlConfiguration.loadConfiguration(MinecraftServer.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml")));
+                ConfigurationSection legacyAlias = null;
+                if (!configuration.isString("aliases")) {
+                    legacyAlias = configuration.getConfigurationSection("aliases");
+                    configuration.set("aliases", "now-in-commands.yml");
+                }
+                try {
+                    configuration.save(configFile);
+                    } catch (IOException ex) {
+                        logger.log(org.apache.logging.log4j.Level.ERROR, "Could not save " + configFile, ex);
+                }
+                if (commandFile.isFile()) {
+                    legacyAlias = null;
+                }
+                commandsConfiguration = YamlConfiguration.loadConfiguration(commandFile);
+                commandsConfiguration.options().copyDefaults(true);
+                commandsConfiguration.setDefaults(YamlConfiguration.loadConfiguration(MinecraftServer.class.getClassLoader().getResourceAsStream("configurations/commands.yml")));
+                try {
+                    commandsConfiguration.save(commandFile);
+                    } catch (IOException ex) {
+                        logger.log(org.apache.logging.log4j.Level.ERROR, "Could not save " + commandFile, ex);
+                }
+
+                // Migrate aliases from old file and add previously implicit $1- to pass all arguments
+                if (legacyAlias != null) {
+                    ConfigurationSection aliases = commandsConfiguration.createSection("aliases");
+                    for (String key : legacyAlias.getKeys(false)) {
+                        ArrayList<String> commands = new ArrayList<String>();
+
+                        if (legacyAlias.isList(key)) {
+                            for (String command : legacyAlias.getStringList(key)) {
+                                commands.add(command + " $1-");
+                            }
+                        } else {
+                            commands.add(legacyAlias.getString(key) + " $1-");
+                        }
+
+                        aliases.set(key, commands);
+                    }
+                }
+
+                try {
+                    commandsConfiguration.save(commandFile);
+                    } catch (IOException ex) {
+                        logger.log(org.apache.logging.log4j.Level.ERROR, "Could not save " + commandFile, ex);
+                }
+
+                return options;
+                // Cauldron end
+            } catch (Throwable t) {
+                t.printStackTrace();
+            }
+        }
+        return null; // Cauldron
+    }
+
     @SideOnly(Side.SERVER)
     public void setForceGamemode(boolean p_104055_1_)
     {
         this.isGamemodeForced = p_104055_1_;
     }
+
+    // CraftBukkit start
+    public static Logger getLogger()
+    {
+        return logger;
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/ServerEula.java ./eclipse/cauldron/src/main/java/net/minecraft/server/ServerEula.java
index fa9629c..1dbb640 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/ServerEula.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/ServerEula.java
@@ -26,6 +26,7 @@ public class ServerEula
 
     private boolean func_154347_a(File p_154347_1_)
     {
+        if (true) return true; // Cauldron
         FileInputStream fileinputstream = null;
         boolean flag = false;
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java ./eclipse/cauldron/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 7526a8d..ac078a6 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -34,9 +34,19 @@ import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
+import net.minecraft.world.chunk.storage.AnvilSaveConverter;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.io.PrintStream;
+import org.apache.logging.log4j.Level;
+
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.bukkit.event.server.ServerCommandEvent;
+// CraftBukkit end
+
 @SideOnly(Side.SERVER)
 public class DedicatedServer extends MinecraftServer implements IServer
 {
@@ -44,7 +54,7 @@ public class DedicatedServer extends MinecraftServer implements IServer
     public final List pendingCommandList = Collections.synchronizedList(new ArrayList());
     private RConThreadQuery theRConThreadQuery;
     private RConThreadMain theRConThreadMain;
-    private PropertyManager settings;
+    public PropertyManager settings; // CraftBukkit - private -> public
     private ServerEula field_154332_n;
     private boolean canSpawnStructures;
     private WorldSettings.GameType gameType;
@@ -52,10 +62,13 @@ public class DedicatedServer extends MinecraftServer implements IServer
     public static boolean allowPlayerLogins = false;
     private static final String __OBFID = "CL_00001784";
 
-    public DedicatedServer(File p_i1508_1_)
+    // CraftBukkit start - Signature changed
+    public DedicatedServer(joptsimple.OptionSet options)
     {
-        super(p_i1508_1_, Proxy.NO_PROXY);
-        Thread thread = new Thread("Server Infinisleeper")
+        super(options, Proxy.NO_PROXY);
+        // super(p_i1508_1_, Proxy.NO_PROXY);
+        // CraftBukkit end
+        new Thread("Server Infinisleeper")
         {
             private static final String __OBFID = "CL_00001787";
             {
@@ -64,7 +77,7 @@ public class DedicatedServer extends MinecraftServer implements IServer
             }
             public void run()
             {
-                while (true)
+                /*while (true) // FFoKC - off sleep
                 {
                     try
                     {
@@ -77,36 +90,82 @@ public class DedicatedServer extends MinecraftServer implements IServer
                     {
                         ;
                     }
-                }
+                }*/
             }
         };
     }
 
-    protected boolean startServer() throws IOException
+    protected boolean startServer() throws java.net.UnknownHostException   // CraftBukkit - throws UnknownHostException
     {
         Thread thread = new Thread("Server console handler")
         {
             private static final String __OBFID = "CL_00001786";
+            final DedicatedServer server = DedicatedServer.this;
             public void run()
             {
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in));
-                String s4;
+                // CraftBukkit start
+                if (!useConsole)
+                {
+                    return;
+                }
+                // CraftBukkit end
+
+                jline.console.ConsoleReader bufferedreader = this.server.reader; // CraftBukkit
+                String s;
 
                 try
                 {
-                    while (!DedicatedServer.this.isServerStopped() && DedicatedServer.this.isServerRunning() && (s4 = bufferedreader.readLine()) != null)
+                    // CraftBukkit start - JLine disabling compatibility
+                    while (!this.server.isServerStopped() && this.server.isServerRunning())
                     {
-                        DedicatedServer.this.addPendingCommand(s4, DedicatedServer.this);
+                        if (useJline)
+                        {
+                            s = bufferedreader.readLine(">", null);
+                        }
+                        else
+                        {
+                            s = bufferedreader.readLine();
+                        }
+                        if (s != null)
+                        {
+                            this.server.addPendingCommand(s, this.server);
+                        }
+                        // CraftBukkit end
                     }
+
                 }
-                catch (IOException ioexception1)
+                catch (IOException ioexception)
                 {
-                    DedicatedServer.field_155771_h.error("Exception handling console input", ioexception1);
+                    DedicatedServer.field_155771_h.error("Exception handling console input", ioexception);
                 }
             }
         };
         thread.setDaemon(true);
         thread.start();
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+
+        for (java.util.logging.Handler handler : global.getHandlers())
+        {
+            global.removeHandler(handler);
+        }
+
+        global.addHandler(new org.bukkit.craftbukkit.util.ForwardLogHandler());
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+
+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values())
+        {
+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender)
+            {
+                logger.removeAppender(appender);
+            }
+        }
+
+        new Thread(new org.bukkit.craftbukkit.util.TerminalConsoleWriterThread(System.out, this.reader)).start();
+        System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
+        System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
+        // CraftBukkit end 
         field_155771_h.info("Starting minecraft server version 1.7.10");
 
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L)
@@ -117,7 +176,7 @@ public class DedicatedServer extends MinecraftServer implements IServer
         FMLCommonHandler.instance().onServerStart(this);
 
         field_155771_h.info("Loading properties");
-        this.settings = new PropertyManager(new File("server.properties"));
+        this.settings = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         this.field_154332_n = new ServerEula(new File("eula.txt"));
 
         if (!this.field_154332_n.func_154346_a())
@@ -172,6 +231,17 @@ public class DedicatedServer extends MinecraftServer implements IServer
                 this.setServerPort(this.settings.getIntProperty("server-port", 25565));
             }
 
+            // Spigot start
+            this.func_152361_a((ServerConfigurationManager) (new DedicatedPlayerList(this)));
+            org.spigotmc.SpigotConfig.init();
+            org.spigotmc.SpigotConfig.registerCommands();
+            // Spigot end
+            // Cauldron start
+            kcauldronConfig.registerCommands();
+            cauldronConfig.registerCommands();
+            tileEntityConfig.registerCommands();
+            // Cauldron end
+
             field_155771_h.info("Generating keypair");
             this.setKeyPair(CryptManager.createNewKeyPair());
             field_155771_h.info("Starting Minecraft server on " + (this.getServerHostname().length() == 0 ? "*" : this.getServerHostname()) + ":" + this.getServerPort());
@@ -180,7 +250,7 @@ public class DedicatedServer extends MinecraftServer implements IServer
             {
                 this.func_147137_ag().addLanEndpoint(inetaddress, this.getServerPort());
             }
-            catch (IOException ioexception)
+            catch (Throwable ioexception) // CraftBukkit - IOException -> Throwable
             {
                 field_155771_h.warn("**** FAILED TO BIND TO PORT!");
                 field_155771_h.warn("The exception was: {}", new Object[] {ioexception.toString()});
@@ -196,9 +266,16 @@ public class DedicatedServer extends MinecraftServer implements IServer
                 field_155771_h.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
             }
 
-            if (this.func_152368_aE())
+            try
+            {
+                if (this.func_152368_aE())
+                {
+                    this.func_152358_ax().func_152658_c();
+                }
+            }
+            catch (IOException e)
             {
-                this.func_152358_ax().func_152658_c();
+                e.printStackTrace();
             }
 
             if (!PreYggdrasilConverter.func_152714_a(this.settings))
@@ -208,7 +285,8 @@ public class DedicatedServer extends MinecraftServer implements IServer
             else
             {
                 FMLCommonHandler.instance().onServerStarted();
-                this.func_152361_a(new DedicatedPlayerList(this));
+                // this.func_152361_a(new DedicatedPlayerList(this)); // CraftBukkit - moved up
+                this.anvilConverterForAnvilFile = new AnvilSaveConverter(server.getWorldContainer()); // CraftBukkit - moved from MinecraftServer constructor
                 long j = System.nanoTime();
 
                 if (this.getFolderName() == null)
@@ -274,11 +352,30 @@ public class DedicatedServer extends MinecraftServer implements IServer
                     this.theRConThreadMain.startThread();
                 }
 
+                // CraftBukkit start
+                if (this.server.getBukkitSpawnRadius() > -1)
+                {
+                    field_155771_h
+                            .info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
+                    this.settings.serverProperties.remove("spawn-protection");
+                    this.settings.getIntProperty("spawn-protection", this.server.getBukkitSpawnRadius());
+                    this.server.removeBukkitSpawnRadius();
+                    this.settings.saveProperties();
+                }
+                // CraftBukkit end
+
                 return FMLCommonHandler.instance().handleServerStarting(this);
             }
         }
     }
 
+    // CraftBukkit start
+    public PropertyManager getPropertyManager()
+    {
+        return this.settings;
+    }
+    // CraftBukkit end
+
     public boolean canStructuresSpawn()
     {
         return this.canSpawnStructures;
@@ -364,11 +461,19 @@ public class DedicatedServer extends MinecraftServer implements IServer
 
     public void executePendingCommands()
     {
+        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.pendingCommandList.isEmpty())
         {
-            ServerCommand servercommand = (ServerCommand)this.pendingCommandList.remove(0);
-            this.getCommandManager().executeCommand(servercommand.sender, servercommand.command);
+            ServerCommand servercommand = (ServerCommand) this.pendingCommandList.remove(0);
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(this.console, servercommand.command);
+            this.server.getPluginManager().callEvent(event);
+            servercommand = new ServerCommand(event.getCommand(), servercommand.sender);
+            // this.getCommandManager().executeCommand(servercommand.sender, servercommand.command); // Called in dispatchServerCommand
+            this.server.dispatchServerCommand(this.console, servercommand);
+            // CraftBukkit end
         }
+        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean isDedicatedServer()
@@ -561,13 +666,13 @@ public class DedicatedServer extends MinecraftServer implements IServer
 
     private void func_152369_aG()
     {
-        try
+        /*try // FFoKC - off sleep
         {
             Thread.sleep(5000L);
         }
         catch (InterruptedException interruptedexception)
         {
             ;
-        }
+        }*/
     }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/dedicated/PropertyManager.java ./eclipse/cauldron/src/main/java/net/minecraft/server/dedicated/PropertyManager.java
index ec7735a..a436d79 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/dedicated/PropertyManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/dedicated/PropertyManager.java
@@ -10,11 +10,13 @@ import java.util.Properties;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import joptsimple.OptionSet; // CraftBukkit
+
 @SideOnly(Side.SERVER)
 public class PropertyManager
 {
     private static final Logger field_164440_a = LogManager.getLogger();
-    private final Properties serverProperties = new Properties();
+    public final Properties serverProperties = new Properties(); // CraftBukkit - private -> public
     private final File serverPropertiesFile;
     private static final String __OBFID = "CL_00001782";
 
@@ -58,6 +60,26 @@ public class PropertyManager
         }
     }
 
+    // CraftBukkit start
+    private OptionSet options = null;
+
+    public PropertyManager(final OptionSet options)
+    {
+        this((File) options.valueOf("config"));
+        this.options = options;
+    }
+
+    private <T> T getOverride(String name, T value)
+    {
+        if ((this.options != null) && (this.options.has(name)))
+        {
+            return (T) this.options.valueOf(name);
+        }
+
+        return value;
+    }
+    // CraftBukkit end
+
     public void generateNewProperties()
     {
         field_164440_a.info("Generating new properties file");
@@ -70,6 +92,13 @@ public class PropertyManager
 
         try
         {
+            // CraftBukkit start - Don't attempt writing to file if it's read only
+            if (this.serverPropertiesFile.exists() && !this.serverPropertiesFile.canWrite())
+            {
+                return;
+            }
+
+            // CraftBukkit end
             fileoutputstream = new FileOutputStream(this.serverPropertiesFile);
             this.serverProperties.store(fileoutputstream, "Minecraft server properties");
         }
@@ -108,20 +137,20 @@ public class PropertyManager
             this.saveProperties();
         }
 
-        return this.serverProperties.getProperty(p_73671_1_, p_73671_2_);
+        return this.getOverride(p_73671_1_, this.serverProperties.getProperty(p_73671_1_, p_73671_2_)); // CraftBukkit
     }
 
     public int getIntProperty(String p_73669_1_, int p_73669_2_)
     {
         try
         {
-            return Integer.parseInt(this.getStringProperty(p_73669_1_, "" + p_73669_2_));
+            return this.getOverride(p_73669_1_, Integer.parseInt(this.getStringProperty(p_73669_1_, "" + p_73669_2_))); // CraftBukkit
         }
         catch (Exception exception)
         {
             this.serverProperties.setProperty(p_73669_1_, "" + p_73669_2_);
             this.saveProperties();
-            return p_73669_2_;
+            return this.getOverride(p_73669_1_, p_73669_2_); // CraftBukkit
         }
     }
 
@@ -129,13 +158,13 @@ public class PropertyManager
     {
         try
         {
-            return Boolean.parseBoolean(this.getStringProperty(p_73670_1_, "" + p_73670_2_));
+            return this.getOverride(p_73670_1_, Boolean.parseBoolean(this.getStringProperty(p_73670_1_, "" + p_73670_2_))); // CraftBukkit
         }
         catch (Exception exception)
         {
             this.serverProperties.setProperty(p_73670_1_, "" + p_73670_2_);
             this.saveProperties();
-            return p_73670_2_;
+            return this.getOverride(p_73670_1_, p_73670_2_); // CraftBukkit
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java ./eclipse/cauldron/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
index 3b9f4d0..5aa8b51 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
@@ -65,7 +65,7 @@ public class MinecraftServerGui extends JComponent
             {
                 p_120016_0_.initiateShutdown();
 
-                while (!p_120016_0_.isServerStopped())
+                /*while (!p_120016_0_.isServerStopped()) // FFoKC - off sleep
                 {
                     try
                     {
@@ -75,7 +75,7 @@ public class MinecraftServerGui extends JComponent
                     {
                         interruptedexception.printStackTrace();
                     }
-                }
+                }*/
 
                 System.exit(0);
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/integrated/IntegratedServer.java ./eclipse/cauldron/src/main/java/net/minecraft/server/integrated/IntegratedServer.java
index 9be9989..0df8624 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/integrated/IntegratedServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/integrated/IntegratedServer.java
@@ -13,9 +13,11 @@ import net.minecraft.client.multiplayer.ThreadLanServerPing;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.profiler.PlayerUsageSnooper;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.HttpUtil;
 import net.minecraft.world.EnumDifficulty;
+import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldManager;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldServerMulti;
@@ -78,7 +80,7 @@ public class IntegratedServer extends MinecraftServer
         this.initialWorldChunkLoad();
     }
 
-    protected boolean startServer() throws IOException
+    protected boolean startServer() throws java.net.UnknownHostException // Cauldron
     {
         logger.info("Starting integrated minecraft server version 1.7.10");
         this.setOnlineMode(true);
@@ -103,7 +105,15 @@ public class IntegratedServer extends MinecraftServer
         {
             logger.info("Saving and pausing game...");
             this.getConfigurationManager().saveAllPlayerData();
-            this.saveAllWorlds(false);
+            try
+            {
+                this.saveAllWorlds(false);
+            }
+            catch (MinecraftException e)
+            {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
         }
 
         if (!this.isGamePaused)
@@ -236,7 +246,7 @@ public class IntegratedServer extends MinecraftServer
         }
     }
 
-    public void stopServer()
+    public void stopServer() throws MinecraftException // Cauldron
     {
         super.stopServer();
 
@@ -277,4 +287,10 @@ public class IntegratedServer extends MinecraftServer
     {
         return 4;
     }
+
+    @Override
+    public PropertyManager getPropertyManager()
+    {
+        return null;
+    }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/BanEntry.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/BanEntry.java
index acd1793..804f1a3 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/BanEntry.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/BanEntry.java
@@ -76,4 +76,30 @@ public abstract class BanEntry extends UserListEntry
         p_152641_1_.addProperty("expires", this.banEndDate == null ? "forever" : dateFormat.format(this.banEndDate));
         p_152641_1_.addProperty("reason", this.reason);
     }
+
+    // CraftBukkit start
+    public String getSource() {
+        return this.bannedBy;
+    }
+
+    public Date getCreated() {
+        return this.banStartDate;
+    }
+
+    private static Object checkExpiry(Object object, JsonObject jsonobject) {
+        Date expires = null;
+
+        try {
+            expires = jsonobject.has("expires") ? dateFormat.parse(jsonobject.get("expires").getAsString()) : null;
+        } catch (ParseException ex) {
+            // Guess we don't have a date
+        }
+
+        if (expires == null || expires.after(new Date())) {
+            return object;
+        } else {
+            return null;
+        }
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/ItemInWorldManager.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/ItemInWorldManager.java
index 71a7f69..79c103f 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/ItemInWorldManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/ItemInWorldManager.java
@@ -4,6 +4,7 @@ import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ItemSword;
 import net.minecraft.network.play.server.S23PacketBlockChange;
@@ -13,13 +14,32 @@ import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldSettings;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.MinecraftForge;
-import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
-import net.minecraftforge.event.entity.player.PlayerInteractEvent;
-import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;
 import net.minecraftforge.event.world.BlockEvent;
 
+// CraftBukkit start
+import net.minecraft.init.Blocks;
+
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerInteractEvent;
+
+// CraftBukkit end
+// Cauldron start
+import net.minecraft.inventory.ContainerPlayer;
+import net.minecraft.inventory.IInventory;
+import net.minecraft.server.MinecraftServer;
+
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.event.inventory.InventoryType;
+// Cauldron end
+
+import cpw.mods.fml.common.FMLLog;
+
 public class ItemInWorldManager
 {
     /** Forge reach distance */
@@ -135,15 +155,29 @@ public class ItemInWorldManager
 
     public void onBlockClicked(int p_73074_1_, int p_73074_2_, int p_73074_3_, int p_73074_4_)
     {
+        // CraftBukkit start
+        org.bukkit.event.player.PlayerInteractEvent cbEvent = CraftEventFactory.callPlayerInteractEvent(this.thisPlayerMP, Action.LEFT_CLICK_BLOCK, p_73074_1_, p_73074_2_, p_73074_3_, p_73074_4_, this.thisPlayerMP.inventory.getCurrentItem());
+
         if (!this.gameType.isAdventure() || this.thisPlayerMP.isCurrentToolAdventureModeExempt(p_73074_1_, p_73074_2_, p_73074_3_))
         {
-            PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(thisPlayerMP, Action.LEFT_CLICK_BLOCK, p_73074_1_, p_73074_2_, p_73074_3_, p_73074_4_, theWorld);
-            if (event.isCanceled())
+            net.minecraftforge.event.entity.player.PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(this.thisPlayerMP, net.minecraftforge.event.entity.player.PlayerInteractEvent.Action.LEFT_CLICK_BLOCK, p_73074_1_, p_73074_2_, p_73074_3_, p_73074_4_, theWorld); // Forge
+
+           if (cbEvent.isCancelled() || event.isCanceled())
             {
-                thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, theWorld));
+                // Let the client know the block still exists
+                ((EntityPlayerMP) this.thisPlayerMP).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, this.theWorld));
+                // Update any tile entity data for this block
+                TileEntity tileentity = this.theWorld.getTileEntity(p_73074_1_, p_73074_2_, p_73074_3_);
+
+                if (tileentity != null)
+                {
+                    this.thisPlayerMP.playerNetServerHandler.sendPacket(tileentity.getDescriptionPacket());
+                }
+
                 return;
             }
 
+            // CraftBukkit end
             if (this.isCreative())
             {
                 if (!this.theWorld.extinguishFire((EntityPlayer)null, p_73074_1_, p_73074_2_, p_73074_3_, p_73074_4_))
@@ -157,30 +191,56 @@ public class ItemInWorldManager
                 float f = 1.0F;
                 Block block = this.theWorld.getBlock(p_73074_1_, p_73074_2_, p_73074_3_);
 
-
-                if (!block.isAir(theWorld, p_73074_1_, p_73074_2_, p_73074_3_))
+                // CraftBukkit start - Swings at air do *NOT* exist.
+                if (cbEvent.useInteractedBlock() == org.bukkit.event.Event.Result.DENY || event.useBlock == cpw.mods.fml.common.eventhandler.Event.Result.DENY)   // Cauldron
                 {
-                    if (event.useBlock != Event.Result.DENY)
+                    // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                    if (block == Blocks.wooden_door)
                     {
-                        block.onBlockClicked(theWorld, p_73074_1_, p_73074_2_, p_73074_3_, thisPlayerMP);
-                        theWorld.extinguishFire(null, p_73074_1_, p_73074_2_, p_73074_3_, p_73074_4_);
+                        // For some reason *BOTH* the bottom/top part have to be marked updated.
+                        boolean bottom = (this.theWorld.getBlockMetadata(p_73074_1_, p_73074_2_, p_73074_3_) & 8) == 0;
+                        ((EntityPlayerMP) this.thisPlayerMP).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, this.theWorld));
+                        ((EntityPlayerMP) this.thisPlayerMP).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_ + (bottom ? 1 : -1), p_73074_3_, this.theWorld));
                     }
-                    else
+                    else if (block == Blocks.trapdoor)
                     {
-                        thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, theWorld));
+                        ((EntityPlayerMP) this.thisPlayerMP).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, this.theWorld));
                     }
-                    f = block.getPlayerRelativeBlockHardness(thisPlayerMP, thisPlayerMP.worldObj, p_73074_1_, p_73074_2_, p_73074_3_);
                 }
-
-                if (event.useItem == Event.Result.DENY)
+                else if (!block.isAir(theWorld, p_73074_1_, p_73074_2_, p_73074_3_))
                 {
-                    if (f >= 1.0f)
+                    block.onBlockClicked(this.theWorld, p_73074_1_, p_73074_2_, p_73074_3_, this.thisPlayerMP);
+                    f = block.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, p_73074_1_, p_73074_2_, p_73074_3_);
+                    // Allow fire punching to be blocked
+                    this.theWorld.extinguishFire((EntityPlayer) null, p_73074_1_, p_73074_2_, p_73074_3_, p_73074_4_);
+                }
+                if (cbEvent.useItemInHand() == org.bukkit.event.Event.Result.DENY || event.useItem == cpw.mods.fml.common.eventhandler.Event.Result.DENY)   // Forge
+                {
+                    // If we 'insta destroyed' then the client needs to be informed.
+                    if (f > 1.0f)
                     {
-                        thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, theWorld));
+                        ((EntityPlayerMP) this.thisPlayerMP).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, this.theWorld));
                     }
+
                     return;
                 }
 
+                org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.thisPlayerMP, p_73074_1_, p_73074_2_, p_73074_3_, this.thisPlayerMP.inventory.getCurrentItem(), f >= 1.0f);
+
+                if (blockEvent.isCancelled())
+                {
+                    // Let the client know the block still exists
+                    ((EntityPlayerMP) this.thisPlayerMP).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73074_1_, p_73074_2_, p_73074_3_, this.theWorld));
+                    return;
+                }
+
+                if (blockEvent.getInstaBreak())
+                {
+                    f = 2.0f;
+                }
+
+                // CraftBukkit end
+
                 if (!block.isAir(theWorld, p_73074_1_, p_73074_2_, p_73074_3_) && f >= 1.0F)
                 {
                     this.tryHarvestBlock(p_73074_1_, p_73074_2_, p_73074_3_);
@@ -269,6 +329,12 @@ public class ItemInWorldManager
                 return false;
             }
             Block block = this.theWorld.getBlock(p_73084_1_, p_73084_2_, p_73084_3_);
+
+            if (block == Blocks.air)
+            {
+                return false;    // CraftBukkit - A plugin set block to air without cancelling
+            }
+
             int l = this.theWorld.getBlockMetadata(p_73084_1_, p_73084_2_, p_73084_3_);
             this.theWorld.playAuxSFXAtEntity(this.thisPlayerMP, 2001, p_73084_1_, p_73084_2_, p_73084_3_, Block.getIdFromBlock(block) + (this.theWorld.getBlockMetadata(p_73084_1_, p_73084_2_, p_73084_3_) << 12));
             boolean flag = false;
@@ -312,6 +378,7 @@ public class ItemInWorldManager
     public boolean tryUseItem(EntityPlayer p_73085_1_, World p_73085_2_, ItemStack p_73085_3_)
     {
         int i = p_73085_3_.stackSize;
+        if (i <= 0) return false;
         int j = p_73085_3_.getItemDamage();
         ItemStack itemstack1 = p_73085_3_.useItemRightClick(p_73085_2_, p_73085_1_);
 
@@ -350,57 +417,105 @@ public class ItemInWorldManager
 
     public boolean activateBlockOrUseItem(EntityPlayer p_73078_1_, World p_73078_2_, ItemStack p_73078_3_, int p_73078_4_, int p_73078_5_, int p_73078_6_, int p_73078_7_, float p_73078_8_, float p_73078_9_, float p_73078_10_)
     {
-        PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(p_73078_1_, Action.RIGHT_CLICK_BLOCK, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_2_);
-        if (event.isCanceled())
-        {
-            thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73078_4_, p_73078_5_, p_73078_6_, theWorld));
-            return false;
-        }
-
-        if (p_73078_3_ != null && p_73078_3_.getItem().onItemUseFirst(p_73078_3_, p_73078_1_, p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_8_, p_73078_9_, p_73078_10_))
-        {
-            if (p_73078_3_.stackSize <= 0) ForgeEventFactory.onPlayerDestroyItem(thisPlayerMP, p_73078_3_);
-            return true;
-        }
-
+        // CraftBukkit start - Interact
         Block block = p_73078_2_.getBlock(p_73078_4_, p_73078_5_, p_73078_6_);
-        boolean isAir = block.isAir(p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_);
-        boolean useBlock = !p_73078_1_.isSneaking() || p_73078_1_.getHeldItem() == null;
-        if (!useBlock) useBlock = p_73078_1_.getHeldItem().getItem().doesSneakBypassUse(p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_1_);
-        boolean result = false;
+        boolean isAir = block.isAir(p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_); // Cauldron
+        boolean denyResult = false, denyItem = false, denyBlock = false;
 
-        if (useBlock)
+        if (!isAir)
         {
-            if (event.useBlock != Event.Result.DENY)
+            org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(p_73078_1_, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_3_);
+            net.minecraftforge.event.entity.player.PlayerInteractEvent forgeEvent = ForgeEventFactory.onPlayerInteract(p_73078_1_, net.minecraftforge.event.entity.player.PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_2_);
+            // Cauldron start
+            // if forge event is explicitly cancelled, return
+            if (forgeEvent.isCanceled())
             {
-                result = block.onBlockActivated(p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_1_, p_73078_7_, p_73078_8_, p_73078_9_, p_73078_10_);
+                thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73078_4_, p_73078_5_, p_73078_6_, theWorld));
+                return false;
             }
-            else
+            denyItem = event.useItemInHand() == org.bukkit.event.Event.Result.DENY || forgeEvent.useItem == cpw.mods.fml.common.eventhandler.Event.Result.DENY;
+            denyBlock = event.useInteractedBlock() == org.bukkit.event.Event.Result.DENY || forgeEvent.useBlock == cpw.mods.fml.common.eventhandler.Event.Result.DENY;
+            denyResult = denyItem || denyBlock;
+            // if we have no explicit deny, check if item can be used
+            if (!denyItem)
             {
-                thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73078_4_, p_73078_5_, p_73078_6_, theWorld));
-                result = event.useItem != Event.Result.ALLOW;
+                Item item = (p_73078_3_ != null ? p_73078_3_.getItem() : null);
+                // try to use an item in hand before activating a block. Used for items such as IC2's wrench.
+                if (item != null && item.onItemUseFirst(p_73078_3_, p_73078_1_, p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_8_, p_73078_9_, p_73078_10_))
+                {
+                    if (p_73078_3_.stackSize <= 0) ForgeEventFactory.onPlayerDestroyItem(thisPlayerMP, p_73078_3_);
+                        return true;
+                }
+            }
+            // Cauldron end
+            if (denyBlock)
+            {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                if (block == Blocks.wooden_door)
+                {
+                    boolean bottom = (p_73078_2_.getBlockMetadata(p_73078_4_, p_73078_5_, p_73078_6_) & 8) == 0;
+                    ((EntityPlayerMP) p_73078_1_).playerNetServerHandler.sendPacket(new S23PacketBlockChange(p_73078_4_, p_73078_5_ + (bottom ? 1 : -1), p_73078_6_, p_73078_2_));
+                }
+            }
+            else if (!p_73078_1_.isSneaking() || p_73078_3_ == null || p_73078_1_.getHeldItem().getItem().doesSneakBypassUse(p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_1_))
+            {
+                denyResult |= block.onBlockActivated(p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_1_, p_73078_7_, p_73078_8_, p_73078_9_, p_73078_10_);
+                // Cauldron start - if bukkitView is null, create one. Required for Ender Chests since they do not use NetworkRegistry.openRemoteGUI
+                if (thisPlayerMP != null && !(thisPlayerMP.openContainer instanceof ContainerPlayer))
+                {
+                    if (thisPlayerMP.openContainer.getBukkitView() == null)
+                    {
+                        TileEntity te = thisPlayerMP.worldObj.getTileEntity(p_73078_4_, p_73078_5_, p_73078_6_);
+                        if (te != null && te instanceof IInventory)
+                        {
+                            IInventory teInv = (IInventory)te;
+                            CraftInventory inventory = new CraftInventory(teInv);
+                            thisPlayerMP.openContainer.bukkitView = new CraftInventoryView(thisPlayerMP.getBukkitEntity(), inventory, thisPlayerMP.openContainer);
+                        }
+                        else
+                        {
+                            thisPlayerMP.openContainer.bukkitView = new CraftInventoryView(thisPlayerMP.getBukkitEntity(), MinecraftServer.getServer().server.createInventory(thisPlayerMP.getBukkitEntity(), InventoryType.CHEST), thisPlayerMP.openContainer);
+                        }
+
+                        thisPlayerMP.openContainer = CraftEventFactory.callInventoryOpenEvent(thisPlayerMP, thisPlayerMP.openContainer, false);
+                        if (thisPlayerMP.openContainer == null)
+                        {
+                            thisPlayerMP.openContainer = thisPlayerMP.inventoryContainer;
+                            return false;
+                        }
+                    }
+                }
+                // Cauldron end
             }
-        }
 
-        if (p_73078_3_ != null && !result && event.useItem != Event.Result.DENY)
-        {
-            int meta = p_73078_3_.getItemDamage();
-            int size = p_73078_3_.stackSize;
-            result = p_73078_3_.tryPlaceItemIntoWorld(p_73078_1_, p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_8_, p_73078_9_, p_73078_10_);
-            if (isCreative())
+            if (p_73078_3_ != null && !denyResult && p_73078_3_.stackSize > 0)
+            {
+                int meta = p_73078_3_.getItemDamage();
+                int size = p_73078_3_.stackSize;
+                denyResult = p_73078_3_.tryPlaceItemIntoWorld(p_73078_1_, p_73078_2_, p_73078_4_, p_73078_5_, p_73078_6_, p_73078_7_, p_73078_8_, p_73078_9_, p_73078_10_);
+
+                // The item count should not decrement in Creative mode.
+                if (this.isCreative())
+                {
+                    p_73078_3_.setItemDamage(meta);
+                    p_73078_3_.stackSize = size;
+                }
+
+                if (p_73078_3_.stackSize <= 0)
+                {
+                    ForgeEventFactory.onPlayerDestroyItem(this.thisPlayerMP, p_73078_3_);
+                }
+            }
+
+            // If we have 'true' and no explicit deny *or* an explicit allow -- run the item part of the hook
+            if (p_73078_3_ != null && ((!denyResult && event.useItemInHand() != org.bukkit.event.Event.Result.DENY) || event.useItemInHand() == org.bukkit.event.Event.Result.ALLOW))
             {
-                p_73078_3_.setItemDamage(meta);
-                p_73078_3_.stackSize = size;
+                this.tryUseItem(p_73078_1_, p_73078_2_, p_73078_3_);
             }
-            if (p_73078_3_.stackSize <= 0) ForgeEventFactory.onPlayerDestroyItem(thisPlayerMP, p_73078_3_);
         }
 
-        /* Re-enable if this causes bukkit incompatibility, or re-write client side to only send a single packet per right click.
-        if (par3ItemStack != null && ((!result && event.useItem != Event.Result.DENY) || event.useItem == Event.Result.ALLOW))
-        {
-            this.tryUseItem(thisPlayerMP, par2World, par3ItemStack);
-        }*/
-        return result;
+        return denyResult;
+        // CraftBukkit end
     }
 
     public void setWorld(WorldServer p_73080_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/PlayerManager.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/PlayerManager.java
index 513bf57..59f4409 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/PlayerManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/PlayerManager.java
@@ -18,14 +18,19 @@ import net.minecraft.world.chunk.Chunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+//CraftBukkit start
+import java.util.Collections;
+import java.util.Queue;
+// CraftBukkit end
+
 public class PlayerManager
 {
     private static final Logger field_152627_a = LogManager.getLogger();
     private final WorldServer theWorldServer;
     private final List players = new ArrayList();
     private final LongHashMap playerInstances = new LongHashMap();
-    private final List chunkWatcherWithPlayers = new ArrayList();
-    private final List playerInstanceList = new ArrayList();
+    private final Queue chunkWatcherWithPlayers = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    private final Queue playerInstanceList = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
     private int playerViewRadius;
     private long previousTotalWorldTime;
     private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
@@ -37,6 +42,14 @@ public class PlayerManager
         this.func_152622_a(p_i1176_1_.func_73046_m().getConfigurationManager().getViewDistance());
     }
 
+    // Cauldron start - vanilla compatibility
+    public PlayerManager(WorldServer p_i1176_1_, int viewDistance /* Spigot */)
+    {
+        this.theWorldServer = p_i1176_1_;
+        this.func_152622_a(viewDistance); // Spigot
+    }
+    // Cauldron end
+
     public WorldServer getWorldServer()
     {
         return this.theWorldServer;
@@ -51,27 +64,38 @@ public class PlayerManager
         if (i - this.previousTotalWorldTime > 8000L)
         {
             this.previousTotalWorldTime = i;
+            // CraftBukkit start - Use iterator
+            java.util.Iterator iterator = this.playerInstanceList.iterator();
 
-            for (j = 0; j < this.playerInstanceList.size(); ++j)
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.playerInstanceList.get(j);
+                playerinstance = (PlayerManager.PlayerInstance)iterator.next();
                 playerinstance.sendChunkUpdate();
                 playerinstance.processChunk();
             }
         }
         else
         {
-            for (j = 0; j < this.chunkWatcherWithPlayers.size(); ++j)
+            java.util.Iterator iterator = this.chunkWatcherWithPlayers.iterator();
+
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.chunkWatcherWithPlayers.get(j);
+                playerinstance = (PlayerManager.PlayerInstance)iterator.next();
                 playerinstance.sendChunkUpdate();
+                iterator.remove();
+                // CraftBukkit end
             }
         }
 
-        this.chunkWatcherWithPlayers.clear();
+        // this.chunkWatcherWithPlayers.clear(); // CraftBukkit - Removals are already covered
 
         if (this.players.isEmpty())
         {
+            if (this.theWorldServer.loadedEntityList.size() == 0 || this.theWorldServer.theChunkProviderServer.loadedChunkHashMap_KC.size() == 0)
+            {
+                return; // CraftBukkit - Only do unload when we go from non-empty to empty
+            }
+
             WorldProvider worldprovider = this.theWorldServer.provider;
 
             if (!worldprovider.canRespawnHere())
@@ -102,6 +126,20 @@ public class PlayerManager
         return playerinstance;
     }
 
+    // CraftBukkit start
+    public final boolean isChunkInUse(int x, int z)
+    {
+        PlayerManager.PlayerInstance pi = getOrCreateChunkWatcher(x, z, false);
+
+        if (pi != null)
+        {
+            return (pi.playersWatchingChunk.size() > 0);
+        }
+
+        return false;
+    }
+    // CraftBukkit end
+
     public void markBlockForUpdate(int p_151250_1_, int p_151250_2_, int p_151250_3_)
     {
         int l = p_151250_1_ >> 4;
@@ -275,7 +313,7 @@ public class PlayerManager
                     this.getOrCreateChunkWatcher(pair.chunkXPos, pair.chunkZPos, true).addPlayer(p_72685_1_);
                 }
 
-                if (i1 > 1 || i1 < -1 || j1 > 1 || j1 < -1)
+                if (j1 > 1 || j1 < -1 || k1 > 1 || k1 < -1)
                 {
                     java.util.Collections.sort(p_72685_1_.loadedChunks, new net.minecraftforge.common.util.ChunkCoordComparator(p_72685_1_));
                 }
@@ -541,7 +579,7 @@ public class PlayerManager
                     {
                         i = this.chunkLocation.chunkXPos * 16;
                         j = this.chunkLocation.chunkZPos * 16;
-                        this.sendToAllPlayersWatchingChunk(new S21PacketChunkData(PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.flagsYAreasToUpdate));
+                        this.sendToAllPlayersWatchingChunk(new S21PacketChunkData(PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), (this.flagsYAreasToUpdate == 0xFFFF), this.flagsYAreasToUpdate)); // CraftBukkit - send everything (including biome) if all sections flagged
 
                         // Forge: Grabs ALL tile entities is costly on a modded server, only send needed ones
                         for (k = 0; false && k < 16; ++k)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/ServerConfigurationManager.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/ServerConfigurationManager.java
index 8d5db06..0d99542 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/ServerConfigurationManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/ServerConfigurationManager.java
@@ -6,6 +6,8 @@ import com.google.common.collect.Maps;
 import com.mojang.authlib.GameProfile;
 
 import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.network.FMLEmbeddedChannel;
+import cpw.mods.fml.common.network.FMLOutboundHandler;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.io.File;
@@ -58,15 +60,37 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.Teleporter;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
+import net.minecraft.world.WorldProviderEnd;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.demo.DemoWorldManager;
 import net.minecraft.world.storage.IPlayerFileData;
 import net.minecraft.world.storage.SaveHandler;
+import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.common.chunkio.ChunkIOExecutor;
+import net.minecraftforge.common.network.ForgeMessage;
+import net.minecraftforge.common.network.ForgeNetworkHandler;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.server.network.NetHandlerLoginServer;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.TravelAgent;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerLoginEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.util.Vector;
+// CraftBukkit end
+
 public abstract class ServerConfigurationManager
 {
     public static final File field_152613_a = new File("banned-players.json");
@@ -82,8 +106,8 @@ public abstract class ServerConfigurationManager
     private final UserListOps ops;
     private final UserListWhitelist whiteListedPlayers;
     private final Map field_148547_k;
-    private IPlayerFileData playerNBTManagerObj;
-    private boolean whiteListEnforced;
+    public IPlayerFileData playerNBTManagerObj; // CraftBukkit - private -> public
+    public boolean whiteListEnforced; // CraftBukkit - private -> public
     protected int maxPlayers;
     private int viewDistance;
     private WorldSettings.GameType gameType;
@@ -91,8 +115,17 @@ public abstract class ServerConfigurationManager
     private int playerPingIndex;
     private static final String __OBFID = "CL_00001423";
 
+    // CraftBukkit start
+    private CraftServer cserver;
+
     public ServerConfigurationManager(MinecraftServer p_i1500_1_)
     {
+        p_i1500_1_.server = new CraftServer(p_i1500_1_, this);
+        p_i1500_1_.console = org.bukkit.craftbukkit.command.ColouredConsoleSender.getInstance();
+        p_i1500_1_.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender();
+        p_i1500_1_.reader.addCompleter(new org.bukkit.craftbukkit.command.ConsoleCommandCompleter(p_i1500_1_.server));
+        this.cserver = p_i1500_1_.server;
+        // CraftBukkit end
         this.bannedPlayers = new UserListBans(field_152613_a);
         this.bannedIPs = new BanList(field_152614_b);
         this.ops = new UserListOps(field_152615_c);
@@ -131,12 +164,32 @@ public abstract class ServerConfigurationManager
             s1 = p_72355_1_.getSocketAddress().toString();
         }
 
-        logger.info(p_72355_2_.getCommandSenderName() + "[" + s1 + "] logged in with entity id " + p_72355_2_.getEntityId() + " at (" + p_72355_2_.posX + ", " + p_72355_2_.posY + ", " + p_72355_2_.posZ + ")");
+        // CraftBukkit - add world to 'logged in' message.
+        logger.info(p_72355_2_.getCommandSenderName() + "[" + s1 + "] logged in with entity id " + p_72355_2_.getEntityId() + " at ([" + p_72355_2_.worldObj.worldInfo.getWorldName() + "] " + p_72355_2_.posX + ", " + p_72355_2_.posY + ", " + p_72355_2_.posZ + ")");
         WorldServer worldserver = this.mcServer.worldServerForDimension(p_72355_2_.dimension);
         ChunkCoordinates chunkcoordinates = worldserver.getSpawnPoint();
         this.func_72381_a(p_72355_2_, (EntityPlayerMP)null, worldserver);
         p_72355_2_.playerNetServerHandler = nethandlerplayserver;
-        nethandlerplayserver.sendPacket(new S01PacketJoinGame(p_72355_2_.getEntityId(), p_72355_2_.theItemInWorldManager.getGameType(), worldserver.getWorldInfo().isHardcoreModeEnabled(), worldserver.provider.dimensionId, worldserver.difficultySetting, this.getMaxPlayers(), worldserver.getWorldInfo().getTerrainType()));
+        // CraftBukkit start -- Don't send a higher than 60 MaxPlayer size, otherwise the PlayerInfo window won't render correctly.
+        int maxPlayers = this.getMaxPlayers();
+
+        if (maxPlayers > 60)
+        {
+            maxPlayers = 60;
+        }
+        // CraftBukkit end
+
+        // Cauldron start - send DimensionRegisterMessage to client before attempting to login to a Bukkit dimension
+        if (DimensionManager.isBukkitDimension(p_72355_2_.dimension))
+        {
+            FMLEmbeddedChannel serverChannel = ForgeNetworkHandler.getServerChannel();
+            serverChannel.attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.PLAYER);
+            serverChannel.attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(p_72355_2_);
+            serverChannel.writeOutbound(new ForgeMessage.DimensionRegisterMessage(p_72355_2_.dimension, worldserver.getWorld().getEnvironment().getId()));
+        }
+        // Cauldron end
+        nethandlerplayserver.sendPacket(new S01PacketJoinGame(p_72355_2_.getEntityId(), p_72355_2_.theItemInWorldManager.getGameType(), worldserver.getWorldInfo().isHardcoreModeEnabled(), worldserver.provider.dimensionId, worldserver.difficultySetting, this.getMaxVisiblePlayers(), worldserver.getWorldInfo().getTerrainType()));
+        p_72355_2_.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         nethandlerplayserver.sendPacket(new S3FPacketCustomPayload("MC|Brand", this.getServerInstance().getServerModName().getBytes(Charsets.UTF_8)));
         nethandlerplayserver.sendPacket(new S05PacketSpawnPosition(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ));
         nethandlerplayserver.sendPacket(new S39PacketPlayerAbilities(p_72355_2_.capabilities));
@@ -145,6 +198,7 @@ public abstract class ServerConfigurationManager
         p_72355_2_.func_147099_x().func_150884_b(p_72355_2_);
         this.func_96456_a((ServerScoreboard)worldserver.getScoreboard(), p_72355_2_);
         this.mcServer.func_147132_au();
+        /* CraftBukkit start - login message is handled in the event
         ChatComponentTranslation chatcomponenttranslation;
 
         if (!p_72355_2_.getCommandSenderName().equalsIgnoreCase(s))
@@ -158,6 +212,7 @@ public abstract class ServerConfigurationManager
 
         chatcomponenttranslation.getChatStyle().setColor(EnumChatFormatting.YELLOW);
         this.sendChatMsg(chatcomponenttranslation);
+        // CraftBukkit end*/
         this.playerLoggedIn(p_72355_2_);
         nethandlerplayserver.setPlayerLocation(p_72355_2_.posX, p_72355_2_.posY, p_72355_2_.posZ, p_72355_2_.rotationYaw, p_72355_2_.rotationPitch);
         this.updateTimeAndWeatherForPlayer(p_72355_2_, worldserver);
@@ -192,7 +247,7 @@ public abstract class ServerConfigurationManager
         }
     }
 
-    protected void func_96456_a(ServerScoreboard p_96456_1_, EntityPlayerMP p_96456_2_)
+    public void func_96456_a(ServerScoreboard p_96456_1_, EntityPlayerMP p_96456_2_) // CraftBukkit - protected -> public
     {
         HashSet hashset = new HashSet();
         Iterator iterator = p_96456_1_.getTeams().iterator();
@@ -225,6 +280,7 @@ public abstract class ServerConfigurationManager
 
     public void setPlayerManager(WorldServer[] p_72364_1_)
     {
+        if (this.playerNBTManagerObj != null) return; // CraftBukkit
         this.playerNBTManagerObj = p_72364_1_[0].getSaveHandler().getSaveHandler();
     }
 
@@ -248,7 +304,7 @@ public abstract class ServerConfigurationManager
 
     public NBTTagCompound readPlayerDataFromFile(EntityPlayerMP p_72380_1_)
     {
-        NBTTagCompound nbttagcompound = this.mcServer.worldServers[0].getWorldInfo().getPlayerNBTTagCompound();
+        NBTTagCompound nbttagcompound = this.mcServer.worlds.get(0).getWorldInfo().getPlayerNBTTagCompound();
         NBTTagCompound nbttagcompound1;
 
         if (p_72380_1_.getCommandSenderName().equals(this.mcServer.getServerOwner()) && nbttagcompound != null)
@@ -294,18 +350,61 @@ public abstract class ServerConfigurationManager
 
     public void playerLoggedIn(EntityPlayerMP p_72377_1_)
     {
-        this.sendPacketToAllPlayers(new S38PacketPlayerListItem(p_72377_1_.getCommandSenderName(), true, 1000));
+        cserver.detectListNameConflict(p_72377_1_); // CraftBukkit
+        // this.sendPacketToAllPlayers(new S38PacketPlayerListItem(p_72377_1_.getCommandSenderName(), true, 1000)); // CraftBukkit - replaced with loop below
         this.playerEntityList.add(p_72377_1_);
         WorldServer worldserver = this.mcServer.worldServerForDimension(p_72377_1_.dimension);
+        // CraftBukkit start
+        PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(this.cserver.getPlayer(p_72377_1_), "\u00A7e" + p_72377_1_.getCommandSenderName()
+                + " joined the game.");
+        this.cserver.getPluginManager().callEvent(playerJoinEvent);
+        String joinMessage = playerJoinEvent.getJoinMessage();
+
+        if ((joinMessage != null) && (joinMessage.length() > 0))
+        {
+            for (IChatComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromString(joinMessage))
+            {
+                this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new S02PacketChat(line));
+            }
+        }
+
+        this.cserver.onPlayerJoin(playerJoinEvent.getPlayer());
         ChunkIOExecutor.adjustPoolSize(this.getCurrentPlayerCount());
-        worldserver.spawnEntityInWorld(p_72377_1_);
-        this.func_72375_a(p_72377_1_, (WorldServer)null);
+        // CraftBukkit end
+        // CraftBukkit start - Only add if the player wasn't moved in the event
+        if (p_72377_1_.worldObj == worldserver && !worldserver.playerEntities.contains(p_72377_1_))
+        {
+            worldserver.spawnEntityInWorld(p_72377_1_);
+            this.func_72375_a(p_72377_1_, (WorldServer) null);
+        }
+        // CraftBukkit end
+        // CraftBukkit start - sendAll above replaced with this loop
+        S38PacketPlayerListItem packet = new S38PacketPlayerListItem(p_72377_1_.listName, true, 1000);
 
         for (int i = 0; i < this.playerEntityList.size(); ++i)
         {
             EntityPlayerMP entityplayermp1 = (EntityPlayerMP)this.playerEntityList.get(i);
-            p_72377_1_.playerNetServerHandler.sendPacket(new S38PacketPlayerListItem(entityplayermp1.getCommandSenderName(), true, entityplayermp1.ping));
+            if (entityplayermp1.getBukkitEntity().canSee(p_72377_1_.getBukkitEntity()))
+            {
+                entityplayermp1.playerNetServerHandler.sendPacket(packet);
+            }
+        }
+        // CraftBukkit end
+        for (int i = 0; i < this.playerEntityList.size(); ++i)
+        {
+            EntityPlayerMP entityplayermp1 = (EntityPlayerMP) this.playerEntityList.get(i);
+
+            // CraftBukkit start
+            if (!p_72377_1_.getBukkitEntity().canSee(entityplayermp1.getBukkitEntity()))
+            {
+                continue;
+            }
+
+            // .name -> .listName
+            p_72377_1_.playerNetServerHandler.sendPacket(new S38PacketPlayerListItem(entityplayermp1.listName, true, entityplayermp1.ping));
         }
+        // CraftBukkit end
+        kcauldron.updater.DefaultUpdateCallback.INSTANCE.onPlayerJoin(playerJoinEvent);
     }
 
     public void updatePlayerPertinentChunks(EntityPlayerMP p_72358_1_)
@@ -313,14 +412,33 @@ public abstract class ServerConfigurationManager
         p_72358_1_.getServerForPlayer().getPlayerManager().updatePlayerPertinentChunks(p_72358_1_);
     }
 
+    // Cauldron start - vanilla compatibility
     public void playerLoggedOut(EntityPlayerMP p_72367_1_)
     {
-        FMLCommonHandler.instance().firePlayerLoggedOut(p_72367_1_);
+        disconnect(p_72367_1_);
+    }
+
+    // Cauldron end
+    public String disconnect(EntityPlayerMP p_72367_1_) // CraftBukkit - return string
+    {
         p_72367_1_.triggerAchievement(StatList.leaveGameStat);
+        // Cauldron start - don't show quit messages for players that haven't actually connected
+        PlayerQuitEvent playerQuitEvent = null;
+        if (p_72367_1_.playerNetServerHandler != null)
+        {
+            // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
+            org.bukkit.craftbukkit.event.CraftEventFactory.handleInventoryCloseEvent(p_72367_1_);
+            playerQuitEvent = new PlayerQuitEvent(this.cserver.getPlayer(p_72367_1_), "\u00A7e" + p_72367_1_.getCommandSenderName() + " left the game.");
+            this.cserver.getPluginManager().callEvent(playerQuitEvent);
+            p_72367_1_.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+            // CraftBukkit end
+        }
+        // Cauldron end
+        FMLCommonHandler.instance().firePlayerLoggedOut(p_72367_1_);
         this.writePlayerData(p_72367_1_);
         WorldServer worldserver = p_72367_1_.getServerForPlayer();
 
-        if (p_72367_1_.ridingEntity != null)
+        if (p_72367_1_.ridingEntity != null && !(p_72367_1_.ridingEntity instanceof EntityPlayerMP)) // CraftBukkit - Don't remove players
         {
             worldserver.removePlayerEntityDangerously(p_72367_1_.ridingEntity);
             logger.debug("removing player mount");
@@ -329,9 +447,35 @@ public abstract class ServerConfigurationManager
         worldserver.removeEntity(p_72367_1_);
         worldserver.getPlayerManager().removePlayer(p_72367_1_);
         this.playerEntityList.remove(p_72367_1_);
-        this.field_148547_k.remove(p_72367_1_.getUniqueID());
-        net.minecraftforge.common.chunkio.ChunkIOExecutor.adjustPoolSize(this.getCurrentPlayerCount());
-        this.sendPacketToAllPlayers(new S38PacketPlayerListItem(p_72367_1_.getCommandSenderName(), false, 9999));
+        this.field_148547_k.remove(p_72367_1_.getCommandSenderName());
+        ChunkIOExecutor.adjustPoolSize(this.getCurrentPlayerCount()); // CraftBukkit
+        // CraftBukkit start - .name -> .listName, replace sendAll with loop
+        // this.sendAll(new PacketPlayOutPlayerInfo(entityplayermp.getName(), false, 9999));
+        S38PacketPlayerListItem packet = new S38PacketPlayerListItem(p_72367_1_.listName, false, 9999);
+
+        for (int i = 0; i < this.playerEntityList.size(); ++i)
+        {
+            EntityPlayerMP entityplayermp1 = (EntityPlayerMP) this.playerEntityList.get(i);
+
+            if (entityplayermp1.getBukkitEntity().canSee(p_72367_1_.getBukkitEntity()))
+            {
+                entityplayermp1.playerNetServerHandler.sendPacket(packet);
+            }
+        }
+
+        // This removes the scoreboard (and player reference) for the specific player in the manager
+        this.cserver.getScoreboardManager().removePlayer(p_72367_1_.getBukkitEntity());
+        // Cauldron start
+        if (playerQuitEvent != null)
+        {
+            return playerQuitEvent.getQuitMessage();
+        }
+        else
+        {
+            return null;
+        }
+        // Cauldron end
+        // CraftBukkit end
     }
 
     public String allowUserToConnect(SocketAddress p_148542_1_, GameProfile p_148542_2_)
@@ -372,6 +516,71 @@ public abstract class ServerConfigurationManager
         }
     }
 
+    // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
+    public EntityPlayerMP attemptLogin(NetHandlerLoginServer loginlistener, GameProfile gameprofile, String hostname)
+    {
+        // Instead of kicking then returning, we need to store the kick reason
+        // in the event, check with plugins to see if it's ok, and THEN kick
+        // depending on the outcome.
+        SocketAddress socketaddress = loginlistener.field_147333_a.getSocketAddress();
+        EntityPlayerMP entity = new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(0), gameprofile, new ItemInWorldManager(
+                this.mcServer.worldServerForDimension(0)));
+        Player player = entity.getBukkitEntity();
+        PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(),
+                ((java.net.InetSocketAddress) loginlistener.field_147333_a.getRawAddress()).getAddress()); // Spigot
+        String s;
+
+        if (this.bannedPlayers.func_152702_a(gameprofile) && !this.bannedPlayers.func_152683_b(gameprofile).hasBanExpired())
+        {
+            UserListBansEntry banentry = (UserListBansEntry) this.bannedPlayers.func_152683_b(gameprofile);
+            s = "You are banned from this server!\nReason: " + banentry.getBanReason();
+
+            if (banentry.getBanEndDate() != null)
+            {
+                s = s + "\nYour ban will be removed on " + dateFormat.format(banentry.getBanEndDate());
+            }
+
+            // return s;
+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s);
+        }
+        else if (!this.func_152607_e(gameprofile))
+        {
+            // return "You are not white-listed on this server!";
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+        }
+        else if (this.bannedIPs.func_152708_a(socketaddress) && !this.bannedPlayers.func_152683_b(gameprofile).hasBanExpired())
+        {
+            IPBanEntry ipbanentry = this.bannedIPs.func_152709_b(socketaddress);
+            s = "Your IP address is banned from this server!\nReason: " + ipbanentry.getBanReason();
+
+            if (ipbanentry.getBanEndDate() != null)
+            {
+                s = s + "\nYour ban will be removed on " + dateFormat.format(ipbanentry.getBanEndDate());
+            }
+            // return s;
+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s);
+        }
+        else
+        {
+            // return this.players.size() >= this.maxPlayers ? "The server is full!" : null;
+            if (this.playerEntityList.size() >= this.maxPlayers)
+            {
+                event.disallow(PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+            }
+        }
+
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.getResult() != PlayerLoginEvent.Result.ALLOWED)
+        {
+            loginlistener.func_147322_a(event.getKickMessage());
+            return null;
+        }
+        
+        return entity;
+    }
+    // CraftBukkit end
+
     public EntityPlayerMP createPlayerForUser(GameProfile p_148545_1_)
     {
         UUID uuid = EntityPlayer.func_146094_a(p_148545_1_);
@@ -410,80 +619,206 @@ public abstract class ServerConfigurationManager
         return new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(0), p_148545_1_, (ItemInWorldManager)object);
     }
 
-    public EntityPlayerMP respawnPlayer(EntityPlayerMP p_72368_1_, int p_72368_2_, boolean p_72368_3_)
+    public EntityPlayerMP processLogin(GameProfile gameprofile, EntityPlayerMP player) // CraftBukkit - added EntityPlayer
     {
-        World world = mcServer.worldServerForDimension(p_72368_2_);
-        if (world == null)
+        ArrayList arraylist = new ArrayList();
+        EntityPlayerMP entityplayermp;
+
+        for (int i = 0; i < this.playerEntityList.size(); ++i)
         {
-            p_72368_2_ = 0;
+            entityplayermp = (EntityPlayerMP) this.playerEntityList.get(i);
+
+            if (entityplayermp.getCommandSenderName().equalsIgnoreCase(gameprofile.getName()))
+            {
+                arraylist.add(entityplayermp);
+            }
         }
-        else if (!world.provider.canRespawnHere())
+        Iterator iterator = arraylist.iterator();
+
+        while (iterator.hasNext())
         {
-            p_72368_2_ = world.provider.getRespawnDimension(p_72368_1_);
+            entityplayermp = (EntityPlayerMP) iterator.next();
+            entityplayermp.playerNetServerHandler.kickPlayerFromServer("You logged in from another location");
         }
 
-        p_72368_1_.getServerForPlayer().getEntityTracker().removePlayerFromTrackers(p_72368_1_);
-        p_72368_1_.getServerForPlayer().getEntityTracker().removeEntityFromAllTrackingPlayers(p_72368_1_);
-        p_72368_1_.getServerForPlayer().getPlayerManager().removePlayer(p_72368_1_);
-        this.playerEntityList.remove(p_72368_1_);
-        this.mcServer.worldServerForDimension(p_72368_1_.dimension).removePlayerEntityDangerously(p_72368_1_);
-        ChunkCoordinates chunkcoordinates = p_72368_1_.getBedLocation(p_72368_2_);
-        boolean flag1 = p_72368_1_.isSpawnForced(p_72368_2_);
-        p_72368_1_.dimension = p_72368_2_;
+        /* CraftBukkit start
         Object object;
 
         if (this.mcServer.isDemo())
         {
-            object = new DemoWorldManager(this.mcServer.worldServerForDimension(p_72368_1_.dimension));
+            object = new DemoWorldManager(this.mcServer.worldServerForDimension(0));
         }
         else
         {
-            object = new ItemInWorldManager(this.mcServer.worldServerForDimension(p_72368_1_.dimension));
+            object = new ItemInWorldManager(this.mcServer.worldServerForDimension(0));
+        }
+
+        return new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(0), p_148545_1_, (ItemInWorldManager)object);
+       // */
+        return player;
+        // CraftBukkit end
+    }
+
+    // Cauldron start - refactor entire method for sanity.
+    public EntityPlayerMP respawnPlayer(EntityPlayerMP par1EntityPlayerMP, int par2, boolean par3)
+    {
+       return this.respawnPlayer(par1EntityPlayerMP, par2, par3, null);
+    }
+
+    public EntityPlayerMP respawnPlayer(EntityPlayerMP par1EntityPlayerMP, int targetDimension, boolean returnFromEnd, Location location)
+    {
+        // Phase 1 - check if the player is allowed to respawn in same dimension
+        World world = mcServer.worldServerForDimension(targetDimension);
+        org.bukkit.World fromWorld = par1EntityPlayerMP.getBukkitEntity().getWorld();
+
+        if (world == null)
+        {
+            targetDimension = 0;
+        }
+        else if (location == null && !world.provider.canRespawnHere()) // ignore plugins
+        {
+            targetDimension = world.provider.getRespawnDimension(par1EntityPlayerMP);
+        }
+
+        // Phase 2 - handle return from End
+        if (returnFromEnd)
+        {
+            WorldServer exitWorld = this.mcServer.worldServerForDimension(targetDimension);
+            Location enter = par1EntityPlayerMP.getBukkitEntity().getLocation();
+            Location exit = null;
+            // THE_END -> NORMAL; use bed if available, otherwise default spawn
+            exit = ((org.bukkit.craftbukkit.entity.CraftPlayer) par1EntityPlayerMP.getBukkitEntity()).getBedSpawnLocation();
+
+            if (exit == null || ((CraftWorld) exit.getWorld()).getHandle().dimension != 0)
+            {
+                exit = exitWorld.getWorld().getSpawnLocation();
+            }
+            PlayerPortalEvent event = new PlayerPortalEvent(par1EntityPlayerMP.getBukkitEntity(), enter, exit, org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT,
+                    TeleportCause.END_PORTAL);
+            event.useTravelAgent(false);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled() || event.getTo() == null)
+            {
+                return null;
+            }
         }
 
-        EntityPlayerMP entityplayermp1 = new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(p_72368_1_.dimension), p_72368_1_.getGameProfile(), (ItemInWorldManager)object);
-        entityplayermp1.playerNetServerHandler = p_72368_1_.playerNetServerHandler;
-        entityplayermp1.clonePlayer(p_72368_1_, p_72368_3_);
-        entityplayermp1.dimension = p_72368_2_;
-        entityplayermp1.setEntityId(p_72368_1_.getEntityId());
-        WorldServer worldserver = this.mcServer.worldServerForDimension(p_72368_1_.dimension);
-        this.func_72381_a(entityplayermp1, p_72368_1_, worldserver);
+        // Phase 3 - remove current player from current dimension
+        par1EntityPlayerMP.getServerForPlayer().getEntityTracker().removePlayerFromTrackers(par1EntityPlayerMP);
+        // par1EntityPlayerMP.getServerForPlayer().getEntityTracker().removeEntityFromAllTrackingPlayers(par1EntityPlayerMP); // CraftBukkit
+        par1EntityPlayerMP.getServerForPlayer().getPlayerManager().removePlayer(par1EntityPlayerMP);
+        this.playerEntityList.remove(par1EntityPlayerMP);
+        this.mcServer.worldServerForDimension(par1EntityPlayerMP.dimension).removePlayerEntityDangerously(par1EntityPlayerMP);
+
+        // Phase 4 - handle bed spawn
+        ChunkCoordinates bedSpawnChunkCoords = par1EntityPlayerMP.getBedLocation(targetDimension);
+        boolean spawnForced = par1EntityPlayerMP.isSpawnForced(targetDimension);
+        par1EntityPlayerMP.dimension = targetDimension;
+        // CraftBukkit start
+        EntityPlayerMP entityplayermp1 = par1EntityPlayerMP;
+        entityplayermp1.clonePlayer(par1EntityPlayerMP, returnFromEnd); // KCauldron - clone player
+        entityplayermp1.setWorld(this.mcServer.worldServerForDimension(par1EntityPlayerMP.dimension)); // make sure to update reference for bed spawn logic
+        entityplayermp1.playerConqueredTheEnd = false;
         ChunkCoordinates chunkcoordinates1;
+        boolean isBedSpawn = false;
+        org.bukkit.World toWorld = entityplayermp1.getBukkitEntity().getWorld();
 
-        if (chunkcoordinates != null)
+        if (location == null) // use bed logic only if player respawns (player death)
         {
-            chunkcoordinates1 = EntityPlayer.verifyRespawnCoordinates(this.mcServer.worldServerForDimension(p_72368_1_.dimension), chunkcoordinates, flag1);
+            if (bedSpawnChunkCoords != null) // if player has a bed
+            {
+                chunkcoordinates1 = EntityPlayer.verifyRespawnCoordinates(this.mcServer.worldServerForDimension(par1EntityPlayerMP.dimension),
+                        bedSpawnChunkCoords, spawnForced);
+
+                if (chunkcoordinates1 != null)
+                {
+                    isBedSpawn = true;
+                    entityplayermp1.setLocationAndAngles((double) ((float) chunkcoordinates1.posX + 0.5F), (double) ((float) chunkcoordinates1.posY + 0.1F),
+                            (double) ((float) chunkcoordinates1.posZ + 0.5F), 0.0F, 0.0F);
+                    entityplayermp1.setSpawnChunk(bedSpawnChunkCoords, spawnForced);
+                    location = new Location(toWorld, bedSpawnChunkCoords.posX + 0.5, bedSpawnChunkCoords.posY, bedSpawnChunkCoords.posZ + 0.5);
+                }
+                else
+                // bed was not found (broken)
+                {
+                    //entityplayermp1.setSpawnChunk(null, true); // CraftBukkit
+                    entityplayermp1.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(0, 0));
+                    location = new Location(toWorld, toWorld.getSpawnLocation().getX(), toWorld.getSpawnLocation().getY(), toWorld.getSpawnLocation().getZ()); // use the spawnpoint as location
+                }
+            }
 
-            if (chunkcoordinates1 != null)
+            if (location == null)
             {
-                entityplayermp1.setLocationAndAngles((double)((float)chunkcoordinates1.posX + 0.5F), (double)((float)chunkcoordinates1.posY + 0.1F), (double)((float)chunkcoordinates1.posZ + 0.5F), 0.0F, 0.0F);
-                entityplayermp1.setSpawnChunk(chunkcoordinates, flag1);
+                location = new Location(toWorld, toWorld.getSpawnLocation().getX(), toWorld.getSpawnLocation().getY(), toWorld.getSpawnLocation().getZ()); // use the world spawnpoint as default location
             }
-            else
+            Player respawnPlayer = this.cserver.getPlayer(entityplayermp1);
+            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
+            this.cserver.getPluginManager().callEvent(respawnEvent);
+
+            // Spigot Start
+            if (par1EntityPlayerMP.playerNetServerHandler.isDisconnected()) { return par1EntityPlayerMP; }
+            // Spigot End
+
+            if (!spawnForced) // mods override plugins
             {
-                entityplayermp1.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(0, 0.0F));
+                location = respawnEvent.getRespawnLocation();
             }
+            par1EntityPlayerMP.reset();
+        }
+        else
+        // plugin
+        {
+            location.setWorld(this.mcServer.worldServerForDimension(targetDimension).getWorld());
         }
 
-        worldserver.theChunkProviderServer.loadChunk((int)entityplayermp1.posX >> 4, (int)entityplayermp1.posZ >> 4);
+        WorldServer targetWorld = ((CraftWorld) location.getWorld()).getHandle();
+        entityplayermp1.setPositionAndRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        // CraftBukkit end
+        targetWorld.theChunkProviderServer.loadChunk((int) entityplayermp1.posX >> 4, (int) entityplayermp1.posZ >> 4);
 
-        while (!worldserver.getCollidingBoundingBoxes(entityplayermp1, entityplayermp1.boundingBox).isEmpty())
+        while (!targetWorld.getCollidingBoundingBoxes(entityplayermp1, entityplayermp1.boundingBox).isEmpty())
         {
             entityplayermp1.setPosition(entityplayermp1.posX, entityplayermp1.posY + 1.0D, entityplayermp1.posZ);
         }
 
-        entityplayermp1.playerNetServerHandler.sendPacket(new S07PacketRespawn(entityplayermp1.dimension, entityplayermp1.worldObj.difficultySetting, entityplayermp1.worldObj.getWorldInfo().getTerrainType(), entityplayermp1.theItemInWorldManager.getGameType()));
-        chunkcoordinates1 = worldserver.getSpawnPoint();
-        entityplayermp1.playerNetServerHandler.setPlayerLocation(entityplayermp1.posX, entityplayermp1.posY, entityplayermp1.posZ, entityplayermp1.rotationYaw, entityplayermp1.rotationPitch);
+        // Phase 5 - Respawn player in new world
+        int actualDimension = targetWorld.provider.dimensionId;
+        // Cauldron - change dim for bukkit added dimensions
+        if (DimensionManager.isBukkitDimension(actualDimension))
+        {
+            FMLEmbeddedChannel serverChannel = ForgeNetworkHandler.getServerChannel();
+            serverChannel.attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.PLAYER);
+            serverChannel.attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(entityplayermp1);
+            serverChannel.writeOutbound(new ForgeMessage.DimensionRegisterMessage(actualDimension, targetWorld.getWorld().getEnvironment().getId()));
+        }
+        // Cauldron end
+        // CraftBukkit start
+        entityplayermp1.playerNetServerHandler.sendPacket(new S07PacketRespawn(actualDimension, targetWorld.difficultySetting, targetWorld.getWorldInfo()
+                .getTerrainType(), entityplayermp1.theItemInWorldManager.getGameType()));
+        entityplayermp1.setWorld(targetWorld); // in case plugin changed it
+        entityplayermp1.isDead = false;
+        entityplayermp1.playerNetServerHandler.teleport(new Location(targetWorld.getWorld(), entityplayermp1.posX, entityplayermp1.posY, entityplayermp1.posZ,
+                entityplayermp1.rotationYaw, entityplayermp1.rotationPitch));
+        entityplayermp1.setSneaking(false);
+        chunkcoordinates1 = targetWorld.getSpawnPoint();
+        // CraftBukkit end
         entityplayermp1.playerNetServerHandler.sendPacket(new S05PacketSpawnPosition(chunkcoordinates1.posX, chunkcoordinates1.posY, chunkcoordinates1.posZ));
-        entityplayermp1.playerNetServerHandler.sendPacket(new S1FPacketSetExperience(entityplayermp1.experience, entityplayermp1.experienceTotal, entityplayermp1.experienceLevel));
-        this.updateTimeAndWeatherForPlayer(entityplayermp1, worldserver);
-        worldserver.getPlayerManager().addPlayer(entityplayermp1);
-        worldserver.spawnEntityInWorld(entityplayermp1);
+        entityplayermp1.playerNetServerHandler.sendPacket(new S1FPacketSetExperience(entityplayermp1.experience, entityplayermp1.experienceTotal,
+                entityplayermp1.experienceLevel));
+        this.updateTimeAndWeatherForPlayer(entityplayermp1, targetWorld);
+        targetWorld.getPlayerManager().addPlayer(entityplayermp1);
+        targetWorld.spawnEntityInWorld(entityplayermp1);
         this.playerEntityList.add(entityplayermp1);
         entityplayermp1.addSelfToInternalCraftingInventory();
         entityplayermp1.setHealth(entityplayermp1.getHealth());
-        FMLCommonHandler.instance().firePlayerRespawnEvent(entityplayermp1);
+        // If world changed then fire the appropriate change world event else respawn
+        if (fromWorld != location.getWorld()) {
+            FMLCommonHandler.instance().firePlayerChangedDimensionEvent(entityplayermp1, ((CraftWorld) fromWorld).getHandle().provider.dimensionId,
+                    ((CraftWorld) location.getWorld()).getHandle().provider.dimensionId, (CraftWorld) fromWorld); // Cauldron - fire forge changed dimension event
+            FMLCommonHandler.instance().firePlayerRespawnEvent(entityplayermp1);
+            }
+        else {
+            FMLCommonHandler.instance().firePlayerRespawnEvent(entityplayermp1); }
         return entityplayermp1;
     }
 
@@ -492,34 +827,112 @@ public abstract class ServerConfigurationManager
         transferPlayerToDimension(p_72356_1_, p_72356_2_, mcServer.worldServerForDimension(p_72356_2_).getDefaultTeleporter());
     }
 
-    public void transferPlayerToDimension(EntityPlayerMP p_72356_1_, int p_72356_2_, Teleporter teleporter)
+    public void transferPlayerToDimension(EntityPlayerMP p_72356_1_, int p_72356_2_, Teleporter teleporter) // mods such as Twilight Forest call this method directly
+    {
+        this.transferPlayerToDimension(p_72356_1_, p_72356_2_, teleporter, TeleportCause.MOD); // use our mod cause
+    }
+
+    public void transferPlayerToDimension(EntityPlayerMP par1EntityPlayerMP, int par2, TeleportCause cause)
+    {
+        this.transferPlayerToDimension(par1EntityPlayerMP, par2, mcServer.worldServerForDimension(par2).getDefaultTeleporter(), cause);
+    }
+
+    public void transferPlayerToDimension(EntityPlayerMP par1EntityPlayerMP, int targetDimension, Teleporter teleporter, TeleportCause cause) // Cauldron - add TeleportCause
     {
-        int j = p_72356_1_.dimension;
-        WorldServer worldserver = this.mcServer.worldServerForDimension(p_72356_1_.dimension);
-        p_72356_1_.dimension = p_72356_2_;
-        WorldServer worldserver1 = this.mcServer.worldServerForDimension(p_72356_1_.dimension);
-        p_72356_1_.playerNetServerHandler.sendPacket(new S07PacketRespawn(p_72356_1_.dimension, worldserver1.difficultySetting, worldserver1.getWorldInfo().getTerrainType(), p_72356_1_.theItemInWorldManager.getGameType())); // Forge: Use new dimensions information
-        worldserver.removePlayerEntityDangerously(p_72356_1_);
-        p_72356_1_.isDead = false;
-        this.transferEntityToWorld(p_72356_1_, j, worldserver, worldserver1, teleporter);
-        this.func_72375_a(p_72356_1_, worldserver);
-        p_72356_1_.playerNetServerHandler.setPlayerLocation(p_72356_1_.posX, p_72356_1_.posY, p_72356_1_.posZ, p_72356_1_.rotationYaw, p_72356_1_.rotationPitch);
-        p_72356_1_.theItemInWorldManager.setWorld(worldserver1);
-        this.updateTimeAndWeatherForPlayer(p_72356_1_, worldserver1);
-        this.syncPlayerInventory(p_72356_1_);
-        Iterator iterator = p_72356_1_.getActivePotionEffects().iterator();
+        // Allow Forge hotloading on teleport
+        WorldServer fromWorld = this.mcServer.worldServerForDimension(par1EntityPlayerMP.dimension);
+        WorldServer exitWorld = this.mcServer.worldServerForDimension(targetDimension);
+
+        // CraftBukkit start - Replaced the standard handling of portals with a more customised method.
+        Location enter = par1EntityPlayerMP.getBukkitEntity().getLocation();
+        Location exit = null;
+        boolean useTravelAgent = false;
+
+        if (exitWorld != null)
+        {
+            exit = this.calculateTarget(enter, exitWorld);
+            if (cause != cause.MOD) // don't use travel agent for custom dimensions
+            {
+                useTravelAgent = true;
+            }
+        }
+
+        // allow forge mods to be the teleporter
+        TravelAgent agent = null;
+        if (exit != null && teleporter == null)
+        {
+            teleporter = ((CraftWorld) exit.getWorld()).getHandle().getDefaultTeleporter();
+            if (teleporter instanceof TravelAgent)
+            {
+                agent = (TravelAgent) teleporter;
+            }
+        }
+        else
+        {
+            if (teleporter instanceof TravelAgent)
+            {
+                agent = (TravelAgent) teleporter;
+            }
+        }
+        if (agent == null) // mod teleporter such as Twilight Forest
+        {
+            agent = org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
+        }
+
+        PlayerPortalEvent event = new PlayerPortalEvent(par1EntityPlayerMP.getBukkitEntity(), enter, exit, agent, cause);
+        event.useTravelAgent(useTravelAgent);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled() || event.getTo() == null)
+        {
+            return;
+        }
+
+        exit = event.useTravelAgent() && cause != cause.MOD ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo(); // make sure plugins don't override travelagent for mods
+
+        if (exit == null)
+        {
+            return;
+        }
+
+        exitWorld = ((CraftWorld) exit.getWorld()).getHandle();
+        Vector velocity = par1EntityPlayerMP.getBukkitEntity().getVelocity();
+        boolean before = exitWorld.theChunkProviderServer.loadChunkOnProvideRequest;
+        exitWorld.theChunkProviderServer.loadChunkOnProvideRequest = true;
+        exitWorld.getDefaultTeleporter().adjustExit(par1EntityPlayerMP, exit, velocity);
+        exitWorld.theChunkProviderServer.loadChunkOnProvideRequest = before;
+        // CraftBukkit end
+
+        par1EntityPlayerMP.dimension = targetDimension;
+        par1EntityPlayerMP.playerNetServerHandler.sendPacket(new S07PacketRespawn(par1EntityPlayerMP.dimension, par1EntityPlayerMP.worldObj.difficultySetting,
+                par1EntityPlayerMP.worldObj.getWorldInfo().getTerrainType(), par1EntityPlayerMP.theItemInWorldManager.getGameType()));
+        fromWorld.removePlayerEntityDangerously(par1EntityPlayerMP);
+        par1EntityPlayerMP.isDead = false;
+        this.transferEntityToWorld(par1EntityPlayerMP, fromWorld.provider.dimensionId, fromWorld, exitWorld, teleporter);
+        this.func_72375_a(par1EntityPlayerMP, fromWorld);
+        par1EntityPlayerMP.playerNetServerHandler.setPlayerLocation(par1EntityPlayerMP.posX, par1EntityPlayerMP.posY, par1EntityPlayerMP.posZ,
+                par1EntityPlayerMP.rotationYaw, par1EntityPlayerMP.rotationPitch);
+        par1EntityPlayerMP.theItemInWorldManager.setWorld(exitWorld);
+        this.updateTimeAndWeatherForPlayer(par1EntityPlayerMP, exitWorld);
+        this.syncPlayerInventory(par1EntityPlayerMP);
+        Iterator iterator = par1EntityPlayerMP.getActivePotionEffects().iterator();
 
         while (iterator.hasNext())
         {
-            PotionEffect potioneffect = (PotionEffect)iterator.next();
-            p_72356_1_.playerNetServerHandler.sendPacket(new S1DPacketEntityEffect(p_72356_1_.getEntityId(), potioneffect));
+            PotionEffect potioneffect = (PotionEffect) iterator.next();
+            par1EntityPlayerMP.playerNetServerHandler.sendPacket(new S1DPacketEntityEffect(par1EntityPlayerMP.getEntityId(), potioneffect));
         }
-        FMLCommonHandler.instance().firePlayerChangedDimensionEvent(p_72356_1_, j, p_72356_2_);
+
+        FMLCommonHandler.instance().firePlayerChangedDimensionEvent(par1EntityPlayerMP, fromWorld.dimension, targetDimension);
     }
 
     public void transferEntityToWorld(Entity p_82448_1_, int p_82448_2_, WorldServer p_82448_3_, WorldServer p_82448_4_)
     {
-        transferEntityToWorld(p_82448_1_, p_82448_2_, p_82448_3_, p_82448_4_, p_82448_4_.getDefaultTeleporter());
+        // CraftBukkit start - Split into modular functions
+        // transferEntityToWorld(p_82448_1_, p_82448_2_, p_82448_3_, p_82448_4_, p_82448_4_.getDefaultTeleporter());
+        Location exit = this.calculateTarget(p_82448_1_.getBukkitEntity().getLocation(), p_82448_4_);
+        this.repositionEntity(p_82448_1_, exit, true);
+        // CraftBukkit end
     }
 
     public void transferEntityToWorld(Entity p_82448_1_, int p_82448_2_, WorldServer p_82448_3_, WorldServer p_82448_4_, Teleporter teleporter)
@@ -605,6 +1018,109 @@ public abstract class ServerConfigurationManager
         p_82448_1_.setWorld(p_82448_4_);
     }
 
+    // Copy of original a(Entity, int, WorldServer, WorldServer) method with only location calculation logic
+    public Location calculateTarget(Location enter, World target)
+    {
+        WorldServer worldserver = ((CraftWorld) enter.getWorld()).getHandle();
+        WorldServer worldserver1 = ((CraftWorld) target.getWorld()).getHandle();
+        int i = worldserver.dimension;
+        double y = enter.getY();
+        float yaw = enter.getYaw();
+        float pitch = enter.getPitch();
+        double d0 = enter.getX();
+        double d1 = enter.getZ();
+
+        if (worldserver1.dimension == -1)
+        {
+            d0 /= 8.0D;
+            d1 /= 8.0D;
+        }
+        else if (worldserver1.dimension == 0)
+        {
+            d0 *= 8.0D;
+            d1 *= 8.0D;
+        }
+        else
+        {
+            ChunkCoordinates chunkcoordinates;
+
+            if (i == 1)
+            {
+                // use default NORMAL world spawn instead of target
+                worldserver1 = this.mcServer.worlds.get(0);
+                chunkcoordinates = worldserver1.getSpawnPoint();
+            }
+            else
+            {
+                chunkcoordinates = worldserver1.getEntrancePortalLocation();
+            }
+
+            // Cauldron start - validate chunkcoordinates
+            if (chunkcoordinates != null)
+            {
+                d0 = (double) chunkcoordinates.posX;
+                y = (double) chunkcoordinates.posY;
+                d1 = (double) chunkcoordinates.posZ;
+                yaw = 90.0F;
+                pitch = 0.0F;
+            }
+            // Cauldron end
+        }
+
+        if (i != 1)
+        {
+            d0 = (double) MathHelper.clamp_int((int) d0, -29999872, 29999872);
+            d1 = (double) MathHelper.clamp_int((int) d1, -29999872, 29999872);
+        }
+
+        return new Location(worldserver1.getWorld(), d0, y, d1, yaw, pitch);
+    }
+
+    // copy of original a(Entity, int, WorldServer, WorldServer) method with only entity repositioning logic
+    public void repositionEntity(Entity entity, Location exit, boolean portal)
+    {
+        int i = entity.dimension;
+        WorldServer worldserver = (WorldServer) entity.worldObj;
+        WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+        worldserver.theProfiler.startSection("moving");
+        entity.setLocationAndAngles(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
+
+        if (entity.isEntityAlive())
+        {
+            worldserver.updateEntityWithOptionalForce(entity, false);
+        }
+
+        worldserver.theProfiler.endSection();
+
+        if (i != 1)
+        {
+            worldserver.theProfiler.startSection("placing");
+
+            if (entity.isEntityAlive())
+            {
+                if (portal)
+                {
+                    Vector velocity = entity.getBukkitEntity().getVelocity();
+                    worldserver1.getDefaultTeleporter().adjustExit(entity, exit, velocity); // Should be getTravelAgent
+                    entity.setLocationAndAngles(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
+
+                    if (entity.motionX != velocity.getX() || entity.motionY != velocity.getY() || entity.motionZ != velocity.getZ())
+                    {
+                        entity.getBukkitEntity().setVelocity(velocity);
+                    }
+                }
+
+                worldserver1.spawnEntityInWorld(entity);
+                worldserver1.updateEntityWithOptionalForce(entity, false);
+            }
+
+            worldserver.theProfiler.endSection();
+        }
+
+        entity.setWorld(worldserver1);
+    }
+    // CraftBukkit end
+
     public void sendPlayerInfoToAllPlayers()
     {
         if (++this.playerPingIndex > 600)
@@ -612,11 +1128,13 @@ public abstract class ServerConfigurationManager
             this.playerPingIndex = 0;
         }
 
+        /* CraftBukkit start - Remove updating of lag to players -- it spams way to much on big servers.
         if (this.playerPingIndex < this.playerEntityList.size())
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)this.playerEntityList.get(this.playerPingIndex);
             this.sendPacketToAllPlayers(new S38PacketPlayerListItem(entityplayermp.getCommandSenderName(), true, entityplayermp.ping));
         }
+        // CraftBukkit end */
     }
 
     public void sendPacketToAllPlayers(Packet p_148540_1_)
@@ -877,13 +1395,24 @@ public abstract class ServerConfigurationManager
         for (int j = 0; j < this.playerEntityList.size(); ++j)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)this.playerEntityList.get(j);
-
+            // CraftBukkit start - Test if player receiving packet can see the source of the packet
+            if (p_148543_1_ != null && p_148543_1_ instanceof EntityPlayerMP
+                    && !entityplayermp.getBukkitEntity().canSee(((EntityPlayerMP) p_148543_1_).getBukkitEntity()))
+            {
+                continue;
+            }
+            // CraftBukkit end
             if (entityplayermp != p_148543_1_ && entityplayermp.dimension == p_148543_10_)
             {
                 double d4 = p_148543_2_ - entityplayermp.posX;
                 double d5 = p_148543_4_ - entityplayermp.posY;
                 double d6 = p_148543_6_ - entityplayermp.posZ;
-
+                // Cauldron start - send packets only to players within configured player tracking range)
+                if (p_148543_8_ > org.spigotmc.TrackingRange.getEntityTrackingRange(entityplayermp, 512))
+                {
+                    p_148543_8_ = org.spigotmc.TrackingRange.getEntityTrackingRange(entityplayermp, 512);
+                }
+                // Cauldron end
                 if (d4 * d4 + d5 * d5 + d6 * d6 < p_148543_8_ * p_148543_8_)
                 {
                     entityplayermp.playerNetServerHandler.sendPacket(p_148543_11_);
@@ -941,13 +1470,16 @@ public abstract class ServerConfigurationManager
             p_72354_1_.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(1, 0.0F));
             p_72354_1_.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(7, p_72354_2_.getRainStrength(1.0F)));
             p_72354_1_.playerNetServerHandler.sendPacket(new S2BPacketChangeGameState(8, p_72354_2_.getWeightedThunderStrength(1.0F)));
+            // CraftBukkit start - handle player weather
+            p_72354_1_.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
+            // CraftBukkit end
         }
     }
 
     public void syncPlayerInventory(EntityPlayerMP p_72385_1_)
     {
         p_72385_1_.sendContainerToPlayer(p_72385_1_.inventoryContainer);
-        p_72385_1_.setPlayerHealthUpdated();
+        p_72385_1_.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         p_72385_1_.playerNetServerHandler.sendPacket(new S09PacketHeldItemChange(p_72385_1_.inventory.currentItem));
     }
 
@@ -961,9 +1493,17 @@ public abstract class ServerConfigurationManager
         return this.maxPlayers;
     }
 
+    public int getMaxVisiblePlayers() {
+            int max = mcServer.cauldronConfig.maxPlayersVisible.getValue();
+            return max > 0 ? max : maxPlayers;
+    }
+
     public String[] getAvailablePlayerDat()
     {
-        return this.mcServer.worldServers[0].getSaveHandler().getSaveHandler().getAvailablePlayerDat();
+        // Cauldron start - don't crash if the overworld isn't loaded
+        List<WorldServer> worldServers = this.mcServer.worlds;
+        return worldServers.isEmpty() ? new String[0] : worldServers.get(0).getSaveHandler().getSaveHandler().getAvailablePlayerDat(); // CraftBukkit
+        // Cauldron end
     }
 
     public void setWhiteListEnabled(boolean p_72371_1_)
@@ -1032,11 +1572,29 @@ public abstract class ServerConfigurationManager
 
     public void removeAllPlayers()
     {
-        for (int i = 0; i < this.playerEntityList.size(); ++i)
+        while (!this.playerEntityList.isEmpty())
+        {
+            // Spigot start
+            EntityPlayerMP p = (EntityPlayerMP) this.playerEntityList.get(0);
+            p.playerNetServerHandler.kickPlayerFromServer(this.mcServer.server.getShutdownMessage());
+
+            if ((!this.playerEntityList.isEmpty()) && (this.playerEntityList.get(0) == p))
+            {
+                this.playerEntityList.remove(0); // Prevent shutdown hang if already disconnected
+            }
+            // Spigot end
+        }
+    }
+
+    // CraftBukkit start - Support multi-line messages
+    public void sendMessage(IChatComponent[] ichatbasecomponent)
+    {
+        for (IChatComponent component : ichatbasecomponent)
         {
-            ((EntityPlayerMP)this.playerEntityList.get(i)).playerNetServerHandler.kickPlayerFromServer("Server closed");
+            sendChatMsgImpl(component, true);
         }
     }
+    // CraftBukkit end
 
     public void sendChatMsgImpl(IChatComponent p_148544_1_, boolean p_148544_2_)
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/UserList.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/UserList.java
index eba1ddc..9763188 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/UserList.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/UserList.java
@@ -184,6 +184,12 @@ public class UserList
         return this.field_152696_d.size() < 1;
     }
 
+    // CraftBukkit start
+    public Collection<UserListEntry> getValues() {
+        return this.field_152696_d.values();
+    }
+    // CraftBukkit end
+
     @SideOnly(Side.SERVER)
     public void func_152679_g() throws IOException
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/UserListEntry.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/UserListEntry.java
index 89617a2..f767340 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/UserListEntry.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/UserListEntry.java
@@ -17,7 +17,7 @@ public class UserListEntry
         this.field_152642_a = p_i1147_1_;
     }
 
-    Object func_152640_f()
+    public Object func_152640_f() // CraftBukkit - private -> public
     {
         return this.field_152642_a;
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/management/UserListOps.java ./eclipse/cauldron/src/main/java/net/minecraft/server/management/UserListOps.java
index 5427cbd..6f3077d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/management/UserListOps.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/management/UserListOps.java
@@ -35,6 +35,7 @@ public class UserListOps extends UserList
 
     protected String func_152699_b(GameProfile p_152699_1_)
     {
+        if (p_152699_1_ == null || p_152699_1_.getId() == null) return "invalid"; // Cauldron - handle GameProfiles with no ID
         return p_152699_1_.getId().toString();
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/network/NetHandlerHandshakeTCP.java ./eclipse/cauldron/src/main/java/net/minecraft/server/network/NetHandlerHandshakeTCP.java
index ed900c3..659ef66 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/network/NetHandlerHandshakeTCP.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/network/NetHandlerHandshakeTCP.java
@@ -3,6 +3,7 @@ package net.minecraft.server.network;
 import cpw.mods.fml.common.FMLCommonHandler;
 import io.netty.util.concurrent.GenericFutureListener;
 import net.minecraft.network.EnumConnectionState;
+import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.handshake.INetHandlerHandshakeServer;
 import net.minecraft.network.handshake.client.C00Handshake;
@@ -11,8 +12,24 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.IChatComponent;
 
+
+// CraftBukkit start
+import java.net.InetAddress;
+import java.util.HashMap;
+// CraftBukkit end
+// Spigot start
+import com.mojang.authlib.properties.Property;
+import com.mojang.util.UUIDTypeAdapter;
+// Spigot end
+
 public class NetHandlerHandshakeTCP implements INetHandlerHandshakeServer
 {
+    private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
+    // CraftBukkit start
+    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static int throttleCounter = 0;
+    // CraftBukkit end
+
     private final MinecraftServer field_147387_a;
     private final NetworkManager field_147386_b;
     private static final String __OBFID = "CL_00001456";
@@ -39,6 +56,52 @@ public class NetHandlerHandshakeTCP implements INetHandlerHandshakeServer
                 this.field_147386_b.setConnectionState(EnumConnectionState.LOGIN);
                 ChatComponentText chatcomponenttext;
 
+                // CraftBukkit start
+                try
+                {
+                    long currentTime = System.currentTimeMillis();
+                    long connectionThrottle = MinecraftServer.getServer().server.getConnectionThrottle();
+                    InetAddress address = ((java.net.InetSocketAddress) this.field_147386_b.getSocketAddress()).getAddress();
+
+                    synchronized (throttleTracker)
+                    {
+                        if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle)
+                        {
+                            throttleTracker.put(address, currentTime);
+                            chatcomponenttext = new ChatComponentText("Connection throttled! Please wait before reconnecting.");
+                            this.field_147386_b.scheduleOutboundPacket(new S00PacketDisconnect(chatcomponenttext), new GenericFutureListener[0]);
+                            this.field_147386_b.closeChannel(chatcomponenttext); // Should be close
+                            return;
+                        }
+
+                        throttleTracker.put(address, currentTime);
+                        throttleCounter++;
+
+                        if (throttleCounter > 200)
+                        {
+                            throttleCounter = 0;
+                            // Cleanup stale entries
+                            java.util.Iterator iter = throttleTracker.entrySet().iterator();
+
+                            while (iter.hasNext())
+                            {
+                                java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
+
+                                if (entry.getValue() > connectionThrottle)
+                                {
+                                    iter.remove();
+                                }
+                            }
+                        }
+                    }
+                }
+                catch (Throwable t)
+                {
+                    org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
+                }
+
+                // CraftBukkit end
+
                 if (p_147383_1_.func_149595_d() > 5)
                 {
                     chatcomponenttext = new ChatComponentText("Outdated server! I\'m still on 1.7.10");
@@ -54,6 +117,33 @@ public class NetHandlerHandshakeTCP implements INetHandlerHandshakeServer
                 else
                 {
                     this.field_147386_b.setNetHandler(new NetHandlerLoginServer(this.field_147387_a, this.field_147386_b));
+
+                    // Spigot Start
+                    if (org.spigotmc.SpigotConfig.bungee)
+                    {
+                        String[] split = p_147383_1_.field_149598_b.split("\00");
+
+                        if (split.length == 3 || split.length == 4)
+                        {
+                            p_147383_1_.field_149598_b = split[0];
+                            field_147386_b.socketAddress = new java.net.InetSocketAddress(split[1], ((java.net.InetSocketAddress) field_147386_b.getSocketAddress()).getPort());
+                            field_147386_b.spoofedUUID = UUIDTypeAdapter.fromString( split[2] );
+                        }
+                        else
+                        {
+                            chatcomponenttext = new ChatComponentText("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
+                            this.field_147386_b.scheduleOutboundPacket(new S00PacketDisconnect(chatcomponenttext), new GenericFutureListener[0]);
+                            this.field_147386_b.closeChannel(chatcomponenttext);
+                            return;
+                        }
+
+                        if (split.length == 4)
+                        {
+                            field_147386_b.spoofedProfile = gson.fromJson(split[3], Property[].class);
+                        }
+                    }
+                    // Spigot End
+                    ((NetHandlerLoginServer) this.field_147386_b.getNetHandler()).hostname = p_147383_1_.field_149598_b + ":" + p_147383_1_.field_149599_c; // CraftBukkit - set hostname
                 }
 
                 break;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/network/NetHandlerLoginServer.java ./eclipse/cauldron/src/main/java/net/minecraft/server/network/NetHandlerLoginServer.java
index 597b669..7aee966 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/network/NetHandlerLoginServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/network/NetHandlerLoginServer.java
@@ -2,11 +2,9 @@ package net.minecraft.server.network;
 
 import com.google.common.base.Charsets;
 import com.mojang.authlib.GameProfile;
-import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
-
 import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.math.BigInteger;
+
 import java.security.PrivateKey;
 import java.util.Arrays;
 import java.util.Random;
@@ -23,12 +23,17 @@ import net.minecraft.network.login.server.S01PacketEncryptionRequest;
 import net.minecraft.network.login.server.S02PacketLoginSuccess;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.CryptManager;
 import net.minecraft.util.IChatComponent;
+
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+// CraftBukkit end
+import com.mojang.authlib.properties.Property;
+
 public class NetHandlerLoginServer implements INetHandlerLoginServer
 {
     private static final AtomicInteger field_147331_b = new AtomicInteger(0);
@@ -37,25 +42,28 @@ public class NetHandlerLoginServer implements INetHandlerLoginServer
     private final byte[] field_147330_e = new byte[4];
     private final MinecraftServer field_147327_f;
     public final NetworkManager field_147333_a;
-    private NetHandlerLoginServer.LoginState field_147328_g;
+    private LoginState field_147328_g;
     private int field_147336_h;
     private GameProfile field_147337_i;
     private String field_147334_j;
     private SecretKey field_147335_k;
+    public String hostname = ""; // CraftBukkit - add field
     private static final String __OBFID = "CL_00001458";
+    private final boolean debug;
 
     public NetHandlerLoginServer(MinecraftServer p_i45298_1_, NetworkManager p_i45298_2_)
     {
-        this.field_147328_g = NetHandlerLoginServer.LoginState.HELLO;
+        this.field_147328_g = LoginState.HELLO;
         this.field_147334_j = "";
         this.field_147327_f = p_i45298_1_;
         this.field_147333_a = p_i45298_2_;
+        this.debug = p_i45298_1_.cauldronConfig.userLogin.getValue();
         field_147329_d.nextBytes(this.field_147330_e);
     }
 
     public void onNetworkTick()
     {
-        if (this.field_147328_g == NetHandlerLoginServer.LoginState.READY_TO_ACCEPT)
+        if (this.field_147328_g == LoginState.READY_TO_ACCEPT)
         {
             this.func_147326_c();
         }
@@ -81,24 +89,54 @@ public class NetHandlerLoginServer implements INetHandlerLoginServer
         }
     }
 
+    // Spigot start
+    public void initUUID()
+    {
+        UUID uuid;
+        if ( field_147333_a.spoofedUUID != null )
+        {
+            uuid = field_147333_a.spoofedUUID;
+        } else
+        {
+            uuid = UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + this.field_147337_i.getName() ).getBytes( Charsets.UTF_8 ) );
+        }
+
+        this.field_147337_i = new GameProfile( uuid, this.field_147337_i.getName() );
+
+        if (field_147333_a.spoofedProfile != null)
+        {
+            for ( Property property : field_147333_a.spoofedProfile )
+            {
+                this.field_147337_i.getProperties().put( property.getName(), property );
+            }
+        }
+    }
+    // Spigot end
+
     public void func_147326_c()
     {
+        // Spigot start - Moved to initUUID
+        /*
         if (!this.field_147337_i.isComplete())
         {
             this.field_147337_i = this.func_152506_a(this.field_147337_i);
         }
+        */
+        // Spigot end
 
-        String s = this.field_147327_f.getConfigurationManager().allowUserToConnect(this.field_147333_a.getSocketAddress(), this.field_147337_i);
+        // CraftBukkit start - fire PlayerLoginEvent
+        EntityPlayerMP s = this.field_147327_f.getConfigurationManager().attemptLogin(this, this.field_147337_i, this.hostname);
 
-        if (s != null)
+        if (s == null)
         {
-            this.func_147322_a(s);
+            // this.func_147322_a(s);
+            // CraftBukkit end
         }
         else
         {
             this.field_147328_g = NetHandlerLoginServer.LoginState.ACCEPTED;
             this.field_147333_a.scheduleOutboundPacket(new S02PacketLoginSuccess(this.field_147337_i), new GenericFutureListener[0]);
-            FMLNetworkHandler.fmlServerHandshake(this.field_147327_f.getConfigurationManager(), this.field_147333_a, this.field_147327_f.getConfigurationManager().createPlayerForUser(this.field_147337_i));
+            FMLNetworkHandler.fmlServerHandshake(this.field_147327_f.getConfigurationManager(), this.field_147333_a, this.field_147327_f.getConfigurationManager().processLogin(this.field_147337_i, s)); // CraftBukkit - add player reference
         }
     }
 
@@ -114,29 +152,33 @@ public class NetHandlerLoginServer implements INetHandlerLoginServer
 
     public void onConnectionStateTransition(EnumConnectionState p_147232_1_, EnumConnectionState p_147232_2_)
     {
-        Validate.validState(this.field_147328_g == NetHandlerLoginServer.LoginState.ACCEPTED || this.field_147328_g == NetHandlerLoginServer.LoginState.HELLO, "Unexpected change in protocol", new Object[0]);
+        Validate.validState(this.field_147328_g == LoginState.ACCEPTED || this.field_147328_g == LoginState.HELLO, "Unexpected change in protocol", new Object[0]);
         Validate.validState(p_147232_2_ == EnumConnectionState.PLAY || p_147232_2_ == EnumConnectionState.LOGIN, "Unexpected protocol " + p_147232_2_, new Object[0]);
     }
 
     public void processLoginStart(C00PacketLoginStart p_147316_1_)
     {
-        Validate.validState(this.field_147328_g == NetHandlerLoginServer.LoginState.HELLO, "Unexpected hello packet", new Object[0]);
+        if (debug) logger.info("Login attempt");
+        Validate.validState(this.field_147328_g == LoginState.HELLO, "Unexpected hello packet", new Object[0]);
         this.field_147337_i = p_147316_1_.func_149304_c();
+        if (debug) logger.info("Received profile: " + this.field_147337_i.getName());
 
         if (this.field_147327_f.isServerInOnlineMode() && !this.field_147333_a.isLocalChannel())
         {
-            this.field_147328_g = NetHandlerLoginServer.LoginState.KEY;
+            if (debug) logger.info("Send encryption request to " + this.field_147337_i.getName());
+            this.field_147328_g = LoginState.KEY;
             this.field_147333_a.scheduleOutboundPacket(new S01PacketEncryptionRequest(this.field_147334_j, this.field_147327_f.getKeyPair().getPublic(), this.field_147330_e), new GenericFutureListener[0]);
         }
         else
         {
-            this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+            if (debug) logger.info("Lookup offline UUID for " + this.field_147337_i.getName());
+            (new ThreadPlayerLookupUUID(this, "User Authenticator #" + field_147331_b.incrementAndGet())).start(); // Spigot
         }
     }
 
     public void processEncryptionResponse(C01PacketEncryptionResponse p_147315_1_)
     {
-        Validate.validState(this.field_147328_g == NetHandlerLoginServer.LoginState.KEY, "Unexpected key packet", new Object[0]);
+        Validate.validState(this.field_147328_g == LoginState.KEY, "Unexpected key packet", new Object[0]);
         PrivateKey privatekey = this.field_147327_f.getKeyPair().getPrivate();
 
         if (!Arrays.equals(this.field_147330_e, p_147315_1_.func_149299_b(privatekey)))
@@ -145,54 +187,12 @@ public class NetHandlerLoginServer implements INetHandlerLoginServer
         }
         else
         {
+            if (debug) logger.info("Enabling encryption for " + this.field_147337_i.getName());
             this.field_147335_k = p_147315_1_.func_149300_a(privatekey);
             this.field_147328_g = NetHandlerLoginServer.LoginState.AUTHENTICATING;
             this.field_147333_a.enableEncryption(this.field_147335_k);
-            (new Thread("User Authenticator #" + field_147331_b.incrementAndGet())
-            {
-                private static final String __OBFID = "CL_00001459";
-                public void run()
-                {
-                    GameProfile gameprofile = NetHandlerLoginServer.this.field_147337_i;
-
-                    try
-                    {
-                        String s = (new BigInteger(CryptManager.getServerIdHash(NetHandlerLoginServer.this.field_147334_j, NetHandlerLoginServer.this.field_147327_f.getKeyPair().getPublic(), NetHandlerLoginServer.this.field_147335_k))).toString(16);
-                        NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.field_147327_f.func_147130_as().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s);
-
-                        if (NetHandlerLoginServer.this.field_147337_i != null)
-                        {
-                            NetHandlerLoginServer.logger.info("UUID of player " + NetHandlerLoginServer.this.field_147337_i.getName() + " is " + NetHandlerLoginServer.this.field_147337_i.getId());
-                            NetHandlerLoginServer.this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                        }
-                        else if (NetHandlerLoginServer.this.field_147327_f.isSinglePlayer())
-                        {
-                            NetHandlerLoginServer.logger.warn("Failed to verify username but will let them in anyway!");
-                            NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.func_152506_a(gameprofile);
-                            NetHandlerLoginServer.this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                        }
-                        else
-                        {
-                            NetHandlerLoginServer.this.func_147322_a("Failed to verify username!");
-                            NetHandlerLoginServer.logger.error("Username \'" + NetHandlerLoginServer.this.field_147337_i.getName() + "\' tried to join with an invalid session");
-                        }
-                    }
-                    catch (AuthenticationUnavailableException authenticationunavailableexception)
-                    {
-                        if (NetHandlerLoginServer.this.field_147327_f.isSinglePlayer())
-                        {
-                            NetHandlerLoginServer.logger.warn("Authentication servers are down but will let them in anyway!");
-                            NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.func_152506_a(gameprofile);
-                            NetHandlerLoginServer.this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                        }
-                        else
-                        {
-                            NetHandlerLoginServer.this.func_147322_a("Authentication servers are down. Please try again later, sorry!");
-                            NetHandlerLoginServer.logger.error("Couldn\'t verify username because servers are unavailable");
-                        }
-                    }
-                }
-            }).start();
+            if (debug) logger.info("Lookup online UUID for " + this.field_147337_i.getName());
+            (new ThreadPlayerLookupUUID(this, "User Authenticator #" + field_147331_b.incrementAndGet())).start();
         }
     }
 
@@ -202,6 +202,38 @@ public class NetHandlerLoginServer implements INetHandlerLoginServer
         return new GameProfile(uuid, p_152506_1_.getName());
     }
 
+    // Cauldron start - access methods for ThreadPlayerLookupUUID
+    static String getLoginServerId(NetHandlerLoginServer loginServer) {
+        return loginServer.field_147334_j;
+    }
+
+    static MinecraftServer getMinecraftServer(NetHandlerLoginServer loginServer) {
+        return loginServer.field_147327_f;
+    }
+
+    static SecretKey getSecretKey(NetHandlerLoginServer loginServer) {
+        return loginServer.field_147335_k;
+    }
+
+    static GameProfile processPlayerLoginGameProfile(NetHandlerLoginServer loginServer, GameProfile gameprofile) {
+        if (loginServer.debug) logger.info("Player logged in: " + gameprofile);
+        return loginServer.field_147337_i = gameprofile;
+    }
+
+    static GameProfile getGameProfile(NetHandlerLoginServer loginServer) {
+        return loginServer.field_147337_i;
+    }
+
+    static Logger getLogger() {
+        return logger;
+    }
+
+    static void setLoginState(NetHandlerLoginServer loginServer, LoginState state)
+    {
+        loginServer.field_147328_g = state;
+    }
+    // Cauldron end
+
     static enum LoginState
     {
         HELLO,
diff --git ./eclipse/Clean/src/main/java/net/minecraft/server/network/NetHandlerStatusServer.java ./eclipse/cauldron/src/main/java/net/minecraft/server/network/NetHandlerStatusServer.java
index 3c0cf26..76e99eb 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/server/network/NetHandlerStatusServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/server/network/NetHandlerStatusServer.java
@@ -11,6 +12,13 @@ import net.minecraft.network.status.server.S01PacketPong;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.IChatComponent;
 
+// CraftBukkit start
+import java.net.InetSocketAddress;
+import net.minecraft.network.ServerStatusResponse;
+import net.minecraft.util.ChatComponentText;
+import org.bukkit.craftbukkit.util.CraftIconCache;
+// CraftBukkit end
+
 public class NetHandlerStatusServer implements INetHandlerStatusServer
 {
     private final MinecraftServer field_147314_a;
@@ -37,7 +45,36 @@ public class NetHandlerStatusServer implements INetHandlerStatusServer
 
     public void processServerQuery(C00PacketServerQuery p_147312_1_)
     {
-        this.field_147313_b.scheduleOutboundPacket(new S00PacketServerInfo(this.field_147314_a.func_147134_at()), new GenericFutureListener[0]);
+        // CraftBukkit start - fire ping event
+        class ServerListPingEvent extends org.bukkit.event.server.ServerListPingEvent
+        {
+            CraftIconCache icon = field_147314_a.server.getServerIcon();
+
+            ServerListPingEvent()
+            {
+                super(((InetSocketAddress) field_147313_b.getSocketAddress()).getAddress(), field_147314_a.getMOTD(), field_147314_a.getConfigurationManager().getCurrentPlayerCount(), field_147314_a.getConfigurationManager().getMaxPlayers());
+            }
+
+            @Override
+            public void setServerIcon(org.bukkit.util.CachedServerIcon icon)
+            {
+                if (!(icon instanceof CraftIconCache))
+                {
+                    throw new IllegalArgumentException(icon + " was not created by " + org.bukkit.craftbukkit.CraftServer.class);
+                }
+
+                this.icon = (CraftIconCache) icon;
+            }
+        }
+        ServerListPingEvent event = new ServerListPingEvent();
+        this.field_147314_a.server.getPluginManager().callEvent(event);
+        ServerStatusResponse ping = new ServerStatusResponse();
+        ping.func_151320_a(event.icon.value);
+        ping.func_151315_a(new ChatComponentText(event.getMotd()));
+        ping.func_151319_a(new ServerStatusResponse.PlayerCountData(event.getMaxPlayers(), field_147314_a.getConfigurationManager().getCurrentPlayerCount()));
+        ping.func_151321_a(new ServerStatusResponse.MinecraftProtocolVersionIdentifier(field_147314_a.getServerModName() + " " + field_147314_a.getMinecraftVersion(), 5)); // TODO: Update when protocol changes
+        this.field_147313_b.scheduleOutboundPacket(new S00PacketServerInfo(ping), new GenericFutureListener[0]);
+        // CraftBukkit end
     }
 
     public void processPing(C01PacketPing p_147311_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/stats/StatFileWriter.java ./eclipse/cauldron/src/main/java/net/minecraft/stats/StatFileWriter.java
index c79d667..5017434 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/stats/StatFileWriter.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/stats/StatFileWriter.java
@@ -27,6 +27,12 @@ public class StatFileWriter
     {
         if (!p_150871_2_.isAchievement() || this.canUnlockAchievement((Achievement)p_150871_2_))
         {
+            // CraftBukkit start
+            org.bukkit.event.Cancellable cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.handleStatisticsIncrease(p_150871_1_, p_150871_2_, this.writeStat(p_150871_2_), p_150871_3_);
+            if (cancellable != null && cancellable.isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
             this.func_150873_a(p_150871_1_, p_150871_2_, this.writeStat(p_150871_2_) + p_150871_3_);
         }
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/MobSpawnerBaseLogic.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/MobSpawnerBaseLogic.java
index 52dff90..3053fb8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/MobSpawnerBaseLogic.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/MobSpawnerBaseLogic.java
@@ -17,6 +17,8 @@ import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.WeightedRandom;
 import net.minecraft.world.World;
 
+import org.bukkit.event.entity.CreatureSpawnEvent; // CraftBukkit
+
 public abstract class MobSpawnerBaseLogic
 {
     public int spawnDelay = 20;
@@ -162,7 +164,15 @@ public abstract class MobSpawnerBaseLogic
 
             if (p_98265_1_.worldObj != null)
             {
-                p_98265_1_.worldObj.spawnEntityInWorld(p_98265_1_);
+                p_98265_1_.worldObj.addEntity(p_98265_1_, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
+
+                // Spigot Start
+                if (p_98265_1_.worldObj.getSpigotConfig().nerfSpawnerMobs) // Cauldron
+                {
+                    p_98265_1_.fromMobSpawner = true;
+                }
+
+                // Spigot End
             }
 
             NBTTagCompound nbttagcompound2;
@@ -190,7 +200,7 @@ public abstract class MobSpawnerBaseLogic
 
                     if (p_98265_1_.worldObj != null)
                     {
-                        p_98265_1_.worldObj.spawnEntityInWorld(entity2);
+                        p_98265_1_.worldObj.addEntity(entity2, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
                     }
 
                     entity1.mountEntity(entity2);
@@ -202,7 +212,7 @@ public abstract class MobSpawnerBaseLogic
         else if (p_98265_1_ instanceof EntityLivingBase && p_98265_1_.worldObj != null)
         {
             ((EntityLiving)p_98265_1_).onSpawnWithEgg((IEntityLivingData)null);
-            this.getSpawnerWorld().spawnEntityInWorld(p_98265_1_);
+            this.getSpawnerWorld().addEntity(p_98265_1_, CreatureSpawnEvent.SpawnReason.SPAWNER); // CraftBukkit
         }
 
         return p_98265_1_;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntity.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntity.java
index 62b757b..b293dff 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntity.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntity.java
@@ -22,18 +22,23 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import org.spigotmc.CustomTimingsHandler; // Spigot
+import org.bukkit.inventory.InventoryHolder; // CraftBukkit
+
 public class TileEntity
 {
     private static final Logger logger = LogManager.getLogger();
     private static Map nameToClassMap = new HashMap();
-    private static Map classToNameMap = new HashMap();
-    protected World worldObj;
+    public static Map classToNameMap = new HashMap(); // Cauldron - private -> public
+    public World worldObj; // CraftBukkit - protected -> public
+    private boolean GC = false;
     public int xCoord;
     public int yCoord;
     public int zCoord;
     protected boolean tileEntityInvalid;
     public int blockMetadata = -1;
     public Block blockType;
+    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getTileEntityTimings(this); // Spigot
     private static final String __OBFID = "CL_00000340";
 
     public static void addMapping(Class p_145826_0_, String p_145826_1_)
@@ -106,7 +111,11 @@ public class TileEntity
         }
         catch (Exception exception)
         {
-            exception.printStackTrace();
+            // Cauldron start - better debug
+            FMLLog.log(Level.ERROR, exception,
+                    "A TileEntity %s(%s) located @ %s,%s,%s has thrown an exception during creation, it cannot be created. Report this to the mod author",
+                    p_145827_0_.getString("id"), oclass.getName(), p_145827_0_.getInteger("x"), p_145827_0_.getInteger("y"), p_145827_0_.getInteger("z"));
+            // Cauldron end
         }
 
         if (tileentity != null)
@@ -282,6 +291,31 @@ public class TileEntity
         addMapping(TileEntityFlowerPot.class, "FlowerPot");
     }
 
+    // CraftBukkit start
+    public InventoryHolder getOwner()
+    {
+        org.bukkit.block.BlockState state = worldObj.getWorld().getBlockAt(xCoord, yCoord, zCoord).getState();
+
+        if (state instanceof InventoryHolder)
+        {
+            return (InventoryHolder) state;
+        }
+
+        return null;
+    }
+    // CraftBukkit end
+    //KCauldron start
+    public boolean isGC() //Returns true if the chunk it is inside of has marked it for unloading
+    {
+        return this.GC;
+    }
+
+    public void setGC(boolean state) //Should never be touched by a mod. Would make it package-private but not sure if that would still work
+    {
+        this.GC = state;
+    }
+    // KCauldron end
+
     // -- BEGIN FORGE PATCHES --
     /**
      * Determines if this TileEntity requires update calls.
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java
index ae6b56c..e4ea99c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java
@@ -18,6 +18,11 @@ import net.minecraft.potion.PotionEffect;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.util.AxisAlignedBB;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class TileEntityBeacon extends TileEntity implements IInventory
 {
     public static final Potion[][] effectsList = new Potion[][] {{Potion.moveSpeed, Potion.digSpeed}, {Potion.resistance, Potion.jump}, {Potion.damageBoost}, {Potion.regeneration}};
@@ -31,6 +36,35 @@ public class TileEntityBeacon extends TileEntity implements IInventory
     private int secondaryEffect;
     private ItemStack payment;
     private String field_146008_p;
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return new ItemStack[] { this.payment };
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00000339";
 
     public void updateEntity()
@@ -343,7 +377,7 @@ public class TileEntityBeacon extends TileEntity implements IInventory
 
     public int getInventoryStackLimit()
     {
-        return 1;
+        return maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer p_70300_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityBrewingStand.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityBrewingStand.java
index 99a2069..7f840a9 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityBrewingStand.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityBrewingStand.java
@@ -13,17 +13,55 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.potion.PotionHelper;
 
+// CraftBukkit start
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.BrewEvent;
+// CraftBukkit end
+
 public class TileEntityBrewingStand extends TileEntity implements ISidedInventory
 {
     private static final int[] field_145941_a = new int[] {3};
     private static final int[] field_145947_i = new int[] {0, 1, 2};
-    private ItemStack[] brewingItemStacks = new ItemStack[4];
-    private int brewTime;
+    public ItemStack[] brewingItemStacks = new ItemStack[4]; // CraftBukkit - private -> public
+    public int brewTime; // CraftBukkit - private -> public
     private int filledSlots;
     private Item ingredientID;
     private String field_145942_n;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit
     private static final String __OBFID = "CL_00000345";
 
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = 64;
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public ItemStack[] getContents()
+    {
+        return this.brewingItemStacks;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public String getInventoryName()
     {
         return this.hasCustomInventoryName() ? this.field_145942_n : "container.brewing";
@@ -46,12 +84,17 @@ public class TileEntityBrewingStand extends TileEntity implements ISidedInventor
 
     public void updateEntity()
     {
+        // CraftBukkit start - Use wall time instead of ticks for brewing
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
+
         if (this.brewTime > 0)
         {
-            --this.brewTime;
+            this.brewTime -= elapsedTicks;
 
-            if (this.brewTime == 0)
+            if (this.brewTime <= 0)   // == -> <=
             {
+                // CraftBukkit end
                 this.brewPotions();
                 this.markDirty();
             }
@@ -141,7 +184,19 @@ public class TileEntityBrewingStand extends TileEntity implements ISidedInventor
         if (this.canBrew())
         {
             ItemStack itemstack = this.brewingItemStacks[3];
+            // CraftBukkit start
+            if (getOwner() != null)
+            {
+                BrewEvent event = new BrewEvent(worldObj.getWorld().getBlockAt(xCoord, yCoord, zCoord), (org.bukkit.inventory.BrewerInventory) this.getOwner()
+                        .getInventory());
+                org.bukkit.Bukkit.getPluginManager().callEvent(event);
 
+                if (event.isCancelled())
+                {
+                    return;
+                }
+            }
+            // CraftBukkit end
             for (int i = 0; i < 3; ++i)
             {
                 if (this.brewingItemStacks[i] != null && this.brewingItemStacks[i].getItem() instanceof ItemPotion)
@@ -280,7 +335,7 @@ public class TileEntityBrewingStand extends TileEntity implements ISidedInventor
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return this.maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer p_70300_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityChest.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityChest.java
index e8049ec..3cac89c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityChest.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityChest.java
@@ -15,6 +15,12 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.AxisAlignedBB;
 
+// CraftBukkit start
+import net.minecraft.init.Blocks;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class TileEntityChest extends TileEntity implements IInventory
 {
     private ItemStack[] chestContents = new ItemStack[36];
@@ -31,6 +37,36 @@ public class TileEntityChest extends TileEntity implements IInventory
     private String customName;
     private static final String __OBFID = "CL_00000346";
 
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.chestContents;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public TileEntityChest()
     {
         this.cachedChestType = -1;
@@ -296,6 +332,12 @@ public class TileEntityChest extends TileEntity implements IInventory
     public void updateEntity()
     {
         super.updateEntity();
+
+        if (this.worldObj == null)
+        {
+            return;    // CraftBukkit
+        }
+
         this.checkForAdjacentChests();
         ++this.ticksSinceSync;
         float f;
@@ -410,8 +452,28 @@ public class TileEntityChest extends TileEntity implements IInventory
             this.numPlayersUsing = 0;
         }
 
+        int oldPower = Math.max(0, Math.min(10, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
         ++this.numPlayersUsing;
+
+        if (this.worldObj == null)
+        {
+            return;    // CraftBukkit
+        }
+
         this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, this.getBlockType(), 1, this.numPlayersUsing);
+
+        // CraftBukkit start - Call redstone event
+        if (this.getBlockType() == Blocks.trapped_chest)
+        {
+            int newPower = Math.max(0, Math.min(10, this.numPlayersUsing));
+
+            if (oldPower != newPower)
+            {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(worldObj, this.xCoord, this.yCoord, this.zCoord, oldPower, newPower);
+            }
+        }
+
+        // CraftBukkit end
         this.worldObj.notifyBlocksOfNeighborChange(this.xCoord, this.yCoord, this.zCoord, this.getBlockType());
         this.worldObj.notifyBlocksOfNeighborChange(this.xCoord, this.yCoord - 1, this.zCoord, this.getBlockType());
     }
@@ -420,8 +482,28 @@ public class TileEntityChest extends TileEntity implements IInventory
     {
         if (this.getBlockType() instanceof BlockChest)
         {
+            int oldPower = Math.max(0, Math.min(10, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
             --this.numPlayersUsing;
+
+            if (this.worldObj == null)
+            {
+                return;    // CraftBukkit
+            }
+
             this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, this.getBlockType(), 1, this.numPlayersUsing);
+
+            // CraftBukkit start - Call redstone event
+            if (this.getBlockType() == Blocks.trapped_chest)
+            {
+                int newPower = Math.max(0, Math.min(10, this.numPlayersUsing));
+
+                if (oldPower != newPower)
+                {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(worldObj, this.xCoord, this.yCoord, this.zCoord, oldPower, newPower);
+                }
+            }
+
+            // CraftBukkit end
             this.worldObj.notifyBlocksOfNeighborChange(this.xCoord, this.yCoord, this.zCoord, this.getBlockType());
             this.worldObj.notifyBlocksOfNeighborChange(this.xCoord, this.yCoord - 1, this.zCoord, this.getBlockType());
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityCommandBlock.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityCommandBlock.java
index eb3c38b..8149a18 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityCommandBlock.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityCommandBlock.java
@@ -12,39 +12,9 @@ import net.minecraft.world.World;
 
 public class TileEntityCommandBlock extends TileEntity
 {
-    private final CommandBlockLogic field_145994_a = new CommandBlockLogic()
-    {
-        private static final String __OBFID = "CL_00000348";
-        public ChunkCoordinates getPlayerCoordinates()
-        {
-            return new ChunkCoordinates(TileEntityCommandBlock.this.xCoord, TileEntityCommandBlock.this.yCoord, TileEntityCommandBlock.this.zCoord);
-        }
-        public World getEntityWorld()
-        {
-            return TileEntityCommandBlock.this.getWorldObj();
-        }
-        public void func_145752_a(String p_145752_1_)
-        {
-            super.func_145752_a(p_145752_1_);
-            TileEntityCommandBlock.this.markDirty();
-        }
-        public void func_145756_e()
-        {
-            TileEntityCommandBlock.this.getWorldObj().markBlockForUpdate(TileEntityCommandBlock.this.xCoord, TileEntityCommandBlock.this.yCoord, TileEntityCommandBlock.this.zCoord);
-        }
-        @SideOnly(Side.CLIENT)
-        public int func_145751_f()
-        {
-            return 0;
-        }
-        @SideOnly(Side.CLIENT)
-        public void func_145757_a(ByteBuf p_145757_1_)
-        {
-            p_145757_1_.writeInt(TileEntityCommandBlock.this.xCoord);
-            p_145757_1_.writeInt(TileEntityCommandBlock.this.yCoord);
-            p_145757_1_.writeInt(TileEntityCommandBlock.this.zCoord);
-        }
-    };
+    private final TileEntityCommandBlockListener field_145994_a_CB = new TileEntityCommandBlockListener(this); // CraftBukkit
+    private final CommandBlockLogic field_145994_a = field_145994_a_CB; // Cauldron
+
     private static final String __OBFID = "CL_00000347";
 
     public void writeToNBT(NBTTagCompound p_145841_1_)
@@ -70,4 +40,12 @@ public class TileEntityCommandBlock extends TileEntity
     {
         return this.field_145994_a;
     }
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityComparator.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityComparator.java
index 083195f..64d3f20 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityComparator.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityComparator.java
@@ -28,4 +28,12 @@ public class TileEntityComparator extends TileEntity
     {
         this.field_145997_a = p_145995_1_;
     }
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityDispenser.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityDispenser.java
index ee86cd8..5bfa8d0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityDispenser.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityDispenser.java
@@ -7,6 +7,13 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 
+// CraftBukkit start
+import java.util.List;
+
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class TileEntityDispenser extends TileEntity implements IInventory
 {
     private ItemStack[] field_146022_i = new ItemStack[9];
@@ -14,6 +21,36 @@ public class TileEntityDispenser extends TileEntity implements IInventory
     protected String field_146020_a;
     private static final String __OBFID = "CL_00000352";
 
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.field_146022_i;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public int getSizeInventory()
     {
         return 9;
@@ -79,6 +116,11 @@ public class TileEntityDispenser extends TileEntity implements IInventory
         {
             if (this.field_146022_i[k] != null && this.field_146021_j.nextInt(j++) == 0)
             {
+                if (this.field_146022_i[k].stackSize == 0)
+                {
+                    continue;    // CraftBukkit
+                }
+
                 i = k;
             }
         }
@@ -176,7 +218,7 @@ public class TileEntityDispenser extends TileEntity implements IInventory
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public boolean isUseableByPlayer(EntityPlayer p_70300_1_)
@@ -192,4 +234,12 @@ public class TileEntityDispenser extends TileEntity implements IInventory
     {
         return true;
     }
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityDropper.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityDropper.java
index c2994aa..5246a1a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityDropper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityDropper.java
@@ -8,4 +8,12 @@ public class TileEntityDropper extends TileEntityDispenser
     {
         return this.hasCustomInventoryName() ? this.field_146020_a : "container.dropper";
     }
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityEndPortal.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityEndPortal.java
index 609a509..8bc5142 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityEndPortal.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityEndPortal.java
@@ -3,4 +3,12 @@ package net.minecraft.tileentity;
 public class TileEntityEndPortal extends TileEntity
 {
     private static final String __OBFID = "CL_00000365";
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityFlowerPot.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityFlowerPot.java
index abaa65a..a50ff46 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityFlowerPot.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityFlowerPot.java
@@ -55,4 +55,12 @@ public class TileEntityFlowerPot extends TileEntity
     {
         return this.flowerPotData;
     }
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityFurnace.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityFurnace.java
index 71f7df1..5080c46 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityFurnace.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityFurnace.java
@@ -19,6 +19,16 @@ import net.minecraft.item.ItemTool;
 import net.minecraft.item.crafting.FurnaceRecipes;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
+import net.minecraft.server.MinecraftServer;
+
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+// CraftBukkit end
 
 public class TileEntityFurnace extends TileEntity implements ISidedInventory
 {
@@ -30,6 +40,37 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
     public int currentItemBurnTime;
     public int furnaceCookTime;
     private String field_145958_o;
+
+    // CraftBukkit start
+    private int lastTick = MinecraftServer.currentTick;
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public ItemStack[] getContents()
+    {
+        return this.furnaceItemStacks;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00000357";
 
     public int getSizeInventory()
@@ -166,7 +207,7 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     @SideOnly(Side.CLIENT)
@@ -195,52 +236,85 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
     {
         boolean flag = this.furnaceBurnTime > 0;
         boolean flag1 = false;
+        // CraftBukkit start - Use wall time instead of ticks for cooking
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
+
+        // CraftBukkit - moved from below
+        if (this.isBurning() && this.canSmelt())
+        {
+            this.furnaceCookTime += elapsedTicks;
+
+            if (this.furnaceCookTime >= 200)
+            {
+                this.furnaceCookTime %= 200;
+                this.smeltItem();
+                flag1 = true;
+            }
+        }
+        else
+        {
+            this.furnaceCookTime = 0;
+        }
+
+        // CraftBukkit end
 
         if (this.furnaceBurnTime > 0)
         {
-            --this.furnaceBurnTime;
+            this.furnaceBurnTime -= elapsedTicks; // CraftBukkit
         }
 
         if (!this.worldObj.isRemote)
         {
-            if (this.furnaceBurnTime != 0 || this.furnaceItemStacks[1] != null && this.furnaceItemStacks[0] != null)
+            // CraftBukkit start - Handle multiple elapsed ticks
+            if (this.furnaceBurnTime <= 0 && this.canSmelt() && this.furnaceItemStacks[1] != null)   // CraftBukkit - == to <=
             {
-                if (this.furnaceBurnTime == 0 && this.canSmelt())
+                CraftItemStack fuel = CraftItemStack.asCraftMirror(this.furnaceItemStacks[1]);
+                FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.worldObj.getWorld().getBlockAt(this.xCoord, this.yCoord, this.zCoord), fuel, getItemBurnTime(this.furnaceItemStacks[1]));
+                this.worldObj.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled())
                 {
-                    this.currentItemBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
+                    return;
+                }
+
+                this.currentItemBurnTime = furnaceBurnEvent.getBurnTime();
+                this.furnaceBurnTime += this.currentItemBurnTime;
 
-                    if (this.furnaceBurnTime > 0)
+                if (this.furnaceBurnTime > 0 && furnaceBurnEvent.isBurning())
+                {
+                    // CraftBukkit end
+                    flag1 = true;
+
+                    if (this.furnaceItemStacks[1] != null)
                     {
-                        flag1 = true;
+                        --this.furnaceItemStacks[1].stackSize;
 
-                        if (this.furnaceItemStacks[1] != null)
+                        if (this.furnaceItemStacks[1].stackSize == 0)
                         {
-                            --this.furnaceItemStacks[1].stackSize;
-
-                            if (this.furnaceItemStacks[1].stackSize == 0)
-                            {
-                                this.furnaceItemStacks[1] = furnaceItemStacks[1].getItem().getContainerItem(furnaceItemStacks[1]);
-                            }
+                            this.furnaceItemStacks[1] = furnaceItemStacks[1].getItem().getContainerItem(furnaceItemStacks[1]);
                         }
                     }
                 }
+            }
 
-                if (this.isBurning() && this.canSmelt())
-                {
-                    ++this.furnaceCookTime;
+            /* CraftBukkit start - Moved up
+            if (this.isBurning() && this.canSmelt())
+            {
+                ++this.furnaceCookTime;
 
-                    if (this.furnaceCookTime == 200)
-                    {
-                        this.furnaceCookTime = 0;
-                        this.smeltItem();
-                        flag1 = true;
-                    }
-                }
-                else
+                if (this.furnaceCookTime == 200)
                 {
                     this.furnaceCookTime = 0;
+                    this.smeltItem();
+                    flag1 = true;
                 }
             }
+            else
+            {
+                this.furnaceCookTime = 0;
+            }
+            // CraftBukkit end */
 
             if (flag != this.furnaceBurnTime > 0)
             {
@@ -277,16 +351,37 @@ public class TileEntityFurnace extends TileEntity implements ISidedInventory
         if (this.canSmelt())
         {
             ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
+            // CraftBukkit start
+            CraftItemStack source = CraftItemStack.asCraftMirror(this.furnaceItemStacks[0]);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack);
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.worldObj.getWorld().getBlockAt(this.xCoord, this.yCoord, this.zCoord), source, result);
+            this.worldObj.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
 
-            if (this.furnaceItemStacks[2] == null)
+            if (furnaceSmeltEvent.isCancelled())
             {
-                this.furnaceItemStacks[2] = itemstack.copy();
+                return;
             }
-            else if (this.furnaceItemStacks[2].getItem() == itemstack.getItem())
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack = CraftItemStack.asNMSCopy(result);
+
+            if (itemstack != null)
             {
-                this.furnaceItemStacks[2].stackSize += itemstack.stackSize; // Forge BugFix: Results may have multiple items
+                if (this.furnaceItemStacks[2] == null)
+                {
+                    this.furnaceItemStacks[2] = itemstack;
+                }
+                else if (CraftItemStack.asCraftMirror(this.furnaceItemStacks[2]).isSimilar(result))
+                {
+                    this.furnaceItemStacks[2].stackSize += itemstack.stackSize;
+                }
+                else
+                {
+                    return;
+                }
             }
 
+            // CraftBukkit end
             --this.furnaceItemStacks[0].stackSize;
 
             if (this.furnaceItemStacks[0].stackSize <= 0)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityHopper.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityHopper.java
index 3a1cba8..af66ce7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityHopper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityHopper.java
@@ -18,11 +18,52 @@ import net.minecraft.util.Facing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.item.EntityMinecartHopper;
+import net.minecraft.inventory.InventoryLargeChest;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
+
 public class TileEntityHopper extends TileEntity implements IHopper
 {
     private ItemStack[] field_145900_a = new ItemStack[5];
     private String field_145902_i;
     private int field_145901_j = -1;
+
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public ItemStack[] getContents()
+    {
+        return this.field_145900_a;
+    }
+
+    public void onOpen(CraftHumanEntity who)
+    {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who)
+    {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers()
+    {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size)
+    {
+        maxStack = size;
+    }
+    // CraftBukkit end
     private static final String __OBFID = "CL_00000359";
 
     public void readFromNBT(NBTTagCompound p_145839_1_)
@@ -212,12 +253,18 @@ public class TileEntityHopper extends TileEntity implements IHopper
 
                 if (flag)
                 {
-                    this.func_145896_c(8);
+                    this.func_145896_c(this.worldObj.getSpigotConfig().hopperTransfer); // Spigot // Cauldron
                     this.markDirty();
                     return true;
                 }
             }
 
+            // Spigot start
+            if (!this.func_145888_j())
+            {
+                this.func_145896_c(this.worldObj.getSpigotConfig().hopperCheck); // Cauldron
+            }
+            // Spigot end
             return false;
         }
         else
@@ -285,11 +332,64 @@ public class TileEntityHopper extends TileEntity implements IHopper
                     if (this.getStackInSlot(j) != null)
                     {
                         ItemStack itemstack = this.getStackInSlot(j).copy();
-                        ItemStack itemstack1 = func_145889_a(iinventory, this.decrStackSize(j, 1), i);
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.decrStackSize(j, 1));
+                        Inventory destinationInventory;
+    
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof InventoryLargeChest)
+                        {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+                        }
+                        else
+                        {
+                            // Cauldron start - support mod inventories, with no owners
+                            try {
+                                if (iinventory.getOwner() != null) {
+                                    destinationInventory = iinventory.getOwner().getInventory();
+                                } else {
+                                    // TODO: create a mod inventory for passing to the event, instead of null
+                                    destinationInventory = null;
+                                }
+                             } catch (AbstractMethodError e) { // fixes openblocks AbstractMethodError
+                                if (iinventory instanceof net.minecraft.tileentity.TileEntity) {
+                                    org.bukkit.inventory.InventoryHolder holder = net.minecraftforge.cauldron.CauldronUtils.getOwner((net.minecraft.tileentity.TileEntity)iinventory);
+                                    if (holder != null) {
+                                        destinationInventory = holder.getInventory();
+                                    } else {
+                                        destinationInventory = null;
+                                    }
+                                } else {
+                                    destinationInventory = null;
+                                }
+                            }
+                            // Cauldron end
+                        }
+    
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(this.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        this.getWorldObj().getServer().getPluginManager().callEvent(event);
+    
+                        if (event.isCancelled())
+                        {
+                            this.setInventorySlotContents(j, itemstack);
+                            this.func_145896_c(worldObj.spigotConfig.hopperTransfer); // Spigot
+                            return false;
+                        }
+    
+                        ItemStack itemstack1 = func_145889_a(iinventory, CraftItemStack.asNMSCopy(event.getItem()), i);
     
                         if (itemstack1 == null || itemstack1.stackSize == 0)
                         {
-                            iinventory.markDirty();
+                            if (event.getItem().equals(oitemstack))
+                            {
+                                iinventory.markDirty();
+                            }
+                            else
+                            {
+                                this.setInventorySlotContents(j, itemstack);
+                            }
+    
+                            // CraftBukkit end
                             return true;
                         }
     
@@ -427,11 +526,70 @@ public class TileEntityHopper extends TileEntity implements IHopper
         if (itemstack != null && func_145890_b(p_145892_1_, itemstack, p_145892_2_, p_145892_3_))
         {
             ItemStack itemstack1 = itemstack.copy();
-            ItemStack itemstack2 = func_145889_a(p_145892_0_, p_145892_1_.decrStackSize(p_145892_2_, 1), -1);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(p_145892_1_.decrStackSize(p_145892_2_, 1));
+            Inventory sourceInventory;
+
+            // Have to special case large chests as they work oddly
+            if (p_145892_1_ instanceof InventoryLargeChest)
+            {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) p_145892_1_);
+            }
+            else
+            {
+                // Cauldron start - support mod inventories, with no owners
+                try
+                {
+                    if (p_145892_1_.getOwner() != null)
+                    {
+                        sourceInventory = p_145892_1_.getOwner().getInventory();
+                    } 
+                    else
+                    {
+                        // TODO: create a mod inventory for passing to the event, instead of null
+                        sourceInventory = null;
+                    }
+                }
+                catch (AbstractMethodError e)
+                {
+                    sourceInventory = null;
+                }
+                // Cauldron end
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), p_145892_0_.getOwner().getInventory(), false);
+            p_145892_0_.getWorldObj().getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                p_145892_1_.setInventorySlotContents(p_145892_2_, itemstack1);
+
+                if (p_145892_0_ instanceof TileEntityHopper)
+                {
+                    ((TileEntityHopper) p_145892_0_).func_145896_c(p_145892_0_.getWorldObj().spigotConfig.hopperTransfer); // Spigot
+                }
+                else if (p_145892_0_ instanceof EntityMinecartHopper)
+                {
+                    ((EntityMinecartHopper) p_145892_0_).setDisplayTileData(p_145892_0_.getWorldObj().spigotConfig.hopperTransfer / 2); // Spigot
+                }
+
+                return false;
+            }
+
+            ItemStack itemstack2 = func_145889_a(p_145892_0_, CraftItemStack.asNMSCopy(event.getItem()), -1);
 
             if (itemstack2 == null || itemstack2.stackSize == 0)
             {
-                p_145892_1_.markDirty();
+                if (event.getItem().equals(oitemstack))
+                {
+                    p_145892_1_.markDirty();
+                }
+                else
+                {
+                    p_145892_1_.setInventorySlotContents(p_145892_2_, itemstack1);
+                }
+
+                // CraftBukkit end
                 return true;
             }
 
@@ -451,6 +609,20 @@ public class TileEntityHopper extends TileEntity implements IHopper
         }
         else
         {
+            // CraftBukkit start
+            // Cauldron start - vanilla compatibility
+            if (p_145898_0_.getOwner() != null && p_145898_1_.getBukkitEntity() != null)
+            {
+                InventoryPickupItemEvent event = new InventoryPickupItemEvent(p_145898_0_.getOwner().getInventory(), (org.bukkit.entity.Item) p_145898_1_.getBukkitEntity());
+                p_145898_1_.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return false;
+                }
+            }
+            // Cauldron end
+            // CraftBukkit end
             ItemStack itemstack = p_145898_1_.getEntityItem().copy();
             ItemStack itemstack1 = func_145889_a(p_145898_0_, itemstack, -1);
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityNote.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityNote.java
index eee4fd1..88f2575 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityNote.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityNote.java
@@ -68,7 +68,23 @@ public class TileEntityNote extends TileEntity
                 b0 = 4;
             }
 
-            p_145878_1_.addBlockEvent(p_145878_2_, p_145878_3_, p_145878_4_, Blocks.noteblock, b0, this.note);
+            // CraftBukkit start
+            org.bukkit.event.block.NotePlayEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callNotePlayEvent(this.worldObj, p_145878_2_, p_145878_3_, p_145878_4_, b0, this.note);
+
+            if (!event.isCancelled())
+            {
+                this.worldObj.addBlockEvent(p_145878_2_, p_145878_3_, p_145878_4_, Blocks.noteblock, event.getInstrument().getType(), event.getNote().getId());
+            }
+
+            // CraftBukkit end
         }
     }
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityPiston.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityPiston.java
index 0d2ac67..154a8fd 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntityPiston.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntityPiston.java
@@ -140,6 +140,11 @@ public class TileEntityPiston extends TileEntity
 
     public void updateEntity()
     {
+        if (this.worldObj == null)
+        {
+            return;    // CraftBukkit
+        }
+
         this.lastProgress = this.progress;
 
         if (this.lastProgress >= 1.0F)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntitySign.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntitySign.java
index 674d66e..7f19c6a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntitySign.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntitySign.java
@@ -11,7 +11,7 @@ public class TileEntitySign extends TileEntity
 {
     public String[] signText = new String[] {"", "", "", ""};
     public int lineBeingEdited = -1;
-    private boolean field_145916_j = true;
+    public boolean field_145916_j = true; // CraftBukkit - private -> public
     private EntityPlayer field_145917_k;
     private static final String __OBFID = "CL_00000363";
 
@@ -43,7 +43,19 @@ public class TileEntitySign extends TileEntity
     public Packet getDescriptionPacket()
     {
         String[] astring = new String[4];
-        System.arraycopy(this.signText, 0, astring, 0, 4);
+
+        // CraftBukkit start - Limit sign text to 15 chars per line
+        for (int i = 0; i < 4; ++i)
+        {
+            astring[i] = this.signText[i];
+
+            if (this.signText[i].length() > 15)
+            {
+                astring[i] = this.signText[i].substring(0, 15);
+            }
+        }
+
+        // CraftBukkit end
         return new S33PacketUpdateSign(this.xCoord, this.yCoord, this.zCoord, astring);
     }
 
@@ -72,4 +84,26 @@ public class TileEntitySign extends TileEntity
     {
         return this.field_145917_k;
     }
+
+    // CraftBukkit start - central method to limit sign text to 15 chars per line
+    public static String[] sanitizeLines(String[] lines) {
+        String[] astring = new String[4];
+        for (int i = 0; i < 4; ++i) {
+            astring[i] = lines[i];
+
+            if (lines[i].length() > 15) {
+                astring[i] = lines[i].substring(0, 15);
+            }
+        }
+        return astring;
+    }
+    // CraftBukkit end
+
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntitySkull.java ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntitySkull.java
index 43b25be..3358d41 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/tileentity/TileEntitySkull.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/tileentity/TileEntitySkull.java
@@ -79,6 +79,14 @@ public class TileEntitySkull extends TileEntity
         this.func_152109_d();
     }
 
+    // Cauldron start
+    @Override
+    public boolean canUpdate()
+    {
+        return false;
+    }
+    // Cauldron end
+
     private void func_152109_d()
     {
         if (this.field_152110_j != null && !StringUtils.isNullOrEmpty(this.field_152110_j.getName()))
@@ -113,6 +121,13 @@ public class TileEntitySkull extends TileEntity
         this.field_145910_i = p_145903_1_;
     }
 
+    // CraftBukkit start
+    public int getRotation()
+    {
+        return this.field_145910_i;
+    }
+    // CraftBukkit end
+
     @SideOnly(Side.CLIENT)
     public int func_145906_b()
     {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/util/ChunkCoordinates.java ./eclipse/cauldron/src/main/java/net/minecraft/util/ChunkCoordinates.java
index 82d8e1c..16953a5 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/util/ChunkCoordinates.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/util/ChunkCoordinates.java
@@ -38,7 +38,7 @@ public class ChunkCoordinates implements Comparable
 
     public int hashCode()
     {
-        return this.posX + this.posZ << 8 + this.posY << 16;
+        return this.posX + (this.posZ << 8) + (this.posY << 16);
     }
 
     public int compareTo(ChunkCoordinates p_compareTo_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/util/EntityDamageSourceIndirect.java ./eclipse/cauldron/src/main/java/net/minecraft/util/EntityDamageSourceIndirect.java
index 7cfcead..433c9f7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/util/EntityDamageSourceIndirect.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/util/EntityDamageSourceIndirect.java
@@ -33,4 +33,11 @@ public class EntityDamageSourceIndirect extends EntityDamageSource
         String s1 = s + ".item";
         return itemstack != null && itemstack.hasDisplayName() && StatCollector.canTranslate(s1) ? new ChatComponentTranslation(s1, new Object[] {p_151519_1_.func_145748_c_(), ichatcomponent, itemstack.func_151000_E()}): new ChatComponentTranslation(s, new Object[] {p_151519_1_.func_145748_c_(), ichatcomponent});
     }
+
+    // CraftBukkit start
+    public Entity getProximateDamageSource()
+    {
+        return super.getEntity();
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/util/FoodStats.java ./eclipse/cauldron/src/main/java/net/minecraft/util/FoodStats.java
index 1816802..cbe8f83 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/util/FoodStats.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/util/FoodStats.java
@@ -7,16 +7,31 @@ import net.minecraft.item.ItemFood;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.EnumDifficulty;
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S06PacketUpdateHealth;
+// CraftBukkit end
 
 public class FoodStats
 {
-    private int foodLevel = 20;
-    private float foodSaturationLevel = 5.0F;
-    private float foodExhaustionLevel;
-    private int foodTimer;
+    // CraftBukkit start - All made public
+    public int foodLevel = 20;
+    public float foodSaturationLevel = 5.0F;
+    public float foodExhaustionLevel;
+    public int foodTimer;
+    private EntityPlayer entityplayer;
+    // CraftBukkit end
     private int prevFoodLevel = 20;
     private static final String __OBFID = "CL_00001729";
 
+    // CraftBukkit start - added EntityPlayer constructor
+    public FoodStats(EntityPlayer entityplayer)
+    {
+        org.apache.commons.lang.Validate.notNull(entityplayer);
+        this.entityplayer = entityplayer;
+    }
+    // CraftBukkit end
+
     public void addStats(int p_75122_1_, float p_75122_2_)
     {
         this.foodLevel = Math.min(p_75122_1_ + this.foodLevel, 20);
@@ -25,7 +40,17 @@ public class FoodStats
 
     public void func_151686_a(ItemFood p_151686_1_, ItemStack p_151686_2_)
     {
-        this.addStats(p_151686_1_.func_150905_g(p_151686_2_), p_151686_1_.func_150906_h(p_151686_2_));
+        // CraftBukkit start
+        int oldFoodLevel = foodLevel;
+        org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityplayer, p_151686_1_.func_150905_g(p_151686_2_) + oldFoodLevel);
+
+        if (!event.isCancelled())
+        {
+            this.addStats(event.getFoodLevel() - oldFoodLevel, p_151686_1_.func_150906_h(p_151686_2_));
+        }
+
+        ((EntityPlayerMP) entityplayer).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP) entityplayer).getBukkitEntity().getScaledHealth(), entityplayer.getFoodStats().foodLevel, entityplayer.getFoodStats().foodSaturationLevel));
+        // CraftBukkit end
     }
 
     public void onUpdate(EntityPlayer p_75118_1_)
@@ -43,7 +68,16 @@ public class FoodStats
             }
             else if (enumdifficulty != EnumDifficulty.PEACEFUL)
             {
-                this.foodLevel = Math.max(this.foodLevel - 1, 0);
+                // CraftBukkit start
+                org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(p_75118_1_, Math.max(this.foodLevel - 1, 0));
+
+                if (!event.isCancelled())
+                {
+                    this.foodLevel = event.getFoodLevel();
+                }
+
+                ((EntityPlayerMP) p_75118_1_).playerNetServerHandler.sendPacket(new S06PacketUpdateHealth(((EntityPlayerMP) p_75118_1_).getBukkitEntity().getScaledHealth(), this.foodLevel, this.foodSaturationLevel));
+                // CraftBukkit end
             }
         }
 
@@ -53,7 +87,8 @@ public class FoodStats
 
             if (this.foodTimer >= 80)
             {
-                p_75118_1_.heal(1.0F);
+                // CraftBukkit - added RegainReason
+                p_75118_1_.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED);
                 this.addExhaustion(3.0F);
                 this.foodTimer = 0;
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/util/IntHashMap.java ./eclipse/cauldron/src/main/java/net/minecraft/util/IntHashMap.java
index 4256062..03fb138 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/util/IntHashMap.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/util/IntHashMap.java
@@ -10,7 +10,7 @@ public class IntHashMap
     private int threshold = 12;
     private final float growFactor = 0.75F;
     private transient volatile int versionStamp;
-    private Set keySet = new HashSet();
+    // private Set keySet = new HashSet(); // CraftBukkit - expensive and unused
     private static final String __OBFID = "CL_00001490";
 
     private static int computeHash(int p_76044_0_)
@@ -61,7 +61,7 @@ public class IntHashMap
 
     public void addKey(int p_76038_1_, Object p_76038_2_)
     {
-        this.keySet.add(Integer.valueOf(p_76038_1_));
+        //this.keySet.add(Integer.valueOf(p_76038_1_)); // CraftBukkit
         int j = computeHash(p_76038_1_);
         int k = getSlotIndex(j, this.slots.length);
 
@@ -125,7 +125,7 @@ public class IntHashMap
 
     public Object removeObject(int p_76049_1_)
     {
-        this.keySet.remove(Integer.valueOf(p_76049_1_));
+        //this.keySet.remove(Integer.valueOf(p_76049_1_)); // CraftBukkit
         IntHashMap.Entry entry = this.removeEntry(p_76049_1_);
         return entry == null ? null : entry.valueEntry;
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/util/RegistryNamespaced.java ./eclipse/cauldron/src/main/java/net/minecraft/util/RegistryNamespaced.java
index dec1ae5..0e73849 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/util/RegistryNamespaced.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/util/RegistryNamespaced.java
@@ -5,6 +5,11 @@ import com.google.common.collect.HashBiMap;
 import java.util.Iterator;
 import java.util.Map;
 
+// Cauldron start
+import cpw.mods.fml.common.FMLLog;
+import net.minecraft.block.Block;
+// Cauldron end
+
 public class RegistryNamespaced extends RegistrySimple implements IObjectIntIterable
 {
     protected ObjectIntIdentityMap underlyingIntegerMap = new ObjectIntIdentityMap();
@@ -18,6 +23,21 @@ public class RegistryNamespaced extends RegistrySimple implements IObjectIntIter
 
     public void addObject(int p_148756_1_, String p_148756_2_, Object p_148756_3_)
     {
+        // Cauldron start - register item/block materials for Bukkit
+        boolean isForgeBlock = p_148756_3_ instanceof Block && (p_148756_3_.getClass().getName().length() > 3 && !p_148756_3_.getClass().getName().startsWith("net.minecraft.block")) ? true : false;
+        org.bukkit.Material material = org.bukkit.Material.addMaterial(p_148756_1_, p_148756_2_, isForgeBlock);
+        if (material != null && net.minecraft.server.MinecraftServer.kcauldronConfig.loggingMaterialInjection.getValue())
+        {
+            if (isForgeBlock)
+            {
+                FMLLog.info("Injected new Forge block material %s with ID %d.", material.name(), material.getId());
+            }
+            else
+            {
+                FMLLog.info("Injected new Forge item material %s with ID %d.", material.name(), material.getId());
+            }
+        }
+        // Cauldron end
         this.underlyingIntegerMap.func_148746_a(p_148756_3_, p_148756_1_);
         this.putObject(ensureNamespaced(p_148756_2_), p_148756_3_);
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/util/WeightedRandomFishable.java ./eclipse/cauldron/src/main/java/net/minecraft/util/WeightedRandomFishable.java
index e507216..8cb5ea1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/util/WeightedRandomFishable.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/util/WeightedRandomFishable.java
@@ -6,9 +6,11 @@ import net.minecraft.item.ItemStack;
 
 public class WeightedRandomFishable extends WeightedRandom.Item
 {
-    private final ItemStack field_150711_b;
-    private float field_150712_c;
-    private boolean field_150710_d;
+    // Cauldron start - private -> public
+    public final ItemStack field_150711_b;
+    public float field_150712_c;
+    public boolean field_150710_d;
+    // Cauldron end
     private static final String __OBFID = "CL_00001664";
 
     public WeightedRandomFishable(ItemStack p_i45317_1_, int p_i45317_2_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/village/Village.java ./eclipse/cauldron/src/main/java/net/minecraft/village/Village.java
index 3e9b44c..b8af301 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/village/Village.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/village/Village.java
@@ -71,7 +71,7 @@ public class Village
             {
                 EntityIronGolem entityirongolem = new EntityIronGolem(this.worldObj);
                 entityirongolem.setPosition(vec3.xCoord, vec3.yCoord, vec3.zCoord);
-                this.worldObj.spawnEntityInWorld(entityirongolem);
+                this.worldObj.addEntity(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
                 ++this.numIronGolems;
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/village/VillageSiege.java ./eclipse/cauldron/src/main/java/net/minecraft/village/VillageSiege.java
index 0d6225d..712fa8e 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/village/VillageSiege.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/village/VillageSiege.java
@@ -196,7 +196,7 @@ public class VillageSiege
             }
 
             entityzombie.setLocationAndAngles(vec3.xCoord, vec3.yCoord, vec3.zCoord, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
-            this.worldObj.spawnEntityInWorld(entityzombie);
+            this.worldObj.addEntity(entityzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_INVASION); // CraftBukkit
             ChunkCoordinates chunkcoordinates = this.theVillage.getCenter();
             entityzombie.setHomeArea(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this.theVillage.getVillageRadius());
             return true;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/Explosion.java ./eclipse/cauldron/src/main/java/net/minecraft/world/Explosion.java
index 004ba3b..34070c0 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/Explosion.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/Explosion.java
@@ -15,11 +16,19 @@ import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.item.EntityTNTPrimed;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.Vec3;
 
+
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.Location;
+// CraftBukkit end
+
 public class Explosion
 {
     public boolean isFlaming;
@@ -34,6 +43,7 @@ public class Explosion
     public float explosionSize;
     public List affectedBlockPositions = new ArrayList();
     private Map field_77288_k = new HashMap();
+    public boolean wasCanceled = false; // CraftBukkit
     private static final String __OBFID = "CL_00000134";
 
     public Explosion(World p_i1948_1_, Entity p_i1948_2_, double p_i1948_3_, double p_i1948_5_, double p_i1948_7_, float p_i1948_9_)
@@ -48,6 +58,12 @@ public class Explosion
 
     public void doExplosionA()
     {
+        // CraftBukkit start
+        if (this.explosionSize < 0.1F)
+        {
+            return;
+        }
+        // CraftBukkit end
         float f = this.explosionSize;
         HashSet hashset = new HashSet();
         int i;
@@ -112,7 +128,14 @@ public class Explosion
         int i2 = MathHelper.floor_double(this.explosionY + (double)this.explosionSize + 1.0D);
         int l = MathHelper.floor_double(this.explosionZ - (double)this.explosionSize - 1.0D);
         int j2 = MathHelper.floor_double(this.explosionZ + (double)this.explosionSize + 1.0D);
-        List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this.exploder, AxisAlignedBB.getBoundingBox((double)i, (double)k, (double)l, (double)j, (double)i2, (double)j2));
+        //List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this.exploder, AxisAlignedBB.getBoundingBox((double)i, (double)k, (double)l, (double)j, (double)i2, (double)j2));// PaperSpigot start - Fix lag from explosions processing dead entities
+        List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this.exploder, AxisAlignedBB.getBoundingBox((double)i, (double)k, (double)l, (double)j, (double)i2, (double)j2), new net.minecraft.command.IEntitySelector() {
+            @Override
+            public boolean isEntityApplicable(Entity entity) {
+                return !entity.isDead;
+            }
+        });
+        // PaperSpigot end
         net.minecraftforge.event.ForgeEventFactory.onExplosionDetonate(this.worldObj, this, list, this.explosionSize);
         Vec3 vec3 = Vec3.createVectorHelper(this.explosionX, this.explosionY, this.explosionZ);
 
@@ -135,7 +158,15 @@ public class Explosion
                     d7 /= d9;
                     double d10 = (double)this.worldObj.getBlockDensity(vec3, entity.boundingBox);
                     double d11 = (1.0D - d4) * d10;
-                    entity.attackEntityFrom(DamageSource.setExplosionSource(this), (float)((int)((d11 * d11 + d11) / 2.0D * 8.0D * (double)this.explosionSize + 1.0D)));
+                    // CraftBukkit start
+                    CraftEventFactory.entityDamage = exploder;
+                    if (!entity.attackEntityFrom(DamageSource.setExplosionSource(this), (float) ((int) ((d11 * d11 + d11) / 2.0D * 8.0D
+                            * (double) this.explosionSize + 1.0D))))
+                    {
+                        CraftEventFactory.entityDamage = null;
+                    }
+                    if (!MinecraftServer.cauldronConfig.allowTntPunishment.getValue()) continue;
+                    // CraftBukkit end
                     double d8 = EnchantmentProtection.func_92092_a(entity, d11);
                     entity.motionX += d5 * d8;
                     entity.motionY += d6 * d8;
@@ -174,6 +205,39 @@ public class Explosion
 
         if (this.isSmoking)
         {
+            // CraftBukkit start
+            org.bukkit.World bworld = this.worldObj.getWorld();
+            org.bukkit.entity.Entity explode = this.exploder == null ? null : this.exploder.getBukkitEntity();
+            Location location = new Location(bworld, this.explosionX, this.explosionY, this.explosionZ);
+            List<org.bukkit.block.Block> blockList = new ArrayList<org.bukkit.block.Block>();
+
+            for (int i1 = this.affectedBlockPositions.size() - 1; i1 >= 0; i1--)
+            {
+                ChunkPosition cpos = (ChunkPosition) this.affectedBlockPositions.get(i1);
+                org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.chunkPosX, cpos.chunkPosY, cpos.chunkPosZ);
+
+                if (bblock.getType() != org.bukkit.Material.AIR)
+                {
+                    blockList.add(bblock);
+                }
+            }
+
+            EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, 0.3F);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            this.affectedBlockPositions.clear();
+
+            for (org.bukkit.block.Block bblock : event.blockList())
+            {
+                ChunkPosition coords = new ChunkPosition(bblock.getX(), bblock.getY(), bblock.getZ());
+                affectedBlockPositions.add(coords);
+            }
+
+            if (event.isCancelled())
+            {
+                this.wasCanceled = true;
+                return;
+            }
+            // CraftBukkit end
             iterator = this.affectedBlockPositions.iterator();
 
             while (iterator.hasNext())
@@ -209,7 +273,8 @@ public class Explosion
                 {
                     if (block.canDropFromExplosion(this))
                     {
-                        block.dropBlockAsItemWithChance(this.worldObj, i, j, k, this.worldObj.getBlockMetadata(i, j, k), 1.0F / this.explosionSize, 0);
+                        // CraftBukkit - add yield
+                        block.dropBlockAsItemWithChance(this.worldObj, i, j, k, this.worldObj.getBlockMetadata(i, j, k), event.getYield(), 0);
                     }
 
                     block.onBlockExploded(this.worldObj, i, j, k, this);
@@ -232,7 +297,12 @@ public class Explosion
 
                 if (block.getMaterial() == Material.air && block1.func_149730_j() && this.explosionRNG.nextInt(3) == 0)
                 {
-                    this.worldObj.setBlock(i, j, k, Blocks.fire);
+                    // CraftBukkit start - Ignition by explosion
+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(this.worldObj, i, j, k, this).isCancelled())
+                    {
+                        this.worldObj.setBlock(i, j, k, Blocks.fire);
+                    }
+                    // CraftBukkit end
                 }
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/SpawnerAnimals.java ./eclipse/cauldron/src/main/java/net/minecraft/world/SpawnerAnimals.java
index bbabd3e..5c0cad7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/SpawnerAnimals.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/SpawnerAnimals.java
@@ -22,9 +22,15 @@ import net.minecraft.world.chunk.Chunk;
 import cpw.mods.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.event.ForgeEventFactory;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+// CraftBukkit end
+
 public final class SpawnerAnimals
 {
-    private HashMap eligibleChunksForSpawning = new HashMap();
+    private LongObjectHashMap<Boolean> eligibleChunksForSpawning = new LongObjectHashMap<Boolean>(); // CraftBukkit - HashMap -> LongObjectHashMap
     private static final String __OBFID = "CL_00000152";
 
     protected static ChunkPosition func_151350_a(World p_151350_0_, int p_151350_1_, int p_151350_2_)
@@ -54,22 +60,30 @@ public final class SpawnerAnimals
                 int j = MathHelper.floor_double(entityplayer.posX / 16.0D);
                 k = MathHelper.floor_double(entityplayer.posZ / 16.0D);
                 byte b0 = 8;
+                // Spigot Start
+                b0 = p_77192_1_.getSpigotConfig().mobSpawnRange; // Cauldron
+                b0 = (b0 > p_77192_1_.getSpigotConfig().viewDistance) ? (byte) p_77192_1_.spigotConfig.viewDistance : b0; // Cauldron
+                b0 = (b0 > 8) ? 8 : b0;
+                // Spigot End
 
                 for (int l = -b0; l <= b0; ++l)
                 {
                     for (int i1 = -b0; i1 <= b0; ++i1)
                     {
                         boolean flag3 = l == -b0 || l == b0 || i1 == -b0 || i1 == b0;
-                        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(l + j, i1 + k);
+                        // CraftBukkit start
+                        long chunkCoords = LongHash.toLong(l + j, i1 + k);
 
                         if (!flag3)
                         {
-                            this.eligibleChunksForSpawning.put(chunkcoordintpair, Boolean.valueOf(false));
+                            this.eligibleChunksForSpawning.put(chunkCoords, false);
                         }
-                        else if (!this.eligibleChunksForSpawning.containsKey(chunkcoordintpair))
+                        else if (!this.eligibleChunksForSpawning.containsKey(chunkCoords))
                         {
-                            this.eligibleChunksForSpawning.put(chunkcoordintpair, Boolean.valueOf(true));
+                            this.eligibleChunksForSpawning.put(chunkCoords, true);
                         }
+
+                        // CraftBukkit end
                     }
                 }
             }
@@ -82,22 +96,46 @@ public final class SpawnerAnimals
             for (int k3 = 0; k3 < k; ++k3)
             {
                 EnumCreatureType enumcreaturetype = aenumcreaturetype[k3];
+                // CraftBukkit start - Use per-world spawn limits
+                int limit = enumcreaturetype.getMaxNumberOfCreature();
+
+                switch (enumcreaturetype)
+                {
+                    case monster:
+                        limit = p_77192_1_.getWorld().getMonsterSpawnLimit();
+                        break;
+                    case creature:
+                        limit = p_77192_1_.getWorld().getAnimalSpawnLimit();
+                        break;
+                    case waterCreature:
+                        limit = p_77192_1_.getWorld().getWaterAnimalSpawnLimit();
+                        break;
+                    case ambient:
+                        limit = p_77192_1_.getWorld().getAmbientSpawnLimit();
+                        break;
+                }
+
+                if (limit == 0)
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
 
-                if ((!enumcreaturetype.getPeacefulCreature() || p_77192_3_) && (enumcreaturetype.getPeacefulCreature() || p_77192_2_) && (!enumcreaturetype.getAnimal() || p_77192_4_) && p_77192_1_.countEntities(enumcreaturetype, true) <= enumcreaturetype.getMaxNumberOfCreature() * this.eligibleChunksForSpawning.size() / 256)
+                if ((!enumcreaturetype.getPeacefulCreature() || p_77192_3_) && (enumcreaturetype.getPeacefulCreature() || p_77192_2_) && (!enumcreaturetype.getAnimal() || p_77192_4_) && p_77192_1_.countEntities(enumcreaturetype.getCreatureClass()) <= limit * eligibleChunksForSpawning.size() / 256)   // CraftBukkit - use per-world limits
                 {
                     Iterator iterator = this.eligibleChunksForSpawning.keySet().iterator();
-                    ArrayList<ChunkCoordIntPair> tmp = new ArrayList(eligibleChunksForSpawning.keySet());
-                    Collections.shuffle(tmp);
-                    iterator = tmp.iterator();
                     label110:
 
                     while (iterator.hasNext())
                     {
-                        ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair)iterator.next();
+                        // CraftBukkit start
+                        long key = ((Long) iterator.next()).longValue();
 
-                        if (!((Boolean)this.eligibleChunksForSpawning.get(chunkcoordintpair1)).booleanValue())
+                        if (!(this.eligibleChunksForSpawning.get(key)))
                         {
-                            ChunkPosition chunkposition = func_151350_a(p_77192_1_, chunkcoordintpair1.chunkXPos, chunkcoordintpair1.chunkZPos);
+                            ChunkPosition chunkposition = func_151350_a(p_77192_1_, LongHash.msw(key), LongHash.lsw(key));
+                            // CraftBukkit end
                             int j1 = chunkposition.chunkPosX;
                             int k1 = chunkposition.chunkPosY;
                             int l1 = chunkposition.chunkPosZ;
@@ -170,7 +208,8 @@ public final class SpawnerAnimals
                                                             if (canSpawn == Result.ALLOW || (canSpawn == Result.DEFAULT && entityliving.getCanSpawnHere()))
                                                             {
                                                                 ++i2;
-                                                                p_77192_1_.spawnEntityInWorld(entityliving);
+                                                                // CraftBukkit start - Added a reason for spawning this creature, moved entityliving.onSpawnWithEgg(ientitylivingdata) up
+                                                                p_77192_1_.addEntity(entityliving, SpawnReason.NATURAL);
                                                                 if (!ForgeEventFactory.doSpecialSpawn(entityliving, p_77192_1_, f, f1, f2))
                                                                 {
                                                                     ientitylivingdata = entityliving.onSpawnWithEgg(ientitylivingdata);
@@ -266,8 +305,10 @@ public final class SpawnerAnimals
                             }
 
                             entityliving.setLocationAndAngles((double)f, (double)f1, (double)f2, p_77191_6_.nextFloat() * 360.0F, 0.0F);
-                            p_77191_0_.spawnEntityInWorld(entityliving);
+                            // CraftBukkit start - Added a reason for spawning this creature, moved entityliving.a(ientitylivingdata) up
                             ientitylivingdata = entityliving.onSpawnWithEgg(ientitylivingdata);
+                            p_77191_0_.addEntity(entityliving, SpawnReason.CHUNK_GEN);
+                            // CraftBukkit end
                             flag = true;
                         }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/Teleporter.java ./eclipse/cauldron/src/main/java/net/minecraft/world/Teleporter.java
index d358df5..73ae6cc 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/Teleporter.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/Teleporter.java
@@ -12,6 +12,12 @@ import net.minecraft.util.Direction;
 import net.minecraft.util.LongHashMap;
 import net.minecraft.util.MathHelper;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.event.entity.EntityPortalExitEvent;
+import org.bukkit.util.Vector;
+// CraftBukkit end
+
 public class Teleporter
 {
     private final WorldServer worldServerInstance;
@@ -20,100 +26,172 @@ public class Teleporter
     private final List destinationCoordinateKeys = new ArrayList();
     private static final String __OBFID = "CL_00000153";
 
-    public Teleporter(WorldServer p_i1963_1_)
+    public Teleporter(WorldServer par1WorldServer)
     {
-        this.worldServerInstance = p_i1963_1_;
-        this.random = new Random(p_i1963_1_.getSeed());
+        this.worldServerInstance = par1WorldServer;
+        this.random = new Random(par1WorldServer.getSeed());
     }
 
-    public void placeInPortal(Entity p_77185_1_, double p_77185_2_, double p_77185_4_, double p_77185_6_, float p_77185_8_)
+    public void placeInPortal(Entity par1Entity, double par2, double par4, double par6, float par8)
     {
         if (this.worldServerInstance.provider.dimensionId != 1)
         {
-            if (!this.placeInExistingPortal(p_77185_1_, p_77185_2_, p_77185_4_, p_77185_6_, p_77185_8_))
+            if (!this.placeInExistingPortal(par1Entity, par2, par4, par6, par8))
             {
-                this.makePortal(p_77185_1_);
-                this.placeInExistingPortal(p_77185_1_, p_77185_2_, p_77185_4_, p_77185_6_, p_77185_8_);
+                this.makePortal(par1Entity);
+                this.placeInExistingPortal(par1Entity, par2, par4, par6, par8);
             }
         }
         else
         {
-            int i = MathHelper.floor_double(p_77185_1_.posX);
-            int j = MathHelper.floor_double(p_77185_1_.posY) - 1;
-            int k = MathHelper.floor_double(p_77185_1_.posZ);
-            byte b0 = 1;
-            byte b1 = 0;
+            // CraftBukkit start - Modularize end portal creation
+            ChunkCoordinates created = this.createEndPortal(par2, par4, par6);
+            par1Entity.setLocationAndAngles((double) created.posX, (double) created.posY, (double) created.posZ, par1Entity.rotationYaw, 0.0F);
+            par1Entity.motionX = par1Entity.motionY = par1Entity.motionZ = 0.0D;
+        }
+    }
+
+    // Split out from original a(Entity, double, double, double, float) method in order to enable being called from createPortal
+    private ChunkCoordinates createEndPortal(double x, double y, double z)
+    {
+        int i = MathHelper.floor_double(x);
+        int j = MathHelper.floor_double(y) - 1;
+        int k = MathHelper.floor_double(z);
+        // CraftBukkit end
+        byte b0 = 1;
+        byte b1 = 0;
+
+        for (int l = -2; l <= 2; ++l)
+        {
+            for (int i1 = -2; i1 <= 2; ++i1)
+            {
+                for (int j1 = -1; j1 < 3; ++j1)
+                {
+                    int k1 = i + i1 * b0 + l * b1;
+                    int l1 = j + j1;
+                    int i2 = k + i1 * b1 - l * b0;
+                    boolean flag = j1 < 0;
+                    this.worldServerInstance.setBlock(k1, l1, i2, flag ? Blocks.obsidian : Blocks.air);
+                }
+            }
+        }
+
+        // CraftBukkit start
+        return new ChunkCoordinates(i, j, k);
+    }
+
+    // use logic based on creation to verify end portal
+    private ChunkCoordinates findEndPortal(ChunkCoordinates portal)
+    {
+        int i = portal.posX;
+        int j = portal.posY - 1;
+        int k = portal.posZ;
+        byte b0 = 1;
+        byte b1 = 0;
 
-            for (int l = -2; l <= 2; ++l)
+        for (int l = -2; l <= 2; ++l)
+        {
+            for (int i1 = -2; i1 <= 2; ++i1)
             {
-                for (int i1 = -2; i1 <= 2; ++i1)
+                for (int j1 = -1; j1 < 3; ++j1)
                 {
-                    for (int j1 = -1; j1 < 3; ++j1)
+                    int k1 = i + i1 * b0 + l * b1;
+                    int l1 = j + j1;
+                    int i2 = k + i1 * b1 - l * b0;
+                    boolean flag = j1 < 0;
+
+                    if (this.worldServerInstance.getBlock(k1, l1, i2) != (flag ? Blocks.obsidian : Blocks.air))
                     {
-                        int k1 = i + i1 * b0 + l * b1;
-                        int l1 = j + j1;
-                        int i2 = k + i1 * b1 - l * b0;
-                        boolean flag = j1 < 0;
-                        this.worldServerInstance.setBlock(k1, l1, i2, flag ? Blocks.obsidian : Blocks.air);
+                        return null;
                     }
                 }
             }
+        }
+
+        return new ChunkCoordinates(i, j, k);
+    }
+    // CraftBukkit end
+
+    public boolean placeInExistingPortal(Entity par1Entity, double par2, double par4, double par6, float par8)
+    {
+        // CraftBukkit start - Modularize portal search process and entity teleportation
+        ChunkCoordinates found = this.findPortal(par1Entity.posX, par1Entity.posY, par1Entity.posZ, 128);
+
+        if (found == null)
+        {
+            return false;
+        }
 
-            p_77185_1_.setLocationAndAngles((double)i, (double)j, (double)k, p_77185_1_.rotationYaw, 0.0F);
-            p_77185_1_.motionX = p_77185_1_.motionY = p_77185_1_.motionZ = 0.0D;
+        Location exit = new Location(this.worldServerInstance.getWorld(), found.posX, found.posY, found.posZ, par8, par1Entity.rotationPitch);
+        Vector velocity = par1Entity.getBukkitEntity().getVelocity();
+        this.adjustExit(par1Entity, exit, velocity);
+        par1Entity.setLocationAndAngles(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
+
+        if (par1Entity.motionX != velocity.getX() || par1Entity.motionY != velocity.getY() || par1Entity.motionZ != velocity.getZ())
+        {
+            par1Entity.getBukkitEntity().setVelocity(velocity);
         }
+
+        return true;
     }
 
-    public boolean placeInExistingPortal(Entity p_77184_1_, double p_77184_2_, double p_77184_4_, double p_77184_6_, float p_77184_8_)
+    public ChunkCoordinates findPortal(double x, double y, double z, int short1)
     {
-        short short1 = 128;
+        if (this.worldServerInstance.getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END)
+        {
+            return this.findEndPortal(this.worldServerInstance.provider.getEntrancePortalLocation());
+        }
+
+        // CraftBukkit end
         double d3 = -1.0D;
         int i = 0;
         int j = 0;
         int k = 0;
-        int l = MathHelper.floor_double(p_77184_1_.posX);
-        int i1 = MathHelper.floor_double(p_77184_1_.posZ);
+        // CraftBukkit start
+        int l = MathHelper.floor_double(x);
+        int i1 = MathHelper.floor_double(z);
+        // CraftBukkit end
         long j1 = ChunkCoordIntPair.chunkXZ2Int(l, i1);
         boolean flag = true;
-        double d7;
-        int l3;
+        double d4;
+        int k1;
 
         if (this.destinationCoordinateCache.containsItem(j1))
         {
-            Teleporter.PortalPosition portalposition = (Teleporter.PortalPosition)this.destinationCoordinateCache.getValueByKey(j1);
+            PortalPosition chunkcoordinatesportal = (PortalPosition) this.destinationCoordinateCache.getValueByKey(j1);
             d3 = 0.0D;
-            i = portalposition.posX;
-            j = portalposition.posY;
-            k = portalposition.posZ;
-            portalposition.lastUpdateTime = this.worldServerInstance.getTotalWorldTime();
+            i = chunkcoordinatesportal.posX;
+            j = chunkcoordinatesportal.posY;
+            k = chunkcoordinatesportal.posZ;
+            chunkcoordinatesportal.lastUpdateTime = this.worldServerInstance.getTotalWorldTime();
             flag = false;
         }
         else
         {
-            for (l3 = l - short1; l3 <= l + short1; ++l3)
+            for (k1 = l - short1; k1 <= l + short1; ++k1)
             {
-                double d4 = (double)l3 + 0.5D - p_77184_1_.posX;
+                double d5 = (double) k1 + 0.5D - x; // CraftBukkit
 
                 for (int l1 = i1 - short1; l1 <= i1 + short1; ++l1)
                 {
-                    double d5 = (double)l1 + 0.5D - p_77184_1_.posZ;
+                    double d6 = (double) l1 + 0.5D - z; // CraftBukkit
 
                     for (int i2 = this.worldServerInstance.getActualHeight() - 1; i2 >= 0; --i2)
                     {
-                        if (this.worldServerInstance.getBlock(l3, i2, l1) == Blocks.portal)
+                        if (this.worldServerInstance.getBlock(k1, i2, l1) == Blocks.portal)
                         {
-                            while (this.worldServerInstance.getBlock(l3, i2 - 1, l1) == Blocks.portal)
+                            while (this.worldServerInstance.getBlock(k1, i2 - 1, l1) == Blocks.portal)
                             {
                                 --i2;
                             }
 
-                            d7 = (double)i2 + 0.5D - p_77184_1_.posY;
-                            double d8 = d4 * d4 + d7 * d7 + d5 * d5;
+                            d4 = (double) i2 + 0.5D - y; // CraftBukkit
+                            double d7 = d5 * d5 + d4 * d4 + d6 * d6;
 
-                            if (d3 < 0.0D || d8 < d3)
+                            if (d3 < 0.0D || d7 < d3)
                             {
-                                d3 = d8;
-                                i = l3;
+                                d3 = d7;
+                                i = k1;
                                 j = i2;
                                 k = l1;
                             }
@@ -127,61 +205,93 @@ public class Teleporter
         {
             if (flag)
             {
-                this.destinationCoordinateCache.add(j1, new Teleporter.PortalPosition(i, j, k, this.worldServerInstance.getTotalWorldTime()));
+                this.destinationCoordinateCache.add(j1, new PortalPosition(i, j, k, this.worldServerInstance.getTotalWorldTime()));
                 this.destinationCoordinateKeys.add(Long.valueOf(j1));
             }
 
-            double d11 = (double)i + 0.5D;
-            double d6 = (double)j + 0.5D;
-            d7 = (double)k + 0.5D;
-            int i4 = -1;
+            // CraftBukkit start - Moved entity teleportation logic into exit
+            return new ChunkCoordinates(i, j, k);
+        }
+        else
+        {
+            return null;
+        }
+    }
+    // Entity repositioning logic split out from original b method and combined with repositioning logic for The End from original a method
+    public void adjustExit(Entity entity, Location position, Vector velocity)
+    {
+        Location from = position.clone();
+        Vector before = velocity.clone();
+        int i = position.getBlockX();
+        int j = position.getBlockY();
+        int k = position.getBlockZ();
+        float f = position.getYaw();
+
+        if (this.worldServerInstance.getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END)
+        {
+            // entity.setPositionRotation((double) i, (double) j, (double) k, entity.yaw, 0.0F);
+            // entity.motX = entity.motY = entity.motZ = 0.0D;
+            position.setPitch(0.0F);
+            velocity.setX(0);
+            velocity.setY(0);
+            velocity.setZ(0);
+        }
+        else
+        {
+            double d4;
+            int k1;
+            // CraftBukkit end
+            double d8 = (double) i + 0.5D;
+            double d9 = (double) j + 0.5D;
+            d4 = (double) k + 0.5D;
+            int j2 = -1;
 
             if (this.worldServerInstance.getBlock(i - 1, j, k) == Blocks.portal)
             {
-                i4 = 2;
+                j2 = 2;
             }
 
             if (this.worldServerInstance.getBlock(i + 1, j, k) == Blocks.portal)
             {
-                i4 = 0;
+                j2 = 0;
             }
 
             if (this.worldServerInstance.getBlock(i, j, k - 1) == Blocks.portal)
             {
-                i4 = 3;
+                j2 = 3;
             }
 
             if (this.worldServerInstance.getBlock(i, j, k + 1) == Blocks.portal)
             {
-                i4 = 1;
+                j2 = 1;
             }
 
-            int j2 = p_77184_1_.getTeleportDirection();
+            int k2 = entity.getTeleportDirection();
 
-            if (i4 > -1)
+            if (j2 > -1)
             {
-                int k2 = Direction.rotateLeft[i4];
-                int l2 = Direction.offsetX[i4];
-                int i3 = Direction.offsetZ[i4];
-                int j3 = Direction.offsetX[k2];
-                int k3 = Direction.offsetZ[k2];
-                boolean flag1 = !this.worldServerInstance.isAirBlock(i + l2 + j3, j, k + i3 + k3) || !this.worldServerInstance.isAirBlock(i + l2 + j3, j + 1, k + i3 + k3);
-                boolean flag2 = !this.worldServerInstance.isAirBlock(i + l2, j, k + i3) || !this.worldServerInstance.isAirBlock(i + l2, j + 1, k + i3);
+                int l2 = Direction.rotateLeft[j2];
+                int i3 = Direction.offsetX[j2];
+                int j3 = Direction.offsetZ[j2];
+                int k3 = Direction.offsetX[l2];
+                int l3 = Direction.offsetZ[l2];
+                boolean flag1 = !this.worldServerInstance.isAirBlock(i + i3 + k3, j, k + j3 + l3) || !this.worldServerInstance.isAirBlock(i + i3 + k3, j + 1, k + j3 + l3);
+                boolean flag2 = !this.worldServerInstance.isAirBlock(i + i3, j, k + j3) || !this.worldServerInstance.isAirBlock(i + i3, j + 1, k + j3);
 
                 if (flag1 && flag2)
                 {
-                    i4 = Direction.rotateOpposite[i4];
-                    k2 = Direction.rotateOpposite[k2];
-                    l2 = Direction.offsetX[i4];
-                    i3 = Direction.offsetZ[i4];
-                    j3 = Direction.offsetX[k2];
-                    k3 = Direction.offsetZ[k2];
-                    l3 = i - j3;
-                    d11 -= (double)j3;
-                    int k1 = k - k3;
-                    d7 -= (double)k3;
-                    flag1 = !this.worldServerInstance.isAirBlock(l3 + l2 + j3, j, k1 + i3 + k3) || !this.worldServerInstance.isAirBlock(l3 + l2 + j3, j + 1, k1 + i3 + k3);
-                    flag2 = !this.worldServerInstance.isAirBlock(l3 + l2, j, k1 + i3) || !this.worldServerInstance.isAirBlock(l3 + l2, j + 1, k1 + i3);
+                    j2 = Direction.rotateOpposite[j2];
+                    l2 = Direction.rotateOpposite[l2];
+                    i3 = Direction.offsetX[j2];
+                    j3 = Direction.offsetZ[j2];
+                    k3 = Direction.offsetX[l2];
+                    l3 = Direction.offsetZ[l2];
+                    k1 = i - k3;
+                    d8 -= (double) k3;
+                    int i4 = k - l3;
+                    d4 -= (double) l3;
+                    flag1 = !this.worldServerInstance.isAirBlock(k1 + i3 + k3, j, i4 + j3 + l3) || !this.worldServerInstance.isAirBlock(k1 + i3 + k3, j + 1, i4 + j3 + l3);
+                    flag2 = !this.worldServerInstance.isAirBlock(k1 + i3, j, i4 + j3) || !this.worldServerInstance.isAirBlock(k1 + i3, j + 1, i4 + j3);
                 }
 
                 float f1 = 0.5F;
@@ -200,24 +310,24 @@ public class Teleporter
                     f2 = 0.0F;
                 }
 
-                d11 += (double)((float)j3 * f1 + f2 * (float)l2);
-                d7 += (double)((float)k3 * f1 + f2 * (float)i3);
+                d8 += (double)((float) k3 * f1 + f2 * (float) i3);
+                d4 += (double)((float) l3 * f1 + f2 * (float) j3);
                 float f3 = 0.0F;
                 float f4 = 0.0F;
                 float f5 = 0.0F;
                 float f6 = 0.0F;
 
-                if (i4 == j2)
+                if (j2 == k2)
                 {
                     f3 = 1.0F;
                     f4 = 1.0F;
                 }
-                else if (i4 == Direction.rotateOpposite[j2])
+                else if (j2 == Direction.rotateOpposite[k2])
                 {
                     f3 = -1.0F;
                     f4 = -1.0F;
                 }
-                else if (i4 == Direction.rotateRight[j2])
+                else if (j2 == Direction.rotateRight[k2])
                 {
                     f5 = 1.0F;
                     f6 = -1.0F;
@@ -228,33 +338,77 @@ public class Teleporter
                     f6 = 1.0F;
                 }
 
-                double d9 = p_77184_1_.motionX;
-                double d10 = p_77184_1_.motionZ;
-                p_77184_1_.motionX = d9 * (double)f3 + d10 * (double)f6;
-                p_77184_1_.motionZ = d9 * (double)f5 + d10 * (double)f4;
-                p_77184_1_.rotationYaw = p_77184_8_ - (float)(j2 * 90) + (float)(i4 * 90);
+                // CraftBukkit start
+                double d10 = velocity.getX();
+                double d11 = velocity.getZ();
+                // CraftBukkit end
+                // CraftBukkit start - Adjust position and velocity instances instead of entity
+                velocity.setX(d10 * (double) f3 + d11 * (double) f6);
+                velocity.setZ(d10 * (double) f5 + d11 * (double) f4);
+                f = f - (float)(k2 * 90) + (float)(j2 * 90);
             }
             else
             {
-                p_77184_1_.motionX = p_77184_1_.motionY = p_77184_1_.motionZ = 0.0D;
+                // entity.motX = entity.motY = entity.motZ = 0.0D;
+                velocity.setX(0);
+                velocity.setY(0);
+                velocity.setZ(0);
             }
 
-            p_77184_1_.setLocationAndAngles(d11, d6, d7, p_77184_1_.rotationYaw, p_77184_1_.rotationPitch);
-            return true;
+            // entity.setPositionRotation(d8, d9, d4, entity.yaw, entity.pitch);
+            position.setX(d8);
+            position.setY(d9);
+            position.setZ(d4);
+            position.setYaw(f);
+        }
+
+        EntityPortalExitEvent event = new EntityPortalExitEvent(entity.getBukkitEntity(), from, position, before, velocity);
+        this.worldServerInstance.getServer().getPluginManager().callEvent(event);
+        Location to = event.getTo();
+
+        if (event.isCancelled() || to == null || !entity.isEntityAlive())
+        {
+            position.setX(from.getX());
+            position.setY(from.getY());
+            position.setZ(from.getZ());
+            position.setYaw(from.getYaw());
+            position.setPitch(from.getPitch());
+            velocity.copy(before);
         }
         else
         {
-            return false;
+            position.setX(to.getX());
+            position.setY(to.getY());
+            position.setZ(to.getZ());
+            position.setYaw(to.getYaw());
+            position.setPitch(to.getPitch());
+            velocity.copy(event.getAfter()); // event.getAfter() will never be null, as setAfter() will cause an NPE if null is passed in
         }
+
+        // CraftBukkit end
     }
 
-    public boolean makePortal(Entity p_85188_1_)
+    public boolean makePortal(Entity par1Entity)
     {
-        byte b0 = 16;
+        // CraftBukkit start - Allow for portal creation to be based on coordinates instead of entity
+        return this.createPortal(par1Entity.posX, par1Entity.posY, par1Entity.posZ, 16);
+    }
+
+    public boolean createPortal(double x, double y, double z, int b0)
+    {
+        if (this.worldServerInstance.getWorld().getEnvironment() == org.bukkit.World.Environment.THE_END)
+        {
+            this.createEndPortal(x, y, z);
+            return true;
+        }
+ 
+        // CraftBukkit end
         double d0 = -1.0D;
-        int i = MathHelper.floor_double(p_85188_1_.posX);
-        int j = MathHelper.floor_double(p_85188_1_.posY);
-        int k = MathHelper.floor_double(p_85188_1_.posZ);
+        // CraftBukkit start
+        int i = MathHelper.floor_double(x);
+        int j = MathHelper.floor_double(y);
+        int k = MathHelper.floor_double(z);
+        // CraftBukkit end
         int l = i;
         int i1 = j;
         int j1 = k;
@@ -262,8 +416,10 @@ public class Teleporter
         int l1 = this.random.nextInt(4);
         int i2;
         double d1;
-        int k2;
         double d2;
+        int j2;
+        int k2;
+        int l2;
         int i3;
         int j3;
         int k3;
@@ -271,51 +427,49 @@ public class Teleporter
         int i4;
         int j4;
         int k4;
-        int l4;
-        int i5;
         double d3;
         double d4;
  
         for (i2 = i - b0; i2 <= i + b0; ++i2)
         {
-            d1 = (double)i2 + 0.5D - p_85188_1_.posX;
+            d1 = (double) i2 + 0.5D - x; // CraftBukkit
  
-            for (k2 = k - b0; k2 <= k + b0; ++k2)
+            for (j2 = k - b0; j2 <= k + b0; ++j2)
             {
-                d2 = (double)k2 + 0.5D - p_85188_1_.posZ;
+                d2 = (double) j2 + 0.5D - z; // CraftBukkit
                 label274:
  
-                for (i3 = this.worldServerInstance.getActualHeight() - 1; i3 >= 0; --i3)
+                for (k2 = this.worldServerInstance.getActualHeight() - 1; k2 >= 0; --k2)
                 {
-                    if (this.worldServerInstance.isAirBlock(i2, i3, k2))
+                    if (this.worldServerInstance.isAirBlock(i2, k2, j2))
                     {
-                        while (i3 > 0 && this.worldServerInstance.isAirBlock(i2, i3 - 1, k2))
+                        while (k2 > 0 && this.worldServerInstance.isAirBlock(i2, k2 - 1, j2))
                         {
-                            --i3;
+                            --k2;
                         }
  
-                        for (j3 = l1; j3 < l1 + 4; ++j3)
+                        for (i3 = l1; i3 < l1 + 4; ++i3)
                         {
-                            k3 = j3 % 2;
-                            l3 = 1 - k3;
+                            l2 = i3 % 2;
+                            k3 = 1 - l2;
  
-                            if (j3 % 4 >= 2)
+                            if (i3 % 4 >= 2)
                             {
+                                l2 = -l2;
                                 k3 = -k3;
-                                l3 = -l3;
                             }
  
-                            for (i4 = 0; i4 < 3; ++i4)
+                            for (j3 = 0; j3 < 3; ++j3)
                             {
-                                for (j4 = 0; j4 < 4; ++j4)
+                                for (i4 = 0; i4 < 4; ++i4)
                                 {
-                                    for (k4 = -1; k4 < 4; ++k4)
+                                    for (l3 = -1; l3 < 4; ++l3)
                                     {
-                                        l4 = i2 + (j4 - 1) * k3 + i4 * l3;
-                                        i5 = i3 + k4;
-                                        int j5 = k2 + (j4 - 1) * l3 - i4 * k3;
+                                        k4 = i2 + (i4 - 1) * l2 + j3 * k3;
+                                        j4 = k2 + l3;
+                                        int l4 = j2 + (i4 - 1) * k3 - j3 * l2;
  
-                                        if (k4 < 0 && !this.worldServerInstance.getBlock(l4, i5, j5).getMaterial().isSolid() || k4 >= 0 && !this.worldServerInstance.isAirBlock(l4, i5, j5))
+                                        if (l3 < 0 && !this.worldServerInstance.getBlock(k4, j4, l4).getMaterial().isSolid() || l3 >= 0 && !this.worldServerInstance.isAirBlock(k4, j4, l4))
                                         {
                                             continue label274;
                                         }
@@ -323,16 +477,16 @@ public class Teleporter
                                 }
                             }
  
-                            d3 = (double)i3 + 0.5D - p_85188_1_.posY;
+                            d3 = (double) k2 + 0.5D - y; // CraftBukkit
                             d4 = d1 * d1 + d3 * d3 + d2 * d2;
  
                             if (d0 < 0.0D || d4 < d0)
                             {
                                 d0 = d4;
                                 l = i2;
-                                i1 = i3;
-                                j1 = k2;
-                                k1 = j3 % 4;
+                                i1 = k2;
+                                j1 = j2;
+                                k1 = i3 % 4;
                             }
                         }
                     }
@@ -344,52 +498,52 @@ public class Teleporter
         {
             for (i2 = i - b0; i2 <= i + b0; ++i2)
             {
-                d1 = (double)i2 + 0.5D - p_85188_1_.posX;
+                d1 = (double) i2 + 0.5D - x; // CraftBukkit
  
-                for (k2 = k - b0; k2 <= k + b0; ++k2)
+                for (j2 = k - b0; j2 <= k + b0; ++j2)
                 {
-                    d2 = (double)k2 + 0.5D - p_85188_1_.posZ;
+                    d2 = (double) j2 + 0.5D - z; // CraftBukkit
                     label222:
  
-                    for (i3 = this.worldServerInstance.getActualHeight() - 1; i3 >= 0; --i3)
+                    for (k2 = this.worldServerInstance.getActualHeight() - 1; k2 >= 0; --k2)
                     {
-                        if (this.worldServerInstance.isAirBlock(i2, i3, k2))
+                        if (this.worldServerInstance.isAirBlock(i2, k2, j2))
                         {
-                            while (i3 > 0 && this.worldServerInstance.isAirBlock(i2, i3 - 1, k2))
+                            while (k2 > 0 && this.worldServerInstance.isAirBlock(i2, k2 - 1, j2))
                             {
-                                --i3;
+                                --k2;
                             }
  
-                            for (j3 = l1; j3 < l1 + 2; ++j3)
+                            for (i3 = l1; i3 < l1 + 2; ++i3)
                             {
-                                k3 = j3 % 2;
-                                l3 = 1 - k3;
+                                l2 = i3 % 2;
+                                k3 = 1 - l2;
  
-                                for (i4 = 0; i4 < 4; ++i4)
+                                for (j3 = 0; j3 < 4; ++j3)
                                 {
-                                    for (j4 = -1; j4 < 4; ++j4)
+                                    for (i4 = -1; i4 < 4; ++i4)
                                     {
-                                        k4 = i2 + (i4 - 1) * k3;
-                                        l4 = i3 + j4;
-                                        i5 = k2 + (i4 - 1) * l3;
+                                        l3 = i2 + (j3 - 1) * l2;
+                                        k4 = k2 + i4;
+                                        j4 = j2 + (j3 - 1) * k3;
  
-                                        if (j4 < 0 && !this.worldServerInstance.getBlock(k4, l4, i5).getMaterial().isSolid() || j4 >= 0 && !this.worldServerInstance.isAirBlock(k4, l4, i5))
+                                        if (i4 < 0 && !this.worldServerInstance.getBlock(l3, k4, j4).getMaterial().isSolid() || i4 >= 0 && !this.worldServerInstance.isAirBlock(l3, k4, j4))
                                         {
                                             continue label222;
                                         }
                                     }
                                 }
  
-                                d3 = (double)i3 + 0.5D - p_85188_1_.posY;
+                                d3 = (double) k2 + 0.5D - y; // CraftBukkit
                                 d4 = d1 * d1 + d3 * d3 + d2 * d2;
  
                                 if (d0 < 0.0D || d4 < d0)
                                 {
                                     d0 = d4;
                                     l = i2;
-                                    i1 = i3;
-                                    j1 = k2;
-                                    k1 = j3 % 2;
+                                    i1 = k2;
+                                    j1 = j2;
+                                    k1 = i3 % 2;
                                 }
                             }
                         }
@@ -398,16 +552,16 @@ public class Teleporter
             }
         }
  
-        int k5 = l;
-        int j2 = i1;
-        k2 = j1;
-        int l5 = k1 % 2;
-        int l2 = 1 - l5;
+        int i5 = l;
+        int j5 = i1;
+        j2 = j1;
+        int k5 = k1 % 2;
+        int l5 = 1 - k5;
  
         if (k1 % 4 >= 2)
         {
+            k5 = -k5;
             l5 = -l5;
-            l2 = -l2;
         }
  
         boolean flag;
@@ -424,46 +578,46 @@ public class Teleporter
                 i1 = this.worldServerInstance.getActualHeight() - 10;
             }
  
-            j2 = i1;
+            j5 = i1;
  
-            for (i3 = -1; i3 <= 1; ++i3)
+            for (k2 = -1; k2 <= 1; ++k2)
             {
-                for (j3 = 1; j3 < 3; ++j3)
+                for (i3 = 1; i3 < 3; ++i3)
                 {
-                    for (k3 = -1; k3 < 3; ++k3)
+                    for (l2 = -1; l2 < 3; ++l2)
                     {
-                        l3 = k5 + (j3 - 1) * l5 + i3 * l2;
-                        i4 = j2 + k3;
-                        j4 = k2 + (j3 - 1) * l2 - i3 * l5;
-                        flag = k3 < 0;
-                        this.worldServerInstance.setBlock(l3, i4, j4, flag ? Blocks.obsidian : Blocks.air);
+                        k3 = i5 + (i3 - 1) * k5 + k2 * l5;
+                        j3 = j5 + l2;
+                        i4 = j2 + (i3 - 1) * l5 - k2 * k5;
+                        flag = l2 < 0;
+                        this.worldServerInstance.setBlock(k3, j3, i4, flag ? Blocks.obsidian : Blocks.air);
                     }
                 }
             }
         }
  
-        for (i3 = 0; i3 < 4; ++i3)
+        for (k2 = 0; k2 < 4; ++k2)
         {
-            for (j3 = 0; j3 < 4; ++j3)
+            for (i3 = 0; i3 < 4; ++i3)
             {
-                for (k3 = -1; k3 < 4; ++k3)
+                for (l2 = -1; l2 < 4; ++l2)
                 {
-                    l3 = k5 + (j3 - 1) * l5;
-                    i4 = j2 + k3;
-                    j4 = k2 + (j3 - 1) * l2;
-                    flag = j3 == 0 || j3 == 3 || k3 == -1 || k3 == 3;
-                    this.worldServerInstance.setBlock(l3, i4, j4, (Block)(flag ? Blocks.obsidian : Blocks.portal), 0, 2);
+                    k3 = i5 + (i3 - 1) * k5;
+                    j3 = j5 + l2;
+                    i4 = j2 + (i3 - 1) * l5;
+                    flag = i3 == 0 || i3 == 3 || l2 == -1 || l2 == 3;
+                    this.worldServerInstance.setBlock(k3, j3, i4, flag ? Blocks.obsidian : Blocks.portal, 0, 2);
                 }
             }
  
-            for (j3 = 0; j3 < 4; ++j3)
+            for (i3 = 0; i3 < 4; ++i3)
             {
-                for (k3 = -1; k3 < 4; ++k3)
+                for (l2 = -1; l2 < 4; ++l2)
                 {
-                    l3 = k5 + (j3 - 1) * l5;
-                    i4 = j2 + k3;
-                    j4 = k2 + (j3 - 1) * l2;
-                    this.worldServerInstance.notifyBlocksOfNeighborChange(l3, i4, j4, this.worldServerInstance.getBlock(l3, i4, j4));
+                    k3 = i5 + (i3 - 1) * k5;
+                    j3 = j5 + l2;
+                    i4 = j2 + (i3 - 1) * l5;
+                    this.worldServerInstance.notifyBlocksOfNeighborChange(k3, j3, i4, this.worldServerInstance.getBlock(k3, j3, i4));
                 }
             }
         }
@@ -471,19 +625,19 @@ public class Teleporter
         return true;
     }
 
-    public void removeStalePortalLocations(long p_85189_1_)
+    public void removeStalePortalLocations(long par1)
     {
-        if (p_85189_1_ % 100L == 0L)
+        if (par1 % 100L == 0L)
         {
             Iterator iterator = this.destinationCoordinateKeys.iterator();
-            long j = p_85189_1_ - 600L;
+            long j = par1 - 600L;
  
             while (iterator.hasNext())
             {
-                Long olong = (Long)iterator.next();
-                Teleporter.PortalPosition portalposition = (Teleporter.PortalPosition)this.destinationCoordinateCache.getValueByKey(olong.longValue());
+                Long olong = (Long) iterator.next();
+                PortalPosition chunkcoordinatesportal = (PortalPosition) this.destinationCoordinateCache.getValueByKey(olong.longValue());
  
-                if (portalposition == null || portalposition.lastUpdateTime < j)
+                if (chunkcoordinatesportal == null || chunkcoordinatesportal.lastUpdateTime < j)
                 {
                     iterator.remove();
                     this.destinationCoordinateCache.remove(olong.longValue());
@@ -497,10 +651,10 @@ public class Teleporter
         public long lastUpdateTime;
         private static final String __OBFID = "CL_00000154";
  
-        public PortalPosition(int p_i1962_2_, int p_i1962_3_, int p_i1962_4_, long p_i1962_5_)
+        public PortalPosition(int par2, int par3, int par4, long par5)
         {
-            super(p_i1962_2_, p_i1962_3_, p_i1962_4_);
-            this.lastUpdateTime = p_i1962_5_;
+            super(par2, par3, par4);
+            this.lastUpdateTime = par5;
         }
     }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/World.java ./eclipse/cauldron/src/main/java/net/minecraft/world/World.java
index c365f90..7f50419 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/World.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/World.java
@@ -23,9 +25,11 @@ import net.minecraft.command.IEntitySelector;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
+import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.pathfinding.PathEntity;
@@ -70,6 +73,55 @@ import net.minecraftforge.event.world.WorldEvent;
 import net.minecraftforge.event.entity.PlaySoundAtEntityEvent;
 import net.minecraft.entity.EnumCreatureType;
 
+// CraftBukkit start
+import net.minecraft.entity.EntityLivingBase;
+import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.monster.EntityGhast;
+import net.minecraft.entity.monster.EntityGolem;
+import net.minecraft.entity.monster.EntityMob;
+import net.minecraft.entity.monster.EntitySlime;
+import net.minecraft.entity.passive.EntityAnimal;
+import net.minecraft.entity.passive.EntityWaterMob;
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.world.gen.ChunkProviderServer;
+
+import org.bukkit.Bukkit;
+import org.bukkit.World.Environment;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.craftbukkit.util.UnsafeList;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockCanBuildEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.weather.WeatherChangeEvent;
+import org.bukkit.event.weather.ThunderChangeEvent;
+
+// CraftBukkit end
+// Spigot Start
+import net.minecraft.entity.item.EntityXPOrb;
+
+import org.bukkit.craftbukkit.SpigotTimings;
+
+// Spigot end
+// Cauldron start
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraftforge.cauldron.CauldronHooks;
+import net.minecraftforge.cauldron.configuration.CauldronConfig;
+import net.minecraftforge.cauldron.configuration.CauldronWorldConfig;
+import net.minecraftforge.cauldron.configuration.TileEntityConfig;
+import net.minecraftforge.cauldron.configuration.TileEntityWorldConfig;
+import net.minecraftforge.common.DimensionManager;
+
+import org.bukkit.block.BlockState;
+// Cauldron end
+import org.spigotmc.TickLimiter;
+
 public abstract class World implements IBlockAccess
 {
    /**
@@ -83,15 +135,14 @@ public abstract class World implements IBlockAccess
 
     public boolean scheduledUpdatesAreImmediate;
     public List loadedEntityList = new ArrayList();
-    protected List unloadedEntityList = new ArrayList();
+    public List unloadedEntityList = new ArrayList(); // Cauldron
     public List loadedTileEntityList = new ArrayList();
     private List addedTileEntityList = new ArrayList();
-    private List field_147483_b = new ArrayList();
+    public List field_147483_b = new ArrayList(); // Cauldron
     public List playerEntities = new ArrayList();
     public List weatherEffects = new ArrayList();
     private long cloudColour = 16777215L;
     public int skylightSubtracted;
-    protected int updateLCG = (new Random()).nextInt();
     protected final int DIST_HASH_MAGIC = 1013904223;
     public float prevRainingStrength;
     public float rainingStrength;
@@ -100,26 +151,88 @@ public abstract class World implements IBlockAccess
     public int lastLightningBolt;
     public EnumDifficulty difficultySetting;
     public Random rand = new Random();
-    public final WorldProvider provider;
+    protected int updateLCG = this.rand.nextInt();
+    public WorldProvider provider; // CraftBukkit - remove final
     protected List worldAccesses = new ArrayList();
-    protected IChunkProvider chunkProvider;
+    public IChunkProvider chunkProvider; // CraftBukkit - public
     protected final ISaveHandler saveHandler;
-    protected WorldInfo worldInfo;
+    public WorldInfo worldInfo; // CraftBukkit - public
     public boolean findingSpawnPoint;
     public MapStorage mapStorage;
     public VillageCollection villageCollectionObj;
     protected final VillageSiege villageSiegeObj = new VillageSiege(this);
     public final Profiler theProfiler;
     private final Calendar theCalendar = Calendar.getInstance();
-    protected Scoreboard worldScoreboard = new Scoreboard();
+    public Scoreboard worldScoreboard = new Scoreboard(); // CraftBukkit - protected -> public
     public boolean isRemote;
-    protected Set activeChunkSet = new HashSet();
+    // CraftBukkit start - public, longhashset
+    public boolean spawnHostileMobs;
+    public boolean spawnPeacefulMobs;
+    // Added the following
+    public long ticksPerAnimalSpawns;
+    public long ticksPerMonsterSpawns;
+    public boolean populating;
+    private int tickPosition;
+    // CraftBukkit end
+    public Set activeChunkSet = new HashSet(); // Cauldron - protected -> public
     private int ambientTickCountdown;
-    protected boolean spawnHostileMobs;
-    protected boolean spawnPeacefulMobs;
     private ArrayList collidingBoundingBoxes;
     private boolean field_147481_N;
     int[] lightUpdateBlockList;
+    // Cauldron start
+    public boolean captureTreeGeneration = false;
+    public ArrayList<EntityItem> capturedItems = new ArrayList<EntityItem>();
+    public int entitiesTicked;
+    public int tilesTicked;
+    public CauldronWorldConfig cauldronConfig;
+    public TileEntityWorldConfig tileentityConfig;
+    // preload world crash report classes to fix NCDFE masking StackOverflow/memory error, see #721
+    private static boolean preloadedCrashClasses = false;
+    {
+        if (!preloadedCrashClasses)
+        {
+            // generate a temporary crash report
+            Throwable throwable = new Throwable();
+            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while updating neighbours");
+            CrashReportCategory crashreportcategory = crashreport.makeCategory("Block being updated");
+
+            // loads all the required classes - including net.minecraft.crash.CallableBlockType (package private)
+            crashreportcategory.addCrashSectionCallable("Source block type", new Callable() {
+                public String call()
+                {
+                    return "";
+                }
+            });
+            CrashReportCategory.func_147153_a(crashreportcategory, 0, 0, 0, Blocks.air, -1);
+
+            preloadedCrashClasses = true;
+        }
+    }
+    // Cauldron end
+    // Spigot start
+
+    /** Positions to update */
+    protected final gnu.trove.map.hash.TLongShortHashMap activeChunkSet_CB;
+    public float growthOdds = 100;
+    protected float modifiedOdds = 100;
+
+    public static long chunkToKey(int x, int z)
+    {
+        long k = ((((long) x) & 0xFFFF0000L) << 16) | ((((long) x) & 0x0000FFFFL) << 0);
+        k |= ((((long) z) & 0xFFFF0000L) << 32) | ((((long) z) & 0x0000FFFFL) << 16);
+        return k;
+    }
+
+    public static int keyToX(long k)
+    {
+        return (int) (((k >> 16) & 0xFFFF0000) | (k & 0x0000FFFF));
+    }
+
+    public static int keyToZ(long k)
+    {
+        return (int) (((k >> 32) & 0xFFFF0000L) | ((k >> 16) & 0x0000FFFF));
+    }
+    // Spigot end
     private static final String __OBFID = "CL_00000140";
     public boolean restoringBlockSnapshots = false;
     public boolean captureBlockSnapshots = false;
@@ -166,6 +279,27 @@ public abstract class World implements IBlockAccess
         return this.provider.worldChunkMgr;
     }
 
+    // CraftBukkit start
+    private final CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = false; // Cauldron - default to false to give forge's keepLoaded higher priority
+    public ChunkGenerator generator;
+    public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+    public final SpigotTimings.WorldTimingsHandler timings; // Spigot
+    private org.spigotmc.TickLimiter entityLimiter; // Spigot
+    private org.spigotmc.TickLimiter tileLimiter; // Spigot
+    private int tileTickPosition; // Spigot
+
+    public CraftWorld getWorld()
+    {
+        return this.world;
+    }
+
+    public CraftServer getServer()
+    {
+        return (CraftServer) Bukkit.getServer();
+    }
+
     @SideOnly(Side.CLIENT)
     public World(ISaveHandler p_i45368_1_, String p_i45368_2_, WorldProvider p_i45368_3_, WorldSettings p_i45368_4_, Profiler p_i45368_5_)
     {
@@ -179,6 +313,12 @@ public abstract class World implements IBlockAccess
         this.worldInfo = new WorldInfo(p_i45368_4_, p_i45368_2_);
         this.provider = p_i45368_3_;
         perWorldStorage = new MapStorage((ISaveHandler)null);
+        // Cauldron start
+        this.world = null;
+        this.timings = null;
+        this.spigotConfig = null;
+        this.activeChunkSet_CB = null;
+        // Cauldron end
     }
 
     // Broken up so that the WorldClient gets the chance to set the mapstorage object before the dimension initializes
@@ -207,8 +347,175 @@ public abstract class World implements IBlockAccess
         this.calculateInitialWeather();
     }
 
+    // Changed signature - added gen and env
+    public World(ISaveHandler p_i45369_1_, String p_i45369_2_, WorldSettings p_i45369_3_, WorldProvider p_i45369_4_, Profiler p_i45369_5_, ChunkGenerator gen,
+            org.bukkit.World.Environment env)
+    {
+        this.spigotConfig = new org.spigotmc.SpigotWorldConfig(p_i45369_2_); // Spigot
+        initLimiter(); // Spigot
+        // Cauldron start
+        this.cauldronConfig = new CauldronWorldConfig(p_i45369_2_, MinecraftServer.getServer().cauldronConfig);
+        this.tileentityConfig = new TileEntityWorldConfig(p_i45369_2_, MinecraftServer.getServer().tileEntityConfig);
+        // Cauldron end
+        this.worldInfo = p_i45369_1_.loadWorldInfo(); // Spigot
+        this.generator = gen;
+        this.world = new CraftWorld((WorldServer) this, gen, env);
+        this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
+        this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
+        // CraftBukkit end
+        // Spigot start
+        this.activeChunkSet_CB = new gnu.trove.map.hash.TLongShortHashMap(spigotConfig.chunksPerTick * 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE);
+        this.activeChunkSet_CB.setAutoCompactionFactor(0);
+        // Spigot end
+        this.ambientTickCountdown = this.rand.nextInt(12000);
+        this.spawnHostileMobs = true;
+        this.spawnPeacefulMobs = true;
+        this.collidingBoundingBoxes = new ArrayList();
+        this.lightUpdateBlockList = new int[32768];
+        this.saveHandler = p_i45369_1_;
+        this.theProfiler = p_i45369_5_;
+        // Cauldron start
+        // Provides a solution for different worlds getting different copies of the same data, potentially rewriting the data or causing race conditions/stale data
+        // Buildcraft has suffered from the issue this fixes.  If you load the same data from two different worlds they can get two different copies of the same object, thus the last saved gets final say.
+        if (DimensionManager.getWorld(0) != null) // if overworld has loaded, use its mapstorage
+        {
+            this.mapStorage = DimensionManager.getWorld(0).mapStorage;
+        }
+        else
+        // if we are loading overworld, create a new mapstorage
+        {
+            this.mapStorage = new MapStorage(p_i45369_1_);
+        }
+        // Cauldron end
+        // this.worldInfo = p_i45369_1_.loadWorldInfo(); // Spigot - Moved up
+
+        if (p_i45369_4_ != null)
+        {
+            this.provider = p_i45369_4_;
+        }
+        else if (this.worldInfo != null && this.worldInfo.getDimension() != 0) // Cauldron
+        {
+            this.provider = WorldProvider.getProviderForDimension(this.worldInfo.getDimension()); // Cauldron
+        }
+        else
+        {
+            this.provider = WorldProvider.getProviderForDimension(0);
+        }
+
+        if (this.worldInfo == null)
+        {
+            this.worldInfo = new WorldInfo(p_i45369_3_, p_i45369_2_);
+            this.worldInfo.setDimension(this.provider.dimensionId); // Cauldron - Save dimension to level.dat
+        }
+        else
+        {
+            this.worldInfo.setWorldName(p_i45369_2_);
+            // Cauldron start - Use saved dimension from level.dat. Fixes issues with MultiVerse
+            if (this.worldInfo.getDimension() != 0)
+                this.provider.dimensionId = this.worldInfo.getDimension();
+            else
+            {
+                this.worldInfo.setDimension(this.provider.dimensionId);
+            }
+            // Cauldron end
+        }
+
+        // Cauldron start - Guarantee provider dimension is not reset. This is required for mods that rely on the provider ID to match the client dimension. Without this, IC2 will send the wrong ID to clients.
+        int providerId = this.provider.dimensionId;
+        this.provider.registerWorld(this);
+        this.provider.dimensionId = providerId;
+        // Cauldron end
+        // Cauldron start - workaround to fix TC with overworld
+        if (this.worldInfo.getDimension() == 0)
+        {
+            generator = this.getServer().getGenerator(p_i45369_2_);
+            if (generator != null)
+            {
+                getWorld().setGenerator(generator);
+                getWorld().getPopulators().addAll(generator.getDefaultPopulators(getWorld()));
+            }
+        }
+        // Cauldron end
+        this.chunkProvider = this.createChunkProvider();
+
+        if (this instanceof WorldServer)
+        {
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler((WorldServer) this, p_i45369_1_));
+        }
+        else
+        {
+            this.perWorldStorage = new MapStorage((ISaveHandler) null);
+        }
+
+        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+        if (!this.worldInfo.isInitialized())
+        {
+            try
+            {
+                this.initialize(p_i45369_3_);
+            }
+            catch (Throwable throwable1)
+            {
+                CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Exception initializing level");
+
+                try
+                {
+                    this.addWorldInfoToCrashReport(crashreport);
+                }
+                catch (Throwable throwable)
+                {
+                    ;
+                }
+
+                throw new ReportedException(crashreport);
+            }
+
+            this.worldInfo.setServerInitialized(true);
+        }
+
+        VillageCollection villagecollection = (VillageCollection) this.perWorldStorage.loadData(VillageCollection.class, "villages");
+
+        if (villagecollection == null)
+        {
+            this.villageCollectionObj = new VillageCollection(this);
+            this.perWorldStorage.setData("villages", this.villageCollectionObj);
+        }
+        else
+        {
+            this.villageCollectionObj = villagecollection;
+            this.villageCollectionObj.func_82566_a(this);
+        }
+
+        this.calculateInitialSkylight();
+        this.calculateInitialWeather();
+        this.getServer().addWorld(this.world); // CraftBukkit
+    }
+
     public World(ISaveHandler p_i45369_1_, String p_i45369_2_, WorldSettings p_i45369_3_, WorldProvider p_i45369_4_, Profiler p_i45369_5_)
     {
+        // Cauldron start - handle dummy worlds
+        if (DimensionManager.getWorld(0) != null)
+        {
+            this.spigotConfig = new org.spigotmc.SpigotWorldConfig(p_i45369_2_); // Spigot
+            initLimiter(); // Spigot
+            this.cauldronConfig = new CauldronWorldConfig(p_i45369_2_, MinecraftServer.getServer().cauldronConfig);
+            this.tileentityConfig = new TileEntityWorldConfig(p_i45369_2_, MinecraftServer.getServer().tileEntityConfig);
+            this.world = DimensionManager.getWorld(0).getWorld();
+            this.timings = DimensionManager.getWorld(0).timings;
+            this.activeChunkSet_CB = new gnu.trove.map.hash.TLongShortHashMap(spigotConfig.chunksPerTick * 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE);
+            this.activeChunkSet_CB.setAutoCompactionFactor(0);
+            this.mapStorage = DimensionManager.getWorld(0).mapStorage;
+        }
+        else
+        {
+            this.spigotConfig = null;
+            this.cauldronConfig = null;
+            this.world = null;
+            this.timings = null;
+            this.activeChunkSet_CB = null;
+            this.mapStorage = null;
+        }
+        // Cauldron end
         this.ambientTickCountdown = this.rand.nextInt(12000);
         this.spawnHostileMobs = true;
         this.spawnPeacefulMobs = true;
@@ -216,7 +523,6 @@ public abstract class World implements IBlockAccess
         this.lightUpdateBlockList = new int[32768];
         this.saveHandler = p_i45369_1_;
         this.theProfiler = p_i45369_5_;
-        this.mapStorage = getMapStorage(p_i45369_1_);
         this.worldInfo = p_i45369_1_.loadWorldInfo();
 
         if (p_i45369_4_ != null)
@@ -235,13 +541,26 @@ public abstract class World implements IBlockAccess
         if (this.worldInfo == null)
         {
             this.worldInfo = new WorldInfo(p_i45369_3_, p_i45369_2_);
+            this.worldInfo.setDimension(this.provider.dimensionId); // Cauldron - Save dimension to level.dat
         }
         else
         {
             this.worldInfo.setWorldName(p_i45369_2_);
+            // Cauldron start - Use saved dimension from level.dat. Fixes issues with MultiVerse
+            if (this.worldInfo.getDimension() != 0)
+                this.provider.dimensionId = this.worldInfo.getDimension();
+            else
+            {
+                this.worldInfo.setDimension(this.provider.dimensionId);
+            }
+            // Cauldron end
         }
 
+        // Cauldron start - Guarantee provider dimension is not reset. This is required for mods that rely on the provider ID to match the client dimension. Without this, IC2 will send the wrong ID to clients.
+        int providerId = this.provider.dimensionId;
         this.provider.registerWorld(this);
+        this.provider.dimensionId = providerId;
+        // Cauldron end
         this.chunkProvider = this.createChunkProvider();
 
         if (this instanceof WorldServer)
@@ -294,6 +613,7 @@ public abstract class World implements IBlockAccess
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
     }
+    // Cauldron end    
 
     private static MapStorage s_mapStorage;
     private static ISaveHandler s_savehandler;
@@ -336,6 +656,18 @@ public abstract class World implements IBlockAccess
 
     public Block getBlock(int p_147439_1_, int p_147439_2_, int p_147439_3_)
     {
+        // Cauldron start - tree generation
+        if (captureTreeGeneration)
+        {
+            for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : capturedBlockSnapshots)
+            {
+                if (blocksnapshot.x == p_147439_1_ && blocksnapshot.y == p_147439_2_ && blocksnapshot.z == p_147439_3_)
+                {
+                    return blocksnapshot.replacedBlock;
+                }
+            }
+        }
+        // Cauldron end
         if (p_147439_1_ >= -30000000 && p_147439_3_ >= -30000000 && p_147439_1_ < 30000000 && p_147439_3_ < 30000000 && p_147439_2_ >= 0 && p_147439_2_ < 256)
         {
             Chunk chunk = null;
@@ -404,7 +736,7 @@ public abstract class World implements IBlockAccess
         }
     }
 
-    protected boolean chunkExists(int p_72916_1_, int p_72916_2_)
+    public boolean chunkExists(int p_72916_1_, int p_72916_2_) // Cauldron - protected -> public for repackaging
     {
         return this.chunkProvider.chunkExists(p_72916_1_, p_72916_2_);
     }
@@ -421,6 +753,27 @@ public abstract class World implements IBlockAccess
 
     public boolean setBlock(int p_147465_1_, int p_147465_2_, int p_147465_3_, Block p_147465_4_, int p_147465_5_, int p_147465_6_)
     {
+        // Cauldron start - tree generation
+        if (this.captureTreeGeneration)
+        {
+            net.minecraftforge.common.util.BlockSnapshot blocksnapshot = null;
+
+            for (net.minecraftforge.common.util.BlockSnapshot previous : capturedBlockSnapshots)
+            {
+                if (previous.x == p_147465_1_ && previous.y == p_147465_2_ && previous.z == p_147465_3_)
+                {
+                    blocksnapshot = previous;
+                    break;
+                }
+            }
+            if (blocksnapshot != null)
+            {
+                capturedBlockSnapshots.remove(blocksnapshot);
+            }
+            this.capturedBlockSnapshots.add(new net.minecraftforge.common.util.BlockSnapshot(this, p_147465_1_, p_147465_2_, p_147465_3_, p_147465_4_, p_147465_5_, p_147465_6_));
+            return true;
+        }
+        // Cauldron end
         if (p_147465_1_ >= -30000000 && p_147465_3_ >= -30000000 && p_147465_1_ < 30000000 && p_147465_3_ < 30000000)
         {
             if (p_147465_2_ < 0)
@@ -448,8 +801,22 @@ public abstract class World implements IBlockAccess
                     this.capturedBlockSnapshots.add(blockSnapshot);
                 }
 
+                // Cauldron start - capture blockstates
+                net.minecraftforge.common.util.BlockSnapshot blocksnapshot = null;
+                if (this.captureBlockSnapshots)
+                {
+                    blocksnapshot = net.minecraftforge.common.util.BlockSnapshot.getBlockSnapshot(this, p_147465_1_, p_147465_2_, p_147465_3_, p_147465_6_);
+                    this.capturedBlockSnapshots.add(blocksnapshot);
+                }
+
                 boolean flag = chunk.func_150807_a(p_147465_1_ & 15, p_147465_2_, p_147465_3_ & 15, p_147465_4_, p_147465_5_);
 
+                if (!flag && this.captureBlockSnapshots)
+                {
+                    this.capturedBlockSnapshots.remove(blocksnapshot);
+                }
+                // Cauldron end
+
                 if (!flag && blockSnapshot != null)
                 {
                     this.capturedBlockSnapshots.remove(blockSnapshot);
@@ -460,6 +827,7 @@ public abstract class World implements IBlockAccess
                 this.func_147451_t(p_147465_1_, p_147465_2_, p_147465_3_);
                 this.theProfiler.endSection();
 
+                // Cauldron add !this.captureBlockStates
                 if (flag && blockSnapshot == null) // Don't notify clients or update physics while capturing blockstates
                 {
                     // Modularize client and physic updates
@@ -496,6 +864,19 @@ public abstract class World implements IBlockAccess
 
     public int getBlockMetadata(int p_72805_1_, int p_72805_2_, int p_72805_3_)
     {
+        // Cauldron start - tree generation
+        if (captureTreeGeneration)
+        {
+            for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : capturedBlockSnapshots)
+            {
+                if (blocksnapshot.x == p_72805_1_ && blocksnapshot.y == p_72805_2_ && blocksnapshot.z == p_72805_3_)
+                {
+                    return blocksnapshot.meta;
+                }
+            }
+        }
+        // Cauldron end
+
         if (p_72805_1_ >= -30000000 && p_72805_3_ >= -30000000 && p_72805_1_ < 30000000 && p_72805_3_ < 30000000)
         {
             if (p_72805_2_ < 0)
@@ -511,7 +892,7 @@ public abstract class World implements IBlockAccess
                 Chunk chunk = this.getChunkFromChunkCoords(p_72805_1_ >> 4, p_72805_3_ >> 4);
                 p_72805_1_ &= 15;
                 p_72805_3_ &= 15;
-                return chunk.getBlockMetadata(p_72805_1_, p_72805_2_, p_72805_3_);
+                return chunk == null ? 0 : chunk.getBlockMetadata(p_72805_1_, p_72805_2_, p_72805_3_);
             }
         }
         else
@@ -610,6 +991,12 @@ public abstract class World implements IBlockAccess
 
     public void notifyBlockChange(int p_147444_1_, int p_147444_2_, int p_147444_3_, Block p_147444_4_)
     {
+        // CraftBukkit start
+        if (this.populating)
+        {
+            return;
+        }
+        // CraftBukkit end
         this.notifyBlocksOfNeighborChange(p_147444_1_, p_147444_2_, p_147444_3_, p_147444_4_);
     }
 
@@ -694,6 +1081,21 @@ public abstract class World implements IBlockAccess
 
             try
             {
+                // CraftBukkit start
+                CraftWorld world = ((WorldServer) this).getWorld();
+
+                if (world != null && !isProfilingWorld())
+                {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(p_147460_1_, p_147460_2_, p_147460_3_),
+                            CraftMagicNumbers.getId(p_147460_4_));
+                    this.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        return;
+                    }
+                }
+                // CraftBukkit end
                 block.onNeighborBlockChange(this, p_147460_1_, p_147460_2_, p_147460_3_, p_147460_4_);
             }
             catch (Throwable throwable1)
@@ -1307,6 +1709,13 @@ public abstract class World implements IBlockAccess
 
     public boolean spawnEntityInWorld(Entity p_72838_1_)
     {
+        // CraftBukkit start - Used for entities other than creatures
+        return this.addEntity(p_72838_1_, SpawnReason.DEFAULT); // Set reason as DEFAULT
+    }
+
+    public boolean addEntity(Entity p_72838_1_, SpawnReason spawnReason) // Changed signature, added SpawnReason
+    {
+        if (!p_72838_1_.entityAllowedToSpawn()) return false; // Cauldron
         // do not drop any items while restoring blocksnapshots. Prevents dupes
         if (!this.isRemote && (p_72838_1_ == null || (p_72838_1_ instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
 
@@ -1319,23 +1728,99 @@ public abstract class World implements IBlockAccess
             flag = true;
         }
 
+        // CraftBukkit start
+        org.bukkit.event.Cancellable event = null;
+        // Cauldron start - workaround for handling CraftBukkit's SpawnReason with customspawners and block spawners
+        if (p_72838_1_.spawnReason != null && p_72838_1_.spawnReason.equals("natural"))
+        {
+            spawnReason = SpawnReason.NATURAL;
+        }
+        else if (p_72838_1_.spawnReason != null && p_72838_1_.spawnReason.equals("spawner"))
+        {
+            spawnReason = SpawnReason.SPAWNER;
+        }
+        // Cauldron end
+
+        if (p_72838_1_ instanceof EntityLivingBase && !(p_72838_1_ instanceof EntityPlayerMP))
+        {
+            // Cauldron start - add custom entity support
+            boolean isAnimal = p_72838_1_ instanceof EntityAnimal || p_72838_1_ instanceof EntityWaterMob || p_72838_1_ instanceof EntityGolem
+                    || p_72838_1_.isCreatureType(EnumCreatureType.creature, false);
+            boolean isMonster = p_72838_1_ instanceof EntityMob || p_72838_1_ instanceof EntityGhast || p_72838_1_ instanceof EntitySlime
+                    || p_72838_1_.isCreatureType(EnumCreatureType.monster, false);
+            // Cauldron end
+
+            if (spawnReason != SpawnReason.CUSTOM)
+            {
+                if (isAnimal && !spawnPeacefulMobs || isMonster && !spawnHostileMobs)
+                {
+                    p_72838_1_.isDead = true;
+                    return false;
+                }
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLivingBase) p_72838_1_, spawnReason);
+        }
+        else if (p_72838_1_ instanceof EntityItem)
+        {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) p_72838_1_);
+        }
+        else if (p_72838_1_.getBukkitEntity() instanceof org.bukkit.entity.Projectile)
+        {
+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
+            event = CraftEventFactory.callProjectileLaunchEvent(p_72838_1_);
+        }
+        // Spigot start
+        else if (p_72838_1_ instanceof EntityXPOrb)
+        {
+            EntityXPOrb xp = (EntityXPOrb) p_72838_1_;
+            double radius = this.getSpigotConfig().expMerge; // Cauldron
+
+            if (radius > 0)
+            {
+                List<Entity> entities = this.getEntitiesWithinAABBExcludingEntity(p_72838_1_, p_72838_1_.boundingBox.expand(radius, radius, radius));
+
+                for (Entity e : entities)
+                {
+                    if (e instanceof EntityXPOrb)
+                    {
+                        EntityXPOrb loopItem = (EntityXPOrb) e;
+
+                        if (!loopItem.isDead)
+                        {
+                            xp.xpValue += loopItem.xpValue;
+                            loopItem.setDead();
+                        }
+                    }
+                }
+            }
+        } // Spigot end
+
+        if (event != null && (event.isCancelled() || p_72838_1_.isDead))
+        {
+            p_72838_1_.isDead = true;
+            return false;
+        }
+        // CraftBukkit end
+
         if (!flag && !this.chunkExists(i, j))
         {
+            p_72838_1_.isDead = true; // CraftBukkit
             return false;
         }
         else
         {
+            if (MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(p_72838_1_, this)) && !flag || p_72838_1_.isDead) return false;
             if (p_72838_1_ instanceof EntityPlayer)
             {
                 EntityPlayer entityplayer = (EntityPlayer)p_72838_1_;
                 this.playerEntities.add(entityplayer);
                 this.updateAllPlayersSleepingFlag();
             }
-            if (MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(p_72838_1_, this)) && !flag) return false;
-
             this.getChunkFromChunkCoords(i, j).addEntity(p_72838_1_);
             this.loadedEntityList.add(p_72838_1_);
             this.onEntityAdded(p_72838_1_);
+            net.minecraftforge.cauldron.CauldronHooks.logEntitySpawn(this, p_72838_1_, spawnReason);
             return true;
         }
     }
@@ -1346,6 +1831,8 @@ public abstract class World implements IBlockAccess
         {
             ((IWorldAccess)this.worldAccesses.get(i)).onEntityCreate(p_72923_1_);
         }
+
+        p_72923_1_.valid = true; // CraftBukkit
     }
 
     public void onEntityRemoved(Entity p_72847_1_)
@@ -1354,6 +1841,8 @@ public abstract class World implements IBlockAccess
         {
             ((IWorldAccess)this.worldAccesses.get(i)).onEntityDestroy(p_72847_1_);
         }
+
+        p_72847_1_.valid = false; // CraftBukkit
     }
 
     public void removeEntity(Entity p_72900_1_)
@@ -1397,6 +1886,19 @@ public abstract class World implements IBlockAccess
         }
 
         this.loadedEntityList.remove(p_72973_1_);
+        // CraftBukkit start - Decrement loop variable field if we've already ticked this entity
+        int index = this.loadedEntityList.indexOf(p_72973_1_);
+
+        if (index != -1)
+        {
+            if (index <= this.tickPosition)
+            {
+                this.tickPosition--;
+            }
+
+            this.loadedEntityList.remove(index);
+        }
+        // CraftBukkit end
         this.onEntityRemoved(p_72973_1_);
     }
 
@@ -1408,40 +1910,58 @@ public abstract class World implements IBlockAccess
     public List getCollidingBoundingBoxes(Entity p_72945_1_, AxisAlignedBB p_72945_2_)
     {
         this.collidingBoundingBoxes.clear();
+        if (CauldronHooks.checkBoundingBoxSize(p_72945_1_, p_72945_2_)) return new ArrayList(); // Removing misbehaved living entities
         int i = MathHelper.floor_double(p_72945_2_.minX);
         int j = MathHelper.floor_double(p_72945_2_.maxX + 1.0D);
         int k = MathHelper.floor_double(p_72945_2_.minY);
         int l = MathHelper.floor_double(p_72945_2_.maxY + 1.0D);
         int i1 = MathHelper.floor_double(p_72945_2_.minZ);
         int j1 = MathHelper.floor_double(p_72945_2_.maxZ + 1.0D);
+        // Spigot start
+        int ystart = ((k - 1) < 0) ? 0 : (k - 1);
 
-        for (int k1 = i; k1 < j; ++k1)
+        for (int chunkx = (i >> 4); chunkx <= ((j - 1) >> 4); chunkx++)
         {
-            for (int l1 = i1; l1 < j1; ++l1)
+            int cx = chunkx << 4;
+
+            for (int chunkz = (i1 >> 4); chunkz <= ((j1 - 1) >> 4); chunkz++)
             {
-                if (this.blockExists(k1, 64, l1))
+                if (!this.chunkExists(chunkx, chunkz))
                 {
-                    for (int i2 = k - 1; i2 < l; ++i2)
-                    {
-                        Block block;
+                    continue;
+                }
 
-                        if (k1 >= -30000000 && k1 < 30000000 && l1 >= -30000000 && l1 < 30000000)
-                        {
-                            block = this.getBlock(k1, i2, l1);
-                        }
-                        else
+                int cz = chunkz << 4;
+                Chunk chunk = this.getChunkFromChunkCoords(chunkx, chunkz);
+                // Compute ranges within chunk
+                int xstart = (i < cx) ? cx : i;
+                int xend = (j < (cx + 16)) ? j : (cx + 16);
+                int zstart = (i1 < cz) ? cz : i1;
+                int zend = (j1 < (cz + 16)) ? j1 : (cz + 16);
+
+                // Loop through blocks within chunk
+                for (int x = xstart; x < xend; x++)
+                {
+                    for (int z = zstart; z < zend; z++)
+                    {
+                        for (int y = ystart; y < l; y++)
                         {
-                            block = Blocks.stone;
-                        }
+                            Block block = chunk.getBlock(x - cx, y, z - cz);
 
-                        block.addCollisionBoxesToList(this, k1, i2, l1, p_72945_2_, this.collidingBoundingBoxes, p_72945_1_);
+                            if (block != null)
+                            {
+                                block.addCollisionBoxesToList(this, x, y, z, p_72945_2_, this.collidingBoundingBoxes, p_72945_1_);
+                            }
+                        }
                     }
                 }
             }
         }
+        // Spigot end
 
         double d0 = 0.25D;
         List list = this.getEntitiesWithinAABBExcludingEntity(p_72945_1_, p_72945_2_.expand(d0, d0, d0));
+        net.minecraftforge.cauldron.CauldronHooks.logEntitySize(this, p_72945_1_, list); // Cauldron add logging for entity collisions
 
         for (int j2 = 0; j2 < list.size(); ++j2)
         {
@@ -1797,11 +2317,22 @@ public abstract class World implements IBlockAccess
         Entity entity;
         CrashReport crashreport;
         CrashReportCategory crashreportcategory;
+        // Cauldron start
+        entitiesTicked = 0;
+        tilesTicked = 0;
+        // Cauldron end
 
-        for (i = 0; i < this.weatherEffects.size(); ++i)
+        for (i = 0; i < this.weatherEffects.size(); i++)
         {
             entity = (Entity)this.weatherEffects.get(i);
 
+            if (entity == null)
+            {
+                System.out.println("Cauldron has detected a null entity weatherEffects and has removed it, preventing a crash");
+                this.weatherEffects.remove(i);
+                continue;
+            } else {
+
             try
             {
                 ++entity.ticksExisted;
@@ -1834,12 +2365,12 @@ public abstract class World implements IBlockAccess
 
             if (entity.isDead)
             {
-                this.weatherEffects.remove(i--);
+                this.weatherEffects.remove(i);
             }
-        }
+        }}
 
         this.theProfiler.endStartSection("remove");
-        this.loadedEntityList.removeAll(this.unloadedEntityList);
+        if(unloadedEntityList.size() != 0) this.loadedEntityList.removeAll(new HashSet(unloadedEntityList));
         int j;
         int l;
 
@@ -1862,11 +2393,17 @@ public abstract class World implements IBlockAccess
 
         this.unloadedEntityList.clear();
         this.theProfiler.endStartSection("regular");
+        org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+        timings.entityTick.startTiming(); // Spigot
 
-        for (i = 0; i < this.loadedEntityList.size(); ++i)
-        {
+        for (i = 0; i < this.loadedEntityList.size(); i++) {
             entity = (Entity)this.loadedEntityList.get(i);
-
+            if (entity == null)
+            {
+                System.out.println("Cauldron has detected a null entity and has removed it, preventing a crash");
+                this.loadedEntityList.remove(i);
+                continue;
+            } else {
             if (entity.ridingEntity != null)
             {
                 if (!entity.ridingEntity.isDead && entity.ridingEntity.riddenByEntity == entity)
@@ -1884,7 +2421,12 @@ public abstract class World implements IBlockAccess
             {
                 try
                 {
+                    SpigotTimings.tickEntityTimer.startTiming(); // Spigot
+                    long startT = System.nanoTime();
                     this.updateEntity(entity);
+                    long elapsed = System.nanoTime() - startT;
+                    if(elapsed > 20000000) FMLLog.warning("Possible lag source Entity %s %sms", entity, (elapsed/1000000));
+                    SpigotTimings.tickEntityTimer.stopTiming(); // Spigot
                 }
                 catch (Throwable throwable1)
                 {
@@ -1916,30 +2458,80 @@ public abstract class World implements IBlockAccess
                 {
                     this.getChunkFromChunkCoords(j, l).removeEntity(entity);
                 }
-
-                this.loadedEntityList.remove(i--);
+                this.loadedEntityList.remove(i);
                 this.onEntityRemoved(entity);
             }
 
             this.theProfiler.endSection();
-        }
+        }}
 
+        timings.entityTick.stopTiming(); // Spigot
         this.theProfiler.endStartSection("blockEntities");
+        timings.tileEntityTick.startTiming(); // Spigot
         this.field_147481_N = true;
-        Iterator iterator = this.loadedTileEntityList.iterator();
+        // CraftBukkit start - From below, clean up tile entities before ticking them
+        if (!this.field_147483_b.isEmpty())
+        {
+            for (Object tile : field_147483_b)
+            {
+                TileEntity te = (TileEntity)tile;
+                te.setGC(true);
+                long startT = System.nanoTime();
+                te.onChunkUnload();
+                long elapsed = System.nanoTime() - startT;
+                if(elapsed > 20000000) FMLLog.warning("Possible lag source on unload TileEntity with GP %s [%s](%s, %s, %s) %sms", tile.getClass(), provider.dimensionId, te.xCoord, te.yCoord, te.zCoord, (elapsed/1000000));
+            }
+            List temporary_tile_entity_list = new ArrayList(this.loadedTileEntityList.size());
+            for(Object tile : loadedTileEntityList)
+                if(!((TileEntity)tile).isGC())
+                    temporary_tile_entity_list.add(tile);
+            this.loadedTileEntityList = temporary_tile_entity_list;
+            for (Object tile : field_147483_b)
+            {
+                TileEntity te = (TileEntity)tile;
+                te.setGC(false);
+            }
+            this.field_147483_b.clear();
+        }
+        // CraftBukkit end
             
-        while (iterator.hasNext())
+        for (i = 0; i < this.loadedTileEntityList.size(); i++)
         {
-            TileEntity tileentity = (TileEntity)iterator.next();
+            TileEntity tileentity = (TileEntity) this.loadedTileEntityList.get(i);
+            // Spigot start
+            if (tileentity == null)
+            {
+                System.out.println("Cauldron has detected a null tileentity and has removed it, preventing a crash");
+                this.loadedTileEntityList.remove(i);
+                continue;
+            } else {
+            // Spigot end
+            
+            if (tileentity.isInvalid()) {
+                this.loadedTileEntityList.remove(i);
+                if (this.chunkExists(tileentity.xCoord >> 4, tileentity.zCoord >> 4)) {
+                    Chunk chunk = this.getChunkFromChunkCoords(tileentity.xCoord >> 4, tileentity.zCoord >> 4);
+                    if (chunk != null) chunk.removeInvalidTileEntity(tileentity.xCoord & 15, tileentity.yCoord, tileentity.zCoord & 15);
+                }
+                continue;
+            }
 
-            if (!tileentity.isInvalid() && tileentity.hasWorldObj() && this.blockExists(tileentity.xCoord, tileentity.yCoord, tileentity.zCoord))
+            if (tileentity.hasWorldObj() && CauldronHooks.canTileEntityTick(tileentity, this)
+                    && this.blockExists(tileentity.xCoord, tileentity.yCoord, tileentity.zCoord))
             {
                 try
                 {
+                    tileentity.tickTimer.startTiming(); // Spigot
+                    tilesTicked++;
+                    long startT = System.nanoTime();
                     tileentity.updateEntity();
+                    long elapsed = System.nanoTime() - startT;
+                    if(elapsed > 20000000) FMLLog.warning("Possible lag source TileEntity %s [%s](%s, %s, %s) %sms", tileentity.getClass(), provider.dimensionId, tileentity.xCoord, tileentity.yCoord, tileentity.zCoord, (elapsed/1000000));
+                    tileentity.tickTimer.stopTiming(); // Spigot
                 }
                 catch (Throwable throwable)
                 {
+                    tileentity.tickTimer.stopTiming(); // Spigot
                     crashreport = CrashReport.makeCrashReport(throwable, "Ticking block entity");
                     crashreportcategory = crashreport.makeCategory("Block entity being ticked");
                     tileentity.func_145828_a(crashreportcategory);
@@ -1955,32 +2547,11 @@ public abstract class World implements IBlockAccess
                     }
                 }
             }
+        }}
 
-            if (tileentity.isInvalid())
-            {
-                iterator.remove();
-
-                if (this.chunkExists(tileentity.xCoord >> 4, tileentity.zCoord >> 4))
-                {
-                    Chunk chunk = this.getChunkFromChunkCoords(tileentity.xCoord >> 4, tileentity.zCoord >> 4);
-
-                    if (chunk != null)
-                    {
-                        chunk.removeInvalidTileEntity(tileentity.xCoord & 15, tileentity.yCoord, tileentity.zCoord & 15);
-                    }
-                }
-            }
-        }
-
-        if (!this.field_147483_b.isEmpty())
-        {
-            for (Object tile : field_147483_b)
-            {
-               ((TileEntity)tile).onChunkUnload();
-            }
-            this.loadedTileEntityList.removeAll(this.field_147483_b);
-            this.field_147483_b.clear();
-        }
+        timings.tileEntityTick.stopTiming(); // Spigot
+        timings.tileEntityPending.startTiming(); // Spigot
+        this.field_147481_N = false;
 
         this.field_147481_N = false;
 
@@ -2016,17 +2587,23 @@ public abstract class World implements IBlockAccess
             this.addedTileEntityList.clear();
         }
 
+        timings.tileEntityPending.stopTiming(); // Spigot
         this.theProfiler.endSection();
         this.theProfiler.endSection();
     }
 
     public void func_147448_a(Collection p_147448_1_)
     {
-        List dest = field_147481_N ? addedTileEntityList : loadedTileEntityList;
-        for(TileEntity entity : (Collection<TileEntity>)p_147448_1_)
+        // Cauldron start
+        Collection dest = field_147481_N ? addedTileEntityList : loadedTileEntityList; // List -> Collection for CB loadedTileEntityList type change
+        for(Object entity : p_147448_1_)
         {
-            if(entity.canUpdate()) dest.add(entity);
+            if (CauldronHooks.canUpdate((TileEntity) entity))
+            {
+                dest.add(entity);
+            }
         }
+        // Cauldron end
     }
 
     public void updateEntity(Entity p_72870_1_)
@@ -2036,21 +2613,33 @@ public abstract class World implements IBlockAccess
 
     public void updateEntityWithOptionalForce(Entity p_72866_1_, boolean p_72866_2_)
     {
+        if (p_72866_1_.isDead) return;
         int i = MathHelper.floor_double(p_72866_1_.posX);
         int j = MathHelper.floor_double(p_72866_1_.posZ);
         boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(i >> 4, j >> 4));
         byte b0 = isForced ? (byte)0 : 32;
         boolean canUpdate = !p_72866_2_ || this.checkChunksExist(i - b0, 0, j - b0, i + b0, 0, j + b0);
+        boolean forceUpdate = false; // Cauldron
 
         if (!canUpdate)
         {
             EntityEvent.CanUpdate event = new EntityEvent.CanUpdate(p_72866_1_);
             MinecraftForge.EVENT_BUS.post(event);
             canUpdate = event.canUpdate;
+            forceUpdate = canUpdate; // Cauldron
         }
-
+        // Spigot start
+        if (!isForced && !forceUpdate && !org.spigotmc.ActivationRange.checkIfActive(p_72866_1_)) // Cauldron - ignore if forge event forced update or entity is in forced chunk
+        {
+            p_72866_1_.ticksExisted++;
+            p_72866_1_.inactiveTick();
+            return;
+        }
+        // Spigot end
         if (canUpdate)
         {
+            p_72866_1_.tickTimer.startTiming();
+            entitiesTicked++; // Cauldron
             p_72866_1_.lastTickPosX = p_72866_1_.posX;
             p_72866_1_.lastTickPosY = p_72866_1_.posY;
             p_72866_1_.lastTickPosZ = p_72866_1_.posZ;
@@ -2134,6 +2723,7 @@ public abstract class World implements IBlockAccess
                     p_72866_1_.riddenByEntity = null;
                 }
             }
+            p_72866_1_.tickTimer.stopTiming(); // Spigot
         }
     }
 
@@ -2570,7 +3160,7 @@ public abstract class World implements IBlockAccess
             return;
         }
 
-        if (p_147455_4_.canUpdate())
+        if (CauldronHooks.canUpdate(p_147455_4_))
         {
             if (this.field_147481_N)
             {
@@ -2718,7 +3308,15 @@ public abstract class World implements IBlockAccess
 
                     if (i <= 0)
                     {
-                        this.worldInfo.setThundering(!this.worldInfo.isThundering());
+                        // CraftBukkit start
+                        ThunderChangeEvent thunder = new ThunderChangeEvent(this.getWorld(), !this.worldInfo.isThundering());
+                        this.getServer().getPluginManager().callEvent(thunder);
+
+                        if (!thunder.isCancelled())
+                        {
+                            this.worldInfo.setThundering(!this.worldInfo.isThundering());
+                        }
+                        // CraftBukkit end
                     }
                 }
 
@@ -2754,7 +3352,15 @@ public abstract class World implements IBlockAccess
 
                     if (j <= 0)
                     {
-                        this.worldInfo.setRaining(!this.worldInfo.isRaining());
+                        // CraftBukkit start
+                        WeatherChangeEvent weather = new WeatherChangeEvent(this.getWorld(), !this.worldInfo.isRaining());
+                        this.getServer().getPluginManager().callEvent(weather);
+
+                        if (!weather.isCancelled())
+                        {
+                            this.worldInfo.setRaining(!this.worldInfo.isRaining());
+                        }
+                        // CraftBukkit end
                     }
                 }
 
@@ -2777,8 +3383,41 @@ public abstract class World implements IBlockAccess
     protected void setActivePlayerChunksAndCheckLight()
     {
         this.activeChunkSet.clear();
+        // Cauldron start - add persistent chunks to be ticked for growth
+        this.activeChunkSet_CB.clear();
+        for (ChunkCoordIntPair chunk : getPersistentChunks().keySet())
+        {
+            this.activeChunkSet.add(chunk);
+            long key = chunkToKey(chunk.chunkXPos, chunk.chunkZPos);
+            this.activeChunkSet_CB.put(key, (short) 0);
+            if (!this.chunkExists(chunk.chunkXPos, chunk.chunkZPos))
+            {
+                ((WorldServer) this).theChunkProviderServer.loadChunk(chunk.chunkXPos, chunk.chunkZPos);
+            }
+        }
+        // Cauldron end
         this.theProfiler.startSection("buildList");
-        this.activeChunkSet.addAll(getPersistentChunks().keySet());
+        // Spigot start
+        int optimalChunks = this.getSpigotConfig().chunksPerTick; // Cauldron
+
+        // Quick conditions to allow us to exist early
+        if (optimalChunks <= 0) // Cauldron tick chunks even if no players are logged in
+        {
+            return;
+        }
+
+        // Keep chunks with growth inside of the optimal chunk range
+        int chunksPerPlayer = Math.min(200, Math.max(1, (int) (((optimalChunks - playerEntities.size()) / (double) playerEntities.size()) + 0.5)));
+        // Cauldron start - use server view distance instead of capping it at 7
+        int randRange = this.func_152379_p();
+        if (randRange < 1)
+        {
+            throw new IllegalArgumentException("Too small view radius! edit server.properties and change view-distance to a value > 0.");
+        }
+        // Cauldron end
+        // odds of growth happening vs growth happening in vanilla
+        this.growthOdds = this.modifiedOdds = Math.max(35, Math.min(100, ((chunksPerPlayer + 1) * 100F) / 15F));
+        // Spigot end
         int i;
         EntityPlayer entityplayer;
         int j;
@@ -2788,17 +3427,28 @@ public abstract class World implements IBlockAccess
         for (i = 0; i < this.playerEntities.size(); ++i)
         {
             entityplayer = (EntityPlayer)this.playerEntities.get(i);
-            j = MathHelper.floor_double(entityplayer.posX / 16.0D);
-            k = MathHelper.floor_double(entityplayer.posZ / 16.0D);
-            l = this.func_152379_p();
-
-            for (int i1 = -l; i1 <= l; ++i1)
+            int chunkX = MathHelper.floor_double(entityplayer.posX / 16.0D);
+            int chunkZ = MathHelper.floor_double(entityplayer.posZ / 16.0D);
+            // Spigot start - Always update the chunk the player is on
+            long key = chunkToKey(chunkX, chunkZ);
+            int existingPlayers = Math.max(0, activeChunkSet_CB.get(key)); //filter out -1's
+            activeChunkSet_CB.put(key, (short) (existingPlayers + 1));
+            activeChunkSet.add(new ChunkCoordIntPair(chunkX, chunkZ)); // Cauldron - vanilla compatibility
+
+            // Check and see if we update the chunks surrounding the player this tick
+            for (int chunk = 0; chunk < chunksPerPlayer; chunk++)
             {
-                for (int j1 = -l; j1 <= l; ++j1)
+                int dx = (rand.nextBoolean() ? 1 : -1) * rand.nextInt(randRange);
+                int dz = (rand.nextBoolean() ? 1 : -1) * rand.nextInt(randRange);
+                long hash = chunkToKey(dx + chunkX, dz + chunkZ);
+
+                if (!activeChunkSet_CB.contains(hash) && this.chunkExists(dx + chunkX, dz + chunkZ))
                 {
-                    this.activeChunkSet.add(new ChunkCoordIntPair(i1 + j, j1 + k));
+                    activeChunkSet_CB.put(hash, (short) -1); //no players
+                    activeChunkSet.add(new ChunkCoordIntPair(dx + chunkX, dz + chunkZ)); // Cauldron - vanilla compatibility
                 }
             }
+            // Spigot End
         }
 
         this.theProfiler.endSection();
@@ -2810,7 +3460,7 @@ public abstract class World implements IBlockAccess
 
         this.theProfiler.startSection("playerCheckLight");
 
-        if (!this.playerEntities.isEmpty())
+        if (this.getSpigotConfig().randomLightUpdates && !this.playerEntities.isEmpty()) // Spigot // Cauldron
         {
             i = this.rand.nextInt(this.playerEntities.size());
             entityplayer = (EntityPlayer)this.playerEntities.get(i);
@@ -3284,8 +3934,21 @@ public abstract class World implements IBlockAccess
         {
             Entity entity = (Entity)this.loadedEntityList.get(j);
 
-            if ((!(entity instanceof EntityLiving) || !((EntityLiving)entity).isNoDespawnRequired()) && p_72907_1_.isAssignableFrom(entity.getClass()))
+            // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
+            if (entity instanceof EntityLiving)
             {
+                EntityLiving entityliving = (EntityLiving) entity;
+
+                if (entityliving.canDespawn_CB() && entityliving.isNoDespawnRequired())
+                {
+                    continue;
+                }
+            }
+
+            if (p_72907_1_.isAssignableFrom(entity.getClass()))
+            {
+                // if ((!(entity instanceof EntityLiving) || !((EntityLiving)entity).isNoDespawnRequired()) && p_72907_1_.isAssignableFrom(entity.getClass()))
+                // CraftBukkit end
                 ++i;
             }
         }
@@ -3298,6 +3961,7 @@ public abstract class World implements IBlockAccess
         for (int i = 0; i < p_72868_1_.size(); ++i)
         {
             Entity entity = (Entity)p_72868_1_.get(i);
+            if (!entity.entityAllowedToSpawn()) continue;
             if (!MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(entity, this)))
             {
                 loadedEntityList.add(entity);
@@ -3314,8 +3978,17 @@ public abstract class World implements IBlockAccess
     public boolean canPlaceEntityOnSide(Block p_147472_1_, int p_147472_2_, int p_147472_3_, int p_147472_4_, boolean p_147472_5_, int p_147472_6_, Entity p_147472_7_, ItemStack p_147472_8_)
     {
         Block block1 = this.getBlock(p_147472_2_, p_147472_3_, p_147472_4_);
+        if (block1 == null) return false; // Cauldron
         AxisAlignedBB axisalignedbb = p_147472_5_ ? null : p_147472_1_.getCollisionBoundingBoxFromPool(this, p_147472_2_, p_147472_3_, p_147472_4_);
-        return axisalignedbb != null && !this.checkNoEntityCollision(axisalignedbb, p_147472_7_) ? false : (block1.getMaterial() == Material.circuits && p_147472_1_ == Blocks.anvil ? true : block1.isReplaceable(this, p_147472_2_, p_147472_3_, p_147472_4_) && p_147472_1_.canReplace(this, p_147472_2_, p_147472_3_, p_147472_4_, p_147472_6_, p_147472_8_));
+        // CraftBukkit start - store default return
+        boolean defaultReturn = axisalignedbb != null && !this.checkNoEntityCollision(axisalignedbb, p_147472_7_) ? false
+                : (block1.getMaterial() == Material.circuits && p_147472_1_ == Blocks.anvil ? true : block1.isReplaceable(this, p_147472_2_, p_147472_3_,
+                        p_147472_4_) && p_147472_1_.canReplace(this, p_147472_2_, p_147472_3_, p_147472_4_, p_147472_6_, p_147472_8_));
+        BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(p_147472_2_, p_147472_3_, p_147472_4_),
+                CraftMagicNumbers.getId(p_147472_1_), defaultReturn);
+        this.getServer().getPluginManager().callEvent(event);
+        return event.isBuildable();
+        // CraftBukkit end
     }
 
     public PathEntity getPathEntityToEntity(Entity p_72865_1_, Entity p_72865_2_, float p_72865_3_, boolean p_72865_4_, boolean p_72865_5_, boolean p_72865_6_, boolean p_72865_7_)
@@ -3464,6 +4137,12 @@ public abstract class World implements IBlockAccess
         for (int i = 0; i < this.playerEntities.size(); ++i)
         {
             EntityPlayer entityplayer1 = (EntityPlayer)this.playerEntities.get(i);
+            // CraftBukkit start - Fixed an NPE
+            if (entityplayer1 == null || entityplayer1.isDead)
+            {
+                continue;
+            }
+            // CraftBukkit end
             double d5 = entityplayer1.getDistanceSq(p_72977_1_, p_72977_3_, p_72977_5_);
 
             if ((p_72977_7_ < 0.0D || d5 < p_72977_7_ * p_72977_7_) && (d4 == -1.0D || d5 < d4))
@@ -3489,7 +4168,12 @@ public abstract class World implements IBlockAccess
         for (int i = 0; i < this.playerEntities.size(); ++i)
         {
             EntityPlayer entityplayer1 = (EntityPlayer)this.playerEntities.get(i);
-
+            // CraftBukkit start - Fixed an NPE
+            if (entityplayer1 == null || entityplayer1.isDead)
+            {
+                continue;
+            }
+            // CraftBukkit end
             if (!entityplayer1.capabilities.disableDamage && entityplayer1.isEntityAlive())
             {
                 double d5 = entityplayer1.getDistanceSq(p_72846_1_, p_72846_3_, p_72846_5_);
@@ -3660,6 +4344,18 @@ public abstract class World implements IBlockAccess
 
     public void updateAllPlayersSleepingFlag() {}
 
+    // CraftBukkit start
+    // Calls the method that checks to see if players are sleeping
+    // Called by CraftPlayer.setPermanentSleeping()
+    public void checkSleepStatus()
+    {
+        if (!this.isRemote)
+        {
+            this.updateAllPlayersSleepingFlag();
+        }
+    }
+    // CraftBukkit end
+
     public float getWeightedThunderStrength(float p_72819_1_)
     {
         return (this.prevThunderingStrength + (this.thunderingStrength - this.prevThunderingStrength) * p_72819_1_) * this.getRainStrength(p_72819_1_);
@@ -3932,8 +4628,8 @@ public abstract class World implements IBlockAccess
      */
     public void addTileEntity(TileEntity entity)
     {
-        List dest = field_147481_N ? addedTileEntityList : loadedTileEntityList;
-        if(entity.canUpdate())
+        Collection dest = field_147481_N ? addedTileEntityList : loadedTileEntityList; // Cauldron - List -> Collection for CB loadedTileEntityList type change
+        if (CauldronHooks.canUpdate(entity))
         {
             dest.add(entity);
         }
@@ -4029,4 +4725,73 @@ public abstract class World implements IBlockAccess
         }
         return count;
     }
+
+    // Cauldron start
+    public boolean isEmpty(int x, int y, int z) // Required until SS inheritance bug is fixed
+    {
+        return isAirBlock(x, y, z);
+    }
+
+    public Block getType(int x, int y, int z) // Required until SS inheritance bug is fixed
+    {
+        return getBlock(x, y, z);
+    }
+
+    public boolean isActiveChunk(int x, int z)
+    {
+        return getPersistentChunks().containsKey(new ChunkCoordIntPair(x, z)) || activeChunkSet_CB.containsKey(chunkToKey(x, z));
+    }
+
+    public boolean isActiveChunk(long key)
+    {
+        return isActiveChunk(keyToX(key), keyToZ(key));
+    }
+
+    public boolean isActiveBlockCoord(int x, int z)
+    {
+        return isActiveChunk(x >> 4, z >> 4);
+    }
+
+    public boolean inActiveChunk(Entity entity)
+    {
+        return isActiveBlockCoord(MathHelper.floor_double(entity.posX), MathHelper.floor_double(entity.posZ));
+    }
+
+    // this method is used by ForgeMultipart and Immibis's Microblocks
+    public boolean canPlaceMultipart(Block block, int x, int y, int z)
+    {
+        BlockPlaceEvent placeEvent = null;
+        if (ItemStack.currentPlayer != null)
+        {
+            placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(this, ItemStack.currentPlayer,
+                    org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, x, y, z, 3), x, y, z);
+        }
+
+        if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild()))
+        {
+            return false;
+        }
+
+        return true;
+    }
+
+    public org.spigotmc.SpigotWorldConfig getSpigotConfig()
+    {
+        if (this.spigotConfig == null) if (DimensionManager.getWorld(0) != null) return DimensionManager.getWorld(0).spigotConfig;
+        return this.spigotConfig;
+    }
+    // Cauldron end
+    
+    // Spigot start
+    private void initLimiter() {
+        entityLimiter = new TickLimiter(spigotConfig.entityMaxTickTime);
+        tileLimiter = new TickLimiter(spigotConfig.tileMaxTickTime);
+    }
+    // Spigot end
+    
+    // Cauldron start
+    public boolean isProfilingWorld() {
+        return provider.dimensionId == Integer.MIN_VALUE; // Mystcraft
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/WorldManager.java ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldManager.java
index ab10275..dfa4bec 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/WorldManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldManager.java
@@ -12,7 +12,7 @@ import net.minecraft.server.MinecraftServer;
 public class WorldManager implements IWorldAccess
 {
     private MinecraftServer mcServer;
-    private WorldServer theWorldServer;
+    public WorldServer theWorldServer; // CraftBukkit - private -> public
     private static final String __OBFID = "CL_00001433";
 
     public WorldManager(MinecraftServer p_i1517_1_, WorldServer p_i1517_2_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/WorldServer.java ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldServer.java
index 055597f..f4f86cb 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/WorldServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldServer.java
@@ -11,6 +13,7 @@ import java.util.List;
 import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
+import java.util.*;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockEventData;
 import net.minecraft.block.material.Material;
@@ -56,6 +59,7 @@ import net.minecraft.world.chunk.storage.ExtendedBlockStorage;
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import net.minecraft.world.gen.ChunkProviderServer;
 import net.minecraft.world.gen.feature.WorldGeneratorBonusChest;
+import net.minecraft.world.storage.DerivedWorldInfo;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraftforge.common.ChestGenHooks;
 import static net.minecraftforge.common.ChestGenHooks.BONUS_CHEST;
@@ -67,14 +71,29 @@ import net.minecraftforge.event.world.WorldEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+
+// CraftBukkit start
+import net.minecraft.block.ITileEntityProvider;
+import net.minecraft.block.BlockJukebox;
+import net.minecraft.tileentity.*;
+
+import org.bukkit.WeatherType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.event.block.BlockFormEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import org.bukkit.event.weather.ThunderChangeEvent;
+import org.bukkit.event.weather.WeatherChangeEvent;
+// CraftBukkit end
+
 public class WorldServer extends World
 {
     private static final Logger logger = LogManager.getLogger();
     private final MinecraftServer mcServer;
-    private final EntityTracker theEntityTracker;
+    public EntityTracker theEntityTracker; // CraftBukkit - private final -> public
     private final PlayerManager thePlayerManager;
     private Set pendingTickListEntriesHashSet;
-    private TreeSet pendingTickListEntriesTreeSet;
+    private SortedSet pendingTickListEntriesTreeSet;
     public ChunkProviderServer theChunkProviderServer;
     public boolean levelSaving;
     private boolean allPlayersSleeping;
@@ -92,9 +111,13 @@ public class WorldServer extends World
     protected Set<ChunkCoordIntPair> doneChunks = new HashSet<ChunkCoordIntPair>();
     public List<Teleporter> customTeleporters = new ArrayList<Teleporter>();
 
+    // CraftBukkit start
+    public final int dimension;
+
     public WorldServer(MinecraftServer p_i45284_1_, ISaveHandler p_i45284_2_, String p_i45284_3_, int p_i45284_4_, WorldSettings p_i45284_5_, Profiler p_i45284_6_)
     {
         super(p_i45284_2_, p_i45284_3_, p_i45284_5_, WorldProvider.getProviderForDimension(p_i45284_4_), p_i45284_6_);
+        this.dimension = p_i45284_4_;
         this.mcServer = p_i45284_1_;
         this.theEntityTracker = new EntityTracker(this);
         this.thePlayerManager = new PlayerManager(this);
@@ -124,6 +147,47 @@ public class WorldServer extends World
             this.mapStorage.setData("scoreboard", scoreboardsavedata);
         }
 
+        scoreboardsavedata.func_96499_a(this.worldScoreboard);
+        ((ServerScoreboard) this.worldScoreboard).func_96547_a(scoreboardsavedata);
+    }
+
+    // Add env and gen to constructor
+    public WorldServer(MinecraftServer p_i45284_1_, ISaveHandler p_i45284_2_, String p_i45284_3_, int p_i45284_4_, WorldSettings p_i45284_5_,
+            Profiler p_i45284_6_, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen)
+    {
+        super(p_i45284_2_, p_i45284_3_, p_i45284_5_, WorldProvider.getProviderForDimension(p_i45284_4_), p_i45284_6_, gen, env);
+        this.dimension = p_i45284_4_;
+        this.pvpMode = p_i45284_1_.isPVPEnabled();
+        // CraftBukkit end
+        this.mcServer = p_i45284_1_;
+        this.theEntityTracker = new EntityTracker(this);
+        this.thePlayerManager = new PlayerManager(this, spigotConfig.viewDistance); // Spigot
+
+        if (this.entityIdMap == null)
+        {
+            this.entityIdMap = new IntHashMap();
+        }
+
+        if (this.pendingTickListEntriesHashSet == null)
+        {
+            this.pendingTickListEntriesHashSet = Collections.synchronizedSet(new HashSet());
+        }
+
+        if (this.pendingTickListEntriesTreeSet == null)
+        {
+            this.pendingTickListEntriesTreeSet = Collections.synchronizedSortedSet(new TreeSet());
+        }
+
+        this.worldTeleporter = new org.bukkit.craftbukkit.CraftTravelAgent(this); // CraftBukkit
+        this.worldScoreboard = new ServerScoreboard(p_i45284_1_);
+        ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData) this.mapStorage.loadData(ScoreboardSaveData.class, "scoreboard");
+
+        if (scoreboardsavedata == null)
+        {
+            scoreboardsavedata = new ScoreboardSaveData();
+            this.mapStorage.setData("scoreboard", scoreboardsavedata);
+        }
+
         if (!(this instanceof WorldServerMulti)) //Forge: We fix the global mapStorage, which causes us to share scoreboards early. So don't associate the save data with the temporary scoreboard
         {
             scoreboardsavedata.func_96499_a(this.worldScoreboard);
@@ -132,6 +196,31 @@ public class WorldServer extends World
         DimensionManager.setWorld(p_i45284_4_, this);
     }
 
+    public WorldServer(MinecraftServer minecraftServer, ISaveHandler saveHandler, String par2String, WorldProvider provider, WorldSettings par4WorldSettings,
+            Profiler theProfiler)
+    {
+        super(saveHandler, par2String, provider, par4WorldSettings, theProfiler);
+        this.dimension = provider.dimensionId;
+        this.pvpMode = minecraftServer.isPVPEnabled();
+        this.mcServer = minecraftServer;
+        this.theEntityTracker = null;
+        this.thePlayerManager = null;
+        this.worldTeleporter = null;
+    }
+
+    private boolean canSpawn(int x, int z)
+    {
+        if (this.generator != null)
+        {
+            return this.generator.canSpawn(this.getWorld(), x, z);
+        }
+        else
+        {
+            return this.provider.canCoordinateBeSpawn(x, z);
+        }
+    }
+    // CraftBukkit end
+
     public void tick()
     {
         super.tick();
@@ -155,12 +244,19 @@ public class WorldServer extends World
         }
 
         this.theProfiler.startSection("mobSpawner");
+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
+        long time = this.worldInfo.getWorldTotalTime();
 
-        if (this.getGameRules().getGameRuleBooleanValue("doMobSpawning"))
+        if (this.getGameRules().getGameRuleBooleanValue("doMobSpawning") && (this.spawnHostileMobs || this.spawnPeacefulMobs) && (this instanceof WorldServer && this.playerEntities.size() > 0))
         {
-            this.animalSpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            timings.mobSpawn.startTiming(); // Spigot
+            this.animalSpawner.findChunksForSpawning(this, this.spawnHostileMobs
+                    && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.spawnPeacefulMobs
+                    && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            timings.mobSpawn.stopTiming(); // Spigot
         }
-
+        // CraftBukkit end
+        timings.doChunkUnload.startTiming(); // Spigot
         this.theProfiler.endStartSection("chunkSource");
         this.chunkProvider.unloadQueuedChunks();
         int j = this.calculateSkylightSubtracted(1.0F);
@@ -170,30 +266,47 @@ public class WorldServer extends World
             this.skylightSubtracted = j;
         }
 
-        this.worldInfo.incrementTotalWorldTime(this.worldInfo.getWorldTotalTime() + 1L);
+        this.worldInfo.tick();
 
         if (this.getGameRules().getGameRuleBooleanValue("doDaylightCycle"))
         {
             this.worldInfo.setWorldTime(this.worldInfo.getWorldTime() + 1L);
         }
 
+        timings.doChunkUnload.stopTiming(); // Spigot
         this.theProfiler.endStartSection("tickPending");
+        timings.doTickPending.startTiming(); // Spigot
         this.tickUpdates(false);
+        timings.doChunkUnload.stopTiming(); // Spigot
         this.theProfiler.endStartSection("tickBlocks");
+        timings.doTickTiles.startTiming(); // Spigot
         this.func_147456_g();
+        timings.doTickTiles.stopTiming(); // Spigot
         this.theProfiler.endStartSection("chunkMap");
+        timings.doChunkMap.startTiming(); // Spigot
         this.thePlayerManager.updatePlayerInstances();
+        timings.doChunkMap.stopTiming(); // Spigot
         this.theProfiler.endStartSection("village");
+        timings.doVillages.startTiming(); // Spigot
         this.villageCollectionObj.tick();
         this.villageSiegeObj.tick();
+        timings.doVillages.stopTiming(); // Spigot
         this.theProfiler.endStartSection("portalForcer");
+        timings.doPortalForcer.startTiming(); // Spigot
         this.worldTeleporter.removeStalePortalLocations(this.getTotalWorldTime());
         for (Teleporter tele : customTeleporters)
         {
             tele.removeStalePortalLocations(getTotalWorldTime());
         }
+        timings.doPortalForcer.stopTiming(); // Spigot
         this.theProfiler.endSection();
+        timings.doSounds.startTiming(); // Spigot
         this.func_147488_Z();
+        timings.doSounds.stopTiming(); // Spigot
+
+        timings.doChunkGC.startTiming(); // Spigot
+        this.getWorld().processChunkGC(); // CraftBukkit
+        timings.doChunkGC.stopTiming(); // Spigot
     }
 
     public BiomeGenBase.SpawnListEntry spawnRandomCreature(EnumCreatureType p_73057_1_, int p_73057_2_, int p_73057_3_, int p_73057_4_)
@@ -212,7 +325,7 @@ public class WorldServer extends World
         {
             EntityPlayer entityplayer = (EntityPlayer)iterator.next();
 
-            if (!entityplayer.isPlayerSleeping())
+            if (!entityplayer.isPlayerSleeping() && !entityplayer.fauxSleeping)   // CraftBukkit
             {
                 this.allPlayersSleeping = false;
                 break;
@@ -240,7 +353,25 @@ public class WorldServer extends World
 
     private void resetRainAndThunder()
     {
-        provider.resetRainAndThunder();
+        // CraftBukkit start
+        WeatherChangeEvent weather = new WeatherChangeEvent(this.getWorld(), false);
+        this.getServer().getPluginManager().callEvent(weather);
+        ThunderChangeEvent thunder = new ThunderChangeEvent(this.getWorld(), false);
+        this.getServer().getPluginManager().callEvent(thunder);
+
+        if (!weather.isCancelled())
+        {
+            this.worldInfo.setRainTime(0);
+            this.worldInfo.setRaining(false);
+        }
+
+        if (!thunder.isCancelled())
+        {
+            this.worldInfo.setThunderTime(0);
+            this.worldInfo.setThundering(false);
+        }
+        // CraftBukkit end
+        if (!weather.isCancelled() && !thunder.isCancelled()) provider.resetRainAndThunder(); // Cauldron
     }
 
     public boolean areAllPlayersAsleep()
@@ -248,19 +379,26 @@ public class WorldServer extends World
         if (this.allPlayersSleeping && !this.isRemote)
         {
             Iterator iterator = this.playerEntities.iterator();
+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
+            boolean foundActualSleepers = false;
             EntityPlayer entityplayer;
 
             do
             {
                 if (!iterator.hasNext())
                 {
-                    return true;
+                    return foundActualSleepers; // CraftBukkit
                 }
 
                 entityplayer = (EntityPlayer)iterator.next();
+                // CraftBukkit start
+                if (entityplayer.isPlayerFullyAsleep())
+                {
+                    foundActualSleepers = true;
+                }
             }
-            while (entityplayer.isPlayerFullyAsleep());
-
+            while (entityplayer.isPlayerFullyAsleep() || entityplayer.fauxSleeping);
+            // CraftBukkit end
             return false;
         }
         else
@@ -302,15 +440,29 @@ public class WorldServer extends World
         super.func_147456_g();
         int i = 0;
         int j = 0;
-        Iterator iterator = this.activeChunkSet.iterator();
+        // Iterator iterator = this.activeChunkSet.iterator();
 
-        while (iterator.hasNext())
+        // Spigot start
+        for (gnu.trove.iterator.TLongShortIterator iter = activeChunkSet_CB.iterator(); iter.hasNext();)
         {
-            ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair)iterator.next();
-            int k = chunkcoordintpair.chunkXPos * 16;
-            int l = chunkcoordintpair.chunkZPos * 16;
+            iter.advance();
+            long chunkCoord = iter.key();
+            int chunkX = World.keyToX(chunkCoord);
+            int chunkZ = World.keyToZ(chunkCoord);
+            // If unloaded, or in process of being unloaded, drop it
+            if ((!this.chunkExists(chunkX, chunkZ)) || (this.theChunkProviderServer.chunksToUnload.contains(chunkX, chunkZ)))
+            {
+                activeChunkSet.remove(new ChunkCoordIntPair(chunkX, chunkZ)); // Cauldron - vanilla compatibility
+                iter.remove();
+                continue;
+            }
+            // Spigot end
+            // ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator.next();
+            int k = chunkX * 16;
+            int l = chunkZ * 16;
+
             this.theProfiler.startSection("getChunk");
-            Chunk chunk = this.getChunkFromChunkCoords(chunkcoordintpair.chunkXPos, chunkcoordintpair.chunkZPos);
+            Chunk chunk = this.getChunkFromChunkCoords(chunkX, chunkZ);
             this.func_147467_a(k, l, chunk);
             this.theProfiler.endStartSection("tickChunk");
             chunk.func_150804_b(false);
@@ -346,12 +498,32 @@ public class WorldServer extends World
 
                 if (this.isBlockFreezableNaturally(j1 + k, l1 - 1, k1 + l))
                 {
-                    this.setBlock(j1 + k, l1 - 1, k1 + l, Blocks.ice);
+                    // CraftBukkit start
+                    BlockState blockState = this.getWorld().getBlockAt(j1 + k, l1 - 1, k1 + l).getState();
+                    blockState.setTypeId(Block.getIdFromBlock(Blocks.ice));
+                    BlockFormEvent iceBlockForm = new BlockFormEvent(blockState.getBlock(), blockState);
+                    this.getServer().getPluginManager().callEvent(iceBlockForm);
+
+                    if (!iceBlockForm.isCancelled())
+                    {
+                        blockState.update(true);
+                    }
+                    // CraftBukkit end
                 }
 
                 if (this.isRaining() && this.func_147478_e(j1 + k, l1, k1 + l, true))
                 {
-                    this.setBlock(j1 + k, l1, k1 + l, Blocks.snow_layer);
+                    // CraftBukkit start
+                    BlockState blockState = this.getWorld().getBlockAt(j1 + k, l1, k1 + l).getState();
+                    blockState.setTypeId(Block.getIdFromBlock(Blocks.snow_layer));
+                    BlockFormEvent snow = new BlockFormEvent(blockState.getBlock(), blockState);
+                    this.getServer().getPluginManager().callEvent(snow);
+
+                    if (!snow.isCancelled())
+                    {
+                        blockState.update(true);
+                    }
+                    // CraftBukkit end
                 }
 
                 if (this.isRaining())
@@ -388,6 +560,7 @@ public class WorldServer extends World
                         if (block.getTickRandomly())
                         {
                             ++i;
+                            this.growthOdds = (iter.value() < 1) ? this.modifiedOdds : 100; // Spigot - grow fast if no players are in this chunk (value = player count)
                             block.updateTick(this, j2 + k, l2 + extendedblockstorage.getYLocation(), k2 + l, this.rand);
                         }
                     }
@@ -396,6 +569,13 @@ public class WorldServer extends World
 
             this.theProfiler.endSection();
         }
+        // Spigot Start
+        if (this.getSpigotConfig().clearChunksOnTick) // Cauldron
+        {
+            activeChunkSet_CB.clear();
+            activeChunkSet.clear(); // Cauldron
+        }
+        // Spigot End
     }
 
     public boolean isBlockTickScheduledThisTick(int p_147477_1_, int p_147477_2_, int p_147477_3_, Block p_147477_4_)
@@ -474,7 +654,7 @@ public class WorldServer extends World
 
     public void updateEntities()
     {
-        if (this.playerEntities.isEmpty() && getPersistentChunks().isEmpty())
+        if (this.playerEntities.isEmpty() && getPersistentChunks().isEmpty()) // Cauldron Use Forge logic here
         {
             if (this.updateEntityTick++ >= 1200)
             {
@@ -506,7 +686,16 @@ public class WorldServer extends World
         {
             if (i > 1000)
             {
-                i = 1000;
+                // CraftBukkit start - If the server has too much to process over time, try to alleviate that
+                if (i > 20 * 1000)
+                {
+                    i = i / 20;
+                }
+                else
+                {
+                    i = 1000;
+                }
+                // CraftBukkit end
             }
 
             this.theProfiler.startSection("cleaning");
@@ -651,7 +840,37 @@ public class WorldServer extends World
     protected IChunkProvider createChunkProvider()
     {
         IChunkLoader ichunkloader = this.saveHandler.getChunkLoader(this.provider);
-        this.theChunkProviderServer = new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+        // Cauldron start - if provider is vanilla, proceed to create a bukkit compatible chunk generator
+        if (this.provider.getClass().toString().length() <= 3 || this.provider.getClass().toString().contains("net.minecraft"))
+        {
+            // CraftBukkit start
+            org.bukkit.craftbukkit.generator.InternalChunkGenerator gen;
+
+            if (this.generator != null)
+            {
+                gen = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, this.getSeed(), this.generator);
+            }
+            else if (this.provider instanceof WorldProviderHell)
+            {
+                gen = new org.bukkit.craftbukkit.generator.NetherChunkGenerator(this, this.getSeed());
+            }
+            else if (this.provider instanceof WorldProviderEnd)
+            {
+                gen = new org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator(this, this.getSeed());
+            }
+            else
+            {
+                gen = new org.bukkit.craftbukkit.generator.NormalChunkGenerator(this, this.getSeed());
+            }
+            this.theChunkProviderServer = new ChunkProviderServer(this, ichunkloader, gen);
+            // CraftBukkit end
+        }
+        else
+        // custom provider, load normally for forge compatibility
+        {
+            this.theChunkProviderServer = new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+        }
+        // Cauldron end
         return this.theChunkProviderServer;
     }
 
@@ -659,29 +878,31 @@ public class WorldServer extends World
     {
         ArrayList arraylist = new ArrayList();
 
-        for(int x = (p_147486_1_ >> 4); x <= (p_147486_4_ >> 4); x++)
+        // CraftBukkit start - Get tile entities from chunks instead of world
+        for (int chunkX = (p_147486_1_ >> 4); chunkX <= ((p_147486_4_ - 1) >> 4); chunkX++)
         {
-            for(int z = (p_147486_3_ >> 4); z <= (p_147486_6_ >> 4); z++)
+            for (int chunkZ = (p_147486_3_ >> 4); chunkZ <= ((p_147486_6_ - 1) >> 4); chunkZ++)
             {
-                Chunk chunk = getChunkFromChunkCoords(x, z);
-                if (chunk != null)
+                Chunk chunk = getChunkFromChunkCoords(chunkX, chunkZ);
+
+                if (chunk == null)
+                {
+                    continue;
+                }
+
+                for (Object te : chunk.chunkTileEntityMap.values())
                 {
-                    for(Object obj : chunk.chunkTileEntityMap.values())
+                    TileEntity tileentity = (TileEntity) te;
+
+                    if ((tileentity.xCoord >= p_147486_1_) && (tileentity.yCoord >= p_147486_2_) && (tileentity.zCoord >= p_147486_3_)
+                            && (tileentity.xCoord < p_147486_4_) && (tileentity.yCoord < p_147486_5_) && (tileentity.zCoord < p_147486_6_))
                     {
-                        TileEntity entity = (TileEntity)obj;
-                        if (!entity.isInvalid())
-                        {
-                            if (entity.xCoord >= p_147486_1_ && entity.yCoord >= p_147486_2_ && entity.zCoord >= p_147486_3_ &&
-                                entity.xCoord <= p_147486_4_ && entity.yCoord <= p_147486_5_ && entity.zCoord <= p_147486_6_)
-                            {
-                                arraylist.add(entity);
-                            }
-                        }
+                        arraylist.add(tileentity);
                     }
                 }
             }
         }
-
+        // CraftBukkit end
         return arraylist;
     }
 
@@ -733,7 +954,28 @@ public class WorldServer extends World
             int i = 0;
             int j = this.provider.getAverageGroundLevel();
             int k = 0;
+            // CraftBukkit start
+            if (this.generator != null)
+            {
+                Random rand = new Random(this.getSeed());
+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
 
+                if (spawn != null)
+                {
+                    if (spawn.getWorld() != ((WorldServer) this).getWorld())
+                    {
+                        throw new IllegalStateException("Cannot set spawn point for " + this.worldInfo.getWorldName() + " to be in another world ("
+                                + spawn.getWorld().getName() + ")");
+                    }
+                    else
+                    {
+                        this.worldInfo.setSpawnPosition(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ());
+                        this.findingSpawnPoint = false;
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
             if (chunkposition != null)
             {
                 i = chunkposition.chunkPosX;
@@ -876,6 +1118,20 @@ public class WorldServer extends World
 
     public boolean addWeatherEffect(Entity p_72942_1_)
     {
+        // Cauldron start - vanilla compatibility
+        if (p_72942_1_ instanceof net.minecraft.entity.effect.EntityLightningBolt)
+        {
+            // CraftBukkit start
+            LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) p_72942_1_.getBukkitEntity());
+            this.getServer().getPluginManager().callEvent(lightning);
+
+            if (lightning.isCancelled())
+            {
+                return false;
+            }
+            // CraftBukkit end
+        }
+        // Cauldron end
         if (super.addWeatherEffect(p_72942_1_))
         {
             this.mcServer.getConfigurationManager().sendToAllNear(p_72942_1_.posX, p_72942_1_.posY, p_72942_1_.posZ, 512.0D, this.provider.dimensionId, new S2CPacketSpawnGlobalEntity(p_72942_1_));
@@ -894,13 +1150,23 @@ public class WorldServer extends World
 
     public Explosion newExplosion(Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_)
     {
+        // CraftBukkit start
+        Explosion explosion = super.newExplosion(p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
+
+        if (explosion.wasCanceled)
+        {
+            return explosion;
+        }
+
+        /* Remove
         Explosion explosion = new Explosion(this, p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_);
         explosion.isFlaming = p_72885_9_;
         explosion.isSmoking = p_72885_10_;
         if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
         explosion.doExplosionA();
         explosion.doExplosionB(false);
-
+        */
+        // CraftBukkit end - TODO: Check if explosions are still properly implemented
         if (!p_72885_10_)
         {
             explosion.affectedBlockPositions.clear();
@@ -977,7 +1243,7 @@ public class WorldServer extends World
     {
         boolean flag = this.isRaining();
         super.updateWeather();
-
+        /* CraftBukkit start
         if (this.prevRainingStrength != this.rainingStrength)
         {
             this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(7, this.rainingStrength), this.provider.dimensionId);
@@ -988,10 +1254,6 @@ public class WorldServer extends World
             this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(8, this.thunderingStrength), this.provider.dimensionId);
         }
 
-        /*The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
-        rather than to all players on the server. This is what causes the client-side rain, as the
-        client believes that it has started raining locally, rather than in another dimension.
-        */
         if (flag != this.isRaining())
         {
             if (flag)
@@ -1006,6 +1268,33 @@ public class WorldServer extends World
             this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(7, this.rainingStrength), this.provider.dimensionId);
             this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(8, this.thunderingStrength), this.provider.dimensionId);
         }
+        // */
+        if (flag != this.isRaining())
+        {
+            if (flag)
+            {
+                this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(2, 0.0F), super.provider.dimensionId);
+            }
+            else
+            {
+                this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(1, 0.0F), super.provider.dimensionId);
+            }
+
+            this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(7, super.rainingStrength),
+                    super.provider.dimensionId);
+            this.mcServer.getConfigurationManager().sendPacketToAllPlayersInDimension(new S2BPacketChangeGameState(8, super.thunderingStrength),
+                    super.provider.dimensionId);
+
+            // Only send weather packets to those affected
+            for (int i = 0; i < this.playerEntities.size(); ++i)
+            {
+                if (((EntityPlayerMP) this.playerEntities.get(i)).worldObj == this)
+                {
+                    ((EntityPlayerMP) this.playerEntities.get(i)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                }
+            }
+            // CraftBukkit end
+        }
     }
 
     protected int func_152379_p()
@@ -1069,4 +1358,51 @@ public class WorldServer extends World
                 this();
             }
         }
+
+    // CraftBukkit start - Compatibility methods for BlockChangeDelegate
+    public boolean setRawTypeId(int x, int y, int z, int typeId)
+    {
+        return this.setBlock(x, y, z, Block.getBlockById(typeId), 0, 4);
+    }
+
+    public boolean setRawTypeIdAndData(int x, int y, int z, int typeId, int data)
+    {
+        return this.setBlock(x, y, z, Block.getBlockById(typeId), data, 4);
+    }
+
+    public boolean setTypeId(int x, int y, int z, int typeId)
+    {
+        return this.setBlock(x, y, z, Block.getBlockById(typeId), 0, 3);
+    }
+
+    public boolean setTypeIdAndData(int x, int y, int z, int typeId, int data)
+    {
+        return this.setBlock(x, y, z, Block.getBlockById(typeId), data, 3);
+    }
+
+    public int getTypeId(int x, int y, int z)
+    {
+        return Block.getIdFromBlock(getBlock(x, y, z));
+    }
+
+    public boolean setTypeAndData(int x, int y, int z, Block block, int data, int flag)
+    {
+        return this.setBlock(x, y, z, block, data, flag);
+    }
+
+    public boolean setData(int x, int y, int z, int data, int flag)
+    {
+        return this.setBlockMetadataWithNotify(x, y, z, data, flag);
+    }
+
+    public int getData(int x, int y, int z)
+    {
+        return this.getBlockMetadata(x, y, z);
+    }
+
+    public Block getType(int x, int y, int z)
+    {
+        return this.getBlock(x, y, z);
+    }
+    // CraftBukkit end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/WorldServerMulti.java ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldServerMulti.java
index 75ecae2..0e99c8b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/WorldServerMulti.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldServerMulti.java
@@ -9,16 +9,35 @@ public class WorldServerMulti extends WorldServer
 {
     private static final String __OBFID = "CL_00001430";
 
+    // CraftBukkit start - Add Environment and ChunkGenerator arguments
+    public WorldServerMulti(MinecraftServer p_i45283_1_, ISaveHandler p_i45283_2_, String p_i45283_3_, int p_i45283_4_, WorldSettings p_i45283_5_, WorldServer p_i45283_6_, Profiler p_i45283_7_, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen)
+    {
+        super(p_i45283_1_, p_i45283_2_, p_i45283_3_, p_i45283_4_, p_i45283_5_, p_i45283_7_, env, gen);
+        // CraftBukkit end
+        this.mapStorage = p_i45283_6_.mapStorage;
+        this.worldScoreboard = p_i45283_6_.getScoreboard();
+        //this.worldInfo = new DerivedWorldInfo(p_i45283_6_.getWorldInfo());
+        //this.worldInfo.setWorldName(p_i45283_3_);
+    }
+
+    // Cauldron start - vanilla compatibility
     public WorldServerMulti(MinecraftServer p_i45283_1_, ISaveHandler p_i45283_2_, String p_i45283_3_, int p_i45283_4_, WorldSettings p_i45283_5_, WorldServer p_i45283_6_, Profiler p_i45283_7_)
     {
         super(p_i45283_1_, p_i45283_2_, p_i45283_3_, p_i45283_4_, p_i45283_5_, p_i45283_7_);
         this.mapStorage = p_i45283_6_.mapStorage;
         this.worldScoreboard = p_i45283_6_.getScoreboard();
         this.worldInfo = new DerivedWorldInfo(p_i45283_6_.getWorldInfo());
+        //this.worldInfo.setWorldName(p_i45283_3_);
     }
+    // Cauldron end
 
+    /* we handle all saving including perWorldStorage in WorldServer.saveLevel. This needs to be disabled since we follow
+    // bukkit's world saving methods by using a seperate save handler for each world. Each world folder needs to generate a corresponding 
+    // level.dat for plugins that require it such as MultiWorld.
     protected void saveLevel() throws MinecraftException
     {
         this.perWorldStorage.saveAllData();
     }
+    */
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/WorldType.java ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldType.java
index 8b18f86..dcbec3d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/WorldType.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/WorldType.java
@@ -19,6 +19,7 @@ import net.minecraft.world.gen.layer.GenLayerBiomeEdge;
 import net.minecraft.world.gen.layer.GenLayerZoom;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+import net.minecraftforge.common.util.EnumHelper; // Cauldron
 
 public class WorldType
 {
@@ -49,6 +50,12 @@ public class WorldType
         this.canBeCreated = true;
         this.worldTypeId = p_i1960_1_;
         worldTypes[p_i1960_1_] = this;
+        // Cauldron start - add worldtype for bukkit if it does not already exist
+        if (org.bukkit.WorldType.getByName(p_i1960_2_) == null)
+        {
+            EnumHelper.addBukkitWorldType(p_i1960_2_);
+        }
+        // Cauldron end
     }
 
     public String getWorldTypeName()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/biome/BiomeDecorator.java ./eclipse/cauldron/src/main/java/net/minecraft/world/biome/BiomeDecorator.java
index dac10c8..a8bcc9a 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/biome/BiomeDecorator.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/biome/BiomeDecorator.java
@@ -24,6 +24,14 @@ import static net.minecraftforge.event.terraingen.OreGenEvent.GenerateMinable.Ev
 import net.minecraftforge.common.*;
 import net.minecraftforge.event.terraingen.*;
 
+// Spigot Start
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import net.minecraft.world.chunk.Chunk;
+// Spigot End
+
 public class BiomeDecorator
 {
     public World currentWorld;
@@ -61,6 +69,7 @@ public class BiomeDecorator
     public int clayPerChunk;
     public int bigMushroomsPerChunk;
     public boolean generateLakes;
+    private final List<Chunk> chunksToUnload = new ArrayList<Chunk>(); // Spigot
     private static final String __OBFID = "CL_00000164";
 
     public BiomeDecorator()
@@ -194,7 +203,7 @@ public class BiomeDecorator
         {
             k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2);
+            i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); // Spigot
             WorldGenerator worldgenerator = p_150513_1_.getRandomWorldGenForGrass(this.randomGenerator);
             worldgenerator.generate(this.currentWorld, this.randomGenerator, k, i1, l);
         }
@@ -204,7 +213,7 @@ public class BiomeDecorator
         {
             k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2);
+            i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); // Spigot
             (new WorldGenDeadBush(Blocks.deadbush)).generate(this.currentWorld, this.randomGenerator, k, i1, l);
         }
 
@@ -214,7 +223,7 @@ public class BiomeDecorator
             k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 
-            for (i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2); i1 > 0 && this.currentWorld.isAirBlock(k, i1 - 1, l); --i1)
+            for (i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); i1 > 0 && this.currentWorld.isAirBlock(k, i1 - 1, l); --i1)  // Spigot
             {
                 ;
             }
@@ -229,7 +238,7 @@ public class BiomeDecorator
             {
                 k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
                 l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-                i1 = this.currentWorld.getHeightValue(k, l);
+                i1 = this.getHighestBlockYAt(k, l); // Spigot
                 this.mushroomBrownGen.generate(this.currentWorld, this.randomGenerator, k, i1, l);
             }
 
@@ -237,7 +246,7 @@ public class BiomeDecorator
             {
                 k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
                 l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-                i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2);
+                i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); // Spigot
                 this.mushroomRedGen.generate(this.currentWorld, this.randomGenerator, k, i1, l);
             }
         }
@@ -246,7 +255,7 @@ public class BiomeDecorator
         {
             j = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             k = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            l = nextInt(this.currentWorld.getHeightValue(j, k) * 2);
+            l = nextInt(this.getHighestBlockYAt(j, k) * 2); // Spigot
             this.mushroomBrownGen.generate(this.currentWorld, this.randomGenerator, j, l, k);
         }
 
@@ -254,7 +263,7 @@ public class BiomeDecorator
         {
             j = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             k = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            l = nextInt(this.currentWorld.getHeightValue(j, k) * 2);
+            l = nextInt(this.getHighestBlockYAt(j, k) * 2); // Spigot
             this.mushroomRedGen.generate(this.currentWorld, this.randomGenerator, j, l, k);
         }
 
@@ -263,7 +272,7 @@ public class BiomeDecorator
         {
             k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2);
+            i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); // Spigot
             this.reedGen.generate(this.currentWorld, this.randomGenerator, k, i1, l);
         }
 
@@ -271,7 +280,7 @@ public class BiomeDecorator
         {
             k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2);
+            i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); // Spigot
             this.reedGen.generate(this.currentWorld, this.randomGenerator, k, i1, l);
         }
 
@@ -280,7 +289,7 @@ public class BiomeDecorator
         {
             j = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             k = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            l = nextInt(this.currentWorld.getHeightValue(j, k) * 2);
+            l = nextInt(this.getHighestBlockYAt(j, k) * 2); // Spigot
             (new WorldGenPumpkin()).generate(this.currentWorld, this.randomGenerator, j, l, k);
         }
 
@@ -289,7 +298,7 @@ public class BiomeDecorator
         {
             k = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
             l = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-            i1 = nextInt(this.currentWorld.getHeightValue(k, l) * 2);
+            i1 = nextInt(this.getHighestBlockYAt(k, l) * 2); // Spigot
             this.cactusGen.generate(this.currentWorld, this.randomGenerator, k, i1, l);
         }
 
@@ -313,6 +322,7 @@ public class BiomeDecorator
             }
         }
 
+        this.unloadChunks(); // Spigot - unload chunks we force loaded
         MinecraftForge.EVENT_BUS.post(new DecorateBiomeEvent.Post(currentWorld, randomGenerator, chunk_X, chunk_Z));
     }
 
@@ -360,6 +370,31 @@ public class BiomeDecorator
         MinecraftForge.ORE_GEN_BUS.post(new OreGenEvent.Post(currentWorld, randomGenerator, chunk_X, chunk_Z));
     }
 
+    // Spigot start - force load chunks
+    private int getHighestBlockYAt(int i, int j)
+    {
+        // Make sure the chunk is loaded
+        if (!this.currentWorld.chunkExists(i >> 4, j >> 4))
+        {
+            // If not, load it, then add it to our unload list
+            this.chunksToUnload.add(this.currentWorld.getChunkFromChunkCoords(i >> 4, j >> 4));
+        }
+
+        return this.currentWorld.getHeightValue(i, j);
+    }
+
+    private void unloadChunks()
+    {
+        Iterator<Chunk> iter = this.chunksToUnload.iterator();
+
+        while (iter.hasNext())
+        {
+            this.currentWorld.getWorld().unloadChunk(iter.next().bukkitChunk);
+            iter.remove();
+        }
+    }
+    // Spigot end
+
     private int nextInt(int i) {
         if (i <= 1)
             return 0;
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/Chunk.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/Chunk.java
index 65b90b0..1103057 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -36,6 +36,17 @@ import net.minecraftforge.event.world.ChunkEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.block.BlockContainer;
+import org.bukkit.Bukkit;
+// CraftBukkit end
+// Spigot start
+import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.inventory.IInventory;
+// Spigot end
+
 public class Chunk
 {
     private static final Logger logger = LogManager.getLogger();
@@ -62,6 +73,8 @@ public class Chunk
     public int heightMapMinimum;
     public long inhabitedTime;
     private int queuedLightChecks;
+    public gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot (Cauldron protected -> public)
+    public int lastAccessedTick; // Cauldron track last time the chunk was accessed
     private static final String __OBFID = "CL_00000373";
 
     public Chunk(World p_i1995_1_, int p_i1995_2_, int p_i1995_3_)
@@ -80,13 +93,22 @@ public class Chunk
 
         for (int k = 0; k < this.entityLists.length; ++k)
         {
-            this.entityLists[k] = new ArrayList();
+            this.entityLists[k] = new org.bukkit.craftbukkit.util.UnsafeList(); // CraftBukkit - ArrayList -> UnsafeList
         }
 
         Arrays.fill(this.precipitationHeightMap, -999);
         Arrays.fill(this.blockBiomeArray, (byte) - 1);
+        // CraftBukkit start
+        if (!(this instanceof EmptyChunk))
+        {
+            this.bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+        }
     }
 
+    public org.bukkit.Chunk bukkitChunk;
+    public boolean mustSave;
+    // CraftBukkit end
+
     public Chunk(World p_i45446_1_, Block[] p_i45446_2_, int p_i45446_3_, int p_i45446_4_)
     {
         this(p_i45446_1_, p_i45446_3_, p_i45446_4_);
@@ -512,10 +534,10 @@ public class Chunk
 
             if (extendedblockstorage != null)
             {
-                try
-                {
+                /*try
+                {*/ // Exception handled by high-level class with safier deletion
                     block = extendedblockstorage.getBlockByExtId(p_150810_1_, p_150810_2_ & 15, p_150810_3_);
-                }
+                /*}
                 catch (Throwable throwable)
                 {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Getting block");
@@ -529,7 +551,7 @@ public class Chunk
                         }
                     });
                     throw new ReportedException(crashreport);
-                }
+                }*/
             }
         }
 
@@ -589,9 +611,10 @@ public class Chunk
 
             if (!this.worldObj.isRemote)
             {
+                if (block1 == null) return false; // Cauldron
                 block1.onBlockPreDestroy(this.worldObj, l1, p_150807_2_, i2, k1);
             }
-
+            // Cauldron - Removed CB patch that fixes BUKKIT-5238 to prevent stackoverflows. See issue #1165 and #1169
             extendedblockstorage.func_150818_a(p_150807_1_, p_150807_2_ & 15, p_150807_3_, p_150807_4_);
             extendedblockstorage.setExtBlockMetadata(p_150807_1_, p_150807_2_ & 15, p_150807_3_, p_150807_5_); // This line duplicates the one below, so breakBlock fires with valid worldstate
 
@@ -777,8 +800,20 @@ public class Chunk
 
         if (i != this.xPosition || j != this.zPosition)
         {
-            logger.warn("Wrong location! " + p_76612_1_ + " (at " + i + ", " + j + " instead of " + this.xPosition + ", " + this.zPosition + ")");
-            Thread.dumpStack();
+            // CraftBukkit start
+            Bukkit.getLogger().warning("Wrong location for " + p_76612_1_ + " in world '" + worldObj.getWorld().getName() + "'!");
+            //logger.warn("Wrong location! " + p_76612_1_ + " (at " + i + ", " + j + " instead of " + this.xPosition + ", " + this.zPosition + ")");
+            //Thread.dumpStack();
+            Bukkit.getLogger().warning(
+                    "Entity is at " + p_76612_1_.posX + "," + p_76612_1_.posZ + " (chunk " + i + "," + j + ") but was stored in chunk " + this.xPosition + ","
+                            + this.zPosition);
+            if (!(p_76612_1_ instanceof EntityPlayerMP))
+            {
+                Bukkit.getLogger().warning("Cauldron has removed " + p_76612_1_ + " to prevent a server crash.");
+                p_76612_1_.setDead();
+                return;
+            }
+            // CraftBukkit end
         }
 
         int k = MathHelper.floor_double(p_76612_1_.posY / 16.0D);
@@ -799,6 +834,26 @@ public class Chunk
         p_76612_1_.chunkCoordY = k;
         p_76612_1_.chunkCoordZ = this.zPosition;
         this.entityLists[k].add(p_76612_1_);
+        // Spigot start - increment creature type count
+        // Keep this synced up with World.a(Class)
+        if (p_76612_1_ instanceof EntityLiving)
+        {
+            EntityLiving entityliving = (EntityLiving) p_76612_1_;
+
+            if (entityliving.canDespawn_CB() && entityliving.isNoDespawnRequired())
+            {
+                return;
+            }
+        }
+
+        for (EnumCreatureType creatureType : EnumCreatureType.values())
+        {
+            if (creatureType.getCreatureClass().isAssignableFrom(p_76612_1_.getClass()))
+            {
+                this.entityCount.adjustOrPutValue(creatureType.getCreatureClass(), 1, 1);
+            }
+        }
+        // Spigot end
     }
 
     public void removeEntity(Entity p_76622_1_)
@@ -819,6 +874,26 @@ public class Chunk
         }
 
         this.entityLists[p_76608_2_].remove(p_76608_1_);
+        // Spigot start - decrement creature type count
+        // Keep this synced up with World.a(Class)
+        if (p_76608_1_ instanceof EntityLiving)
+        {
+            EntityLiving entityliving = (EntityLiving) p_76608_1_;
+
+            if (entityliving.canDespawn_CB() && entityliving.isNoDespawnRequired())
+            {
+                return;
+            }
+        }
+
+        for (EnumCreatureType creatureType : EnumCreatureType.values())
+        {
+            if (creatureType.getCreatureClass().isAssignableFrom(p_76608_1_.getClass()))
+            {
+                this.entityCount.adjustValue(creatureType.getCreatureClass(), -1);
+            }
+        }
+        // Spigot end
     }
 
     public boolean canBlockSeeTheSky(int p_76619_1_, int p_76619_2_, int p_76619_3_)
@@ -874,9 +949,23 @@ public class Chunk
         p_150812_4_.xCoord = this.xPosition * 16 + p_150812_1_;
         p_150812_4_.yCoord = p_150812_2_;
         p_150812_4_.zCoord = this.zPosition * 16 + p_150812_3_;
+        // Cauldron start - validate TE for corrupted data
+        Block block = null;
+        try
+        {
+            block = this.getBlock(p_150812_1_, p_150812_2_, p_150812_3_);
+        }
+        catch (ArrayIndexOutOfBoundsException e)
+        {
+            System.out.println("ERROR: Detected corrupted TileEntity " + p_150812_4_ + " with bad extended block ID of "
+                    + ((p_150812_2_ & 15) << 8 | p_150812_3_ << 4 | p_150812_1_) + " @  " + p_150812_4_.xCoord + ", " + p_150812_4_.yCoord + ", "
+                    + p_150812_4_.zCoord + ". Removing TE to avoid crash...");
+            p_150812_4_.invalidate();
+            return;
+        }
 
         int metadata = getBlockMetadata(p_150812_1_, p_150812_2_, p_150812_3_);
-        if (this.getBlock(p_150812_1_, p_150812_2_, p_150812_3_).hasTileEntity(metadata))
+        if (block != null && block.hasTileEntity(metadata)) // Cauldron end
         {
             if (this.chunkTileEntityMap.containsKey(chunkposition))
             {
@@ -886,6 +975,16 @@ public class Chunk
             p_150812_4_.validate();
             this.chunkTileEntityMap.put(chunkposition, p_150812_4_);
         }
+        // CraftBukkit start
+        else if (net.minecraft.server.MinecraftServer.getServer().tileEntityConfig.enableTEPlaceWarning.getValue()) // Cauldron
+        {
+            System.out.println("Attempted to place a tile entity (" + p_150812_4_ + ") at " + p_150812_4_.xCoord + "," + p_150812_4_.yCoord + ","
+                    + p_150812_4_.zCoord + " (" + org.bukkit.Material.getMaterial(Block.getIdFromBlock(getBlock(p_150812_1_, p_150812_2_, p_150812_3_)))
+                    + ") where there was no entity tile!");
+            System.out.println("Chunk coordinates: " + (this.xPosition * 16) + "," + (this.zPosition * 16));
+            new Exception().printStackTrace();
+        }
+        // CraftBukkit end
     }
 
     public void removeTileEntity(int p_150805_1_, int p_150805_2_, int p_150805_3_)
@@ -936,6 +1035,21 @@ public class Chunk
 
         for (int i = 0; i < this.entityLists.length; ++i)
         {
+            // CraftBukkit start
+            java.util.Iterator iter = this.entityLists[i].iterator();
+
+            while (iter.hasNext())
+            {
+                Entity entity = (Entity) iter.next();
+
+                // Do not pass along players, as doing so can get them stuck outside of time.
+                // (which for example disables inventory icon updates and prevents block breaking)
+                if (entity instanceof EntityPlayerMP)
+                {
+                    iter.remove();
+                }
+            }
+            // CraftBukkit end
             this.worldObj.unloadEntities(this.entityLists[i]);
         }
         MinecraftForge.EVENT_BUS.post(new ChunkEvent.Unload(this));
@@ -1025,7 +1139,7 @@ public class Chunk
 
     public Random getRandomWithSeed(long p_76617_1_)
     {
-        return new Random(this.worldObj.getSeed() + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ p_76617_1_);
+        return new Random(this.worldObj.getSeed() + (4987142L * this.xPosition * this.xPosition) + (5947611L * this.xPosition) + (4392871L * this.zPosition * this.zPosition) + (389711L * this.zPosition) ^ p_76617_1_);
     }
 
     public boolean isEmpty()
@@ -1035,6 +1149,7 @@ public class Chunk
 
     public void populateChunk(IChunkProvider p_76624_1_, IChunkProvider p_76624_2_, int p_76624_3_, int p_76624_4_)
     {
+        worldObj.timings.syncChunkLoadPostTimer.startTiming(); // Spigot
         if (!this.isTerrainPopulated && p_76624_1_.chunkExists(p_76624_3_ + 1, p_76624_4_ + 1) && p_76624_1_.chunkExists(p_76624_3_, p_76624_4_ + 1) && p_76624_1_.chunkExists(p_76624_3_ + 1, p_76624_4_))
         {
             p_76624_1_.populate(p_76624_2_, p_76624_3_, p_76624_4_);
@@ -1054,6 +1169,7 @@ public class Chunk
         {
             p_76624_1_.populate(p_76624_2_, p_76624_3_ - 1, p_76624_4_ - 1);
         }
+        worldObj.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot
     }
 
     public int getPrecipitationHeight(int p_76626_1_, int p_76626_2_)
@@ -1104,7 +1220,8 @@ public class Chunk
 
     public boolean func_150802_k()
     {
-        return this.field_150815_m && this.isTerrainPopulated && this.isLightPopulated;
+        //return this.field_150815_m && this.isTerrainPopulated && this.isLightPopulated;
+        return true;
     }
 
     public ChunkCoordIntPair getChunkCoordIntPair()
@@ -1184,8 +1301,10 @@ public class Chunk
             if ((p_76607_2_ & 1 << l) != 0 && this.storageArrays[l] != null)
             {
                 nibblearray = this.storageArrays[l].getMetadataArray();
-                System.arraycopy(p_76607_1_, k, nibblearray.data, 0, nibblearray.data.length);
-                k += nibblearray.data.length;
+                // Spigot start
+                System.arraycopy(p_76607_1_, k, nibblearray.getValueArray(), 0, nibblearray.getValueArray().length);
+                k += nibblearray.getValueArray().length;
+                // Spigot end
             }
         }
 
@@ -1194,8 +1313,10 @@ public class Chunk
             if ((p_76607_2_ & 1 << l) != 0 && this.storageArrays[l] != null)
             {
                 nibblearray = this.storageArrays[l].getBlocklightArray();
-                System.arraycopy(p_76607_1_, k, nibblearray.data, 0, nibblearray.data.length);
-                k += nibblearray.data.length;
+                // Spigot start
+                System.arraycopy(p_76607_1_, k, nibblearray.getValueArray(), 0, nibblearray.getValueArray().length);
+                k += nibblearray.getValueArray().length;
+                // Spigot end
             }
         }
 
@@ -1206,8 +1327,10 @@ public class Chunk
                 if ((p_76607_2_ & 1 << l) != 0 && this.storageArrays[l] != null)
                 {
                     nibblearray = this.storageArrays[l].getSkylightArray();
-                    System.arraycopy(p_76607_1_, k, nibblearray.data, 0, nibblearray.data.length);
-                    k += nibblearray.data.length;
+                    // Spigot start
+                    System.arraycopy(p_76607_1_, k, nibblearray.getValueArray(), 0, nibblearray.getValueArray().length);
+                    k += nibblearray.getValueArray().length;
+                    // Spigot end
                 }
             }
         }
@@ -1229,8 +1352,8 @@ public class Chunk
                         nibblearray = this.storageArrays[l].createBlockMSBArray();
                     }
 
-                    System.arraycopy(p_76607_1_, k, nibblearray.data, 0, nibblearray.data.length);
-                    k += nibblearray.data.length;
+                    System.arraycopy(p_76607_1_, k, nibblearray.getValueArray(), 0, nibblearray.getValueArray().length);
+                    k += nibblearray.getValueArray().length;
                 }
             }
             else if (p_76607_4_ && this.storageArrays[l] != null && this.storageArrays[l].getBlockMSBArray() != null)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/EmptyChunk.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/EmptyChunk.java
index add20e4..2d4403c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/EmptyChunk.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/EmptyChunk.java
@@ -113,7 +113,7 @@ public class EmptyChunk extends Chunk
 
     public Random getRandomWithSeed(long p_76617_1_)
     {
-        return new Random(this.worldObj.getSeed() + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ p_76617_1_);
+        return new Random(this.worldObj.getSeed() + (4987142L * this.xPosition * this.xPosition) + (5947611L * this.xPosition) + (4392871L * this.zPosition * this.zPosition) + (389711L * this.zPosition) ^ p_76617_1_);
     }
 
     public boolean isEmpty()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/NibbleArray.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/NibbleArray.java
index 1eb8072..001e3c7 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/NibbleArray.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/NibbleArray.java
@@ -1,47 +1,215 @@
 package net.minecraft.world.chunk;
 
+import java.util.Arrays; // Spigot
+
 public class NibbleArray
 {
-    public final byte[] data;
+    public byte[] data; // Spigot - remove final // Cauldron - make public
     private final int depthBits;
     private final int depthBitsPlusFour;
     private static final String __OBFID = "CL_00000371";
 
-    public NibbleArray(int p_i1992_1_, int p_i1992_2_)
+    // Spigot start
+    private byte trivialValue;
+    private byte trivialByte;
+    private int length;
+    private static final int LEN2K = 2048; // Universal length used right now - optimize around this
+    private static final byte[][] TrivLen2k;
+
+    static
+    {
+        TrivLen2k = new byte[16][];
+
+        for (int i = 0; i < 16; i++)
+        {
+            TrivLen2k[i] = new byte[LEN2K];
+            Arrays.fill(TrivLen2k[i], (byte)(i | (i << 4)));
+        }
+    }
+
+    // Try to convert array to trivial array
+    public void detectAndProcessTrivialArray()
+    {
+        trivialValue = (byte)(data[0] & 0xF);
+        trivialByte = (byte)(trivialValue | (trivialValue << 4));
+
+        for (int i = 0; i < data.length; i++)
+        {
+            if (data[i] != trivialByte)
+            {
+                return;
+            }
+        }
+
+        // All values matches, so array is trivial
+        this.length = data.length;
+        this.data = null;
+    }
+
+    // Force array to non-trivial state
+    public void forceToNonTrivialArray()
+    {
+        if (this.data == null)
+        {
+            this.data = new byte[this.length];
+
+            if (this.trivialByte != 0)
+            {
+                Arrays.fill(this.data, this.trivialByte);
+            }
+        }
+    }
+
+    // Test if array is in trivial state
+    public boolean isTrivialArray()
+    {
+        return (this.data == null);
+    }
+
+    // Get value of all elements (only valid if array is in trivial state)
+    public int getTrivialArrayValue()
+    {
+        return this.trivialValue;
+    }
+
+    // Get logical length of byte array for nibble data (whether trivial or non-trivial)
+    public int getByteLength()
+    {
+        if (this.data == null)
+        {
+            return this.length;
+        }
+        else
+        {
+            return this.data.length;
+        }
+    }
+
+    // Return byte encoding of array (whether trivial or non-trivial) - returns read-only array if trivial (do not modify!)
+    public byte[] getValueArray()
+    {
+        if (this.data != null)
+        {
+            return this.data;
+        }
+        else
+        {
+            byte[] rslt;
+
+            if (this.length == LEN2K)    // All current uses are 2k long, but be safe
+            {
+                rslt = TrivLen2k[this.trivialValue];
+            }
+            else
+            {
+                rslt = new byte[this.length];
+
+                if (this.trivialByte != 0)
+                {
+                    Arrays.fill(rslt, this.trivialByte);
+                }
+            }
+
+            return rslt;
+        }
+    }
+
+    // Copy byte representation of array to given offset in given byte array
+    public int copyToByteArray(byte[] dest, int off)
+    {
+        if (this.data == null)
+        {
+            Arrays.fill(dest, off, off + this.length, this.trivialByte);
+            return off + this.length;
+        }
+        else
+        {
+            System.arraycopy(this.data, 0, dest, off, this.data.length);
+            return off + this.data.length;
+        }
+    }
+
+    // Resize array to given byte length
+    public void resizeArray(int len)
     {
-        this.data = new byte[p_i1992_1_ >> 1];
-        this.depthBits = p_i1992_2_;
-        this.depthBitsPlusFour = p_i1992_2_ + 4;
+        if (this.data == null)
+        {
+            this.length = len;
+        }
+        else if (this.data.length != len)
+        {
+            byte[] newa = new byte[len];
+            System.arraycopy(this.data, 0, newa, 0, ((this.data.length > len) ? len : this.data.length));
+            this.data = newa;
+        }
     }
+    // Spigot end
 
-    public NibbleArray(byte[] p_i1993_1_, int p_i1993_2_)
+    public NibbleArray(int par1, int par2)
     {
-        this.data = p_i1993_1_;
-        this.depthBits = p_i1993_2_;
-        this.depthBitsPlusFour = p_i1993_2_ + 4;
+        // Spigot start
+        //this.a = new byte[i >> 1];
+        this.data = null; // Start off as trivial value (all same zero value)
+        this.length = par1 >> 1;
+        this.trivialByte = this.trivialValue = 0;
+        // Spigot end
+        this.depthBits = par2;
+        this.depthBitsPlusFour = par2 + 4;
     }
 
-    public int get(int p_76582_1_, int p_76582_2_, int p_76582_3_)
+    public NibbleArray(byte[] par1ArrayOfByte, int par2)
     {
-        int l = p_76582_2_ << this.depthBitsPlusFour | p_76582_3_ << this.depthBits | p_76582_1_;
+        this.data = par1ArrayOfByte;
+        this.depthBits = par2;
+        this.depthBitsPlusFour = par2 + 4;
+        detectAndProcessTrivialArray(); // Spigot
+    }
+
+    public int get(int par1, int par2, int par3)
+    {
+        if (this.data == null)
+        {
+            return this.trivialValue;    // Spigot
+        }
+
+        int l = par2 << this.depthBitsPlusFour | par3 << this.depthBits | par1;
         int i1 = l >> 1;
         int j1 = l & 1;
         return j1 == 0 ? this.data[i1] & 15 : this.data[i1] >> 4 & 15;
     }
 
-    public void set(int p_76581_1_, int p_76581_2_, int p_76581_3_, int p_76581_4_)
+    public void set(int par1, int par2, int par3, int par4)
     {
-        int i1 = p_76581_2_ << this.depthBitsPlusFour | p_76581_3_ << this.depthBits | p_76581_1_;
+        // Spigot start
+        if (this.data == null)
+        {
+            if (par4 != this.trivialValue)   // Not same as trivial value, array no longer trivial
+            {
+                this.data = new byte[this.length];
+
+                if (this.trivialByte != 0)
+                {
+                    Arrays.fill(this.data, this.trivialByte);
+                }
+            }
+            else
+            {
+                return;
+            }
+        }
+
+        // Spigot end
+        int i1 = par2 << this.depthBitsPlusFour | par3 << this.depthBits | par1;
         int j1 = i1 >> 1;
         int k1 = i1 & 1;
 
         if (k1 == 0)
         {
-            this.data[j1] = (byte)(this.data[j1] & 240 | p_76581_4_ & 15);
+            this.data[j1] = (byte)(this.data[j1] & 240 | par4 & 15);
         }
         else
         {
-            this.data[j1] = (byte)(this.data[j1] & 15 | (p_76581_4_ & 15) << 4);
+            this.data[j1] = (byte)(this.data[j1] & 15 | (par4 & 15) << 4);
         }
     }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
index 37d5ddc..2be1550 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -33,6 +33,13 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import cpw.mods.fml.common.FMLLog;
+// Cauldron start
+import java.util.Map;
+import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.cauldron.CauldronUtils;
+import net.minecraftforge.common.util.EnumHelper;
+import cpw.mods.fml.common.asm.transformers.SideTransformer;
+// Cauldron end
 
 public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 {
@@ -41,6 +48,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
     private Set pendingAnvilChunksCoordinates = new HashSet();
     private Object syncLockObject = new Object();
     public final File chunkSaveLocation;
+    private List checkedTileEntities = new ArrayList(); // Cauldron
     private static final String __OBFID = "CL_00000384";
 
     public AnvilChunkLoader(File p_i2003_1_)
@@ -73,13 +81,16 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 
     public Chunk loadChunk(World p_75815_1_, int p_75815_2_, int p_75815_3_) throws IOException
     {
+        p_75815_1_.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
         Object[] data = this.loadChunk__Async(p_75815_1_, p_75815_2_, p_75815_3_);
+        p_75815_1_.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
 
         if (data != null)
         {
             Chunk chunk = (Chunk) data[0];
             NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
             this.loadEntities(p_75815_1_, nbttagcompound.getCompoundTag("Level"), chunk);
+            MinecraftForge.EVENT_BUS.post(new ChunkDataEvent.Load(chunk, nbttagcompound)); // Cauldron - Don't call ChunkDataEvent.Load async
             return chunk;
         }
 
@@ -156,8 +167,8 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
             if (!chunk.isAtLocation(p_75822_2_, p_75822_3_))
             {
                 logger.error("Chunk file at " + p_75822_2_ + "," + p_75822_3_ + " is in the wrong location; relocating. (Expected " + p_75822_2_ + ", " + p_75822_3_ + ", got " + chunk.xPosition + ", " + chunk.zPosition + ")");
-                p_75822_4_.setInteger("xPos", p_75822_2_);
-                p_75822_4_.setInteger("zPos", p_75822_3_);
+                p_75822_4_.getCompoundTag("Level").setInteger("xPos", p_75822_2_); // CraftBukkit - .getCompound("Level")
+                p_75822_4_.getCompoundTag("Level").setInteger("zPos", p_75822_3_); // CraftBukkit - .getCompound("Level")
                 // Have to move tile entities since we don't load them at this stage
                 NBTTagList tileEntities = p_75822_4_.getCompoundTag("Level").getTagList("TileEntities", 10);
 
@@ -187,7 +198,17 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 
     public void saveChunk(World p_75816_1_, Chunk p_75816_2_) throws MinecraftException, IOException
     {
-        p_75816_1_.checkSessionLock();
+        // CraftBukkit start - "handle" exception
+        try
+        {
+            p_75816_1_.checkSessionLock();
+        }
+        catch (MinecraftException ex)
+        {
+            ex.printStackTrace();
+        }
+
+        // CraftBukkit end
 
         try
         {
@@ -230,7 +251,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 
     public boolean writeNextIO()
     {
-        AnvilChunkLoader.PendingChunk pendingchunk = null;
+        PendingChunk pendingchunktosave = null;
         Object object = this.syncLockObject;
 
         synchronized (this.syncLockObject)
@@ -240,15 +261,15 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
                 return false;
             }
 
-            pendingchunk = (AnvilChunkLoader.PendingChunk)this.chunksToRemove.remove(0);
-            this.pendingAnvilChunksCoordinates.remove(pendingchunk.chunkCoordinate);
+            pendingchunktosave = (PendingChunk) this.chunksToRemove.remove(0);
+            this.pendingAnvilChunksCoordinates.remove(pendingchunktosave.chunkCoordinate);
         }
 
-        if (pendingchunk != null)
+        if (pendingchunktosave != null)
         {
             try
             {
-                this.writeChunkNBTTags(pendingchunk);
+                this.writeChunkNBTTags(pendingchunktosave);
             }
             catch (Exception exception)
             {
@@ -259,7 +280,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
         return true;
     }
 
-    private void writeChunkNBTTags(AnvilChunkLoader.PendingChunk p_75821_1_) throws IOException
+    public void writeChunkNBTTags(AnvilChunkLoader.PendingChunk p_75821_1_) throws java.io.IOException   // CraftBukkit - public -> private, added throws
     {
         DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, p_75821_1_.chunkCoordinate.chunkXPos, p_75821_1_.chunkCoordinate.chunkZPos);
         CompressedStreamTools.write(p_75821_1_.nbtTags, dataoutputstream);
@@ -307,19 +328,19 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 
                 if (extendedblockstorage.getBlockMSBArray() != null)
                 {
-                    nbttagcompound1.setByteArray("Add", extendedblockstorage.getBlockMSBArray().data);
+                    nbttagcompound1.setByteArray("Add", extendedblockstorage.getBlockMSBArray().getValueArray()); // Spigot
                 }
 
-                nbttagcompound1.setByteArray("Data", extendedblockstorage.getMetadataArray().data);
-                nbttagcompound1.setByteArray("BlockLight", extendedblockstorage.getBlocklightArray().data);
+                nbttagcompound1.setByteArray("Data", extendedblockstorage.getMetadataArray().getValueArray()); // Spigot
+                nbttagcompound1.setByteArray("BlockLight", extendedblockstorage.getBlocklightArray().getValueArray()); // Spigot
 
                 if (flag)
                 {
-                    nbttagcompound1.setByteArray("SkyLight", extendedblockstorage.getSkylightArray().data);
+                    nbttagcompound1.setByteArray("SkyLight", extendedblockstorage.getSkylightArray().getValueArray()); // Spigot
                 }
                 else
                 {
-                    nbttagcompound1.setByteArray("SkyLight", new byte[extendedblockstorage.getBlocklightArray().data.length]);
+                    nbttagcompound1.setByteArray("SkyLight", new byte[extendedblockstorage.getBlocklightArray().getValueArray().length]); // Spigot
                 }
 
                 nbttaglist.appendTag(nbttagcompound1);
@@ -455,6 +476,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 
     public void loadEntities(World p_75823_1_, NBTTagCompound p_75823_2_, Chunk chunk)
     {
+        p_75823_1_.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = p_75823_2_.getTagList("Entities", 10);
 
         if (nbttaglist1 != null)
@@ -468,24 +490,31 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
                 if (entity2 != null)
                 {
                     chunk.addEntity(entity2);
-                    Entity entity = entity2;
-
-                    for (NBTTagCompound nbttagcompound2 = nbttagcompound3; nbttagcompound2.hasKey("Riding", 10); nbttagcompound2 = nbttagcompound2.getCompoundTag("Riding"))
+                    // Cauldron start - check to see if we killed entity due to invalid location
+                    if (!entity2.isDead)
                     {
-                        Entity entity1 = EntityList.createEntityFromNBT(nbttagcompound2.getCompoundTag("Riding"), p_75823_1_);
+                        Entity entity = entity2;
 
-                        if (entity1 != null)
+                        for (NBTTagCompound nbttagcompound2 = nbttagcompound3; nbttagcompound2.hasKey("Riding", 10); nbttagcompound2 = nbttagcompound2.getCompoundTag("Riding"))
                         {
-                            chunk.addEntity(entity1);
-                            entity.mountEntity(entity1);
-                        }
+                            Entity entity1 = EntityList.createEntityFromNBT(nbttagcompound2.getCompoundTag("Riding"), p_75823_1_);
+
+                            if (entity1 != null)
+                            {
+                                chunk.addEntity(entity1);
+                                entity.mountEntity(entity1);
+                            }
 
-                        entity = entity1;
+                            entity = entity1;
+                        }
                     }
+                    // Cauldron end
                 }
             }
         }
 
+        p_75823_1_.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
+        p_75823_1_.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist2 = p_75823_2_.getTagList("TileEntities", 10);
 
         if (nbttaglist2 != null)
@@ -497,11 +526,35 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
 
                 if (tileentity != null)
                 {
+                    // Cauldron start - check if TE should tick and inject into Bukkit's InventoryType
+                    if (!this.checkedTileEntities.contains(tileentity.getClass()))
+                    {
+                        // verify if TE should tick
+                        if (MinecraftServer.getServer().tileEntityConfig.preventInvalidTileEntityUpdates.getValue())
+                        {
+                            SideTransformer.allowInvalidSide = true;
+                            if (!CauldronUtils.isOverridingUpdateEntity(tileentity.getClass()) && CauldronUtils.canTileEntityUpdate(tileentity.getClass()))
+                            {
+                                if (MinecraftServer.getServer().tileEntityConfig.enableTECanUpdateWarning.getValue())
+                                {
+                                    MinecraftServer.getServer().logInfo("Detected TE " + tileentity.getClass().getName() + " with canUpdate set to true and no updateEntity override!. Please report to mod author as this can hurt performance.");
+                                }
+                                MinecraftServer.getServer().bannedTileEntityUpdates.add(tileentity.getClass());
+                            }
+                            SideTransformer.allowInvalidSide = false;
+                        }
+                        // inject TE into InventoryType to support inventory events
+                        EnumHelper.addInventoryType(tileentity);
+                        this.checkedTileEntities.add(tileentity.getClass());
+                    }
+                    // Cauldron end
                     chunk.addTileEntity(tileentity);
                 }
             }
         }
 
+        p_75823_1_.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
+        p_75823_1_.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
         if (p_75823_2_.hasKey("TileTicks", 9))
         {
             NBTTagList nbttaglist3 = p_75823_2_.getTagList("TileTicks", 10);
@@ -515,6 +568,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
                 }
             }
         }
+        p_75823_1_.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
 
         // return chunk;
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/AnvilSaveHandler.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/AnvilSaveHandler.java
index e9f0c31..a1d17d3 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/AnvilSaveHandler.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/AnvilSaveHandler.java
@@ -21,6 +21,11 @@ public class AnvilSaveHandler extends SaveHandler
     public IChunkLoader getChunkLoader(WorldProvider p_75763_1_)
     {
         File file1 = this.getWorldDirectory();
+        // Cauldron start
+        // To workaround the issue of Bukkit relying on every world having a seperate container
+        // we won't be generating a DIMXX folder for chunk loaders since this name is already generated
+        // for the world container with provider.getSaveFolder().
+        /*
         File file2;
 
         if (p_75763_1_.getSaveFolder() != null)
@@ -32,7 +37,9 @@ public class AnvilSaveHandler extends SaveHandler
         else
         {
             return new AnvilChunkLoader(file1);
-        }
+        } */
+        return new AnvilChunkLoader(file1);
+        // Cauldron end
     }
 
     public void saveWorldInfoWithPlayer(WorldInfo p_75755_1_, NBTTagCompound p_75755_2_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/ChunkLoader.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/ChunkLoader.java
index fdbb697..298316b 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/ChunkLoader.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/ChunkLoader.java
@@ -113,9 +113,11 @@ public class ChunkLoader
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
                 nbttagcompound1.setByte("Y", (byte)(j & 255));
                 nbttagcompound1.setByteArray("Blocks", abyte1);
-                nbttagcompound1.setByteArray("Data", nibblearray.data);
-                nbttagcompound1.setByteArray("SkyLight", nibblearray1.data);
-                nbttagcompound1.setByteArray("BlockLight", nibblearray2.data);
+                // Spigot start - data -> getValueArray() accessor
+                nbttagcompound1.setByteArray("Data", nibblearray.getValueArray());
+                nbttagcompound1.setByteArray("SkyLight", nibblearray1.getValueArray());
+                nbttagcompound1.setByteArray("BlockLight", nibblearray2.getValueArray());
+                // Spigot end
                 nbttaglist.appendTag(nbttagcompound1);
             }
         }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/ExtendedBlockStorage.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/ExtendedBlockStorage.java
index 43cb3a9..820296d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/ExtendedBlockStorage.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/ExtendedBlockStorage.java
@@ -31,6 +31,29 @@ public class ExtendedBlockStorage
         }
     }
 
+    // CraftBukkit start
+    public ExtendedBlockStorage(int y, boolean flag, byte[] blkIds, byte[] extBlkIds)
+    {
+        this.yBase = y;
+        this.blockLSBArray = blkIds;
+
+        if (extBlkIds != null)
+        {
+            this.blockMSBArray = new NibbleArray(extBlkIds, 4);
+        }
+
+        this.blockMetadataArray = new NibbleArray(this.blockLSBArray.length, 4);
+        this.blocklightArray = new NibbleArray(this.blockLSBArray.length, 4);
+
+        if (flag)
+        {
+            this.skylightArray = new NibbleArray(this.blockLSBArray.length, 4);
+        }
+
+        this.removeInvalidBlocks();
+    }
+    // CraftBukkit end
+
     public Block getBlockByExtId(int p_150819_1_, int p_150819_2_, int p_150819_3_)
     {
         int l = this.blockLSBArray[p_150819_2_ << 8 | p_150819_3_ << 4 | p_150819_1_] & 255;
@@ -139,6 +162,106 @@ public class ExtendedBlockStorage
 
     public void removeInvalidBlocks()
     {
+        // CraftBukkit start - Optimize for speed
+        byte[] blkIds = this.blockLSBArray;
+        int cntNonEmpty = 0;
+        int cntTicking = 0;
+
+        if (this.blockMSBArray == null)   // No extended block IDs?  Don't waste time messing with them
+        {
+            for (int off = 0; off < blkIds.length; off++)
+            {
+                int l = blkIds[off] & 0xFF;
+
+                if (l > 0)
+                {
+                    if (Block.getBlockById(l) == null)
+                    {
+                        blkIds[off] = 0;
+                    }
+                    else
+                    {
+                        ++cntNonEmpty;
+
+                        if (Block.getBlockById(l).getTickRandomly())
+                        {
+                            ++cntTicking;
+                        }
+                    }
+                }
+            }
+        }
+        else
+        {
+            this.blockMSBArray.forceToNonTrivialArray(); // Spigot
+            byte[] ext = this.blockMSBArray.getValueArray();
+
+            for (int off = 0, off2 = 0; off < blkIds.length;)
+            {
+                byte extid = ext[off2];
+                int l = (blkIds[off] & 0xFF) | ((extid & 0xF) << 8); // Even data
+
+                if (l > 0)
+                {
+                    if (Block.getBlockById(l) == null)
+                    {
+                        blkIds[off] = 0;
+                        ext[off2] &= 0xF0;
+                    }
+                    else
+                    {
+                        ++cntNonEmpty;
+
+                        if (Block.getBlockById(l).getTickRandomly())
+                        {
+                            ++cntTicking;
+                        }
+                    }
+                }
+
+                off++;
+                l = (blkIds[off] & 0xFF) | ((extid & 0xF0) << 4); // Odd data
+
+                if (l > 0)
+                {
+                    if (Block.getBlockById(l) == null)
+                    {
+                        blkIds[off] = 0;
+                        ext[off2] &= 0x0F;
+                    }
+                    else
+                    {
+                        ++cntNonEmpty;
+
+                        if (Block.getBlockById(l).getTickRandomly())
+                        {
+                            ++cntTicking;
+                        }
+                    }
+                }
+
+                off++;
+                off2++;
+            }
+
+            // Spigot start
+            this.blockMSBArray.detectAndProcessTrivialArray();
+
+            if (this.blockMSBArray.isTrivialArray() && (this.blockMSBArray.getTrivialArrayValue() == 0))
+            {
+                this.blockMSBArray = null;
+            }
+
+            // Spigot end
+        }
+
+        this.blockRefCount = cntNonEmpty;
+        this.tickRefCount = cntTicking;
+    }
+
+    public void old_recalcBlockCounts()
+    {
+        // CraftBukkit end
         this.blockRefCount = 0;
         this.tickRefCount = 0;
 
@@ -197,28 +320,71 @@ public class ExtendedBlockStorage
 
     public void setBlockLSBArray(byte[] p_76664_1_)
     {
-        this.blockLSBArray = p_76664_1_;
+        this.blockLSBArray = this.validateByteArray(p_76664_1_); // CraftBukkit - Validate data
     }
 
     public void setBlockMSBArray(NibbleArray p_76673_1_)
     {
-        this.blockMSBArray = p_76673_1_;
+        // CraftBukkit start - Don't hang on to an empty nibble array
+        boolean empty = true;
+
+        // Spigot start
+        if ((!p_76673_1_.isTrivialArray()) || (p_76673_1_.getTrivialArrayValue() != 0))
+        {
+            empty = false;
+        }
+
+        // Spigot end
+
+        if (empty)
+        {
+            return;
+        }
+
+        // CraftBukkit end
+        this.blockMSBArray = this.validateNibbleArray(p_76673_1_); // CraftBukkit - Validate data
     }
 
     public void setBlockMetadataArray(NibbleArray p_76668_1_)
     {
-        this.blockMetadataArray = p_76668_1_;
+        this.blockMetadataArray = this.validateNibbleArray(p_76668_1_); // CraftBukkit - Validate data
     }
 
     public void setBlocklightArray(NibbleArray p_76659_1_)
     {
-        this.blocklightArray = p_76659_1_;
+        this.blocklightArray = this.validateNibbleArray(p_76659_1_); // CraftBukkit - Validate data
     }
 
     public void setSkylightArray(NibbleArray p_76666_1_)
     {
-        this.skylightArray = p_76666_1_;
+        this.skylightArray = this.validateNibbleArray(p_76666_1_); // CraftBukkit - Validate data
+    }
+
+    // CraftBukkit start - Validate array lengths
+    private NibbleArray validateNibbleArray(NibbleArray nibbleArray)
+    {
+        // Spigot start - fix for more awesome nibble arrays
+        if (nibbleArray != null && nibbleArray.getByteLength() < 2048)
+        {
+            nibbleArray.resizeArray(2048);
+        }
+
+        // Spigot end
+        return nibbleArray;
+    }
+
+    private byte[] validateByteArray(byte[] byteArray)
+    {
+        if (byteArray != null && byteArray.length < 4096)
+        {
+            byte[] newArray = new byte[4096];
+            System.arraycopy(byteArray, 0, newArray, 0, byteArray.length);
+            byteArray = newArray;
+        }
+
+        return byteArray;
     }
+    // CraftBukkit end
 
     @SideOnly(Side.CLIENT)
     public NibbleArray createBlockMSBArray()
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
index a54d157..065e345 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
@@ -43,15 +43,8 @@ public class RegionFile
 
             if (this.dataFile.length() < 4096L)
             {
-                for (i = 0; i < 1024; ++i)
-                {
-                    this.dataFile.writeInt(0);
-                }
-
-                for (i = 0; i < 1024; ++i)
-                {
-                    this.dataFile.writeInt(0);
-                }
+                dataFile.write(emptySector); //Spigot
+                dataFile.write(emptySector); //Spigot
 
                 this.sizeDelta += 8192;
             }
@@ -209,7 +202,7 @@ public class RegionFile
 
     public DataOutputStream getChunkDataOutputStream(int p_76710_1_, int p_76710_2_)
     {
-        return this.outOfBounds(p_76710_1_, p_76710_2_) ? null : new DataOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(p_76710_1_, p_76710_2_)));
+        return this.outOfBounds(p_76710_1_, p_76710_2_) ? null : new DataOutputStream(new java.io.BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(p_76710_1_, p_76710_2_)))); // KCauldron
     }
 
     protected synchronized void write(int p_76706_1_, int p_76706_2_, byte[] p_76706_3_, int p_76706_4_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
index c594664..50a7ec8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -10,7 +10,7 @@ import java.util.Map;
 
 public class RegionFileCache
 {
-    private static final Map regionsByFilename = new HashMap();
+    public static final Map regionsByFilename = new HashMap(); // CraftBukkit - private -> public
     private static final String __OBFID = "CL_00000383";
 
     public static synchronized RegionFile createOrLoadRegionFile(File p_76550_0_, int p_76550_1_, int p_76550_2_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
index 66d147a..413eef1 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
@@ -32,23 +32,42 @@ import net.minecraftforge.common.chunkio.ChunkIOExecutor;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+// CraftBukkit start
+import java.util.Random;
+import net.minecraft.block.BlockSand;
+import java.util.*;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.world.ChunkUnloadEvent;
+// CraftBukkit end
+// Cauldron start
+import cpw.mods.fml.common.FMLCommonHandler;
+import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.cauldron.configuration.CauldronConfig;
+import net.minecraftforge.cauldron.CauldronHooks;
+// Cauldron end
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger logger = LogManager.getLogger();
-    private Set chunksToUnload = Collections.newSetFromMap(new ConcurrentHashMap());
-    private Chunk defaultEmptyChunk;
+    public LongHashSet chunksToUnload = new LongHashSet(); // LongHashSet
+    public Chunk defaultEmptyChunk;
     public IChunkProvider currentChunkProvider;
     public IChunkLoader currentChunkLoader;
-    public boolean loadChunkOnProvideRequest = true;
-    public LongHashMap loadedChunkHashMap = new LongHashMap();
-    public List loadedChunks = new ArrayList();
+    public boolean loadChunkOnProvideRequest = MinecraftServer.getServer().cauldronConfig.loadChunkOnRequest.getValue(); // Cauldron - if true, allows mods to force load chunks. to disable, set load-chunk-on-request in cauldron.yml to false
+    public int initialTick; // Cauldron counter to keep track of when this loader was created
+    public LongObjectHashMap<Chunk> loadedChunkHashMap_KC = new LongObjectHashMap<Chunk>();
+    public List loadedChunks = new ArrayList(); // Cauldron - vanilla compatibility
     public WorldServer worldObj;
-    private Set<Long> loadingChunks = com.google.common.collect.Sets.newHashSet();
+    private Set<Long> loadingChunks = new HashSet<Long>();
+    public LongObjectHashMap loadedChunkHashMap =  new LongObjectHashMap(); // KCauldron - vanilla/mystcraft compatibility
     private static final String __OBFID = "CL_00001436";
+     private boolean mUnloading;
 
     public ChunkProviderServer(WorldServer p_i1520_1_, IChunkLoader p_i1520_2_, IChunkProvider p_i1520_3_)
     {
+        this.initialTick = MinecraftServer.currentTick; // Cauldron keep track of when the loader was created
         this.defaultEmptyChunk = new EmptyChunk(p_i1520_1_, 0, 0);
         this.worldObj = p_i1520_1_;
         this.currentChunkLoader = p_i1520_2_;
@@ -57,10 +76,10 @@ public class ChunkProviderServer implements IChunkProvider
 
     public boolean chunkExists(int p_73149_1_, int p_73149_2_)
     {
-        return this.loadedChunkHashMap.containsItem(ChunkCoordIntPair.chunkXZ2Int(p_73149_1_, p_73149_2_));
+        return this.loadedChunkHashMap_KC.containsKey(LongHash.toLong(p_73149_1_, p_73149_2_)); // CraftBukkit
     }
 
-    public List func_152380_a()
+    public List func_152380_a() // Vanilla compatibility
     {
         return this.loadedChunks;
     }
@@ -74,26 +93,48 @@ public class ChunkProviderServer implements IChunkProvider
             int l = p_73241_2_ * 16 + 8 - chunkcoordinates.posZ;
             short short1 = 128;
 
+            // CraftBukkit start
             if (k < -short1 || k > short1 || l < -short1 || l > short1)
             {
-                this.chunksToUnload.add(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(p_73241_1_, p_73241_2_)));
+                this.chunksToUnload.add(p_73241_1_, p_73241_2_);
+                Chunk c = this.loadedChunkHashMap_KC.get(LongHash.toLong(p_73241_1_, p_73241_2_));
+
+                if (c != null)
+                {
+                    c.mustSave = true;
+                }
+                CauldronHooks.logChunkUnload(this, p_73241_1_, p_73241_2_, "Chunk added to unload queue");
+             }
+
+            // CraftBukkit end
             }
-        }
+        //
         else
         {
-            this.chunksToUnload.add(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(p_73241_1_, p_73241_2_)));
+            // CraftBukkit start
+            this.chunksToUnload.add(p_73241_1_, p_73241_2_);
+            Chunk c = this.loadedChunkHashMap_KC.get(LongHash.toLong(p_73241_1_, p_73241_2_));
+
+            if (c != null)
+            {
+                c.mustSave = true;
+            }
+            CauldronHooks.logChunkUnload(this, p_73241_1_, p_73241_2_, "Chunk added to unload queue");
+            // CraftBukkit end
         }
     }
 
     public void unloadAllChunks()
     {
-        Iterator iterator = this.loadedChunks.iterator();
+        mUnloading = true;
+        Iterator iterator = this.loadedChunkHashMap_KC.values().iterator(); // CraftBukkit
 
         while (iterator.hasNext())
         {
             Chunk chunk = (Chunk)iterator.next();
             this.unloadChunksIfNotNearSpawn(chunk.xPosition, chunk.zPosition);
         }
+        mUnloading = false;
     }
 
     public Chunk loadChunk(int p_73158_1_, int p_73158_2_)
@@ -103,9 +144,10 @@ public class ChunkProviderServer implements IChunkProvider
 
     public Chunk loadChunk(int par1, int par2, Runnable runnable)
     {
-        long k = ChunkCoordIntPair.chunkXZ2Int(par1, par2);
-        this.chunksToUnload.remove(Long.valueOf(k));
-        Chunk chunk = (Chunk)this.loadedChunkHashMap.getValueByKey(k);
+        if (mUnloading) return null;
+        this.chunksToUnload.remove(par1, par2);
+        Chunk chunk = (Chunk) this.loadedChunkHashMap_KC.get(LongHash.toLong(par1, par2));
+        boolean newChunk = false;
         AnvilChunkLoader loader = null;
 
         if (this.currentChunkLoader instanceof AnvilChunkLoader)
@@ -113,6 +155,8 @@ public class ChunkProviderServer implements IChunkProvider
             loader = (AnvilChunkLoader) this.currentChunkLoader;
         }
 
+        CauldronHooks.logChunkLoad(this, "Get", par1, par2, true);
+
         // We can only use the queue for already generated chunks
         if (chunk == null && loader != null && loader.chunkExists(this.worldObj, par1, par2))
         {
@@ -142,18 +186,20 @@ public class ChunkProviderServer implements IChunkProvider
 
     public Chunk originalLoadChunk(int p_73158_1_, int p_73158_2_)
     {
-        long k = ChunkCoordIntPair.chunkXZ2Int(p_73158_1_, p_73158_2_);
-        this.chunksToUnload.remove(Long.valueOf(k));
-        Chunk chunk = (Chunk)this.loadedChunkHashMap.getValueByKey(k);
+        if (mUnloading) return null;
+        this.chunksToUnload.remove(p_73158_1_, p_73158_2_);
+        Chunk chunk = (Chunk) this.loadedChunkHashMap_KC.get(LongHash.toLong(p_73158_1_, p_73158_2_));
+        boolean newChunk = false; // CraftBukkit
 
         if (chunk == null)
         {
-            boolean added = loadingChunks.add(k);
+            worldObj.timings.syncChunkLoadTimer.startTiming(); // Spigot
+            boolean added = loadingChunks.add(LongHash.toLong(p_73158_1_, p_73158_2_));
             if (!added)
             {
                 cpw.mods.fml.common.FMLLog.bigWarning("There is an attempt to load a chunk (%d,%d) in dimension %d that is already being loaded. This will cause weird chunk breakages.", p_73158_1_, p_73158_2_, worldObj.provider.dimensionId);
             }
-            chunk = ForgeChunkManager.fetchDormantChunk(k, this.worldObj);
+            chunk = ForgeChunkManager.fetchDormantChunk(LongHash.toLong(p_73158_1_, p_73158_2_), this.worldObj);
             if (chunk == null)
             {
                 chunk = this.safeLoadChunk(p_73158_1_, p_73158_2_);
@@ -176,18 +222,39 @@ public class ChunkProviderServer implements IChunkProvider
                         CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception generating new chunk");
                         CrashReportCategory crashreportcategory = crashreport.makeCategory("Chunk to be generated");
                         crashreportcategory.addCrashSection("Location", String.format("%d,%d", new Object[] {Integer.valueOf(p_73158_1_), Integer.valueOf(p_73158_2_)}));
-                        crashreportcategory.addCrashSection("Position hash", Long.valueOf(k));
+                        crashreportcategory.addCrashSection("Position hash", LongHash.toLong(p_73158_1_, p_73158_2_));
                         crashreportcategory.addCrashSection("Generator", this.currentChunkProvider.makeString());
                         throw new ReportedException(crashreport);
                     }
                 }
+
+                newChunk = true; // CraftBukkit
+            }
+
+            this.loadedChunkHashMap_KC.put(LongHash.toLong(p_73158_1_, p_73158_2_), chunk); // CraftBukkit
+            this.loadedChunks.add(chunk); // Cauldron - vanilla compatibility
+            loadingChunks.remove(LongHash.toLong(p_73158_1_, p_73158_2_)); // Cauldron - LongHash
+
+            if (chunk != null)
+            {
+                chunk.onChunkLoad();
             }
+            // CraftBukkit start
+            Server server = this.worldObj.getServer();
 
-            this.loadedChunkHashMap.add(k, chunk);
-            this.loadedChunks.add(chunk);
-            loadingChunks.remove(k);
-            chunk.onChunkLoad();
+            if (server != null)
+            {
+                /*
+                 * If it's a new world, the first few chunks are generated inside
+                 * the World constructor. We can't reliably alter that, so we have
+                 * no way of creating a CraftWorld/CraftServer at that point.
+                 */
+                server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(chunk.bukkitChunk, newChunk));
+            }
+
+            // CraftBukkit end
             chunk.populateChunk(this, this, p_73158_1_, p_73158_2_);
+            worldObj.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
@@ -195,20 +262,40 @@ public class ChunkProviderServer implements IChunkProvider
 
     public Chunk provideChunk(int p_73154_1_, int p_73154_2_)
     {
-        Chunk chunk = (Chunk)this.loadedChunkHashMap.getValueByKey(ChunkCoordIntPair.chunkXZ2Int(p_73154_1_, p_73154_2_));
-        return chunk == null ? (!this.worldObj.findingSpawnPoint && !this.loadChunkOnProvideRequest ? this.defaultEmptyChunk : this.loadChunk(p_73154_1_, p_73154_2_)) : chunk;
+        if (mUnloading) return null;
+        // CraftBukkit start
+        Chunk chunk = (Chunk) this.loadedChunkHashMap_KC.get(LongHash.toLong(p_73154_1_, p_73154_2_));
+        chunk = chunk == null ? (shouldLoadChunk() ? this.loadChunk(p_73154_1_, p_73154_2_) : this.defaultEmptyChunk) : chunk; // Cauldron handle forge server tick events and load the chunk within 5 seconds of the world being loaded (for chunk loaders)
+
+        if (chunk == this.defaultEmptyChunk)
+        {
+            return chunk;
+        }
+
+        if ((p_73154_1_ != chunk.xPosition || p_73154_2_ != chunk.zPosition) && !worldObj.isProfilingWorld())
+        {
+            logger.error("Chunk (" + chunk.xPosition + ", " + chunk.zPosition + ") stored at  (" + p_73154_1_ + ", " + p_73154_2_ + ") in world '" + worldObj.getWorld().getName() + "'");
+            logger.error(chunk.getClass().getName());
+            Throwable ex = new Throwable();
+            ex.fillInStackTrace();
+            ex.printStackTrace();
+        }
+        chunk.lastAccessedTick = MinecraftServer.getServer().getTickCounter(); // Cauldron
+        return chunk;
+        // CraftBukkit end
     }
 
-    private Chunk safeLoadChunk(int p_73239_1_, int p_73239_2_)
+    public Chunk safeLoadChunk(int p_73239_1_, int p_73239_2_)
     {
-        if (this.currentChunkLoader == null)
+        if (mUnloading || this.currentChunkLoader == null)
         {
-            return null;
-        }
+             return null;	 
+         }
         else
         {
             try
             {
+                CauldronHooks.logChunkLoad(this, "Safe Load", p_73239_1_, p_73239_2_, false); // Cauldron
                 Chunk chunk = this.currentChunkLoader.loadChunk(this.worldObj, p_73239_1_, p_73239_2_);
 
                 if (chunk != null)
@@ -217,8 +304,11 @@ public class ChunkProviderServer implements IChunkProvider
 
                     if (this.currentChunkProvider != null)
                     {
+                        worldObj.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
                         this.currentChunkProvider.recreateStructures(p_73239_1_, p_73239_2_);
+                        worldObj.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
                     }
+                    chunk.lastAccessedTick = MinecraftServer.getServer().getTickCounter(); // Cauldron
                 }
 
                 return chunk;
@@ -231,7 +321,7 @@ public class ChunkProviderServer implements IChunkProvider
         }
     }
 
-    private void safeSaveExtraChunkData(Chunk p_73243_1_)
+    public void safeSaveExtraChunkData(Chunk p_73243_1_)   // CraftBukkit - private -> public
     {
         if (this.currentChunkLoader != null)
         {
@@ -246,7 +336,7 @@ public class ChunkProviderServer implements IChunkProvider
         }
     }
 
-    private void safeSaveChunk(Chunk p_73242_1_)
+    public void safeSaveChunk(Chunk p_73242_1_)   // CraftBukkit - private -> public
     {
         if (this.currentChunkLoader != null)
         {
@@ -254,15 +344,18 @@ public class ChunkProviderServer implements IChunkProvider
             {
                 p_73242_1_.lastSaveTime = this.worldObj.getTotalWorldTime();
                 this.currentChunkLoader.saveChunk(this.worldObj, p_73242_1_);
+                // CraftBukkit start - IOException to Exception
             }
-            catch (IOException ioexception)
+            catch (Exception ioexception)
             {
                 logger.error("Couldn\'t save chunk", ioexception);
             }
+            /* Remove extra exception
             catch (MinecraftException minecraftexception)
             {
                 logger.error("Couldn\'t save chunk; already in use by another instance of Minecraft?", minecraftexception);
             }
+            // CraftBukkit end */
         }
     }
 
@@ -277,6 +370,35 @@ public class ChunkProviderServer implements IChunkProvider
             if (this.currentChunkProvider != null)
             {
                 this.currentChunkProvider.populate(p_73153_1_, p_73153_2_, p_73153_3_);
+                // CraftBukkit start
+                BlockSand.fallInstantly = true;
+                Random random = new Random();
+                random.setSeed(worldObj.getSeed());
+                long xRand = random.nextLong() / 2L * 2L + 1L;
+                long zRand = random.nextLong() / 2L * 2L + 1L;
+                random.setSeed((long) p_73153_2_ * xRand + (long) p_73153_3_ * zRand ^ worldObj.getSeed());
+                org.bukkit.World world = this.worldObj.getWorld();
+
+                if (world != null)
+                {
+                    this.worldObj.populating = true;
+
+                    try
+                    {
+                        for (org.bukkit.generator.BlockPopulator populator : world.getPopulators())
+                        {
+                            populator.populate(world, random, chunk.bukkitChunk);
+                        }
+                    }
+                    finally
+                    {
+                        this.worldObj.populating = false;
+                    }
+                }
+
+                BlockSand.fallInstantly = false;
+                this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(chunk.bukkitChunk));
+                // CraftBukkit end
                 GameRegistry.generateWorld(p_73153_2_, p_73153_3_, worldObj, currentChunkProvider, p_73153_1_);
                 chunk.setChunkModified();
             }
@@ -286,11 +408,14 @@ public class ChunkProviderServer implements IChunkProvider
     public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_)
     {
         int i = 0;
-        ArrayList arraylist = Lists.newArrayList(this.loadedChunks);
+        // Cauldron start - use thread-safe method for iterating loaded chunks
+        Object[] chunks = this.loadedChunks.toArray();
 
-        for (int j = 0; j < arraylist.size(); ++j)
+        for (int j = 0; j < chunks.length; ++j)
         {
-            Chunk chunk = (Chunk)arraylist.get(j);
+            if (chunks[j] == null) { continue; }
+            Chunk chunk = (Chunk)chunks[j];
+            //Cauldron end
 
             if (p_73151_1_)
             {
@@ -325,36 +450,60 @@ public class ChunkProviderServer implements IChunkProvider
     {
         if (!this.worldObj.levelSaving)
         {
-            for (ChunkCoordIntPair forced : this.worldObj.getPersistentChunks().keySet())
+            // Cauldron start - remove any chunk that has a ticket associated with it
+            if (!this.chunksToUnload.isEmpty())
             {
-                this.chunksToUnload.remove(ChunkCoordIntPair.chunkXZ2Int(forced.chunkXPos, forced.chunkZPos));
+                for (ChunkCoordIntPair forcedChunk : this.worldObj.getPersistentChunks().keys())
+                {
+                    this.chunksToUnload.remove(forcedChunk.chunkXPos, forcedChunk.chunkZPos);
+                }
             }
+            // Cauldron end
+            // CraftBukkit start
+            Server server = this.worldObj.getServer();
 
-            for (int i = 0; i < 100; ++i)
+            for (int i = 0; i < 100 && !this.chunksToUnload.isEmpty(); i++)
             {
-                if (!this.chunksToUnload.isEmpty())
+                long chunkcoordinates = this.chunksToUnload.popFirst();
+                Chunk chunk = this.loadedChunkHashMap_KC.get(chunkcoordinates);
+
+                if (chunk == null)
                 {
-                    Long olong = (Long)this.chunksToUnload.iterator().next();
-                    Chunk chunk = (Chunk)this.loadedChunkHashMap.getValueByKey(olong.longValue());
+                    continue;
+                }
 
-                    if (chunk != null)
-                    {
-                        chunk.onChunkUnload();
-                        this.safeSaveChunk(chunk);
-                        this.safeSaveExtraChunkData(chunk);
-                        this.loadedChunks.remove(chunk);
-                        ForgeChunkManager.putDormantChunk(ChunkCoordIntPair.chunkXZ2Int(chunk.xPosition, chunk.zPosition), chunk);
-                        if(loadedChunks.size() == 0 && ForgeChunkManager.getPersistentChunksFor(this.worldObj).size() == 0 && !DimensionManager.shouldLoadSpawn(this.worldObj.provider.dimensionId)){
-                            DimensionManager.unloadWorld(this.worldObj.provider.dimensionId);
-                            return currentChunkProvider.unloadQueuedChunks();
-                        }
-                    }
+                // Cauldron static - check if the chunk was accessed recently and keep it loaded if there are players in world
+                if (!shouldUnloadChunk(chunk) && this.worldObj.playerEntities.size() > 0)
+                {
+                    CauldronHooks.logChunkUnload(this, chunk.xPosition, chunk.zPosition, "** Chunk kept from unloading due to recent activity");
+                    continue;
+                }
+                // Cauldron end
 
-                    this.chunksToUnload.remove(olong);
-                    this.loadedChunkHashMap.remove(olong.longValue());
+
+                ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk);
+                server.getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    CauldronHooks.logChunkUnload(this, chunk.xPosition, chunk.zPosition, "Unloading Chunk at");
+
+                    chunk.onChunkUnload();
+                    this.safeSaveChunk(chunk);
+                    this.safeSaveExtraChunkData(chunk);
+                    // this.unloadQueue.remove(olong);
+                    this.loadedChunkHashMap_KC.remove(chunkcoordinates); // CraftBukkit
+                    this.loadedChunks.remove(chunk); // Cauldron - vanilla compatibility
+                    ForgeChunkManager.putDormantChunk(chunkcoordinates, chunk);
+                    if(this.loadedChunkHashMap_KC.size() == 0 && ForgeChunkManager.getPersistentChunksFor(this.worldObj).size() == 0 && !DimensionManager.shouldLoadSpawn(this.worldObj.provider.dimensionId)){
+                        DimensionManager.unloadWorld(this.worldObj.provider.dimensionId);
+                        return currentChunkProvider.unloadQueuedChunks();
+                    }
                 }
             }
 
+            // CraftBukkit end
+
             if (this.currentChunkLoader != null)
             {
                 this.currentChunkLoader.chunkTick();
@@ -371,7 +520,7 @@ public class ChunkProviderServer implements IChunkProvider
 
     public String makeString()
     {
-        return "ServerChunkCache: " + this.loadedChunkHashMap.getNumHashElements() + " Drop: " + this.chunksToUnload.size();
+        return "ServerChunkCache: " + this.loadedChunkHashMap_KC.size() + " Drop: " + this.chunksToUnload.size(); // Cauldron
     }
 
     public List getPossibleCreatures(EnumCreatureType p_73155_1_, int p_73155_2_, int p_73155_3_, int p_73155_4_)
@@ -386,8 +535,31 @@ public class ChunkProviderServer implements IChunkProvider
 
     public int getLoadedChunkCount()
     {
-        return this.loadedChunkHashMap.getNumHashElements();
+        return this.loadedChunkHashMap_KC.size(); // Cauldron
     }
 
     public void recreateStructures(int p_82695_1_, int p_82695_2_) {}
+
+    // Cauldron start
+    private boolean shouldLoadChunk()
+    {
+        return this.worldObj.findingSpawnPoint ||
+                this.loadChunkOnProvideRequest ||
+                (MinecraftServer.callingForgeTick && MinecraftServer.getServer().cauldronConfig.loadChunkOnForgeTick.getValue()) ||
+                (MinecraftServer.currentTick - initialTick <= 100);
+    }
+
+    public long lastAccessed(int x, int z)
+    {
+        long chunkHash = LongHash.toLong(x, z); 
+        if (!loadedChunkHashMap_KC.containsKey(chunkHash)) return 0;
+        return loadedChunkHashMap_KC.get(chunkHash).lastAccessedTick;
+    }
+
+    private boolean shouldUnloadChunk(Chunk chunk)
+    {
+        if (chunk == null) return false;
+        return MinecraftServer.getServer().getTickCounter() - chunk.lastAccessedTick > MinecraftServer.getServer().cauldronConfig.chunkGCGracePeriod.getValue();
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/FlatLayerInfo.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/FlatLayerInfo.java
index 32a619c..dd1bc84 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/FlatLayerInfo.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/FlatLayerInfo.java
@@ -12,7 +12,6 @@ public class FlatLayerInfo
 
     public FlatLayerInfo(int p_i45467_1_, Block p_i45467_2_)
     {
-        this.layerCount = 1;
         this.layerCount = p_i45467_1_;
         this.field_151537_a = p_i45467_2_;
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/feature/WorldGenIceSpike.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/feature/WorldGenIceSpike.java
index 9197bd4..3c5c029 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/feature/WorldGenIceSpike.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/feature/WorldGenIceSpike.java
@@ -56,7 +56,7 @@ public class WorldGenIceSpike extends WorldGenerator
 
                             if (block.getMaterial() == Material.air || block == Blocks.dirt || block == Blocks.snow || block == Blocks.ice)
                             {
-                                this.func_150515_a(p_76484_1_, p_76484_3_ + l1, p_76484_4_ + j1, p_76484_5_ + i2, Blocks.packed_ice);
+                                p_76484_1_.setBlock(p_76484_3_ + l1, p_76484_4_ + j1, p_76484_5_ + i2, Blocks.packed_ice); // Spigot
                             }
 
                             if (j1 != 0 && k1 > 1)
@@ -65,7 +65,7 @@ public class WorldGenIceSpike extends WorldGenerator
 
                                 if (block.getMaterial() == Material.air || block == Blocks.dirt || block == Blocks.snow || block == Blocks.ice)
                                 {
-                                    this.func_150515_a(p_76484_1_, p_76484_3_ + l1, p_76484_4_ - j1, p_76484_5_ + i2, Blocks.packed_ice);
+                                   p_76484_1_.setBlock(p_76484_3_ + l1, p_76484_4_ - j1, p_76484_5_ + i2, Blocks.packed_ice); // Spigot
                                 }
                             }
                         }
@@ -106,7 +106,7 @@ public class WorldGenIceSpike extends WorldGenerator
 
                             if (block1.getMaterial() == Material.air || block1 == Blocks.dirt || block1 == Blocks.snow || block1 == Blocks.ice || block1 == Blocks.packed_ice)
                             {
-                                this.func_150515_a(p_76484_1_, p_76484_3_ + j2, l1, p_76484_5_ + k1, Blocks.packed_ice);
+                                p_76484_1_.setBlock(p_76484_3_ + j2, l1, p_76484_5_ + k1, Blocks.packed_ice); // Spigot
                                 --l1;
                                 --k2;
 
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/feature/WorldGenShrub.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/feature/WorldGenShrub.java
index e25d959..68c9dff 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/feature/WorldGenShrub.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/feature/WorldGenShrub.java
@@ -62,7 +62,13 @@ public class WorldGenShrub extends WorldGenTrees
                     }
                 }
             }
+        // CraftBukkit start - Return false if gen was unsuccessful
         } 
+        else 
+        {
+            return false;
+        }
+        // CraftBukkit end
 
         return true;
     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/feature/WorldGeneratorBonusChest.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/feature/WorldGeneratorBonusChest.java
index d5a65f7..967aece 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/feature/WorldGeneratorBonusChest.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/feature/WorldGeneratorBonusChest.java
@@ -50,7 +50,7 @@ public class WorldGeneratorBonusChest extends WorldGenerator
                     p_76484_1_.setBlock(i1, j1, k1, Blocks.chest, 0, 2);
                     TileEntityChest tileentitychest = (TileEntityChest)p_76484_1_.getTileEntity(i1, j1, k1);
 
-                    if (tileentitychest != null && tileentitychest != null)
+                    if (tileentitychest != null)
                     {
                         WeightedRandomChestContent.generateChestContents(p_76484_2_, this.theBonusChestGenerator, tileentitychest, this.itemsToGenerateInBonusChest);
                     }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/structure/MapGenStronghold.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/structure/MapGenStronghold.java
index 21b1ccc..9a2673c 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/structure/MapGenStronghold.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/structure/MapGenStronghold.java
@@ -92,7 +92,17 @@ public class MapGenStronghold extends MapGenStructure
                 double d1 = (1.25D * (double)l + random.nextDouble()) * this.field_82671_h * (double)l;
                 int j1 = (int)Math.round(Math.cos(d0) * d1);
                 int k1 = (int)Math.round(Math.sin(d0) * d1);
-                ChunkPosition chunkposition = this.worldObj.getWorldChunkManager().findBiomePosition((j1 << 4) + 8, (k1 << 4) + 8, 112, this.field_151546_e, random);
+                // Cauldron start - catch invalid positions
+                ChunkPosition chunkposition = null;
+                try 
+                {
+                    chunkposition = this.worldObj.getWorldChunkManager().findBiomePosition((j1 << 4) + 8, (k1 << 4) + 8, 112, this.field_151546_e, random);
+                }
+                catch (ArrayIndexOutOfBoundsException e)
+                {
+                    // ignore
+                }
+                // Cauldron end
 
                 if (chunkposition != null)
                 {
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java
index 3ae5e59..1ac7503 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java
@@ -239,8 +239,17 @@ public abstract class MapGenStructure extends MapGenBase
     {
         if (this.field_143029_e == null)
         {
-            this.field_143029_e = (MapGenStructureData)p_143027_1_.perWorldStorage.loadData(MapGenStructureData.class, this.func_143025_a());
+            // Spigot Start
+            if (p_143027_1_.getSpigotConfig().saveStructureInfo && !this.func_143025_a().equals("Mineshaft")) // Cauldron
+            {
+                this.field_143029_e = (MapGenStructureData) p_143027_1_.loadItemData(MapGenStructureData.class, this.func_143025_a());
+            }
+            else
+            {
+                this.field_143029_e = new MapGenStructureData(this.func_143025_a());
+            }
 
+            // Spigot End
             if (this.field_143029_e == null)
             {
                 this.field_143029_e = new MapGenStructureData(this.func_143025_a());
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/gen/structure/StructureStart.java ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/structure/StructureStart.java
index 5a9db1e..7adb0e2 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/gen/structure/StructureStart.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/gen/structure/StructureStart.java
@@ -41,7 +41,8 @@ public abstract class StructureStart
         {
             StructureComponent structurecomponent = (StructureComponent)iterator.next();
 
-            if (structurecomponent.getBoundingBox().intersectsWith(p_75068_3_) && !structurecomponent.addComponentParts(p_75068_1_, p_75068_2_, p_75068_3_))
+            // Cauldron - validate structurecomponent
+            if ((structurecomponent == null || structurecomponent.getBoundingBox() == null) || (structurecomponent.getBoundingBox().intersectsWith(p_75068_3_) && !structurecomponent.addComponentParts(p_75068_1_, p_75068_2_, p_75068_3_)))
             {
                 iterator.remove();
             }
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/DerivedWorldInfo.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/DerivedWorldInfo.java
index 5701ec5..ebd34ac 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/DerivedWorldInfo.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/DerivedWorldInfo.java
@@ -75,7 +75,8 @@ public class DerivedWorldInfo extends WorldInfo
 
     public String getWorldName()
     {
-        return this.theWorldInfo.getWorldName();
+        String name = super.getWorldName();
+        return name != null ? name : this.theWorldInfo.getWorldName();
     }
 
     public int getSaveVersion()
@@ -129,8 +130,6 @@ public class DerivedWorldInfo extends WorldInfo
 
     public void setSpawnPosition(int p_76081_1_, int p_76081_2_, int p_76081_3_) {}
 
-    public void setWorldName(String p_76062_1_) {}
-
     public void setSaveVersion(int p_76078_1_) {}
 
     public void setThundering(boolean p_76069_1_) {}
@@ -174,4 +173,17 @@ public class DerivedWorldInfo extends WorldInfo
     {
         return this.theWorldInfo.getGameRulesInstance();
     }
+    
+    public int getDimension() {
+        return this.theWorldInfo.getDimension();
+    }
+    
+    public void setDimension(int dim) {
+        this.theWorldInfo.setDimension(dim);
+    }
+    
+    @Override
+    public void tick() {
+        theWorldInfo.tick();
+    }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/ISaveHandler.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/ISaveHandler.java
index 2f225dc..32dc8e8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/ISaveHandler.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/ISaveHandler.java
@@ -27,4 +27,6 @@ public interface ISaveHandler
     File getMapFileFromName(String p_75758_1_);
 
     String getWorldDirectoryName();
+
+    java.util.UUID getUUID(); // CraftBukkit
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/MapData.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/MapData.java
index 1b0ea95..502b782 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/MapData.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/MapData.java
@@ -14,6 +14,14 @@ import net.minecraft.nbt.*;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSavedData;
 
+// CraftBukkit start
+import java.util.UUID;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapView;
+// CraftBukkit end
+
 public class MapData extends WorldSavedData
 {
     public int xCenter;
@@ -24,11 +32,21 @@ public class MapData extends WorldSavedData
     public List playersArrayList = new ArrayList();
     private Map playersHashMap = new HashMap();
     public Map playersVisibleOnMap = new LinkedHashMap();
+
+    // CraftBukkit start
+    public final CraftMapView mapView;
+    private CraftServer server;
+    private UUID uniqueId = null;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00000577";
 
     public MapData(String p_i2140_1_)
     {
         super(p_i2140_1_);
+        // CraftBukkit start
+        mapView = new CraftMapView(this);
+        server = (CraftServer) org.bukkit.Bukkit.getServer();
+        // CraftBukkit end
     }
 
     public void readFromNBT(NBTTagCompound p_76184_1_)
@@ -107,7 +125,7 @@ public class MapData extends WorldSavedData
     {
         if (!this.playersHashMap.containsKey(p_76191_1_))
         {
-            MapData.MapInfo mapinfo = new MapData.MapInfo(p_76191_1_);
+            MapData.MapInfo mapinfo = new MapData.MapInfo(this, p_76191_1_); // Cauldron
             this.playersHashMap.put(p_76191_1_, mapinfo);
             this.playersArrayList.add(mapinfo);
         }
@@ -265,7 +283,7 @@ public class MapData extends WorldSavedData
 
         if (mapinfo == null)
         {
-            mapinfo = new MapData.MapInfo(p_82568_1_);
+            mapinfo = new MapData.MapInfo(this, p_82568_1_); // Cauldron
             this.playersHashMap.put(p_82568_1_, mapinfo);
             this.playersArrayList.add(mapinfo);
         }
@@ -300,10 +318,12 @@ public class MapData extends WorldSavedData
         private byte[] lastPlayerLocationOnMap;
         public int field_82569_d;
         private boolean field_82570_i;
+        final MapData mapDataObj; // Cauldron
         private static final String __OBFID = "CL_00000578";
 
-        public MapInfo(EntityPlayer p_i2138_2_)
+        public MapInfo(MapData mapData, EntityPlayer p_i2138_2_)
         {
+            this.mapDataObj = mapData; // Cauldron
             this.entityplayerObj = p_i2138_2_;
 
             for (int i = 0; i < this.field_76209_b.length; ++i)
@@ -328,21 +348,38 @@ public class MapData extends WorldSavedData
                 int i;
                 int i1;
 
+                // Spigot start
+                boolean custom = this.mapDataObj.mapView.renderers.size() > 1 || !(this.mapDataObj.mapView.renderers.get(0) instanceof org.bukkit.craftbukkit.map.CraftMapRenderer);
+                org.bukkit.craftbukkit.map.RenderData render = (custom) ? this.mapDataObj.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) entityplayerObj.getBukkitEntity()) : null; // CraftBukkit
+    
                 if (--this.ticksUntilPlayerLocationMapUpdate < 0)
                 {
                     this.ticksUntilPlayerLocationMapUpdate = 4;
-                    abyte = new byte[MapData.this.playersVisibleOnMap.size() * 3 + 1];
+                    abyte = new byte[((custom) ? render.cursors.size() : this.mapDataObj.playersVisibleOnMap.size()) * 3 + 1]; // CraftBukkit
                     abyte[0] = 1;
                     i = 0;
     
-                    for (Iterator iterator = MapData.this.playersVisibleOnMap.values().iterator(); iterator.hasNext(); ++i)
+                    // CraftBukkit start
+    
+                    // Spigot start
+                    for (Iterator iterator = ((custom) ? render.cursors.iterator() : this.mapDataObj.playersVisibleOnMap.values().iterator()); iterator.hasNext(); ++i)
                     {
-                        MapData.MapCoord mapcoord = (MapData.MapCoord)iterator.next();
-                        abyte[i * 3 + 1] = (byte)(mapcoord.iconSize << 4 | mapcoord.iconRotation & 15);
-                        abyte[i * 3 + 2] = mapcoord.centerX;
-                        abyte[i * 3 + 3] = mapcoord.centerZ;
+                        org.bukkit.map.MapCursor cursor = (custom) ? (org.bukkit.map.MapCursor) iterator.next() : null;
+    
+                        if (cursor != null && !cursor.isVisible())
+                        {
+                            continue;
+                        }
+    
+                        MapCoord deco = (custom) ? null : (MapCoord) iterator.next();
+                        abyte[i * 3 + 1] = (byte)(((custom) ? cursor.getRawType() : deco.iconSize) << 4 | ((custom) ? cursor.getDirection() : deco.iconRotation) & 15);
+                        abyte[i * 3 + 2] = (byte)((custom) ? cursor.getX() : deco.centerX);
+                        abyte[i * 3 + 3] = (byte)((custom) ? cursor.getY() : deco.centerZ);
                     }
     
+                    // Spigot end
+                    // CraftBukkit end
+
                     boolean flag = !p_76204_1_.isOnItemFrame();
 
                     if (this.lastPlayerLocationOnMap != null && this.lastPlayerLocationOnMap.length == abyte.length)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/SaveFormatOld.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/SaveFormatOld.java
index d922e1c..dcc31c2 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/SaveFormatOld.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/SaveFormatOld.java
@@ -179,7 +179,7 @@ public class SaveFormatOld implements ISaveFormat
 
                 logger.warn("Unsuccessful in deleting contents.");
 
-                if (i < 5)
+                /*if (i < 5) // FFoKC - off sleep
                 {
                     try
                     {
@@ -189,7 +189,7 @@ public class SaveFormatOld implements ISaveFormat
                     {
                         ;
                     }
-                }
+                }*/
             }
 
             return file1.delete();
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/SaveHandler.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/SaveHandler.java
index 4bed2ec..8f15bd3 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/SaveHandler.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/SaveHandler.java
@@ -21,6 +21,13 @@ import net.minecraft.world.chunk.storage.IChunkLoader;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.UUID;
+
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+// CraftBukkit end
+import cpw.mods.fml.common.registry.GameData; // Cauldron
+
 public class SaveHandler implements ISaveHandler, IPlayerFileData
 {
     private static final Logger logger = LogManager.getLogger();
@@ -29,6 +36,8 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
     private final File mapDataDir;
     private final long initializationTime = MinecraftServer.getSystemTimeMillis();
     private final String saveDirectoryName;
+    private UUID uuid = null; // CraftBukkit
+    private static boolean initializedBukkit = false; // Cauldron
     private static final String __OBFID = "CL_00000585";
 
     public SaveHandler(File p_i2146_1_, String p_i2146_2_, boolean p_i2146_3_)
@@ -67,7 +76,7 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
         catch (IOException ioexception)
         {
             ioexception.printStackTrace();
-            throw new RuntimeException("Failed to check session lock, aborting");
+            throw new RuntimeException("Failed to check session lock for world " + this.worldDirectory + ", aborting"); // Cauldron
         }
     }
 
@@ -87,7 +96,7 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
             {
                 if (datainputstream.readLong() != this.initializationTime)
                 {
-                    throw new MinecraftException("The save is being accessed from another location, aborting");
+                    throw new MinecraftException("The save folder for world " + this.worldDirectory + " is being accessed from another location, aborting"); // Cauldron
                 }
             }
             finally
@@ -97,7 +106,10 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
         }
         catch (IOException ioexception)
         {
-            throw new MinecraftException("Failed to check session lock, aborting");
+            // Cauldron start
+            ioexception.printStackTrace();
+            throw new MinecraftException("Failed to check session lock for world " + this.worldDirectory + ", aborting");
+            // Cauldron end
         }
     }
 
@@ -122,6 +134,7 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
                 nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
                 worldInfo = new WorldInfo(nbttagcompound1);
                 FMLCommonHandler.instance().handleWorldDataLoad(this, worldInfo, nbttagcompound);
+                this.initBukkitData(worldInfo); // Cauldron
                 return worldInfo;
             }
             catch (StartupQuery.AbortedException e)
@@ -145,6 +158,7 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
                 nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
                 worldInfo = new WorldInfo(nbttagcompound1);
                 FMLCommonHandler.instance().handleWorldDataLoad(this, worldInfo, nbttagcompound);
+                this.initBukkitData(worldInfo); // Cauldron
                 return worldInfo;
             }
             catch (StartupQuery.AbortedException e)
@@ -157,6 +171,7 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
             }
         }
 
+        this.initBukkitData(worldInfo); // Cauldron
         return null;
     }
 
@@ -284,6 +299,18 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
 
         if (nbttagcompound != null)
         {
+            // CraftBukkit start
+            if (p_75752_1_ instanceof EntityPlayerMP)
+            {
+                CraftPlayer player = (CraftPlayer) p_75752_1_.getBukkitEntity(); // Cauldron
+                // Only update first played if it is older than the one we have
+                long modified = new File(playersDirectory, p_75752_1_.getCommandSenderName() + ".dat").lastModified();
+                if (modified < player.getFirstPlayed())
+                {
+                    player.setFirstPlayed(modified);
+                }
+            }
+            // CraftBukkit end
             p_75752_1_.readFromNBT(nbttagcompound);
         }
 
@@ -291,6 +318,27 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
         return nbttagcompound;
     }
 
+    // CraftBukkit start
+    public NBTTagCompound getPlayerData(String par1Str)
+    {
+        try
+        {
+            File file1 = new File(this.playersDirectory, par1Str + ".dat");
+
+            if (file1.exists())
+            {
+                return CompressedStreamTools.readCompressed(new FileInputStream(file1));
+            }
+        }
+        catch (Exception exception)
+        {
+            logger.warn("Failed to load player data for " + par1Str);
+        }
+
+        return null;
+    }
+    // CraftBukkit end
+
     public IPlayerFileData getSaveHandler()
     {
         return this;
@@ -323,6 +371,100 @@ public class SaveHandler implements ISaveHandler, IPlayerFileData
         return this.saveDirectoryName;
     }
 
+    // CraftBukkit start
+    public UUID getUUID()
+    {
+        if (uuid != null)
+        {
+            return uuid;
+        }
+
+        File file1 = new File(this.worldDirectory, "uid.dat");
+
+        if (file1.exists())
+        {
+            DataInputStream dis = null;
+
+            try
+            {
+                dis = new DataInputStream(new FileInputStream(file1));
+                return uuid = new UUID(dis.readLong(), dis.readLong());
+            }
+            catch (IOException ex)
+            {
+                logger.warn("Failed to read " + file1 + ", generating new random UUID", ex);
+            }
+            finally
+            {
+                if (dis != null)
+                {
+                    try
+                    {
+                        dis.close();
+                    }
+                    catch (IOException ex)
+                    {
+                        // NOOP
+                    }
+                }
+            }
+        }
+
+        uuid = UUID.randomUUID();
+        DataOutputStream dos = null;
+
+        try
+        {
+            dos = new DataOutputStream(new FileOutputStream(file1));
+            dos.writeLong(uuid.getMostSignificantBits());
+            dos.writeLong(uuid.getLeastSignificantBits());
+        }
+        catch (IOException ex)
+        {
+            logger.warn("Failed to write " + file1, ex);
+        }
+        finally
+        {
+            if (dos != null)
+            {
+                try
+                {
+                    dos.close();
+                }
+                catch (IOException ex)
+                {
+                    // NOOP
+                }
+            }
+        }
+
+        return uuid;
+    }
+
+    public File getPlayerDir()
+    {
+        return playersDirectory;
+    }
+
+    // CraftBukkit end
+
+    // Cauldron start
+    public void initBukkitData(WorldInfo worldInfo)
+    {
+        // inject bukkit materials before plugins load
+        if (!this.initializedBukkit && (worldInfo == null || worldInfo.getDimension() == 0))
+        {
+            GameData.injectBlockBukkitMaterials();
+            GameData.injectItemBukkitMaterials();
+            // since we modify bukkit enums, we need to guarantee that plugins are
+            // loaded after all mods have been loaded by FML to avoid race conditions.
+            MinecraftServer.getServer().server.loadPlugins();
+            MinecraftServer.getServer().server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+            this.initializedBukkit = true;
+        }
+    }
+    // Cauldron end
+
     public NBTTagCompound getPlayerNBT(EntityPlayerMP player)
     {
         try
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/SaveHandlerMP.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/SaveHandlerMP.java
index 2ab6ad6..f458a25 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/SaveHandlerMP.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/SaveHandlerMP.java
@@ -3,6 +3,8 @@ package net.minecraft.world.storage;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.io.File;
+import java.util.UUID;
+
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldProvider;
@@ -50,4 +52,12 @@ public class SaveHandlerMP implements ISaveHandler
     {
         return null;
     }
+
+    // Cauldron start
+    @Override
+    public UUID getUUID()
+    {
+        return this.getUUID();
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/ThreadedFileIOBase.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/ThreadedFileIOBase.java
index ceea349..d5628b8 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/ThreadedFileIOBase.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/ThreadedFileIOBase.java
@@ -39,17 +39,17 @@ public class ThreadedFileIOBase implements Runnable
                 ++this.savedIOCounter;
             }
 
-            try
+            /*try // KCauldron start
             {
                 Thread.sleep(this.isThreadWaiting ? 0L : 10L);
             }
             catch (InterruptedException interruptedexception1)
             {
                 interruptedexception1.printStackTrace();
-            }
+            }*/ // KCauldron end
         }
 
-        if (this.threadedIOQueue.isEmpty())
+        /*if (this.threadedIOQueue.isEmpty()) // FFoKC - off sleep
         {
             try
             {
@@ -59,7 +59,7 @@ public class ThreadedFileIOBase implements Runnable
             {
                 interruptedexception.printStackTrace();
             }
-        }
+        }*/
     }
 
     public void queueIO(IThreadedFileIO p_75735_1_)
diff --git ./eclipse/Clean/src/main/java/net/minecraft/world/storage/WorldInfo.java ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/WorldInfo.java
index 5951732..40d8c2d 100644
--- ./eclipse/Clean/src/main/java/net/minecraft/world/storage/WorldInfo.java
+++ ./eclipse/cauldron/src/main/java/net/minecraft/world/storage/WorldInfo.java
@@ -117,6 +117,7 @@ public class WorldInfo
         this.thunderTime = p_i2157_1_.getInteger("thunderTime");
         this.thundering = p_i2157_1_.getBoolean("thundering");
         this.hardcore = p_i2157_1_.getBoolean("hardcore");
+        this.dimension = p_i2157_1_.getInteger("dimension"); // Cauldron
 
         if (p_i2157_1_.hasKey("initialized", 99))
         {
@@ -193,6 +194,7 @@ public class WorldInfo
         this.allowCommands = p_i2159_1_.allowCommands;
         this.initialized = p_i2159_1_.initialized;
         this.theGameRules = p_i2159_1_.theGameRules;
+        this.dimension = p_i2159_1_.dimension; // Cauldron
     }
 
     public NBTTagCompound getNBTTagCompound()
@@ -234,6 +236,7 @@ public class WorldInfo
         p_76064_1_.setBoolean("allowCommands", this.allowCommands);
         p_76064_1_.setBoolean("initialized", this.initialized);
         p_76064_1_.setTag("GameRules", this.theGameRules.writeGameRulesToNBT());
+        p_76064_1_.setInteger("dimension", this.dimension); // Cauldron
 
         if (p_76064_2_ != null)
         {
@@ -282,6 +285,21 @@ public class WorldInfo
         return this.playerTag;
     }
 
+    // Cauldron start
+    /**
+     * Sets the Dimension.
+     */
+    public void setDimension(int dim)
+    {
+        this.dimension = dim;
+    }
+
+    public int getDimension()
+    {
+        return this.dimension;
+    }
+    // Cauldron end
+
     public int getVanillaDimension()
     {
         return this.dimension;
@@ -556,4 +574,8 @@ public class WorldInfo
     {
         return this.additionalProperties!=null? this.additionalProperties.get(additionalProperty) : null;
     }
+    
+    public void tick() {
+        totalTime++;
+    }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/DimensionManager.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/DimensionManager.java
index 130646b..2b1f8c5 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/DimensionManager.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/DimensionManager.java
@@ -34,6 +34,15 @@ import net.minecraft.world.WorldSettings;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.SaveHandler;
 import net.minecraftforge.event.world.WorldEvent;
+// Cauldron start
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
+import net.minecraftforge.cauldron.CauldronUtils;
+import net.minecraftforge.common.util.EnumHelper;
+import org.bukkit.World.Environment;
+import org.bukkit.WorldCreator;
+import org.bukkit.generator.ChunkGenerator;
+// Cauldron end
 
 public class DimensionManager
 {
@@ -46,6 +55,11 @@ public class DimensionManager
     private static BitSet dimensionMap = new BitSet(Long.SIZE << 4);
     private static ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().<World,World>makeMap();
     private static Multiset<Integer> leakedWorlds = HashMultiset.create();
+    // Cauldron start
+    private static Hashtable<Class<? extends WorldProvider>, Integer> classToProviders = new Hashtable<Class<? extends WorldProvider>, Integer>();
+    private static ArrayList<Integer> bukkitDims = new ArrayList<Integer>(); // used to keep track of Bukkit dimensions
+    private static final String FILE_SEPARATOR = System.getProperty("file.separator");
+    // Cauldron end
 
     public static boolean registerProviderType(int id, Class<? extends WorldProvider> provider, boolean keepLoaded)
     {
@@ -53,7 +67,23 @@ public class DimensionManager
         {
             return false;
         }
+        // Cauldron start - register provider with bukkit and add appropriate config option
+        String worldType = "unknown";
+        if (id != -1 && id != 0 && id != 1) // ignore vanilla
+        {
+            worldType = provider.getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            worldType = worldType.replace("provider", "");
+            registerBukkitEnvironment(id, worldType);
+        }
+        else
+        {
+            worldType = Environment.getEnvironment(id).name().toLowerCase();
+        }
+        keepLoaded = MinecraftServer.getServer().cauldronConfig.getBoolean("world-environment-settings." + worldType + ".keep-world-loaded", keepLoaded);
+        // Cauldron end
         providers.put(id, provider);
+        classToProviders.put(provider, id);
         spawnSettings.put(id, keepLoaded);
         return true;
     }
@@ -157,28 +187,33 @@ public class DimensionManager
 
     public static Integer[] getIDs(boolean check)
     {
-        if (check)
+        // Cauldron start - check config option and only log world leak messages if enabled
+        if (MinecraftServer.getServer().cauldronConfig.worldLeakDebug.getValue())
         {
-            List<World> allWorlds = Lists.newArrayList(weakWorldMap.keySet());
-            allWorlds.removeAll(worlds.values());
-            for (ListIterator<World> li = allWorlds.listIterator(); li.hasNext(); )
-            {
-                World w = li.next();
-                leakedWorlds.add(System.identityHashCode(w));
-            }
-            for (World w : allWorlds)
+            if (check)
             {
-                int leakCount = leakedWorlds.count(System.identityHashCode(w));
-                if (leakCount == 5)
+                List<World> allWorlds = Lists.newArrayList(weakWorldMap.keySet());
+                allWorlds.removeAll(worlds.values());
+                for (ListIterator<World> li = allWorlds.listIterator(); li.hasNext(); )
                 {
-                    FMLLog.fine("The world %x (%s) may have leaked: first encounter (5 occurences).\n", System.identityHashCode(w), w.getWorldInfo().getWorldName());
+                    World w = li.next();
+                    leakedWorlds.add(System.identityHashCode(w));
                 }
-                else if (leakCount % 5 == 0)
+                for (World w : allWorlds)
                 {
-                    FMLLog.fine("The world %x (%s) may have leaked: seen %d times.\n", System.identityHashCode(w), w.getWorldInfo().getWorldName(), leakCount);
+                    int leakCount = leakedWorlds.count(System.identityHashCode(w));
+                    if (leakCount == 5)
+                    {
+                        FMLLog.fine("The world %x (%s) may have leaked: first encounter (5 occurences). Note: This may be a caused by a mod, plugin, or just a false-positive(No memory leak). If server crashes due to OOM, report to Cauldron.\n", System.identityHashCode(w), w.getWorldInfo().getWorldName());
+                    }
+                    else if (leakCount % 5 == 0)
+                    {
+                        FMLLog.fine("The world %x (%s) may have leaked: seen %d times. Note: This may be a caused by a mod, plugin, or just a false-positive(No memory leak). If server crashes due to OOM, report to Cauldron.\n", System.identityHashCode(w), w.getWorldInfo().getWorldName(), leakCount);
+                    }
                 }
             }
         }
+        // Cauldron end
         return getIDs();
     }
     public static Integer[] getIDs()
@@ -191,12 +226,23 @@ public class DimensionManager
         if (world != null)
         {
             worlds.put(id, world);
-            weakWorldMap.put(world, world);
+            // Cauldron start - check config option and only log world leak messages if enabled
+            if (MinecraftServer.getServer().cauldronConfig.worldLeakDebug.getValue())
+            {
+                weakWorldMap.put(world, world);
+            }
+            // handle all world adds here for Bukkit
+            if (!MinecraftServer.getServer().worlds.contains(world))
+            {
+                MinecraftServer.getServer().worlds.add(world);
+            }
+            // Cauldron end
             MinecraftServer.getServer().worldTickTimes.put(id, new long[100]);
             FMLLog.info("Loading dimension %d (%s) (%s)", id, world.getWorldInfo().getWorldName(), world.func_73046_m());
         }
         else
         {
+            MinecraftServer.getServer().worlds.remove(getWorld(id)); // Cauldron - remove world from our new world arraylist
             worlds.remove(id);
             MinecraftServer.getServer().worldTickTimes.remove(id);
             FMLLog.info("Unloading dimension %d", id);
@@ -224,6 +270,7 @@ public class DimensionManager
     }
 
     public static void initDimension(int dim) {
+        if (dim == 0) return; // Cauldron - overworld
         WorldServer overworld = getWorld(0);
         if (overworld == null)
         {
@@ -231,6 +278,12 @@ public class DimensionManager
         }
         try
         {
+            // Cauldron start - Fixes MultiVerse issue when mods such as Twilight Forest try to hotload their dimension when using its WorldProvider
+            if(net.minecraftforge.cauldron.CauldronHooks.craftWorldLoading)
+            {
+                return;
+            }
+            // Cauldron end
             DimensionManager.getProviderType(dim);
         }
         catch (Exception e)
@@ -242,9 +295,52 @@ public class DimensionManager
         ISaveHandler savehandler = overworld.getSaveHandler();
         WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
 
-        WorldServer world = (dim == 0 ? overworld : new WorldServerMulti(mcServer, savehandler, overworld.getWorldInfo().getWorldName(), dim, worldSettings, overworld, mcServer.theProfiler));
+        // Cauldron start - handles hotloading dimensions
+        String worldType;
+        String name;
+        String oldName = "";
+        Environment env = Environment.getEnvironment(getProviderType(dim));
+        if (dim >= -1 && dim <= 1)
+        {
+            if ((dim == -1 && !mcServer.getAllowNether()) || (dim == 1 && !mcServer.server.getAllowEnd()))
+                return;
+            worldType = env.toString().toLowerCase();
+            name = "DIM" + dim;
+        }
+        else
+        {
+            WorldProvider provider = WorldProvider.getProviderForDimension(dim);
+            worldType = provider.getClass().getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            oldName = "world_" + worldType;
+            worldType = worldType.replace("provider", "");
+
+            if (Environment.getEnvironment(DimensionManager.getProviderType(dim)) == null)
+                    env = DimensionManager.registerBukkitEnvironment(DimensionManager.getProviderType(provider.getClass()), worldType);
+
+            name = provider.getSaveFolder();
+            if (name == null) name = "DIM0";
+        }
+        // add ability to disable dimensions
+        if (!MinecraftServer.getServer().cauldronConfig.getBoolean("world-environment-settings." + worldType + ".enabled", true))
+            return;
+
+        CauldronUtils.migrateWorlds(worldType, oldName, overworld.getWorldInfo().getWorldName(), name); // Cauldron
+        ChunkGenerator gen = mcServer.server.getGenerator(name);
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.func_82750_a(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        WorldServer world = new WorldServerMulti(mcServer, new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true), name, dim, worldSettings, overworld, mcServer.theProfiler, env, gen);
+
+        if (gen != null)
+        {
+            world.getWorld().getPopulators().addAll(gen.getDefaultPopulators(world.getWorld()));
+        }
+        mcServer.getConfigurationManager().setPlayerManager(mcServer.worlds.toArray(new WorldServer[mcServer.worlds.size()]));
         world.addWorldAccess(new WorldManager(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        mcServer.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(world.getWorld()));
+        // Cauldron end
         if (!mcServer.isSinglePlayer())
         {
             world.getWorldInfo().setGameType(mcServer.getGameType());
@@ -253,6 +349,79 @@ public class DimensionManager
         mcServer.func_147139_a(mcServer.func_147135_j());
     }
 
+    // Cauldron start - new method for handling creation of Bukkit dimensions. Currently supports MultiVerse
+    public static WorldServer initDimension(WorldCreator creator, WorldSettings worldSettings) {
+        WorldServer overworld = getWorld(0);
+        if (overworld == null) {
+            throw new RuntimeException("Cannot Hotload Dim: Overworld is not Loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.func_73046_m();
+
+        String worldType;
+        String name;
+
+        int providerId = 0;
+        if (creator.environment() != null)
+            providerId = creator.environment().getId();
+        try {
+            providerId = getProviderType(providerId);
+        }
+        catch (IllegalArgumentException e)
+        {
+            // do nothing
+        }
+
+        Environment env = creator.environment();
+        worldType = env.name().toLowerCase();
+        name = creator.name();
+        int dim = 0;
+        // Use saved dimension from level.dat if it exists. This guarantees that after a world is created, the same dimension will be used. Fixes issues with MultiVerse
+        AnvilSaveHandler saveHandler = new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true);
+        if (saveHandler.loadWorldInfo() != null)
+        {
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if (savedDim != 0 && savedDim != -1 && savedDim != 1)
+            {
+                dim = savedDim;
+            }
+        }
+        if (dim == 0)
+        {
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) // handle reloads properly
+        {
+            registerDimension(dim, providerId);
+            addBukkitDimension(dim);
+        }
+        ChunkGenerator gen = creator.generator();
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.func_82750_a(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        WorldServer world = new WorldServerMulti(mcServer, saveHandler, name, dim, worldSettings, overworld, mcServer.theProfiler, env, gen);
+
+        if (gen != null)
+        {
+            world.getWorld().getPopulators().addAll(gen.getDefaultPopulators(world.getWorld()));
+        }
+        world.provider.dimensionId = dim; // Fix for TerrainControl injecting their own WorldProvider
+        mcServer.getConfigurationManager().setPlayerManager(mcServer.worlds.toArray(new WorldServer[mcServer.worlds.size()]));
+
+        world.addWorldAccess(new WorldManager(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        if (!mcServer.isSinglePlayer())
+        {
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+        mcServer.func_147139_a(mcServer.func_147135_j());
+
+        return world;
+    }
+    // Cauldron end
+
     public static WorldServer getWorld(int id)
     {
         return worlds.get(id);
@@ -266,7 +435,7 @@ public class DimensionManager
     public static boolean shouldLoadSpawn(int dim)
     {
         int id = getProviderType(dim);
-        return spawnSettings.containsKey(id) && spawnSettings.get(id);
+        return ((spawnSettings.containsKey(id) && spawnSettings.get(id)) || (getWorld(dim) != null && getWorld(dim).keepSpawnInMemory)); // Cauldron added bukkit check
     }
 
     static
@@ -306,7 +475,8 @@ public class DimensionManager
     }
 
     public static void unloadWorld(int id) {
-        unloadQueue.add(id);
+        if (!shouldLoadSpawn(id)) // Cauldron - prevent mods from force unloading if we have it disabled
+            unloadQueue.add(id);
     }
 
     /*
@@ -315,26 +485,9 @@ public class DimensionManager
     public static void unloadWorlds(Hashtable<Integer, long[]> worldTickTimes) {
         for (int id : unloadQueue) {
             WorldServer w = worlds.get(id);
-            try {
-                if (w != null)
-                {
-                    w.saveAllChunks(true, null);
-                }
-                else
-                {
-                    FMLLog.warning("Unexpected world unload - world %d is already unloaded", id);
-                }
-            } catch (MinecraftException e) {
-                e.printStackTrace();
-            }
-            finally
+            if (w != null)
             {
-                if (w != null)
-                {
-                    MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
-                    w.flush();
-                    setWorld(id, null);
-                }
+                MinecraftServer.getServer().server.unloadWorld(w.getWorld(), true); // Cauldron - unload through our new method for simplicity
             }
         }
         unloadQueue.clear();
@@ -425,4 +578,45 @@ public class DimensionManager
             return null;
         }
     }
+
+    // Cauldron start - add registration for Bukkit Environments
+    public static Environment registerBukkitEnvironment(int dim, String providerName)
+    {
+        Environment env = Environment.getEnvironment(dim);
+        if (env == null) // Cauldron  if environment not found, register one
+        {
+            providerName = providerName.replace("WorldProvider", "");
+            env = EnumHelper.addBukkitEnvironment(dim, providerName.toUpperCase());
+            Environment.registerEnvironment(env);
+        }
+        return env;
+    }
+
+    public static int getProviderType(Class<? extends WorldProvider> provider)
+    {
+        return classToProviders.get(provider);
+    }
+
+    public static void addBukkitDimension(int dim)
+    {
+        if (!bukkitDims.contains(dim))
+            bukkitDims.add(dim);
+    }
+
+    public static void removeBukkitDimension(int dim)
+    {
+        if (bukkitDims.contains(dim))
+            bukkitDims.remove(bukkitDims.indexOf(dim));
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs()
+    {
+        return bukkitDims;
+    }
+
+    public static boolean isBukkitDimension(int dim)
+    {
+        return bukkitDims.contains(dim);
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/ForgeHooks.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/ForgeHooks.java
index 545e56f..6496443 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/ForgeHooks.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/ForgeHooks.java
@@ -63,6 +63,16 @@ import net.minecraftforge.event.entity.player.AnvilRepairEvent;
 import net.minecraftforge.event.world.BlockEvent;
 import net.minecraftforge.event.world.NoteBlockEvent;
 import static net.minecraft.init.Blocks.*;
+// Cauldron start
+import net.minecraftforge.common.util.FakePlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.entity.Player;
+import org.bukkit.event.world.StructureGrowEvent;
+//Cauldron end
 
 public class ForgeHooks
 {
@@ -379,10 +389,12 @@ public class ForgeHooks
     public static ChatComponentTranslation onServerChatEvent(NetHandlerPlayServer net, String raw, ChatComponentTranslation comp)
     {
         ServerChatEvent event = new ServerChatEvent(net.playerEntity, raw, comp);
+        synchronized (ServerChatEvent.class) {            
         if (MinecraftForge.EVENT_BUS.post(event))
         {
             return null;
         }
+        }
         return event.component;
     }
 
@@ -439,6 +451,8 @@ public class ForgeHooks
 
     public static BlockEvent.BreakEvent onBlockBreakEvent(World world, GameType gameType, EntityPlayerMP entityPlayer, int x, int y, int z)
     {
+        // Cauldron - pre-cancel handled in BreakEvent
+        /*
         // Logic from tryHarvestBlock for pre-canceling the event
         boolean preCancelEvent = false;
         if (gameType.isAdventure() && !entityPlayer.isCurrentToolAdventureModeExempt(x, y, z))
@@ -449,9 +463,9 @@ public class ForgeHooks
         {
             preCancelEvent = true;
         }
-
+        */
         // Tell client the block is gone immediately then process events
-        if (world.getTileEntity(x, y, z) == null)
+        if (world.getTileEntity(x, y, z) == null && !(entityPlayer instanceof FakePlayer)) // Cauldron - don't send packets to fakeplayers
         {
             S23PacketBlockChange packet = new S23PacketBlockChange(x, y, z, world);
             packet.field_148883_d = Blocks.air;
@@ -463,11 +477,11 @@ public class ForgeHooks
         Block block = world.getBlock(x, y, z);
         int blockMetadata = world.getBlockMetadata(x, y, z);
         BlockEvent.BreakEvent event = new BlockEvent.BreakEvent(x, y, z, world, block, blockMetadata, entityPlayer);
-        event.setCanceled(preCancelEvent);
+        // event.setCanceled(preCancelEvent); // Cauldron
         MinecraftForge.EVENT_BUS.post(event);
 
         // Handle if the event is canceled
-        if (event.isCanceled())
+        if (event.isCanceled() && !(entityPlayer instanceof FakePlayer)) // Cauldron - don't send packets to fakeplayers
         {
             // Let the client know the block still exists
             entityPlayer.playerNetServerHandler.sendPacket(new S23PacketBlockChange(x, y, z, world));
@@ -500,81 +514,137 @@ public class ForgeHooks
         if (!(itemstack.getItem() instanceof ItemBucket)) // if not bucket
         {
             world.captureBlockSnapshots = true;
+            // Cauldron start
+            if (itemstack.getItem() instanceof net.minecraft.item.ItemDye && itemstack.getItemDamage() == 15)
+            {
+                Block block = world.getBlock(x, y, z);
+                if (block != null && (block instanceof net.minecraft.block.BlockSapling || block instanceof net.minecraft.block.BlockMushroom))
+                {
+                    world.captureTreeGeneration = true;
+                }
+            }
+            // Cauldron end
         }
 
+        ItemStack.currentPlayer = player; // Cauldron
         boolean flag = itemstack.getItem().onItemUse(itemstack, player, world, x, y, z, side, hitX, hitY, hitZ);
+        ItemStack.currentPlayer = null; // Cauldron
         world.captureBlockSnapshots = false;
 
-        if (flag)
+        // Cauldron start
+        if (flag && world.captureTreeGeneration && world.capturedBlockSnapshots.size() > 0)
         {
-            // save new item data
-            int newMeta = itemstack.getItemDamage();
-            int newSize = itemstack.stackSize;
-            NBTTagCompound newNBT = null;
-            if (itemstack.getTagCompound() != null)
-            {
-                newNBT = (NBTTagCompound)itemstack.getTagCompound().copy();
-            }
-            net.minecraftforge.event.world.BlockEvent.PlaceEvent placeEvent = null;
-            List<net.minecraftforge.common.util.BlockSnapshot> blockSnapshots = (List<net.minecraftforge.common.util.BlockSnapshot>) world.capturedBlockSnapshots.clone();
-            world.capturedBlockSnapshots.clear();
+            world.captureTreeGeneration = false;
+            Location loc = new Location(world.getWorld(), (double) x, (double) y, (double) z);
+            TreeType type = net.minecraft.block.BlockSapling.treeType;
+            net.minecraft.block.BlockSapling.treeType = null;
+            List<BlockState> states = new ArrayList();
 
-            // make sure to set pre-placement item data for event
-            itemstack.setItemDamage(meta);
-            itemstack.stackSize = size;
-            if (nbt != null)
+            for (net.minecraftforge.common.util.BlockSnapshot snapshot : (List<net.minecraftforge.common.util.BlockSnapshot>) world.capturedBlockSnapshots.clone())
             {
-                itemstack.setTagCompound(nbt);
+                states.add(new CraftBlockState(snapshot));
             }
-            if (blockSnapshots.size() > 1)
-            {
-                placeEvent = ForgeEventFactory.onPlayerMultiBlockPlace(player, blockSnapshots, net.minecraftforge.common.util.ForgeDirection.getOrientation(side));
-            }
-            else if (blockSnapshots.size() == 1)
+
+            world.capturedBlockSnapshots.clear();
+            StructureGrowEvent event = null;
+            if (type != null)
             {
-                placeEvent = ForgeEventFactory.onPlayerBlockPlace(player, blockSnapshots.get(0), net.minecraftforge.common.util.ForgeDirection.getOrientation(side));
+                event = new StructureGrowEvent(loc, type, false, (Player) player.getBukkitEntity(), states);
+                Bukkit.getPluginManager().callEvent(event);
             }
 
-            if (placeEvent != null && (placeEvent.isCanceled()))
+            if (event == null || !event.isCancelled())
             {
-                flag = false; // cancel placement
-                // revert back all captured blocks
-                for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : blockSnapshots)
+                for (BlockState state : states)
                 {
-                    world.restoringBlockSnapshots = true;
-                    blocksnapshot.restore(true, false);
-                    world.restoringBlockSnapshots = false;
+                    state.update(true);
                 }
             }
-            else
+
+            return flag;
+        }
+        else
+        {
+            world.captureTreeGeneration = false; // Cauldron end
+            if (flag)
             {
-                // Change the stack to its new content
-                itemstack.setItemDamage(newMeta);
-                itemstack.stackSize = newSize;
+                // save new item data
+                int newMeta = itemstack.getItemDamage();
+                int newSize = itemstack.stackSize;
+                NBTTagCompound newNBT = null;
+                if (itemstack.getTagCompound() != null)
+                {
+                    newNBT = (NBTTagCompound) itemstack.getTagCompound().copy();
+                }
+                net.minecraftforge.event.world.BlockEvent.PlaceEvent placeEvent = null;
+                List<net.minecraftforge.common.util.BlockSnapshot> blockSnapshots = (List<net.minecraftforge.common.util.BlockSnapshot>) world.capturedBlockSnapshots
+                        .clone();
+                world.capturedBlockSnapshots.clear();
+
+                // make sure to set pre-placement item data for event
+                itemstack.setItemDamage(meta);
+                itemstack.stackSize = size;
                 if (nbt != null)
                 {
-                    itemstack.setTagCompound(newNBT);
+                    itemstack.setTagCompound(nbt);
+                }
+                if (blockSnapshots.size() > 1)
+                {
+                    placeEvent = ForgeEventFactory.onPlayerMultiBlockPlace(player, blockSnapshots,
+                            net.minecraftforge.common.util.ForgeDirection.getOrientation(side));
+                }
+                else if (blockSnapshots.size() == 1)
+                {
+                    placeEvent = ForgeEventFactory.onPlayerBlockPlace(player, blockSnapshots.get(0),
+                            net.minecraftforge.common.util.ForgeDirection.getOrientation(side));
                 }
 
-                for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : blockSnapshots)
+                if (placeEvent != null && (placeEvent.isCanceled()))
                 {
-                    int blockX = blocksnapshot.x;
-                    int blockY = blocksnapshot.y;
-                    int blockZ = blocksnapshot.z;
-                    int metadata = world.getBlockMetadata(blockX, blockY, blockZ);
-                    int updateFlag = blocksnapshot.flag;
-                    Block oldBlock = blocksnapshot.replacedBlock;
-                    Block newBlock = world.getBlock(blockX, blockY, blockZ);
-                    if (newBlock != null && !(newBlock.hasTileEntity(metadata))) // Containers get placed automatically
+                    flag = false; // cancel placement
+                    // revert back all captured blocks
+                    for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : blockSnapshots)
                     {
-                        newBlock.onBlockAdded(world, blockX, blockY, blockZ);
+                        world.restoringBlockSnapshots = true;
+                        blocksnapshot.restore(true, false);
+                        world.restoringBlockSnapshots = false;
                     }
+                }
+                else
+                {
+                    // Change the stack to its new content
+                    itemstack.setItemDamage(newMeta);
+                    itemstack.stackSize = newSize;
+                    if (nbt != null)
+                    {
+                        itemstack.setTagCompound(newNBT);
+                    }
+
+                    for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : blockSnapshots)
+                    {
+                        int blockX = blocksnapshot.x;
+                        int blockY = blocksnapshot.y;
+                        int blockZ = blocksnapshot.z;
+                        int metadata = world.getBlockMetadata(blockX, blockY, blockZ);
+                        int updateFlag = blocksnapshot.flag;
+                        Block oldBlock = blocksnapshot.replacedBlock;
+                        Block newBlock = world.getBlock(blockX, blockY, blockZ);
+                        if (newBlock != null && !(newBlock.hasTileEntity(metadata))) // Containers
+                                                                                     // get
+                                                                                     // placed
+                                                                                     // automatically
+                        {
+                            newBlock.onBlockAdded(world, blockX, blockY, blockZ);
+                        }
 
-                    world.markAndNotifyBlock(blockX, blockY, blockZ, null, oldBlock, newBlock, updateFlag);
+                        world.markAndNotifyBlock(blockX, blockY, blockZ, null, oldBlock, newBlock, updateFlag);
+                    }
+                    player.addStat(StatList.objectUseStats[Item.getIdFromItem(itemstack.getItem())], 1);
                 }
-                player.addStat(StatList.objectUseStats[Item.getIdFromItem(itemstack.getItem())], 1);
+
             }
         }
+        
         world.capturedBlockSnapshots.clear();
 
         return flag;
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/ForgeVersion.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/ForgeVersion.java
index 324c818..b83fafe 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/ForgeVersion.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/ForgeVersion.java
@@ -25,7 +25,7 @@ public class ForgeVersion
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
     public static final int revisionVersion = 5;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
-    public static final int buildVersion    = 0;
+    public static final int buildVersion    = kcauldron.KCauldron.lookupForgeRevision(); // KCauldron
 
     private static Status status = PENDING;
     private static String target = null;
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/ISpecialArmor.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/ISpecialArmor.java
index 575fe95..ea2a917 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/ISpecialArmor.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/ISpecialArmor.java
@@ -92,6 +92,11 @@ public interface ISpecialArmor
          */
         public static float ApplyArmor(EntityLivingBase entity, ItemStack[] inventory, DamageSource source, double damage)
         {
+            return ApplyArmor(entity, inventory, source, damage, true);
+        }
+
+        public static float ApplyArmor(EntityLivingBase entity, ItemStack[] inventory, DamageSource source, double damage, boolean applyDamage)
+        {
             if (DEBUG)
             {
                 System.out.println("Start: " + damage + " " + (damage * 25));
@@ -145,9 +150,12 @@ public interface ISpecialArmor
                         int itemDamage = (int)(absorb / 25D < 1 ? 1 : absorb / 25D);
                         if (stack.getItem().getClass().equals(ISpecialArmor.class))
                         {
-                            ((ISpecialArmor)stack.getItem()).damageArmor(entity, stack, source, itemDamage, prop.Slot);
+                            if (applyDamage)
+                            {
+                                ((ISpecialArmor) stack.getItem()).damageArmor(entity, stack, source, itemDamage, prop.Slot);
+                            }
                         }
-                        else
+                        else if(applyDamage)
                         {
                             if (DEBUG)
                             {
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
index dccd889..9cf8763 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
@@ -1,6 +1,7 @@
 package net.minecraftforge.common;
 
 import java.io.File;
+import java.util.UUID;
 
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import net.minecraft.world.storage.IPlayerFileData;
@@ -43,4 +44,11 @@ public class WorldSpecificSaveHandler implements ISaveHandler
         return new File(dataDir, name + ".dat");
     }
 
+    // Cauldron start
+    @Override
+    public UUID getUUID()
+    {
+        return parent.getUUID();
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
index e4cda1d..dcf33ec 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
@@ -22,7 +22,7 @@ public class ChunkIOExecutor {
     }
 
     public static void adjustPoolSize(int players) {
-        int size = Math.max(BASE_THREADS, (int) Math.ceil(players / PLAYERS_PER_THREAD));
+        int size = Math.max(BASE_THREADS, (int) Math.ceil((double) players / PLAYERS_PER_THREAD));
         instance.setActiveThreads(size);
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/chunkio/ChunkIOProvider.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/chunkio/ChunkIOProvider.java
index f4982c9..1da02a6 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/chunkio/ChunkIOProvider.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/chunkio/ChunkIOProvider.java
@@ -9,6 +9,9 @@ import net.minecraftforge.event.world.ChunkDataEvent;
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.util.LongHash;
+
 class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChunk, net.minecraft.world.chunk.Chunk, Runnable, RuntimeException> {
     private final AtomicInteger threadNumber = new AtomicInteger(1);
 
@@ -41,12 +44,19 @@ class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChu
         queuedChunk.loader.loadEntities(queuedChunk.world, queuedChunk.compound.getCompoundTag("Level"), chunk);
         MinecraftForge.EVENT_BUS.post(new ChunkDataEvent.Load(chunk, queuedChunk.compound)); // Don't call ChunkDataEvent.Load async
         chunk.lastSaveTime = queuedChunk.provider.worldObj.getTotalWorldTime();
-        queuedChunk.provider.loadedChunkHashMap.add(ChunkCoordIntPair.chunkXZ2Int(queuedChunk.x, queuedChunk.z), chunk);
+        queuedChunk.provider.loadedChunkHashMap_KC.put(LongHash.toLong(queuedChunk.x, queuedChunk.z), chunk);
         queuedChunk.provider.loadedChunks.add(chunk);
         chunk.onChunkLoad();
 
         if (queuedChunk.provider.currentChunkProvider != null) {
+            queuedChunk.provider.worldObj.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
             queuedChunk.provider.currentChunkProvider.recreateStructures(queuedChunk.x, queuedChunk.z);
+            queuedChunk.provider.worldObj.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
+        }
+        
+        Server server = queuedChunk.provider.worldObj.getServer();
+        if (server != null) {
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(chunk.bukkitChunk, false));
         }
 
         chunk.populateChunk(queuedChunk.provider, queuedChunk.provider, queuedChunk.x, queuedChunk.z);
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
index d00bd91..c024c87 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
@@ -35,4 +35,9 @@ public class ForgeNetworkHandler
         clientChannel.pipeline().addAfter(handlerName, "DimensionHandler", new DimensionMessageHandler());
         clientChannel.pipeline().addAfter(handlerName, "FluidIdRegistryHandler", new FluidIdRegistryMessageHandler());
     }
+
+    public static FMLEmbeddedChannel getServerChannel()
+    {
+        return channelPair.get(Side.SERVER);
+    }
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/util/EnumHelper.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/util/EnumHelper.java
index 5f0ec8a..e3e069e 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/util/EnumHelper.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/util/EnumHelper.java
@@ -21,6 +21,22 @@ import net.minecraft.util.MovingObjectPosition.MovingObjectType;
 import net.minecraft.world.EnumSkyBlock;
 import net.minecraft.world.gen.structure.StructureStrongholdPieces.Stronghold.Door;
 import net.minecraftforge.classloading.FMLForgePlugin;
+// Cauldron start
+import cpw.mods.fml.relauncher.ReflectionHelper;
+import net.minecraft.inventory.IInventory;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.tileentity.TileEntity;
+
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.World;
+import org.bukkit.WorldType;
+import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.event.inventory.InventoryType;
+// Cauldron end
 
 public class EnumHelper
 {
@@ -30,6 +46,7 @@ public class EnumHelper
     private static Method newFieldAccessor       = null;
     private static Method fieldAccessorSet       = null;
     private static boolean isSetup               = false;
+    private static final Logger logger = LogManager.getLogger();
 
     //Some enums are decompiled with extra arguments, so lets check for that
     @SuppressWarnings("rawtypes")
@@ -51,6 +68,73 @@ public class EnumHelper
         {EnumRarity.class, EnumChatFormatting.class, String.class}
     };
 
+    // Cauldron start
+    public static Biome addBukkitBiome(String name) 
+    {
+        return (Biome)addEnum(Biome.class, name, new Class[0], new Object[0]);
+    }
+
+    public static World.Environment addBukkitEnvironment(int id, String name)
+    {
+        if (!isSetup)
+        {
+            setup();
+        }
+
+        return (World.Environment)addEnum(World.Environment.class, name, new Class[] { Integer.TYPE }, new Object[] { Integer.valueOf(id) });
+    }
+
+    public static WorldType addBukkitWorldType(String name)
+    {
+        if (!isSetup)
+        {
+            setup();
+        }
+
+        WorldType worldType = addEnum(WorldType.class, name, new Class [] { String.class }, new Object[] { name });
+        Map<String, WorldType> BY_NAME = ReflectionHelper.getPrivateValue(WorldType.class, null, "BY_NAME");
+        BY_NAME.put(name.toUpperCase(), worldType);
+
+        return worldType;
+    }
+
+    public static EntityType addBukkitEntityType(String name, Class <? extends org.bukkit.entity.Entity> clazz, int typeId, boolean independent) {
+        String entityType = name.replace("-", "_").toUpperCase();
+        EntityType bukkitType = addEnum(EntityType.class, entityType, new Class[] { String.class, Class.class, Integer.TYPE, Boolean.TYPE }, new Object[] { name, clazz, typeId, independent });
+
+        Map<String, EntityType> NAME_MAP = ReflectionHelper.getPrivateValue(EntityType.class, null, "NAME_MAP");
+        Map<Short, EntityType> ID_MAP = ReflectionHelper.getPrivateValue(EntityType.class, null, "ID_MAP");
+
+        NAME_MAP.put(name.toLowerCase(), bukkitType);
+        ID_MAP.put((short)typeId, bukkitType);
+
+
+        return bukkitType;
+    }
+
+    public static InventoryType addInventoryType(TileEntity tileentity)
+    {
+        if (!IInventory.class.isAssignableFrom(tileentity.getClass())) return null;
+        String id = (String)TileEntity.classToNameMap.get(tileentity.getClass());
+
+        try
+        {
+            IInventory teInv = (IInventory)tileentity;
+            int size = teInv.getSizeInventory();
+            return addEnum(org.bukkit.event.inventory.InventoryType.class, id, new Class[]{Integer.TYPE, String.class}, new Object[]{size, id});
+        } 
+        catch (Throwable e) 
+        {
+            if (MinecraftServer.getServer().tileEntityConfig.enableTEInventoryWarning.getValue())
+            {
+                logger.log(Level.WARN, "Could not create inventory type " + tileentity.getClass().getName() + " Exception: " + e.toString());
+                logger.log(Level.WARN, "Could not determine default inventory size for type " + tileentity.getClass().getName() + " using size of 9");
+            }
+            return addEnum(org.bukkit.event.inventory.InventoryType.class, id, new Class[]{Integer.TYPE, String.class}, new Object[]{9, id});
+        }
+    }
+    // Cauldron end
+
     public static EnumAction addAction(String name)
     {
         return addEnum(EnumAction.class, name);
@@ -280,6 +364,86 @@ public class EnumHelper
         }
     }
 
+    // Cauldron start
+    @SuppressWarnings("unchecked")
+    public static <T extends Enum<?>> T replaceEnum(Class<T> enumType, String enumName, int ordinal,  Class<?>[] paramTypes, Object[] paramValues)
+    {
+        if (!isSetup)
+        {
+            setup();
+        }
+
+        Field valuesField = null;
+        Field[] fields = enumType.getDeclaredFields();
+
+        for (Field field : fields)
+        {
+            String name = field.getName();
+            if (name.equals("$VALUES") || name.equals("ENUM$VALUES")) //Added 'ENUM$VALUES' because Eclipse's internal compiler doesn't follow standards
+            {
+                valuesField = field;
+                break;
+            }
+        }
+
+        int flags = (FMLForgePlugin.RUNTIME_DEOBF ? Modifier.PUBLIC : Modifier.PRIVATE) | Modifier.STATIC | Modifier.FINAL | 0x1000 /*SYNTHETIC*/;
+        if (valuesField == null)
+        {
+            String valueType = String.format("[L%s;", enumType.getName().replace('.', '/'));
+
+            for (Field field : fields)
+            {
+                if ((field.getModifiers() & flags) == flags &&
+                     field.getType().getName().replace('.', '/').equals(valueType)) //Apparently some JVMs return .'s and some don't..
+                {
+                    valuesField = field;
+                    break;
+                }
+            }
+        }
+
+        if (valuesField == null)
+        {
+            FMLLog.severe("Could not find $VALUES field for enum: %s", enumType.getName());
+            FMLLog.severe("Runtime Deobf: %s", FMLForgePlugin.RUNTIME_DEOBF);
+            FMLLog.severe("Flags: %s", String.format("%16s", Integer.toBinaryString(flags)).replace(' ', '0'));
+            FMLLog.severe("Fields:");
+            for (Field field : fields)
+            {
+                String mods = String.format("%16s", Integer.toBinaryString(field.getModifiers())).replace(' ', '0');
+                FMLLog.severe("       %s %s: %s", mods, field.getName(), field.getType().getName());
+            }
+            return null;
+        }
+
+        valuesField.setAccessible(true);
+        try
+        {
+            Enum[] previousValues = (Enum[])(Enum[])valuesField.get(enumType);
+            Enum[] newValues = new Enum[previousValues.length];
+            Enum newValue = null;
+            for (Enum enumValue : previousValues)
+            {
+                if (enumValue.ordinal() == ordinal)
+                {
+                    newValue = makeEnum(enumType, enumName, ordinal, paramTypes, paramValues);
+                    newValues[enumValue.ordinal()] =  newValue;
+                }
+                else newValues[enumValue.ordinal()] = enumValue;
+            }
+            List values = new ArrayList(Arrays.asList(newValues));
+            setFailsafeFieldValue(valuesField, null, values.toArray((Enum[])(Enum[])Array.newInstance(enumType, 0)));
+            cleanEnumCache(enumType);
+            return (T) newValue;
+        } 
+        catch (Exception e) 
+        {
+            e.printStackTrace();
+            throw new RuntimeException(e.getMessage(), e);
+        }
+    }
+    // Cauldron end
+
     static
     {
         if (!isSetup)
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java ./eclipse/cauldron/src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java
index 6962456..a6430d5 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java
@@ -35,12 +35,24 @@ public class FakePlayerFactory
      */
     public static FakePlayer get(WorldServer world, GameProfile username)
     {
-        if (!fakePlayers.containsKey(username))
+        // Cauldron start - Refactored below to avoid a hashCode check with a null GameProfile ID
+        if (username == null || username.getName() == null) return null;
+
+        for (Map.Entry<GameProfile, FakePlayer> mapEntry : fakePlayers.entrySet())
+        {
+            GameProfile gameprofile = mapEntry.getKey();
+            if (gameprofile.getName().equals(username.getName()))
+            {
+                return mapEntry.getValue();
+            }
+        }
+        FakePlayer fakePlayer = new FakePlayer(world, username);
+        if (username.getId() == null) // GameProfile hashCode check will fail with a null ID
         {
-            FakePlayer fakePlayer = new FakePlayer(world, username);
-            fakePlayers.put(username, fakePlayer);
+            username = new GameProfile(UUID.randomUUID(), username.getName()); // Create new GameProfile with random UUID
         }
-
+        // Cauldron end
+        fakePlayers.put(username, fakePlayer);
         return fakePlayers.get(username);
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/event/entity/living/LivingSpawnEvent.java ./eclipse/cauldron/src/main/java/net/minecraftforge/event/entity/living/LivingSpawnEvent.java
index 56c9c36..374f0dd 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/event/entity/living/LivingSpawnEvent.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/event/entity/living/LivingSpawnEvent.java
@@ -48,6 +48,7 @@ public class LivingSpawnEvent extends LivingEvent
         public CheckSpawn(EntityLiving entity, World world, float x, float y, float z)
         {
             super(entity, world, x, y, z);
+            entity.spawnReason = "natural"; // Cauldron - used to handle CraftBukkit's SpawnReason with CustomSpawners
         }
     }
 
@@ -71,6 +72,7 @@ public class LivingSpawnEvent extends LivingEvent
         public SpecialSpawn(EntityLiving entity, World world, float x, float y, float z)
         {
             super(entity, world, x, y, z);
+            entity.spawnReason = "spawner"; // Cauldron - used to handle CraftBukkit's SpawnReason with CustomSpawners
         }
     }
     
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/event/world/BlockEvent.java ./eclipse/cauldron/src/main/java/net/minecraftforge/event/world/BlockEvent.java
index af06f19..a996f67 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/event/world/BlockEvent.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/event/world/BlockEvent.java
@@ -16,6 +16,11 @@ import net.minecraft.world.World;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.util.BlockSnapshot;
 
+// Cauldron start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import net.minecraft.entity.player.EntityPlayerMP;
+// Cauldron end
+
 public class BlockEvent extends Event {
     private static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("forge.debugBlockEvent", "false"));
 
@@ -80,17 +85,18 @@ public class BlockEvent extends Event {
             super(x, y, z, world, block, blockMetadata);
             this.player = player;
 
-            if (block == null || !ForgeHooks.canHarvestBlock(block, player, blockMetadata) || // Handle empty block or player unable to break block scenario
-                block.canSilkHarvest(world, player, x, y, z, blockMetadata) && EnchantmentHelper.getSilkTouchModifier(player)) // If the block is being silk harvested, the exp dropped is 0
+            // Cauldron start - handle event on bukkit side
+            org.bukkit.event.block.BlockBreakEvent bukkitEvent = CraftEventFactory.callBlockBreakEvent(world, x, y, z, block, blockMetadata,
+                    (EntityPlayerMP) player);
+            if (bukkitEvent.isCancelled())
             {
-                this.exp = 0;
+                this.setCanceled(true);
             }
             else
             {
-                int meta = block.getDamageValue(world, x, y, z);
-                int bonusLevel = EnchantmentHelper.getFortuneModifier(player);
-                this.exp = block.getExpDrop(world, meta, bonusLevel);
+                this.exp = bukkitEvent.getExpToDrop();
             }
+            // Cauldron end
         }
 
         public EntityPlayer getPlayer()
@@ -140,6 +146,16 @@ public class BlockEvent extends Event {
             this.blockSnapshot = blockSnapshot;
             this.placedBlock = blockSnapshot.getCurrentBlock();
             this.placedAgainst = placedAgainst;
+            // Cauldron start - handle event on bukkit side
+            org.bukkit.craftbukkit.block.CraftBlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(super.world, super.x, super.y,
+                    super.z);
+            org.bukkit.event.block.BlockPlaceEvent bukkitEvent = CraftEventFactory.callBlockPlaceEvent(super.world, player, blockstate, super.x, super.y,
+                    super.z);
+            if (bukkitEvent.isCancelled() || !bukkitEvent.canBuild())
+            {
+                this.setCanceled(true);
+            }
+            // Cauldron end
             if (DEBUG)
             {
                 System.out.printf("Created PlaceEvent - [PlacedBlock: %s ][PlacedAgainst: %s ][ItemStack: %s ][Player: %s ]\n", placedBlock, placedAgainst, player.getCurrentEquippedItem(), player);
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java ./eclipse/cauldron/src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
index 2c8e01e..9c66d5a 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
@@ -133,9 +133,21 @@ public class BlockFluidClassic extends BlockFluidBase
             world.setBlockMetadataWithNotify(x, y, z, 0, 2);
         }
 
+        // Cauldron start
+        org.bukkit.Server server = world.getServer();
+        org.bukkit.World bworld = world.getWorld();
+        org.bukkit.block.Block source = bworld == null ? null : bworld.getBlockAt(x, y, z);
+        // Cauldron end
+
         // Flow vertically if possible
         if (canDisplace(world, x, y + densityDir, z))
         {
+            // Cauldron start
+            org.bukkit.block.BlockFace face = densityDir < 0 ? org.bukkit.block.BlockFace.DOWN : org.bukkit.block.BlockFace.UP;
+            org.bukkit.event.block.BlockFromToEvent event = new org.bukkit.event.block.BlockFromToEvent(source, face);
+            if (server != null) server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) return;
+            // Cauldron end
             flowIntoBlock(world, x, y + densityDir, z, 1);
             return;
         }
@@ -155,10 +167,38 @@ public class BlockFluidClassic extends BlockFluidBase
             }
             boolean flowTo[] = getOptimalFlowDirections(world, x, y, z);
 
-            if (flowTo[0]) flowIntoBlock(world, x - 1, y, z,     flowMeta);
+            // Cauldron start
+            /*if (flowTo[0]) flowIntoBlock(world, x - 1, y, z,     flowMeta);
             if (flowTo[1]) flowIntoBlock(world, x + 1, y, z,     flowMeta);
             if (flowTo[2]) flowIntoBlock(world, x,     y, z - 1, flowMeta);
-            if (flowTo[3]) flowIntoBlock(world, x,     y, z + 1, flowMeta);
+            if (flowTo[3]) flowIntoBlock(world, x,     y, z + 1, flowMeta);*/
+            org.bukkit.block.BlockFace[] faces = new org.bukkit.block.BlockFace[] { org.bukkit.block.BlockFace.NORTH, org.bukkit.block.BlockFace.SOUTH,
+                    org.bukkit.block.BlockFace.EAST, org.bukkit.block.BlockFace.WEST };
+            for (int i = 0; i < 4; i++)
+            {
+                if (flowTo[i])
+                {
+                    org.bukkit.event.block.BlockFromToEvent event = new org.bukkit.event.block.BlockFromToEvent(source, faces[i]);
+                    if (server != null) server.getPluginManager().callEvent(event);
+                    if (event.isCancelled()) continue;
+                    switch (i)
+                    {
+                        case 0:
+                            flowIntoBlock(world, x - 1, y, z, flowMeta);
+                            break;
+                        case 1:
+                            flowIntoBlock(world, x + 1, y, z, flowMeta);
+                            break;
+                        case 2:
+                            flowIntoBlock(world, x, y, z - 1, flowMeta);
+                            break;
+                        case 3:
+                            flowIntoBlock(world, x, y, z + 1, flowMeta);
+                            break;
+                    }
+                }
+            }
+            // Cauldron end
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java ./eclipse/cauldron/src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
index 100acef..fb419ba 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
@@ -6,6 +6,10 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 
+// Cauldron start
+import org.bukkit.inventory.Recipe;
+// Cauldron end
+
 import net.minecraft.block.Block;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.inventory.InventoryCrafting;
@@ -13,6 +17,7 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.ShapedRecipes;
 import net.minecraft.world.World;
+import net.minecraftforge.cauldron.inventory.CustomModRecipe;
 
 public class ShapedOreRecipe implements IRecipe
 {
@@ -25,6 +30,7 @@ public class ShapedOreRecipe implements IRecipe
     protected int width = 0;
     protected int height = 0;
     protected boolean mirrored = true;
+    private ShapedRecipes vanillaRecipe = null; // Cauldron - bukkit compatibility
 
     public ShapedOreRecipe(Block     result, Object... recipe){ this(new ItemStack(result), recipe); }
     public ShapedOreRecipe(Item      result, Object... recipe){ this(new ItemStack(result), recipe); }
@@ -127,6 +133,7 @@ public class ShapedOreRecipe implements IRecipe
 
     ShapedOreRecipe(ShapedRecipes recipe, Map<ItemStack, String> replacements)
     {
+        vanillaRecipe = recipe; // Cauldron - bukkit compatibility
         output = recipe.getRecipeOutput();
         width = recipe.recipeWidth;
         height = recipe.recipeHeight;
@@ -255,4 +262,13 @@ public class ShapedOreRecipe implements IRecipe
     {
         return this.input;
     }
+
+    // Cauldron start - required for Bukkit API
+    @Override
+    public Recipe toBukkitRecipe() {
+        if (vanillaRecipe != null)
+            return vanillaRecipe.toBukkitRecipe();
+        return new CustomModRecipe(this);
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java ./eclipse/cauldron/src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
index f4060ed..f1e1845 100644
--- ./eclipse/Clean/src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
+++ ./eclipse/cauldron/src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
@@ -6,6 +6,10 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.List;
 
+// Cauldron start
+import org.bukkit.inventory.Recipe;
+// Cauldron end
+
 import net.minecraft.block.Block;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.inventory.InventoryCrafting;
@@ -13,11 +17,13 @@ import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.ShapelessRecipes;
 import net.minecraft.world.World;
+import net.minecraftforge.cauldron.inventory.CustomModRecipe;
 
 public class ShapelessOreRecipe implements IRecipe
 {
     public ItemStack output = null;
     public ArrayList<Object> input = new ArrayList<Object>();
+    private ShapelessRecipes vanillaRecipe = null; // Cauldron - bukkit compatibility
 
     public ShapelessOreRecipe(Block result, Object... recipe){ this(new ItemStack(result), recipe); }
     public ShapelessOreRecipe(Item  result, Object... recipe){ this(new ItemStack(result), recipe); }
@@ -59,6 +65,7 @@ public class ShapelessOreRecipe implements IRecipe
     @SuppressWarnings("unchecked")
     ShapelessOreRecipe(ShapelessRecipes recipe, Map<ItemStack, String> replacements)
     {
+        vanillaRecipe = recipe; // Cauldron - bukkit compatibility
         output = recipe.getRecipeOutput();
 
         for(ItemStack ingred : ((List<ItemStack>)recipe.recipeItems))
@@ -146,4 +153,13 @@ public class ShapelessOreRecipe implements IRecipe
     {
         return this.input;
     }
+
+    // Cauldron start - required for Bukkit API
+    @Override
+    public Recipe toBukkitRecipe() {
+        if (vanillaRecipe != null)
+            return vanillaRecipe.toBukkitRecipe();
+        return new CustomModRecipe(this);
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/Bukkit.java ./eclipse/cauldron/src/main/java/org/bukkit/Bukkit.java
index d027039..7870619 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/Bukkit.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/Bukkit.java
@@ -301,6 +301,7 @@ public final class Bukkit {
      */
     public static void reload() {
         server.reload();
+        org.spigotmc.CustomTimingsHandler.reload(); // Spigot
     }
 
     /**
diff --git ./eclipse/Clean/src/main/java/org/bukkit/Effect.java ./eclipse/cauldron/src/main/java/org/bukkit/Effect.java
index 747ca70..8c2c859 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/Effect.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/Effect.java
@@ -5,6 +5,7 @@ import java.util.Map;
 import com.google.common.collect.Maps;
 
 import org.bukkit.block.BlockFace;
+import org.bukkit.material.MaterialData;
 import org.bukkit.potion.Potion;
 
 /**
@@ -79,27 +80,188 @@ public enum Effect {
     /**
      * The flames seen on a mobspawner; a visual effect.
      */
-    MOBSPAWNER_FLAMES(2004, Type.VISUAL);
+    MOBSPAWNER_FLAMES(2004, Type.VISUAL),
+    /**
+     * The spark that comes off a fireworks
+     */
+    FIREWORKS_SPARK("fireworksSpark", Type.PARTICLE),
+    /**
+     * Critical hit particles
+     */
+    CRIT("crit", Type.PARTICLE),
+    /**
+     * Blue critical hit particles
+     */
+    MAGIC_CRIT("magicCrit", Type.PARTICLE),
+    /**
+     * Multicolored potion effect particles
+     */
+    POTION_SWIRL("mobSpell", Type.PARTICLE),
+    /**
+     * Multicolored potion effect particles that are slightly transparent
+     */
+    POTION_SWIRL_TRANSPARENT("mobSpellAmbient", Type.PARTICLE),
+    /**
+     * A puff of white potion swirls
+     */
+    SPELL("spell", Type.PARTICLE),
+    /**
+     * A puff of white stars
+     */
+    INSTANT_SPELL("instantSpell", Type.PARTICLE),
+    /**
+     * A puff of purple particles
+     */
+    WITCH_MAGIC("witchMagic", Type.PARTICLE),
+    /**
+     * The note that appears above note blocks
+     */
+    NOTE("note", Type.PARTICLE),
+    /**
+     * The particles shown at nether portals
+     */
+    PORTAL("portal", Type.PARTICLE),
+    /**
+     * The symbols that fly towards the enchantment table
+     */
+    FLYING_GLYPH("enchantmenttable", Type.PARTICLE),
+    /**
+     * Fire particles
+     */
+    FLAME("flame", Type.PARTICLE),
+    /**
+     * The particles that pop out of lava
+     */
+    LAVA_POP("lava", Type.PARTICLE),
+    /**
+     * A small gray square
+     */
+    FOOTSTEP("footstep", Type.PARTICLE),
+    /**
+     * Water particles
+     */
+    SPLASH("splash", Type.PARTICLE),
+    /**
+     * Smoke particles
+     */
+    PARTICLE_SMOKE("smoke", Type.PARTICLE),
+    /**
+     * The biggest explosion particle effect
+     */
+    EXPLOSION_HUGE("hugeexplosion", Type.PARTICLE),
+    /**
+     * A larger version of the explode particle
+     */
+    EXPLOSION_LARGE("largeexplode", Type.PARTICLE),
+    /**
+     * Explosion particles
+     */
+    EXPLOSION("explode", Type.PARTICLE),
+    /**
+     * Small gray particles
+     */
+    VOID_FOG("depthsuspend", Type.PARTICLE),
+    /**
+     * Small gray particles
+     */
+    SMALL_SMOKE("townaura", Type.PARTICLE),
+    /**
+     * A puff of white smoke
+     */
+    CLOUD("cloud", Type.PARTICLE),
+    /**
+     * Multicolored dust particles
+     */
+    COLOURED_DUST("reddust", Type.PARTICLE),
+    /**
+     * Snowball breaking
+     */
+    SNOWBALL_BREAK("snowballpoof", Type.PARTICLE),
+    /**
+     * The water drip particle that appears on blocks under water
+     */
+    WATERDRIP("dripWater", Type.PARTICLE),
+    /**
+     * The lava drip particle that appears on blocks under lava
+     */
+    LAVADRIP("dripLava", Type.PARTICLE),
+    /**
+     * White particles
+     */
+    SNOW_SHOVEL("snowshovel", Type.PARTICLE),
+    /**
+     * The particle shown when a slime jumps
+     */
+    SLIME("slime", Type.PARTICLE),
+    /**
+     * The particle that appears when breading animals
+     */
+    HEART("heart", Type.PARTICLE),
+    /**
+     * The particle that appears when hitting a villager
+     */
+    VILLAGER_THUNDERCLOUD("angryVillager", Type.PARTICLE),
+    /**
+     * The particle that appears when trading with a villager
+     */
+    HAPPY_VILLAGER("happyVillager", Type.PARTICLE),
+    /**
+     * The smoke particles that appears on blazes, minecarts
+     * with furnaces and fire
+     */
+    LARGE_SMOKE("largesmoke", Type.PARTICLE),
+    /**
+     * The particles generated when a tool breaks.
+     * This particle requires a Material so that the client can select the correct texture.
+     */
+    ITEM_BREAK("iconcrack", Type.PARTICLE, Material.class),
+    /**
+     * The particles generated while breaking a block.
+     * This particle requires a Material and data value so that the client can select the correct texture.
+     */
+    TILE_BREAK("blockcrack", Type.PARTICLE, MaterialData.class),
+    /**
+     * The particles generated while sprinting a block
+     * This particle requires a Material and data value so that the client can select the correct texture.
+     */
+    TILE_DUST("blockdust", Type.PARTICLE, MaterialData.class);
 
     private final int id;
     private final Type type;
     private final Class<?> data;
     private static final Map<Integer, Effect> BY_ID = Maps.newHashMap();
+    private static final Map<String, Effect> BY_NAME = Maps.newHashMap();
+    private final String particleName;
 
-    Effect(int id, Type type) {
+    private Effect(int id, Type type) {
         this(id,type,null);
     }
 
-    Effect(int id, Type type, Class<?> data) {
+    private Effect(int id, Type type, Class<?> data) {
         this.id = id;
         this.type = type;
         this.data = data;
+        particleName = null;
+    }
+
+    private Effect(String particleName, Type type, Class<?> data) {
+        this.particleName = particleName;
+        this.type = type;
+        id = 0;
+        this.data = data;
+    }
+
+    private Effect(String particleName, Type type) {
+        this.particleName = particleName;
+        this.type = type;
+        id = 0;
+        this.data = null;
     }
 
     /**
      * Gets the ID for this effect.
      *
-     * @return ID of this effect
+     * @return if this Effect isn't of type PARTICLE it returns ID of this effect
      * @deprecated Magic value
      */
     @Deprecated
@@ -108,6 +270,15 @@ public enum Effect {
     }
 
     /**
+     * Returns the effect's name. This returns null if the effect is not a particle
+     *
+     * @return The effect's name
+     */
+    public String getName() {
+        return particleName;
+    }
+
+    /**
      * @return The type of the effect.
      */
     public Type getType() {
@@ -115,8 +286,7 @@ public enum Effect {
     }
 
     /**
-     * @return The class which represents data for this effect, or null if
-     *     none
+     * @return if this Effect isn't of type PARTICLE it returns the class which represents data for this effect, or null if none
      */
     public Class<?> getData() {
         return this.data;
@@ -136,12 +306,32 @@ public enum Effect {
 
     static {
         for (Effect effect : values()) {
-            BY_ID.put(effect.id, effect);
+            if (effect.type != Type.PARTICLE) {
+                BY_ID.put(effect.id, effect);
+            }
+        }
+    }
+
+    /**
+     * Gets the Effect associated with the given name.
+     *
+     * @param name name of the Effect to return
+     * @return Effect with the given name
+     */
+    public static Effect getByName(String name) {
+        return BY_NAME.get(name);
+    }
+
+    static {
+        for (Effect effect : values()) {
+            if (effect.type == Type.PARTICLE) {
+                BY_NAME.put(effect.particleName, effect);
+            }
         }
     }
 
     /**
      * Represents the type of an effect.
      */
-    public enum Type {SOUND, VISUAL}
+    public enum Type {SOUND, VISUAL, PARTICLE}
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/GameMode.java ./eclipse/cauldron/src/main/java/org/bukkit/GameMode.java
index 5baa8f9..1951886 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/GameMode.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/GameMode.java
@@ -11,6 +11,12 @@ import com.google.common.collect.Maps;
  * have
  */
 public enum GameMode {
+    // Cauldron start - FakePlayers do not set their gametype and use the default
+    /**
+     * Default mode
+     */
+    NOT_SET(-1),
+    // Cauldron end
     /**
      * Creative mode may fly, build instantly, become invulnerable and create
      * free items.
diff --git ./eclipse/Clean/src/main/java/org/bukkit/Material.java ./eclipse/cauldron/src/main/java/org/bukkit/Material.java
index 653c421..c2f7021 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/Material.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/Material.java
@@ -3,6 +3,22 @@ package org.bukkit;
 import java.lang.reflect.Constructor;
 import java.util.Map;
 
+// Cauldron start
+import java.lang.reflect.Array;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.bukkit.inventory.ItemStack;
+
+import net.minecraftforge.common.util.EnumHelper;
+import net.minecraftforge.cauldron.api.inventory.BukkitOreDictionary;
+import net.minecraftforge.cauldron.api.inventory.OreDictionaryEntry;
+// Cauldron end
+
 import org.apache.commons.lang.Validate;
 import org.bukkit.map.MapView;
 import org.bukkit.material.Bed;
@@ -418,14 +434,30 @@ public enum Material {
     private final int id;
     private final Constructor<? extends MaterialData> ctor;
     private static Material[] byId = new Material[383];
-    private final static Map<String, Material> BY_NAME = Maps.newHashMap();
+    private static Map<String, Material> BY_NAME = Maps.newHashMap(); // Cauldron - remove final
     private final int maxStack;
     private final short durability;
+    // Cauldron start
+    private static Object reflectionFactory;
+    private static Method newConstructorAccessor;
+    private static Method newInstance;
+    private static Method newFieldAccessor;
+    private static Method fieldAccessorSet;
+    private static boolean isSetup;
+    private boolean isForgeBlock = false;
+    // Cauldron end
 
     private Material(final int id) {
         this(id, 64);
     }
 
+    // Cauldron start - constructor used to set if the Material is a block or not
+    private Material(final int id, boolean flag) {
+        this(id, 64);
+        this.isForgeBlock = flag;
+    }
+    // Cauldron end
+
     private Material(final int id, final int stack) {
         this(id, stack, MaterialData.class);
     }
@@ -526,7 +558,7 @@ public enum Material {
      * @return true if this material is a block
      */
     public boolean isBlock() {
-        return id < 256;
+        return id < 256 || isForgeBlock; // Cauldron
     }
 
     /**
@@ -615,16 +647,202 @@ public enum Material {
         } catch (NumberFormatException ex) {}
 
         if (result == null) {
-            String filtered = name.toUpperCase();
-
-            filtered = filtered.replaceAll("\\s+", "_").replaceAll("\\W", "");
+            // Cauldron start - extract to normalizeName()
+            String filtered = normalizeName(name);
             result = BY_NAME.get(filtered);
+            // Cauldron end
+        }
+
+        // Cauldron start - Try the ore dictionary
+        if (result == null) {
+            BukkitOreDictionary dict = net.minecraftforge.cauldron.api.Cauldron.getOreDictionary();
+            OreDictionaryEntry entry = dict.getOreEntry(name);
+            if (entry != null) {
+                List<ItemStack> items = dict.getDefinitions(entry);
+                if (items.size() > 0) {
+                    // TODO check sanity on multiple item results
+                    ItemStack item = items.get(0);
+                    if (item.getDurability() == 0 || item.getDurability() == Short.MAX_VALUE) {
+                        result = item.getType();
+                    } else {
+                        // bad! we have an item with data!
+                    }
+                }
+            }
         }
+        // Cauldron end
 
         return result;
     }
 
+    /* ===============================  Cauldron START ============================= */
+
+    // use a normalize() function to ensure it is accessible after a round-trip
+    public static String normalizeName(String name) {
+        return name.toUpperCase().replaceAll("(:|\\s)", "_").replaceAll("\\W", "");
+    }
+
+    public static Material addMaterial(int id, boolean isBlock)
+    {
+        return addMaterial(id, "X" + String.valueOf(id), isBlock);
+    }
+
+    public static Material addMaterial(int id, String name, boolean isBlock) {
+      if (byId[id] == null) {
+        String materialName = normalizeName(name);
+        Material material = (Material) EnumHelper.addEnum(Material.class, materialName, new Class[]{Integer.TYPE, Boolean.TYPE}, new Object[]{Integer.valueOf(id), isBlock});
+        byId[id] = material;
+        BY_NAME.put(materialName, material);
+        BY_NAME.put("X" + String.valueOf(id), material);
+        return material;
+      }
+      return null;
+    }
+
+    public static void setMaterialName(int id, String name, boolean flag) {
+      String materialName = normalizeName(name);
+
+      if (byId[id] == null)
+      {
+        addMaterial(id, materialName, flag);
+      }
+      else // replace existing enum
+      {
+          /* TODO: find out how to do this with Forge's EnumHelper (addEnum?) - used for enabling descriptive (vs numeric) Material names
+          Material material = getMaterial(id);
+          BY_NAME.remove(material);
+          Material newMaterial = EnumHelper.replaceEnum(Material.class, material_name, material.ordinal(), new Class[] { Integer.TYPE }, new Object[] { Integer.valueOf(id) });
+          if (newMaterial == null)
+              System.out.println("Error replacing Material " + name + " with id " + id);
+          else {
+              byId[id] = newMaterial;
+              BY_NAME.put(material_name, newMaterial);
+          }
+          */
+      }
+    }
+
+    private static void setup()
+    {
+      if (isSetup)
+      {
+        return;
+      }
+      try {
+        Method getReflectionFactory = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("getReflectionFactory", new Class[0]);
+        reflectionFactory = getReflectionFactory.invoke(null, new Object[0]);
+        newConstructorAccessor = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("newConstructorAccessor", new Class[] { Constructor.class });
+        newInstance = Class.forName("sun.reflect.ConstructorAccessor").getDeclaredMethod("newInstance", new Class[] { Object[].class });
+        newFieldAccessor = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("newFieldAccessor", new Class[] { Field.class, Boolean.TYPE });
+        fieldAccessorSet = Class.forName("sun.reflect.FieldAccessor").getDeclaredMethod("set", new Class[] { Object.class, Object.class });
+      } catch (Exception e) {
+        e.printStackTrace();
+      }
+
+      isSetup = true;
+    }
+
+    private static Object getConstructorAccessor(Class<?> enumClass, Class<?>[] additionalParameterTypes) throws Exception {
+      Class[] parameterTypes = null;
+
+      parameterTypes = new Class[additionalParameterTypes.length + 2];
+      parameterTypes[0] = String.class;
+      parameterTypes[1] = Integer.TYPE;
+      System.arraycopy(additionalParameterTypes, 0, parameterTypes, 2, additionalParameterTypes.length);
+
+      return newConstructorAccessor.invoke(reflectionFactory, new Object[] { enumClass.getDeclaredConstructor(parameterTypes) });
+    }
+
+    private static <T extends Enum<?>> T makeEnum(Class<T> enumClass, String value, int ordinal, Class<?>[] additionalTypes, Object[] additionalValues) throws Exception {
+      Object[] parms = null;
+
+      parms = new Object[additionalValues.length + 2];
+      parms[0] = value;
+      parms[1] = Integer.valueOf(ordinal);
+      System.arraycopy(additionalValues, 0, parms, 2, additionalValues.length);
+
+      return (T)enumClass.cast(newInstance.invoke(getConstructorAccessor(enumClass, additionalTypes), new Object[] { parms }));
+    }
+
+    private static void setFailsafeFieldValue(Field field, Object target, Object value) throws Exception {
+      field.setAccessible(true);
+      Field modifiersField = Field.class.getDeclaredField("modifiers");
+      modifiersField.setAccessible(true);
+      modifiersField.setInt(field, field.getModifiers() & 0xFFFFFFEF);
+      Object fieldAccessor = newFieldAccessor.invoke(reflectionFactory, new Object[] { field, Boolean.valueOf(false) });
+      fieldAccessorSet.invoke(fieldAccessor, new Object[] { target, value });
+    }
+
+    private static void blankField(Class<?> enumClass, String fieldName) throws Exception {
+      for (Field field : Class.class.getDeclaredFields())
+        if (field.getName().contains(fieldName)) {
+          field.setAccessible(true);
+          setFailsafeFieldValue(field, enumClass, null);
+          break;
+        }
+    }
+
+    private static void cleanEnumCache(Class<?> enumClass) throws Exception
+    {
+      blankField(enumClass, "enumConstantDirectory");
+      blankField(enumClass, "enumConstants");
+    }
+
+    public static <T extends Enum<?>> T replaceEnum(Class<T> enumType, String enumName, int ordinal,  Class<?>[] paramTypes, Object[] paramValues)
+    {
+      if (!isSetup) setup();
+      Field valuesField = null;
+      Field[] fields = enumType.getDeclaredFields();
+      int flags = 4122;
+      String valueType = String.format("[L%s;", new Object[] { enumType.getName() });
+
+      for (Field field : fields) {
+        if (((field.getModifiers() & flags) != flags) || (!field.getType().getName().equals(valueType))) {
+          continue;
+        }
+        valuesField = field;
+        break;
+      }
+
+      valuesField.setAccessible(true);
+      try
+      {
+        Enum[] previousValues = (Enum[])(Enum[])valuesField.get(enumType);
+        Enum[] newValues = new Enum[previousValues.length];
+        Enum newValue = null;
+        for (Enum enumValue : previousValues)
+        {
+            if (enumValue.ordinal() == ordinal)
+            {
+               newValue = makeEnum(enumType, enumName, ordinal, paramTypes, paramValues);
+               newValues[enumValue.ordinal()] =  newValue;
+            }
+            else newValues[enumValue.ordinal()] = enumValue;
+        }
+        List values = new ArrayList(Arrays.asList(newValues));
+
+        setFailsafeFieldValue(valuesField, null, values.toArray((Enum[])(Enum[])Array.newInstance(enumType, 0)));
+        cleanEnumCache(enumType);
+        return (T) newValue;
+      } catch (Exception e) {
+        e.printStackTrace();
+        throw new RuntimeException(e.getMessage(), e);
+      }
+    }
+    /* ===============================  Cauldron END============================= */
+
     static {
+        // Cauldron start
+        byId = new Material[32000];
+        BY_NAME = Maps.newHashMap();
+
+        reflectionFactory = null;
+        newConstructorAccessor = null;
+        newInstance = null;
+        newFieldAccessor = null;
+        fieldAccessorSet = null;
+        isSetup = false;
+        // Cauldron end
         for (Material material : values()) {
             if (byId.length > material.id) {
                 byId[material.id] = material;
diff --git ./eclipse/Clean/src/main/java/org/bukkit/World.java ./eclipse/cauldron/src/main/java/org/bukkit/World.java
index 9f8b9a7..44923d9 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/World.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/World.java
@@ -1155,6 +1155,56 @@ public interface World extends PluginMessageRecipient, Metadatable {
      */
     public boolean isGameRule(String rule);
 
+    // Spigot start
+    public class Spigot
+    {
+
+        /**
+         * Plays an effect to all players within a default radius around a given
+         * location.
+         *
+         * @param location the {@link Location} around which players must be to
+         * see the effect
+         * @param effect the {@link Effect}
+         * @throws IllegalArgumentException if the location or effect is null.
+         * It also throws when the effect requires a material or a material data
+         */
+        public void playEffect(Location location, Effect effect)
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        /**
+         * Plays an effect to all players within a default radius around a given
+         * location. The effect will use the provided material (and material
+         * data if required). The particle's position on the client will be the
+         * given location, adjusted on each axis by a normal distribution with
+         * mean 0 and standard deviation given in the offset parameters, each
+         * particle has independently calculated offsets. The effect will have
+         * the given speed and particle count if the effect is a particle. Some
+         * effect will create multiple particles.
+         *
+         * @param location the {@link Location} around which players must be to
+         * see the effect
+         * @param effect effect the {@link Effect}
+         * @param id the item/block/data id for the effect
+         * @param data the data value of the block/item for the effect
+         * @param offsetX the amount to be randomly offset by in the X axis
+         * @param offsetY the amount to be randomly offset by in the Y axis
+         * @param offsetZ the amount to be randomly offset by in the Z axis
+         * @param speed the speed of the particles
+         * @param particleCount the number of particles
+         * @param radius the radius around the location
+         */
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius)
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+    }
+
+    Spigot spigot();
+    // Spigot end
+
     /**
      * Represents various map environment types that a world may be
      */
@@ -1203,6 +1253,12 @@ public interface World extends PluginMessageRecipient, Metadatable {
             return lookup.get(id);
         }
 
+        // Cauldron start - allow forge to register environments
+        public static void registerEnvironment(Environment env) {
+            lookup.put(env.getId(),env);
+        }
+        // Cauldron end
+
         static {
             for (Environment env : values()) {
                 lookup.put(env.getId(), env);
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/Command.java ./eclipse/cauldron/src/main/java/org/bukkit/command/Command.java
index 69737ff..c8b82c2 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/Command.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/Command.java
@@ -31,6 +31,7 @@ public abstract class Command {
     protected String usageMessage;
     private String permission;
     private String permissionMessage;
+    public org.spigotmc.CustomTimingsHandler timings; // Spigot
 
     protected Command(String name) {
         this(name, "", "/" + name, new ArrayList<String>());
@@ -44,6 +45,7 @@ public abstract class Command {
         this.usageMessage = usageMessage;
         this.aliases = aliases;
         this.activeAliases = new ArrayList<String>(aliases);
+        this.timings = new org.spigotmc.CustomTimingsHandler("** Command: " + name); // Spigot
     }
 
     /**
@@ -200,6 +202,7 @@ public abstract class Command {
     public boolean setLabel(String name) {
         this.nextLabel = name;
         if (!isRegistered()) {
+            this.timings = new org.spigotmc.CustomTimingsHandler("** Command: " + name); // Spigot
             this.label = name;
             return true;
         }
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/SimpleCommandMap.java ./eclipse/cauldron/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 77142d3..8ec5164 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -176,11 +176,15 @@ public class SimpleCommandMap implements CommandMap {
         }
 
         try {
+            target.timings.startTiming(); // Spigot
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
             target.execute(sender, sentCommandLabel, Arrays_copyOfRange(args, 1, args.length));
+            target.timings.stopTiming(); // Spigot
         } catch (CommandException ex) {
+            target.timings.stopTiming(); // Spigot
             throw ex;
         } catch (Throwable ex) {
+            target.timings.stopTiming(); // Spigot
             throw new CommandException("Unhandled exception executing '" + commandLine + "' in " + target, ex);
         }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/BanIpCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
index 2c1721c..0badcc5 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
@@ -32,7 +32,7 @@ public class BanIpCommand extends VanillaCommand {
             return false;
         }
 
-        String reason = args.length > 0 ? StringUtils.join(args, ' ', 1, args.length) : null;
+        String reason = StringUtils.join(args, ' ', 1, args.length);
 
         if (ipValidity.matcher(args[0]).matches()) {
             processIPBan(args[0], sender, reason);
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/DeopCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/DeopCommand.java
index 4d43c5f..ea12ed1 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/DeopCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/DeopCommand.java
@@ -49,9 +49,9 @@ public class DeopCommand extends VanillaCommand {
 
         if (args.length == 1) {
             List<String> completions = new ArrayList<String>();
-            for (OfflinePlayer player : Bukkit.getOfflinePlayers()) {
+            for (OfflinePlayer player : Bukkit.getOperators()) {
                 String playerName = player.getName();
-                if (player.isOp() && StringUtil.startsWithIgnoreCase(playerName, args[0])) {
+                if (StringUtil.startsWithIgnoreCase(playerName, args[0])) {
                     completions.add(playerName);
                 }
             }
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/GameModeCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
index 6f74a86..9d2aabe 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
@@ -50,7 +50,7 @@ public class GameModeCommand extends VanillaCommand {
 
             GameMode mode = GameMode.getByValue(value);
 
-            if (mode == null) {
+            if (mode == null || mode == GameMode.NOT_SET) { // Cauldron
                 if (modeArg.equalsIgnoreCase("creative") || modeArg.equalsIgnoreCase("c")) {
                     mode = GameMode.CREATIVE;
                 } else if (modeArg.equalsIgnoreCase("adventure") || modeArg.equalsIgnoreCase("a")) {
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/PluginsCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index 8af3155..f68e455 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -40,4 +40,12 @@ public class PluginsCommand extends BukkitCommand {
 
         return "(" + plugins.length + "): " + pluginList.toString();
     }
+
+    // Spigot Start
+    @Override
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
+    {
+        return java.util.Collections.emptyList();
+    }
+    // Spigot End
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/ReloadCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index abf51a3..cac03f1 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -18,11 +18,25 @@ public class ReloadCommand extends BukkitCommand {
 
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        // Cauldron start - disable reload as it causes many issues with mods
+        /*
         if (!testPermission(sender)) return true;
 
+        org.spigotmc.CustomTimingsHandler.reload(); // Spigot: TODO: Why is this here?
         Bukkit.reload();
         Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
+        */
+        sender.sendMessage(ChatColor.RED + "Reload not allowed on a Cauldron server.");
+        // Cauldron end
 
         return true;
     }
+
+    // Spigot Start
+    @Override
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
+    {
+        return java.util.Collections.emptyList();
+    }
+    // Spigot End
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java
index 09207a6..3dc51dc 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java
@@ -92,7 +92,7 @@ public class SpreadPlayersCommand extends VanillaCommand {
         final int rangeSpread = range(world, distance, xRangeMin, zRangeMin, xRangeMax, zRangeMax, locations);
 
         if (rangeSpread == -1) {
-            sender.sendMessage(String.format("Could not spread %d %s around %s,%s (too many players for space - try using spread of at most %s)", spreadSize, teams ? "teams" : "players", x, z));
+            sender.sendMessage(String.format("Could not spread %d %s around %s,%s (too many players for space - try using spread of at most %s)", spreadSize, teams ? "teams" : "players", x, z, "TODO")); // TODO: Add latest argument
             return false;
         }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/TellCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/TellCommand.java
index 1cb489c..f158724 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/TellCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/TellCommand.java
@@ -45,4 +45,16 @@ public class TellCommand extends VanillaCommand {
 
         return true;
     }
+
+    // Spigot Start
+    @Override
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
+    {
+        if ( args.length == 0 )
+        {
+            return super.tabComplete( sender, alias, args );
+        }
+        return java.util.Collections.emptyList();
+    }
+    // Spigot End
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/TestForCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/TestForCommand.java
index f72b33c..9836930 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/TestForCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/TestForCommand.java
@@ -23,4 +23,16 @@ public class TestForCommand extends VanillaCommand {
         sender.sendMessage(ChatColor.RED + "/testfor is only usable by commandblocks with analog output.");
         return true;
     }
+
+    // Spigot Start
+    @Override
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
+    {
+        if ( args.length == 0 )
+        {
+            return super.tabComplete( sender, alias, args );
+        }
+        return java.util.Collections.emptyList();
+    }
+    // Spigot End
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/TimingsCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
index 16ea4ff..4f017d4 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
@@ -19,23 +19,97 @@ import org.bukkit.util.StringUtil;
 
 import com.google.common.collect.ImmutableList;
 
+// Spigot start
+import java.io.ByteArrayOutputStream;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.logging.Level;
+
+import org.bukkit.command.RemoteConsoleCommandSender;
+import org.bukkit.plugin.SimplePluginManager;
+import org.spigotmc.CustomTimingsHandler;
+// Spigot end
+
 public class TimingsCommand extends BukkitCommand {
-    private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("merged", "reset", "separate");
+    private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("report", "reset", "on", "off", "paste"); // Spigot
+    public static long timingStart = 0; // Spigot
 
     public TimingsCommand(String name) {
         super(name);
-        this.description = "Records timings for all plugin events";
-        this.usageMessage = "/timings <reset|merged|separate>";
+        this.description = "Manages Spigot Timings data to see performance of the server."; // Spigot
+        this.usageMessage = "/timings <reset|report|on|off|paste>"; // Spigot
         this.setPermission("bukkit.command.timings");
     }
 
+    // Spigot start - redesigned Timings Command
+    public void executeSpigotTimings(CommandSender sender, String[] args) {
+        if ( "on".equals( args[0] ) )
+        {
+            ( (SimplePluginManager) Bukkit.getPluginManager() ).useTimings( true );
+            CustomTimingsHandler.reload();
+            sender.sendMessage( "Enabled Timings & Reset" );
+            return;
+        } else if ( "off".equals( args[0] ) )
+        {
+            ( (SimplePluginManager) Bukkit.getPluginManager() ).useTimings( false );
+            sender.sendMessage( "Disabled Timings" );
+            return;
+        }
+
+        if ( !Bukkit.getPluginManager().useTimings() )
+        {
+            sender.sendMessage( "Please enable timings by typing /timings on" );
+            return;
+        }
+
+        boolean paste = "paste".equals( args[0] );
+        if ("reset".equals(args[0])) {
+            CustomTimingsHandler.reload();
+            sender.sendMessage("Timings reset");
+        } else if ("merged".equals(args[0]) || "report".equals(args[0]) || paste) {
+            long sampleTime = System.nanoTime() - timingStart;
+            int index = 0;
+            File timingFolder = new File("timings");
+            timingFolder.mkdirs();
+            File timings = new File(timingFolder, "timings.txt");
+            ByteArrayOutputStream bout = ( paste ) ? new ByteArrayOutputStream() : null;
+            while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
+            PrintStream fileTimings = null;
+            try {
+                fileTimings = ( paste ) ? new PrintStream( bout ) : new PrintStream( timings );
+
+                CustomTimingsHandler.printTimings(fileTimings);
+                fileTimings.println( "Sample time " + sampleTime + " (" + sampleTime / 1E9 + "s)" );
+
+                if ( paste )
+                {
+                    new PasteThread( sender, bout ).start();
+                    return;
+                }
+
+                sender.sendMessage("Timings written to " + timings.getPath());
+                sender.sendMessage( "Paste contents of file into form at http://www.spigotmc.org/go/timings to read results." );
+
+            } catch (IOException e) {
+            } finally {
+                if (fileTimings != null) {
+                    fileTimings.close();
+                }
+            }
+        }
+    }
+    // Spigot end
+
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length != 1)  {
+        if (args.length < 1)  { // Spigot
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
+        if (true) { executeSpigotTimings(sender, args); return true; } // Spigot
         if (!sender.getServer().getPluginManager().useTimings()) {
             sender.sendMessage("Please enable timings by setting \"settings.plugin-profiling\" to true in bukkit.yml");
             return true;
@@ -118,4 +192,55 @@ public class TimingsCommand extends BukkitCommand {
         }
         return ImmutableList.of();
     }
+
+    // Spigot start
+    private static class PasteThread extends Thread
+    {
+
+        private final CommandSender sender;
+        private final ByteArrayOutputStream bout;
+
+        public PasteThread(CommandSender sender, ByteArrayOutputStream bout)
+        {
+            super( "Timings paste thread" );
+            this.sender = sender;
+            this.bout = bout;
+        }
+
+        @Override
+        public synchronized void start() {
+            if (sender instanceof RemoteConsoleCommandSender) {
+                run();
+            } else {
+                super.start();
+            }
+        }
+
+        @Override
+        public void run()
+        {
+            try
+            {
+                HttpURLConnection con = (HttpURLConnection) new URL( "http://paste.ubuntu.com/" ).openConnection();
+                con.setDoOutput( true );
+                con.setRequestMethod( "POST" );
+                con.setInstanceFollowRedirects( false );
+
+                OutputStream out = con.getOutputStream();
+                out.write( "poster=Spigot&syntax=text&content=".getBytes( "UTF-8" ) );
+                out.write( URLEncoder.encode( bout.toString( "UTF-8" ), "UTF-8" ).getBytes( "UTF-8" ) );
+                out.close();
+                con.getInputStream().close();
+
+                String location = con.getHeaderField( "Location" );
+                String pasteID = location.substring( "http://paste.ubuntu.com/".length(), location.length() - 1 );
+                sender.sendMessage( ChatColor.GREEN + "View timings results can be viewed at http://www.spigotmc.org/go/timings?url=" + pasteID );
+            } catch ( IOException ex )
+            {
+                sender.sendMessage( ChatColor.RED + "Error pasting timings, check your console for more information" );
+                Bukkit.getServer().getLogger().log( Level.WARNING, "Could not paste timings", ex );
+            }
+        }
+    }
+    // Spigot end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
index 0e44bad..c3aa6c7 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
@@ -104,7 +104,7 @@ public class WhitelistCommand extends VanillaCommand {
         } else if (args.length == 2) {
             if (args[0].equalsIgnoreCase("add")) {
                 List<String> completions = new ArrayList<String>();
-                for (OfflinePlayer player : Bukkit.getOfflinePlayers()) {
+                for (OfflinePlayer player : Bukkit.getOnlinePlayers()) {
                     String name = player.getName();
                     if (StringUtil.startsWithIgnoreCase(name, args[1]) && !player.isWhitelisted()) {
                         completions.add(name);
diff --git ./eclipse/Clean/src/main/java/org/bukkit/configuration/MemorySection.java ./eclipse/cauldron/src/main/java/org/bukkit/configuration/MemorySection.java
index e1d3995..05ce837 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/configuration/MemorySection.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -760,7 +760,8 @@ public class MemorySection implements ConfigurationSection {
      * @return Full path of the section from its root.
      */
     public static String createPath(ConfigurationSection section, String key) {
-        return createPath(section, key, (section == null) ? null : section.getRoot());
+        Validate.notNull(section, "Cannot create path without a section");
+        return createPath(section, key, section.getRoot());
     }
 
     /**
@@ -784,17 +785,15 @@ public class MemorySection implements ConfigurationSection {
         char separator = root.options().pathSeparator();
 
         StringBuilder builder = new StringBuilder();
-        if (section != null) {
-            for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
-                if (builder.length() > 0) {
-                    builder.insert(0, separator);
-                }
-
-                builder.insert(0, parent.getName());
+        for (ConfigurationSection parent = section; parent != null && parent != relativeTo; parent = parent.getParent()) {
+            if (builder.length() > 0) {
+                builder.insert(0, separator);
             }
+
+            builder.insert(0, parent.getName());
         }
 
-        if ((key != null) && (key.length() > 0)) {
+        if (key != null && key.length() > 0) {
             if (builder.length() > 0) {
                 builder.append(separator);
             }
diff --git ./eclipse/Clean/src/main/java/org/bukkit/conversations/BooleanPrompt.java ./eclipse/cauldron/src/main/java/org/bukkit/conversations/BooleanPrompt.java
index 2578921..eeaead4 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/conversations/BooleanPrompt.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/conversations/BooleanPrompt.java
@@ -15,12 +15,13 @@ public abstract class BooleanPrompt extends ValidatingPrompt{
 
     @Override
     protected boolean isInputValid(ConversationContext context, String input) {
-        String[] accepted = {"true", "false", "on", "off", "yes", "no"};
+        String[] accepted = {"true", "false", "on", "off", "yes", "no" /* Spigot: */, "y", "n", "1", "0", "right", "wrong", "correct", "incorrect", "valid", "invalid"}; // Spigot
         return ArrayUtils.contains(accepted, input.toLowerCase());
     }
 
     @Override
     protected Prompt acceptValidatedInput(ConversationContext context, String input) {
+        if (input.equalsIgnoreCase("y") || input.equals("1") || input.equalsIgnoreCase("right") || input.equalsIgnoreCase("correct") || input.equalsIgnoreCase("valid")) input = "true"; // Spigot
         return acceptValidatedInput(context, BooleanUtils.toBoolean(input));
     }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/conversations/Conversation.java ./eclipse/cauldron/src/main/java/org/bukkit/conversations/Conversation.java
index 92f4d53..0eca093 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/conversations/Conversation.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/conversations/Conversation.java
@@ -209,6 +209,7 @@ public class Conversation {
      * @param input The user's chat text.
      */
     public void acceptInput(String input) {
+        try { // Spigot
         if (currentPrompt != null) {
 
             // Echo the user's input
@@ -228,6 +229,12 @@ public class Conversation {
             currentPrompt = currentPrompt.acceptInput(context, input);
             outputNextPrompt();
         }
+        // Spigot Start
+        } catch ( Throwable t )
+        {
+            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.SEVERE, "Error handling conversation prompt", t );
+        }
+        // Spigot End
     }
 
     /**
diff --git ./eclipse/Clean/src/main/java/org/bukkit/entity/Arrow.java ./eclipse/cauldron/src/main/java/org/bukkit/entity/Arrow.java
index 8f166a7..5ba7fa6 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/entity/Arrow.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/entity/Arrow.java
@@ -39,4 +39,22 @@ public interface Arrow extends Projectile {
      * @param critical whether or not it should be critical
      */
     public void setCritical(boolean critical);
+
+    // Spigot start
+    public class Spigot extends Entity.Spigot
+    {
+
+        public double getDamage()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        public void setDamage(double damage)
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+    }
+
+    Spigot spigot();
+    // Spigot end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/entity/Entity.java ./eclipse/cauldron/src/main/java/org/bukkit/entity/Entity.java
index 1e346a2..7c375c1 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/entity/Entity.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/entity/Entity.java
@@ -291,4 +291,22 @@ public interface Entity extends Metadatable {
      * @return The current vehicle.
      */
     public Entity getVehicle();
+
+    // Spigot Start
+    public class Spigot
+    {
+
+        /**
+         * Returns whether this entity is invulnerable.
+         *         
+        * @return True if the entity is invulnerable.
+         */
+        public boolean isInvulnerable()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+    }
+
+    Spigot spigot();
+    // Spigot End
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/entity/Player.java ./eclipse/cauldron/src/main/java/org/bukkit/entity/Player.java
index cf57489..7afaffa 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/entity/Player.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/entity/Player.java
@@ -1035,4 +1035,77 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @see Player#setHealthScaled(boolean)
      */
     public double getHealthScale();
+
+    // Spigot start
+    public class Spigot extends Entity.Spigot
+    {
+
+        /**
+         * Gets the connection address of this player, regardless of whether it
+         * has been spoofed or not.
+         *
+         * @return the player's connection address
+         */
+        public InetSocketAddress getRawAddress()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius)
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        /**
+         * Gets whether the player collides with entities
+         *
+         * @return the player's collision toggle state
+         */
+        public boolean getCollidesWithEntities()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        /**
+         * Sets whether the player collides with entities
+         *
+         * @param collides whether the player should collide with entities or
+         * not.
+         */
+        public void setCollidesWithEntities(boolean collides)
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        /**
+         * Respawns the player if dead.
+         */
+        public void respawn()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        /**
+         * Gets player locale language.
+         *
+         * @return the player's client language settings
+         */
+        public String getLocale()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+
+        /**
+         * Gets all players hidden with {@link hidePlayer(org.bukkit.entity.Player)}.
+         *
+         * @return a Set with all hidden players
+         */
+        public java.util.Set<Player> getHiddenPlayers()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+    }
+
+    Spigot spigot();
+    // Spigot end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java ./eclipse/cauldron/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
index f0a966f..a212db5 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
@@ -2,6 +2,7 @@ package org.bukkit.event.entity;
 
 import java.util.Map;
 
+import com.google.common.base.Function;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 
@@ -22,8 +23,8 @@ public class EntityDamageByBlockEvent extends EntityDamageEvent {
         this.damager = damager;
     }
 
-    public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {
-        super(damagee, cause, modifiers);
+    public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
+        super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
     }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java ./eclipse/cauldron/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 4f0dbf0..bead51c 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -2,6 +2,7 @@ package org.bukkit.event.entity;
 
 import java.util.Map;
 
+import com.google.common.base.Function;
 import org.bukkit.entity.Entity;
 
 /**
@@ -21,8 +22,8 @@ public class EntityDamageByEntityEvent extends EntityDamageEvent {
         this.damager = damager;
     }
 
-    public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {
-        super(damagee, cause, modifiers);
+    public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
+        super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
     }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java ./eclipse/cauldron/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 9249370..c334711 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -10,6 +10,8 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.util.NumberConversions;
 
+import com.google.common.base.Function;
+import com.google.common.base.Functions;
 import com.google.common.collect.ImmutableMap;
 
 /**
@@ -18,7 +20,9 @@ import com.google.common.collect.ImmutableMap;
 public class EntityDamageEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private static final DamageModifier[] MODIFIERS = DamageModifier.values();
+    private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
     private final Map<DamageModifier, Double> modifiers;
+    private final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions;
     private final Map<DamageModifier, Double> originals;
     private boolean cancelled;
     private final DamageCause cause;
@@ -30,16 +34,20 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
 
     @Deprecated
     public EntityDamageEvent(final Entity damagee, final DamageCause cause, final double damage) {
-        this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)));
+        this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)), new EnumMap<DamageModifier, Function<? super Double, Double>>(ImmutableMap.of(DamageModifier.BASE, ZERO)));
     }
 
-    public EntityDamageEvent(final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {
+    public EntityDamageEvent(final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
         super(damagee);
         Validate.isTrue(modifiers.containsKey(DamageModifier.BASE), "BASE DamageModifier missing");
         Validate.isTrue(!modifiers.containsKey(null), "Cannot have null DamageModifier");
+        Validate.noNullElements(modifiers.values(), "Cannot have null modifier values");
+        Validate.isTrue(modifiers.keySet().equals(modifierFunctions.keySet()), "Must have a modifier function for each DamageModifier");
+        Validate.noNullElements(modifierFunctions.values(), "Cannot have null modifier function");
         this.originals = new EnumMap<DamageModifier, Double>(modifiers);
         this.cause = cause;
         this.modifiers = modifiers;
+        this.modifierFunctions = modifierFunctions;
     }
 
     public boolean isCancelled() {
@@ -149,11 +157,39 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     }
 
     /**
-     * Sets the raw amount of damage caused by the event
+     * Sets the raw amount of damage caused by the event.
+     * <p>
+     * For compatibility this also recalculates the modifiers and scales
+     * them by the difference between the modifier for the previous damage
+     * value and the new one.
      *
      * @param damage The raw amount of damage caused by the event
      */
     public void setDamage(double damage) {
+        // These have to happen in the same order as the server calculates them, keep the enum sorted
+        double remaining = damage;
+        double oldRemaining = getDamage(DamageModifier.BASE);
+        for (DamageModifier modifier : MODIFIERS) {
+            if (!isApplicable(modifier)) {
+                continue;
+            }
+
+            Function<? super Double, Double> modifierFunction = modifierFunctions.get(modifier);
+            double newVanilla = modifierFunction.apply(remaining);
+            double oldVanilla = modifierFunction.apply(oldRemaining);
+            double difference = oldVanilla - newVanilla;
+
+            // Don't allow value to cross zero, assume zero values should be negative
+            double old = getDamage(modifier);
+            if (old > 0) {
+                setDamage(modifier, Math.max(0, old - difference));
+            } else {
+                setDamage(modifier, Math.min(0, old - difference));
+            }
+            remaining += newVanilla;
+            oldRemaining += oldVanilla;
+        }
+
         setDamage(DamageModifier.BASE, damage);
     }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java ./eclipse/cauldron/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 46bf7a7..d205076 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -14,6 +14,7 @@ public class PlayerLoginEvent extends PlayerEvent {
     private final String hostname;
     private Result result = Result.ALLOWED;
     private String message = "";
+    private final InetAddress realAddress; // Spigot
 
     /**
      * @deprecated Address should be provided in other constructor
@@ -40,10 +41,17 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param address The address the player used to connect, provided for
      *     timing issues
      */
-    public PlayerLoginEvent(final Player player, final String hostname, final InetAddress address) {
+    public PlayerLoginEvent(final Player player, final String hostname, final InetAddress address, final InetAddress realAddress) { // Spigot
         super(player);
         this.hostname = hostname;
         this.address = address;
+        // Spigot start
+        this.realAddress = address;
+    }
+
+    public PlayerLoginEvent(final Player player, final String hostname, final InetAddress address) {
+        this(player, hostname, address, address);
+        // Spigot end
     }
 
     /**
@@ -52,7 +60,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      */
     @Deprecated
     public PlayerLoginEvent(final Player player, final Result result, final String message) {
-        this(player, "", null, result, message);
+        this(player, "", null, result, message, null); // Spigot
     }
 
     /**
@@ -65,12 +73,23 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param result The result status for this event
      * @param message The message to be displayed if result denies login
      */
-    public PlayerLoginEvent(final Player player, String hostname, final InetAddress address, final Result result, final String message) {
-        this(player, hostname, address);
+    public PlayerLoginEvent(final Player player, String hostname, final InetAddress address, final Result result, final String message, final InetAddress realAddress) { // Spigot
+        this(player, hostname, address, realAddress); // Spigot
         this.result = result;
         this.message = message;
     }
 
+    // Spigot start
+    /**
+     * Gets the connection address of this player, regardless of whether it has been spoofed or not.
+     *
+     * @return the player's connection address
+     */
+    public InetAddress getRealAddress() {
+        return realAddress;
+    }
+    // Spigot end
+
     /**
      * Gets the current result of the login, as an enum
      *
diff --git ./eclipse/Clean/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java ./eclipse/cauldron/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index a30c636..1a52733 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -55,11 +55,27 @@ public class PlayerTeleportEvent extends PlayerMoveEvent {
          * portal
          */
         END_PORTAL,
+        // Cauldron start - added cause for mods
+        /**
+         * Indicates the teleportation was caused by a player entering a
+         * Mod portal
+         */
+        MOD,
+        // Cauldron end
         /**
          * Indicates the teleportation was caused by an event not covered by
          * this enum
          */
         UNKNOWN;
+        
+        public boolean isPortal() {
+            switch(this) {
+            case NETHER_PORTAL:
+            case END_PORTAL:
+                return true;
+            }
+            return false;
+        }
     }
 
     @Override
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/SimplePluginManager.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index b8c54ae..e27c4c3 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -132,7 +132,9 @@ public final class SimplePluginManager implements PluginManager {
             try {
                 description = loader.getPluginDescription(file);
                 String name = description.getName();
-                if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
+                if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")
+                        // Cauldron - Add more restricted names
+                        || name.equalsIgnoreCase("spigot") || name.equalsIgnoreCase("forge") || name.equalsIgnoreCase("cauldron") || name.equalsIgnoreCase("mcpc")) {
                     server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': Restricted Name");
                     continue;
                 } else if (description.rawName.indexOf(' ') != -1) {
@@ -188,6 +190,9 @@ public final class SimplePluginManager implements PluginManager {
             }
         }
 
+        // Cauldron - fill names for Cauldron-provided dependencies
+        loadedPlugins.addAll(ImmutableSet.of("Cauldron", "Forge", "MCPC", "MCPC+"));
+
         while (!plugins.isEmpty()) {
             boolean missingDependency = true;
             Iterator<String> pluginIterator = plugins.keySet().iterator();
@@ -295,6 +300,7 @@ public final class SimplePluginManager implements PluginManager {
             }
         }
 
+        org.bukkit.command.defaults.TimingsCommand.timingStart = System.nanoTime(); // Spigot
         return result.toArray(new Plugin[result.size()]);
     }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/SimpleServicesManager.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
index fa7411d..a07bf8c 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
@@ -79,7 +79,8 @@ public class SimpleServicesManager implements ServicesManager {
                         while (it2.hasNext()) {
                             RegisteredServiceProvider<?> registered = it2.next();
 
-                            if (registered.getPlugin().equals(plugin)) {
+                            Plugin oPlugin = registered.getPlugin();
+                            if (oPlugin != null ? oPlugin.equals(plugin) : plugin == null) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index 7922a3f..9d30671 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -11,6 +11,10 @@ import org.bukkit.event.Listener;
 public class TimedRegisteredListener extends RegisteredListener {
     private int count;
     private long totalTime;
+    // Spigot start
+    public long curTickTotal = 0;
+    public long violations = 0;
+    // Spigot end
     private Class<? extends Event> eventClass;
     private boolean multiple = false;
 
@@ -20,6 +24,13 @@ public class TimedRegisteredListener extends RegisteredListener {
 
     @Override
     public void callEvent(Event event) throws EventException {
+        // Spigot start
+        if ( org.bukkit.Bukkit.getServer() != null && !org.bukkit.Bukkit.getServer().getPluginManager().useTimings() )
+        {
+            super.callEvent( event );
+            return;
+        }
+        // Spigot end
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
@@ -34,7 +45,11 @@ public class TimedRegisteredListener extends RegisteredListener {
         }
         long start = System.nanoTime();
         super.callEvent(event);
-        totalTime += System.nanoTime() - start;
+        // Spigot start
+        long diff = System.nanoTime() - start;
+        curTickTotal += diff;
+        totalTime += diff;
+        // Spigot end
     }
 
     private static Class<?> getCommonSuperclass(Class<?> class1, Class<?> class2) {
@@ -50,6 +65,10 @@ public class TimedRegisteredListener extends RegisteredListener {
     public void reset() {
         count = 0;
         totalTime = 0;
+        // Spigot start
+        curTickTotal = 0;
+        violations = 0;
+        // Spigot end
     }
 
     /**
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index bb0948c..8946c44 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -1,5 +1,15 @@
 package org.bukkit.plugin.java;
 
+// Cauldron start
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import net.md_5.specialsource.InheritanceMap;
+import net.md_5.specialsource.JarMapping;
+import net.md_5.specialsource.transformer.MavenShade;
+// Cauldron end
+
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -10,6 +20,7 @@ import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.jar.JarEntry;
@@ -39,8 +50,11 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.RegisteredListener;
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
+import org.spigotmc.CustomTimingsHandler; // Spigot
 import org.yaml.snakeyaml.error.YAMLException;
 
+import com.google.common.collect.ImmutableList;
+
 /**
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
@@ -49,6 +63,7 @@ public final class JavaPluginLoader implements PluginLoader {
     private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
     private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
     private final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
+    public static final CustomTimingsHandler pluginParentTimer = new CustomTimingsHandler("** Plugins"); // Spigot
 
     /**
      * This class was not meant to be constructed explicitly
@@ -59,43 +74,41 @@ public final class JavaPluginLoader implements PluginLoader {
         server = instance;
     }
 
-    public Plugin loadPlugin(final File file) throws InvalidPluginException {
+    public Plugin loadPlugin(File file) throws InvalidPluginException {
         Validate.notNull(file, "File cannot be null");
 
         if (!file.exists()) {
             throw new InvalidPluginException(new FileNotFoundException(file.getPath() + " does not exist"));
         }
 
-        final PluginDescriptionFile description;
+        PluginDescriptionFile description;
         try {
             description = getPluginDescription(file);
         } catch (InvalidDescriptionException ex) {
             throw new InvalidPluginException(ex);
         }
 
-        final File parentFile = file.getParentFile();
-        final File dataFolder = new File(parentFile, description.getName());
-        @SuppressWarnings("deprecation")
-        final File oldDataFolder = new File(parentFile, description.getRawName());
+        File dataFolder = new File(file.getParentFile(), description.getName());
+        File oldDataFolder = getDataFolder(file);
 
         // Found old data folder
         if (dataFolder.equals(oldDataFolder)) {
             // They are equal -- nothing needs to be done!
         } else if (dataFolder.isDirectory() && oldDataFolder.isDirectory()) {
-            server.getLogger().warning(String.format(
-                "While loading %s (%s) found old-data folder: `%s' next to the new one `%s'",
-                description.getFullName(),
+            server.getLogger().log(Level.INFO, String.format(
+                "While loading %s (%s) found old-data folder: %s next to the new one: %s",
+                description.getName(),
                 file,
                 oldDataFolder,
                 dataFolder
             ));
         } else if (oldDataFolder.isDirectory() && !dataFolder.exists()) {
             if (!oldDataFolder.renameTo(dataFolder)) {
-                throw new InvalidPluginException("Unable to rename old data folder: `" + oldDataFolder + "' to: `" + dataFolder + "'");
+                throw new InvalidPluginException("Unable to rename old data folder: '" + oldDataFolder + "' to: '" + dataFolder + "'");
             }
             server.getLogger().log(Level.INFO, String.format(
-                "While loading %s (%s) renamed data folder: `%s' to `%s'",
-                description.getFullName(),
+                "While loading %s (%s) renamed data folder: '%s' to '%s'",
+                description.getName(),
                 file,
                 oldDataFolder,
                 dataFolder
@@ -104,14 +117,19 @@ public final class JavaPluginLoader implements PluginLoader {
 
         if (dataFolder.exists() && !dataFolder.isDirectory()) {
             throw new InvalidPluginException(String.format(
-                "Projected datafolder: `%s' for %s (%s) exists and is not a directory",
+                "Projected datafolder: '%s' for %s (%s) exists and is not a directory",
                 dataFolder,
-                description.getFullName(),
+                description.getName(),
                 file
             ));
         }
 
-        for (final String pluginName : description.getDepend()) {
+        List<String> depend = description.getDepend();
+        if (depend == null) {
+            depend = ImmutableList.<String>of();
+        }
+
+        for (String pluginName : depend) {
             if (loaders == null) {
                 throw new UnknownDependencyException(pluginName);
             }
@@ -122,7 +140,7 @@ public final class JavaPluginLoader implements PluginLoader {
             }
         }
 
-        final PluginClassLoader loader;
+        PluginClassLoader loader;
         try {
             loader = new PluginClassLoader(this, getClass().getClassLoader(), description, dataFolder, file);
         } catch (InvalidPluginException ex) {
@@ -136,6 +154,26 @@ public final class JavaPluginLoader implements PluginLoader {
         return loader.plugin;
     }
 
+    private File getDataFolder(File file) {
+        File dataFolder = null;
+
+        String filename = file.getName();
+        int index = file.getName().lastIndexOf(".");
+
+        if (index != -1) {
+            String name = filename.substring(0, index);
+
+            dataFolder = new File(file.getParentFile(), name);
+        } else {
+            // This is if there is no extension, which should not happen
+            // Using _ to prevent name collision
+
+            dataFolder = new File(file.getParentFile(), filename + "_");
+        }
+
+        return dataFolder;
+    }
+
     public PluginDescriptionFile getPluginDescription(File file) throws InvalidDescriptionException {
         Validate.notNull(file, "File cannot be null");
 
@@ -283,13 +321,19 @@ public final class JavaPluginLoader implements PluginLoader {
                 }
             }
 
+            final CustomTimingsHandler timings = new CustomTimingsHandler("Plugin: " + plugin.getDescription().getFullName() + " Event: " + listener.getClass().getName() + "::" + method.getName()+"("+eventClass.getSimpleName()+")", pluginParentTimer); // Spigot
             EventExecutor executor = new EventExecutor() {
                 public void execute(Listener listener, Event event) throws EventException {
                     try {
                         if (!eventClass.isAssignableFrom(event.getClass())) {
                             return;
                         }
+                        // Spigot start
+                        boolean isAsync = event.isAsynchronous();
+                        if (!isAsync) timings.startTiming();
                         method.invoke(listener, event);
+                        if (!isAsync) timings.stopTiming();
+                        // Spigot end
                     } catch (InvocationTargetException ex) {
                         throw new EventException(ex.getCause());
                     } catch (Throwable t) {
@@ -297,7 +341,7 @@ public final class JavaPluginLoader implements PluginLoader {
                     }
                 }
             };
-            if (useTimings) {
+            if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
                 eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
@@ -362,4 +406,44 @@ public final class JavaPluginLoader implements PluginLoader {
             }
         }
     }
+
+    // Cauldron start
+    private InheritanceMap globalInheritanceMap = null;
+
+    /**
+     * Get the inheritance map for remapping all plugins
+     */
+    public InheritanceMap getGlobalInheritanceMap() {
+        if (globalInheritanceMap == null) {
+            Map<String, String> relocationsCurrent = new HashMap<String, String>();
+            relocationsCurrent.put("net.minecraft.server", "net.minecraft.server."+PluginClassLoader.getNativeVersion());
+            JarMapping currentMappings = new JarMapping();
+
+            try {
+                currentMappings.loadMappings(
+                        new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream("mappings/"+PluginClassLoader.getNativeVersion()+"/cb2numpkg.srg"))),
+                        new MavenShade(relocationsCurrent),
+                        null, false);
+            } catch (IOException ex) {
+                ex.printStackTrace();
+                throw new RuntimeException(ex);
+            }
+
+            BiMap<String, String> inverseClassMap = HashBiMap.create(currentMappings.classes).inverse();
+            globalInheritanceMap = new InheritanceMap();
+
+            BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream("mappings/"+PluginClassLoader.getNativeVersion()+"/nms.inheritmap")));
+
+            try {
+                globalInheritanceMap.load(reader, inverseClassMap);
+            } catch (IOException ex) {
+                ex.printStackTrace();
+                throw new RuntimeException(ex);
+            }
+            System.out.println("Loaded inheritance map of "+globalInheritanceMap.size()+" classes");
+        }
+
+        return globalInheritanceMap;
+    }
+    // Cauldron end
 }
\ No newline at end of file
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 2962b64..a6c14aa 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -1,5 +1,23 @@
 package org.bukkit.plugin.java;
 
+// Cauldron start
+import net.md_5.specialsource.provider.ClassLoaderProvider;
+import net.md_5.specialsource.transformer.MavenShade;
+//import org.bouncycastle.util.io.Streams;
+import net.md_5.specialsource.*;
+import net.md_5.specialsource.repo.*;
+import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.cauldron.configuration.CauldronConfig;
+import net.minecraftforge.cauldron.CauldronUtils;
+
+import org.bukkit.plugin.PluginDescriptionFile;
+import java.io.*;
+import java.net.JarURLConnection;
+import java.security.CodeSigner;
+import java.security.CodeSource;
+import java.util.concurrent.*;
+// Cauldron end
+
 import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -15,15 +33,39 @@ import org.bukkit.plugin.PluginDescriptionFile;
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
-final class PluginClassLoader extends URLClassLoader {
+public class PluginClassLoader extends URLClassLoader {
     private final JavaPluginLoader loader;
-    private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
+    private final ConcurrentMap<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>(); // Cauldron - Threadsafe classloading
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
-    final JavaPlugin plugin;
+    JavaPlugin plugin; // Cauldron - remove final
     private JavaPlugin pluginInit;
     private IllegalStateException pluginState;
+    // Cauldron start
+    private JarRemapper remapper;     // class remapper for this plugin, or null
+    private RemapperProcessor remapperProcessor; // secondary; for inheritance & remapping reflection
+    private boolean debug;            // classloader debugging
+    private int remapFlags = -1;
+
+    private static ConcurrentMap<Integer,JarMapping> jarMappings = new ConcurrentHashMap<Integer, JarMapping>();
+    private static final int F_GLOBAL_INHERIT   = 1 << 1;
+    private static final int F_REMAP_OBCPRE     = 1 << 2;
+    private static final int F_REMAP_NMS152     = 1 << 3;
+    private static final int F_REMAP_NMS164     = 1 << 4;
+    private static final int F_REMAP_NMS172     = 1 << 5;
+    private static final int F_REMAP_NMS179     = 1 << 6;
+    private static final int F_REMAP_NMS1710    = 1 << 7;
+    private static final int F_REMAP_OBC152     = 1 << 8;
+    private static final int F_REMAP_OBC164     = 1 << 9;
+    private static final int F_REMAP_OBC172     = 1 << 10;
+    private static final int F_REMAP_OBC179     = 1 << 11;
+    private static final int F_REMAP_OBC1710    = 1 << 12;
+    private static final int F_REMAP_NMSPRE_MASK= 0xffff0000;  // "unversioned" NMS plugin version
+
+    // This trick bypasses Maven Shade's package rewriting when using String literals [same trick in jline]
+    private static final String org_bukkit_craftbukkit = new String(new char[] {'o','r','g','/','b','u','k','k','i','t','/','c','r','a','f','t','b','u','k','k','i','t'});
+    // Cauldron end
 
     PluginClassLoader(final JavaPluginLoader loader, final ClassLoader parent, final PluginDescriptionFile description, final File dataFolder, final File file) throws InvalidPluginException, MalformedURLException {
         super(new URL[] {file.toURI().toURL()}, parent);
@@ -34,6 +76,113 @@ final class PluginClassLoader extends URLClassLoader {
         this.dataFolder = dataFolder;
         this.file = file;
 
+        // Cauldron start
+
+        String pluginName = this.description.getName();
+
+        // configure default remapper settings
+        boolean useCustomClassLoader = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.custom-class-loader", true);
+        debug = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.debug", false);
+        boolean remapNMS1710 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-nms-v1_7_R4", true);
+        boolean remapNMS179 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-nms-v1_7_R3", true);
+        boolean remapNMS172 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-nms-v1_7_R1", true);
+        boolean remapNMS164 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-nms-v1_6_R3", true);
+        boolean remapNMS152 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-nms-v1_5_R3", true);
+        String remapNMSPre = MinecraftServer.getServer().cauldronConfig.getString("plugin-settings.default.remap-nms-pre", "false");
+        boolean remapOBC1710 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-obc-v1_7_R4", true);
+        boolean remapOBC179 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-obc-v1_7_R3", true);
+        boolean remapOBC172 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-obc-v1_7_R1", true);
+        boolean remapOBC164 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-obc-v1_6_R3", true);
+        boolean remapOBC152 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-obc-v1_5_R3", true);
+        boolean remapOBCPre = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-obc-pre", false);
+        boolean globalInherit = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.global-inheritance", true);
+        boolean pluginInherit = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.plugin-inheritance", true);
+        boolean reflectFields = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-reflect-field", true);
+        boolean reflectClass = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-reflect-class", true);
+        boolean allowFuture = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings.default.remap-allow-future", false);
+
+        // plugin-specific overrides
+        useCustomClassLoader = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".custom-class-loader", useCustomClassLoader, false);
+        debug = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".debug", debug, false);
+        remapNMS1710 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-nms-v1_7_R4", remapNMS1710, false);
+        remapNMS179 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-nms-v1_7_R3", remapNMS179, false);
+        remapNMS172 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-nms-v1_7_R1", remapNMS172, false);
+        remapNMS164 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-nms-v1_6_R3", remapNMS164, false);
+        remapNMS152 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-nms-v1_5_R3", remapNMS152, false);
+        remapNMSPre = MinecraftServer.getServer().cauldronConfig.getString("plugin-settings."+pluginName+".remap-nms-pre", remapNMSPre, false);
+        remapOBC1710 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-obc-v1_7_R4", remapOBC1710, false);
+        remapOBC179 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-obc-v1_7_R3", remapOBC179, false);
+        remapOBC172 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-obc-v1_7_R1", remapOBC172, false);
+        remapOBC164 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-obc-v1_6_R3", remapOBC164, false);
+        remapOBC152 = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-obc-v1_5_R3", remapOBC152, false);
+        remapOBCPre = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-obc-pre", remapOBCPre, false);
+        globalInherit = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".global-inheritance", globalInherit, false);
+        pluginInherit = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".plugin-inheritance", pluginInherit, false);
+        reflectFields = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-reflect-field", reflectFields, false);
+        reflectClass = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-reflect-class", reflectClass, false);
+        allowFuture = MinecraftServer.getServer().cauldronConfig.getBoolean("plugin-settings."+pluginName+".remap-allow-future", allowFuture, false);
+
+        if (debug) {
+            System.out.println("PluginClassLoader debugging enabled for "+pluginName);
+        }
+
+        if (!useCustomClassLoader) {
+            remapper = null;
+            return;
+        }
+
+        int flags = 0;
+        if (remapNMS1710) flags |= F_REMAP_NMS1710;
+        if (remapNMS179) flags |= F_REMAP_NMS179;
+        if (remapNMS172) flags |= F_REMAP_NMS172;
+        if (remapNMS164) flags |= F_REMAP_NMS164;
+        if (remapNMS152) flags |= F_REMAP_NMS152;
+        if (!remapNMSPre.equals("false")) {
+            if      (remapNMSPre.equals("1.7.10")) flags |= 0x17100000;
+            else if (remapNMSPre.equals("1.7.9")) flags |= 0x01790000;
+            else if (remapNMSPre.equals("1.7.2")) flags |= 0x01720000;
+            else if (remapNMSPre.equals("1.6.4")) flags |= 0x01640000;
+            else if (remapNMSPre.equals("1.5.2")) flags |= 0x01520000;
+            else {
+                System.out.println("Unsupported nms-remap-pre version '"+remapNMSPre+"', disabling");
+            }
+        }
+        if (remapOBC1710) flags |= F_REMAP_OBC1710;
+        if (remapOBC179) flags |= F_REMAP_OBC179;
+        if (remapOBC172) flags |= F_REMAP_OBC172;
+        if (remapOBC164) flags |= F_REMAP_OBC164;
+        if (remapOBC152) flags |= F_REMAP_OBC152;
+        if (remapOBCPre) flags |= F_REMAP_OBCPRE;
+        if (globalInherit) flags |= F_GLOBAL_INHERIT;
+
+        remapFlags = flags; // used in findClass0
+        JarMapping jarMapping = getJarMapping(flags);
+
+        // Load inheritance map
+        if ((flags & F_GLOBAL_INHERIT) != 0) {
+            if (debug) {
+                System.out.println("Enabling global inheritance remapping");
+                //ClassLoaderProvider.verbose = debug; // TODO: changed in https://github.com/md-5/SpecialSource/commit/132584eda4f0860c9d14f4c142e684a027a128b8#L3L48
+            }
+            jarMapping.setInheritanceMap(loader.getGlobalInheritanceMap());
+            jarMapping.setFallbackInheritanceProvider(new ClassLoaderProvider(this));
+        }
+
+        remapper = new kcauldron.KCauldronRemapper(jarMapping);
+
+        if (pluginInherit || reflectFields || reflectClass) {
+            remapperProcessor = new RemapperProcessor(
+                    pluginInherit ? loader.getGlobalInheritanceMap() : null,
+                    (reflectFields || reflectClass) ? jarMapping : null);
+
+            remapperProcessor.setRemapReflectField(reflectFields);
+            remapperProcessor.setRemapReflectClass(reflectClass);
+            remapperProcessor.debug = debug;
+        } else {
+            remapperProcessor = null;
+        }
+        // Cauldron end
+
         try {
             Class<?> jarClass;
             try {
@@ -58,34 +207,290 @@ final class PluginClassLoader extends URLClassLoader {
     }
 
     @Override
-    protected Class<?> findClass(String name) throws ClassNotFoundException {
+    public Class<?> findClass(String name) throws ClassNotFoundException {  // Cauldron - public access for plugins to support CB NMS -> MCP class remap
         return findClass(name, true);
     }
 
-    Class<?> findClass(String name, boolean checkGlobal) throws ClassNotFoundException {
-        if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
-            throw new ClassNotFoundException(name);
+    // Cauldron start
+    /**
+     * Get the "native" obfuscation version, from our Maven shading version.
+     */
+    public static String getNativeVersion() {
+        // see https://github.com/mbax/VanishNoPacket/blob/master/src/main/java/org/kitteh/vanish/compat/NMSManager.java
+        if (CauldronUtils.deobfuscatedEnvironment()) return "v1_7_R4"; // support plugins in deobf environment
+        final String packageName = org.bukkit.craftbukkit.CraftServer.class.getPackage().getName();
+        return packageName.substring(packageName.lastIndexOf('.')  + 1);
+    }
+
+    /**
+     * Load NMS mappings from CraftBukkit mc-dev to repackaged srgnames for FML runtime deobf
+     *
+     * @param jarMapping An existing JarMappings instance to load into
+     * @param obfVersion CraftBukkit version with internal obfuscation counter identifier
+     *                   >=1.4.7 this is the major version + R#. v1_4_R1=1.4.7, v1_5_R1=1.5, v1_5_R2=1.5.1..
+     *                   For older versions (including pre-safeguard) it is the full Minecraft version number
+     * @throws IOException
+     */
+    private void loadNmsMappings(JarMapping jarMapping, String obfVersion) throws IOException {
+        Map<String, String> relocations = new HashMap<String, String>();
+        // mc-dev jar to CB, apply version shading (aka plugin safeguard)
+        relocations.put("net.minecraft.server", "net.minecraft.server." + obfVersion);
+
+        // support for running 1.7.10 plugins in Cauldron dev
+        if (CauldronUtils.deobfuscatedEnvironment() && obfVersion.equals("v1_7_R4"))
+        {
+            jarMapping.loadMappings(
+                    new BufferedReader(new InputStreamReader(loader.getClass().getClassLoader().getResourceAsStream("mappings/"+obfVersion+"/cb2pkgmcp.srg"))),
+                    new MavenShade(relocations),
+                    null, false);
+
+            jarMapping.loadMappings(
+                    new BufferedReader(new InputStreamReader(loader.getClass().getClassLoader().getResourceAsStream("mappings/"+obfVersion+"/obf2pkgmcp.srg"))),
+                    null, // no version relocation for obf
+                    null, false);
+            // resolve naming conflict in FML/CB
+            jarMapping.methods.put("net/minecraft/server/"+obfVersion+"/PlayerConnection/getPlayer ()Lorg/bukkit/craftbukkit/entity/CraftPlayer;", "getPlayerB");
+        }
+        else
+        {
+            jarMapping.loadMappings(
+                    new BufferedReader(new InputStreamReader(loader.getClass().getClassLoader().getResourceAsStream("mappings/"+obfVersion+"/cb2numpkg.srg"))),
+                    new MavenShade(relocations),
+                    null, false);
+
+            if (obfVersion.equals("v1_7_R4")) {
+                jarMapping.loadMappings(
+                        new BufferedReader(new InputStreamReader(loader.getClass().getClassLoader().getResourceAsStream("mappings/"+obfVersion+"/obf2numpkg.srg"))),
+                        null, // no version relocation for obf
+                        null, false);
+            }
+
+            // resolve naming conflict in FML/CB
+            jarMapping.methods.put("net/minecraft/server/"+obfVersion+"/PlayerConnection/getPlayer ()Lorg/bukkit/craftbukkit/"+getNativeVersion()+"/entity/CraftPlayer;", "getPlayerB");
+        }
+        // remap bouncycastle to Forge's included copy, not the vanilla obfuscated copy (not in Cauldron), see #133
+        //jarMapping.packages.put("net/minecraft/"+obfVersion+"/org/bouncycastle", "org/bouncycastle"); No longer needed
+    }
+
+    private JarMapping getJarMapping(int flags) {
+        JarMapping jarMapping = jarMappings.get(flags);
+
+        if (jarMapping != null) {
+            if (debug) {
+                System.out.println("Mapping reused for "+Integer.toHexString(flags));
+            }
+            return jarMapping;
+        }
+
+        jarMapping = new JarMapping();
+        try {
+
+            // Guava 10 is part of the Bukkit API, so plugins can use it, but FML includes Guava 15
+            // To resolve this conflict, remap plugin usages to Guava 10 in a separate package
+            // Most plugins should keep this enabled, unless they want a newer Guava
+            jarMapping.packages.put("com/google/common", "guava10/com/google/common");
+            jarMapping.packages.put(org_bukkit_craftbukkit + "/libs/com/google/gson", "com/google/gson"); // Handle Gson being in a "normal" place
+            // Bukkit moves these packages to nms while we keep them in root so we must relocate them for plugins that rely on them
+            jarMapping.packages.put("net/minecraft/util/io", "io");
+            jarMapping.packages.put("net/minecraft/util/com", "com");
+            jarMapping.packages.put("net/minecraft/util/gnu", "gnu");
+            jarMapping.packages.put("net/minecraft/util/org", "org");
+
+            if ((flags & F_REMAP_NMS1710) != 0) {
+                loadNmsMappings(jarMapping, "v1_7_R4");
+            }
+
+            if ((flags & F_REMAP_NMS179) != 0) {
+                loadNmsMappings(jarMapping, "v1_7_R3");
+            }
+
+            if ((flags & F_REMAP_NMS172) != 0) {
+                loadNmsMappings(jarMapping, "v1_7_R1");
+            }
+
+            if ((flags & F_REMAP_NMS164) != 0) {
+                loadNmsMappings(jarMapping, "v1_6_R3");
+            }
+
+            if ((flags & F_REMAP_NMS152) != 0) {
+                loadNmsMappings(jarMapping, "v1_5_R3");
+            }
+
+            if ((flags & F_REMAP_OBC1710) != 0) {
+                if (CauldronUtils.deobfuscatedEnvironment())
+                    jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_7_R4", org_bukkit_craftbukkit);
+                else jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_7_R4", org_bukkit_craftbukkit+"/"+getNativeVersion());
+            }
+
+            if ((flags & F_REMAP_OBC179) != 0) {
+                if (CauldronUtils.deobfuscatedEnvironment())
+                    jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_7_R3", org_bukkit_craftbukkit);
+                else jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_7_R3", org_bukkit_craftbukkit+"/"+getNativeVersion());
+            }
+
+            if ((flags & F_REMAP_OBC172) != 0) {
+                if (CauldronUtils.deobfuscatedEnvironment())
+                    jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_7_R1", org_bukkit_craftbukkit+"/"+getNativeVersion());
+                else jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_7_R1", org_bukkit_craftbukkit+"/"+getNativeVersion());
+            }
+
+            if ((flags & F_REMAP_OBC164) != 0) {
+                jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_6_R3", org_bukkit_craftbukkit+"/"+getNativeVersion());
+            }
+
+            if ((flags & F_REMAP_OBC152) != 0) {
+                jarMapping.packages.put(org_bukkit_craftbukkit+"/v1_5_R3", org_bukkit_craftbukkit+"/"+getNativeVersion());
+            }
+
+            if ((flags & F_REMAP_OBCPRE) != 0) {
+                // enabling unversioned obc not currently compatible with versioned obc plugins (overmapped) -
+                // admins should enable remap-obc-pre on a per-plugin basis, as needed
+                // then map unversioned to current version
+                jarMapping.packages.put(org_bukkit_craftbukkit+"/libs/org/objectweb/asm", "org/objectweb/asm"); // ?
+                jarMapping.packages.put(org_bukkit_craftbukkit, org_bukkit_craftbukkit+"/"+getNativeVersion());
+            }
+
+            if ((flags & F_REMAP_NMSPRE_MASK) != 0) {
+                String obfVersion;
+                switch (flags & F_REMAP_NMSPRE_MASK)
+                {
+                    case 0x17100000: obfVersion = "v1_7_R4"; break;
+                    case 0x01790000: obfVersion = "v1_7_R3"; break;
+                    case 0x01720000: obfVersion = "v1_7_R1"; break;
+                    case 0x01640000: obfVersion = "v1_6_R3"; break;
+                    case 0x01510000: obfVersion = "v1_5_R2"; break;
+                    default: throw new IllegalArgumentException("Invalid unversioned mapping flags: "+Integer.toHexString(flags & F_REMAP_NMSPRE_MASK)+" in "+Integer.toHexString(flags));
+                }
+
+                jarMapping.loadMappings(
+                        new BufferedReader(new InputStreamReader(loader.getClass().getClassLoader().getResourceAsStream("mappings/" + obfVersion + "/cb2numpkg.srg"))),
+                        null, // no version relocation!
+                        null, false);
+            }
+
+            System.out.println("Mapping loaded "+jarMapping.packages.size()+" packages, "+jarMapping.classes.size()+" classes, "+jarMapping.fields.size()+" fields, "+jarMapping.methods.size()+" methods, flags "+Integer.toHexString(flags));
+
+            JarMapping currentJarMapping = jarMappings.putIfAbsent(flags, jarMapping);
+            return currentJarMapping == null ? jarMapping : currentJarMapping;
+        } catch (IOException ex) {
+            ex.printStackTrace();
+            throw new RuntimeException(ex);
         }
-        Class<?> result = classes.get(name);
+    }
 
-        if (result == null) {
-            if (checkGlobal) {
-                result = loader.getClassByName(name);
+    Class<?> findClass(String name, boolean checkGlobal) throws ClassNotFoundException {
+        // Cauldron start - remap any calls for classes with packaged nms version
+        if (name.startsWith("net.minecraft."))
+        {
+            JarMapping jarMapping = this.getJarMapping(remapFlags); // grab from SpecialSource
+            String remappedClass = jarMapping.classes.get(name.replaceAll("\\.", "\\/")); // get remapped pkgmcp class name
+            Class<?> clazz = ((net.minecraft.launchwrapper.LaunchClassLoader)MinecraftServer.getServer().getClass().getClassLoader()).findClass(remappedClass);
+            return clazz;
+        }
+        if (name.startsWith("org.bukkit.")) {
+            if (debug) {
+                System.out.println("Unexpected plugin findClass on OBC/NMS: name="+name+", checkGlobal="+checkGlobal+"; returning not found");
             }
+            throw new ClassNotFoundException(name);
+        }
+        // custom loader, if enabled, threadsafety
+        synchronized (name.intern()) {
+            Class<?> result = classes.get(name);
 
             if (result == null) {
-                result = super.findClass(name);
+                if (checkGlobal) {
+                    result = loader.getClassByName(name); // Don't warn on deprecation, but maintain overridability
+                }
+
+                if (result == null) {
+                    if (remapper == null) {
+                        result = super.findClass(name);
+                    } else {
+                        result = remappedFindClass(name);
+                    }
 
+                    if (result != null) {
+                        loader.setClass(name, result);
+                    }
+                }
                 if (result != null) {
-                    loader.setClass(name, result);
+                    Class<?> old = classes.putIfAbsent(name, result);
+                    if (old != null && old != result) {
+                        System.err.println("Defined class " + name + " twice as different classes, " + result + " and " + old);
+                        result = old;
+                    }
                 }
             }
 
-            classes.put(name, result);
+            return result;
+        }
+        // Cauldron end
+    }
+    private Class<?> remappedFindClass(String name) throws ClassNotFoundException {
+        Class<?> result = null;
+
+        try {
+            // Load the resource to the name
+            String path = name.replace('.', '/').concat(".class");
+            URL url = this.findResource(path);
+            if (url != null) {
+                InputStream stream = url.openStream();
+                if (stream != null) {
+                    byte[] bytecode = null;
+
+                    // Reflection remap and inheritance extract
+                    if (remapperProcessor != null) {
+                        // add to inheritance map
+                        bytecode = remapperProcessor.process(stream);
+                        if (bytecode == null) stream = url.openStream();
+                    }
+
+                    /*if (bytecode == null) {
+                        bytecode = Streams.readAll(stream);
+                    }*/
+
+                    // Remap the classes
+                    byte[] remappedBytecode = remapper.remapClassFile(bytecode, RuntimeRepo.getInstance());
+
+                    if (debug) {
+                        File file = new File("remapped-plugin-classes/"+name+".class");
+                        file.getParentFile().mkdirs();
+                        try {
+                            FileOutputStream fileOutputStream = new FileOutputStream(file);
+                            fileOutputStream.write(remappedBytecode);
+                            fileOutputStream.close();
+                        } catch (IOException ex) {
+                            ex.printStackTrace();
+                        }
+                    }
+
+                    // Define (create) the class using the modified byte code
+                    // The top-child class loader is used for this to prevent access violations
+                    // Set the codesource to the jar, not within the jar, for compatibility with
+                    // plugins that do new File(getClass().getProtectionDomain().getCodeSource().getLocation().toURI()))
+                    // instead of using getResourceAsStream - see https://github.com/MinecraftPortCentral/Cauldron-Plus/issues/75
+                    JarURLConnection jarURLConnection = (JarURLConnection) url.openConnection(); // parses only
+                    URL jarURL = jarURLConnection.getJarFileURL();
+                    CodeSource codeSource = new CodeSource(jarURL, new CodeSigner[0]);
+
+                    result = this.defineClass(name, remappedBytecode, 0, remappedBytecode.length, codeSource);
+                    if (result != null) {
+                        // Resolve it - sets the class loader of the class
+                        this.resolveClass(result);
+                    }
+                }
+            }
+        } catch (Throwable t) {
+            if (debug) {
+                System.out.println("remappedFindClass("+name+") exception: "+t);
+                t.printStackTrace();
+            }
+            throw new ClassNotFoundException("Failed to remap class "+name, t);
         }
 
         return result;
     }
+    // Cauldron end
 
     Set<String> getClasses() {
         return classes.keySet();
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/messaging/Messenger.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/messaging/Messenger.java
index d489568..99ce21b 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/messaging/Messenger.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/messaging/Messenger.java
@@ -18,7 +18,7 @@ public interface Messenger {
     /**
      * Represents the largest size that a Plugin Channel may be.
      */
-    public static final int MAX_CHANNEL_SIZE = 16;
+    public static final int MAX_CHANNEL_SIZE = 20; // Cauldron - Vanilla increased limit of C17PacketCustomPayload size from 16 -> 20 in 1.7
 
     /**
      * Checks if the specified channel is a reserved name.
diff --git ./eclipse/Clean/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java ./eclipse/cauldron/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 9c15f35..6bb32e1 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -421,7 +421,15 @@ public class StandardMessenger implements Messenger {
         Set<PluginMessageListenerRegistration> registrations = getIncomingChannelRegistrations(channel);
 
         for (PluginMessageListenerRegistration registration : registrations) {
-            registration.getListener().onPluginMessageReceived(channel, source, message);
+            // Spigot Start
+            try
+            {
+                registration.getListener().onPluginMessageReceived( channel, source, message );
+            } catch ( Throwable t )
+            {
+                org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.WARNING, "Could not pass incoming plugin message to " + registration.getPlugin(), t );
+            }
+            // Spigot End
         }
     }
 
diff --git ./eclipse/Clean/src/main/java/org/bukkit/potion/Potion.java ./eclipse/cauldron/src/main/java/org/bukkit/potion/Potion.java
index a358c29..ceac7ac 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/potion/Potion.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/potion/Potion.java
@@ -397,7 +397,7 @@ public class Potion {
         if ((damage & SPLASH_BIT) > 0) {
             potion = potion.splash();
         }
-        if ((damage & EXTENDED_BIT) > 0) {
+        if ((type == null || !type.isInstant()) && (damage & EXTENDED_BIT) > 0) {
             potion = potion.extend();
         }
         return potion;
diff --git ./eclipse/Clean/src/main/java/org/bukkit/potion/PotionEffectType.java ./eclipse/cauldron/src/main/java/org/bukkit/potion/PotionEffectType.java
index 8a44dd5..cf57045 100644
--- ./eclipse/Clean/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ ./eclipse/cauldron/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -202,7 +202,7 @@ public abstract class PotionEffectType {
         return "PotionEffectType[" + id + ", " + getName() + "]";
     }
 
-    private static final PotionEffectType[] byId = new PotionEffectType[24];
+    private static final Map<Integer, PotionEffectType> byId = new HashMap<Integer, PotionEffectType>(); // Cauldron change underlying storage to map
     private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
     // will break on updates.
     private static boolean acceptingNew = true;
@@ -216,9 +216,9 @@ public abstract class PotionEffectType {
      */
     @Deprecated
     public static PotionEffectType getById(int id) {
-        if (id >= byId.length || id < 0)
+        if (id >= byId.size() || id < 0) // Cauldron
             return null;
-        return byId[id];
+        return byId.get(id); // Cauldron
     }
 
     /**
@@ -240,15 +240,18 @@ public abstract class PotionEffectType {
      * @param type PotionType to register
      */
     public static void registerPotionEffectType(PotionEffectType type) {
+        // Cauldron start - allow vanilla to replace potions
+        /*
         if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase())) {
             throw new IllegalArgumentException("Cannot set already-set type");
         } else if (!acceptingNew) {
             throw new IllegalStateException(
                     "No longer accepting new potion effect types (can only be done by the server implementation)");
         }
-
-        byId[type.id] = type;
+        */
+        byId.put(type.id, type);
         byName.put(type.getName().toLowerCase(), type);
+        // Cauldron end
     }
 
     /**
@@ -264,6 +267,11 @@ public abstract class PotionEffectType {
      * @return Array of types.
      */
     public static PotionEffectType[] values() {
-        return byId.clone();
+        // Cauldron start
+        int maxId = 0;
+        for(int id : byId.keySet()) maxId = Math.max(maxId, id);
+        PotionEffectType[] result = new PotionEffectType[maxId + 1];
+        return byId.values().toArray(result); // Cauldron change underlying storage to map
+        // Cauldron end
     }
 }
\ No newline at end of file
